/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var weatherApplet;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 393:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"main\": () => (/* binding */ main)\n});\n\n;// CONCATENATED MODULE: ./src/3_8/consts.ts\nconst UUID = \"weather@mockturtl\";\nconst SIGNAL_CHANGED = 'changed::';\nconst SIGNAL_CLICKED = 'clicked';\nconst SIGNAL_REPAINT = 'repaint';\nconst APPLET_ICON = \"view-refresh-symbolic\";\nconst REFRESH_ICON = \"view-refresh\";\nconst BLANK = '   ';\nconst ELLIPSIS = '...';\nconst EN_DASH = '\\u2013';\nconst FORWARD_SLASH = '\\u002F';\n\n;// CONCATENATED MODULE: ./src/3_8/lib/logger.ts\n\nclass logger_Log {\n    constructor(_instanceId) {\n        this.debug = false;\n        this.level = 1;\n        this.ID = _instanceId;\n        this.appletDir = imports.ui.appletManager.appletMeta[UUID].path;\n        this.debug = this.DEBUG();\n    }\n    static get Instance() {\n        if (this.instance == null)\n            this.instance = new logger_Log();\n        return this.instance;\n    }\n    DEBUG() {\n        let path = this.appletDir + \"/../DEBUG\";\n        let _debug = imports.gi.Gio.file_new_for_path(path);\n        let result = _debug.query_exists(null);\n        if (result)\n            this.Print(\"DEBUG file found in \" + path + \", enabling Debug mode\");\n        return result;\n    }\n    ;\n    Print(message) {\n        let msg = \"[\" + UUID + \"#\" + this.ID + \"]: \" + message.toString();\n        global.log(msg);\n    }\n    Error(error, e) {\n        global.logError(\"[\" + UUID + \"#\" + this.ID + \"]: \" + error.toString());\n        if (e != null)\n            global.logError(e.stack);\n    }\n    ;\n    Debug(message) {\n        if (this.debug) {\n            this.Print(message);\n        }\n    }\n    Debug2(message) {\n        if (this.debug && this.level > 1) {\n            this.Print(message);\n        }\n    }\n    UpdateInstanceID(instanceID) {\n        this.ID = instanceID;\n    }\n}\nlogger_Log.instance = null;\n\n;// CONCATENATED MODULE: ./src/3_8/utils.ts\n\nconst { timeout_add, source_remove } = imports.mainloop;\nconst { IconType } = imports.gi.St;\nconst { IconTheme } = imports.gi.Gtk;\nfunction _(str, args) {\n    let result = imports.gettext.dgettext(UUID, str);\n    if (result === str && result === \"\")\n        result = imports.gettext.gettext(str);\n    if (!!args)\n        result = format(result, args);\n    return result;\n}\nfunction format(str, args) {\n    for (let key in args) {\n        str = str.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\"), args[key]);\n    }\n    return str;\n}\nfunction UnitToUnicode(unit) {\n    return unit == \"fahrenheit\" ? '\\u2109' : '\\u2103';\n}\nfunction GenerateLocationText(weather, config) {\n    let location = \"\";\n    if (weather.location.city != null && weather.location.country != null) {\n        location = weather.location.city + \", \" + weather.location.country;\n    }\n    else {\n        location = Math.round(weather.coord.lat * 10000) / 10000 + \", \" + Math.round(weather.coord.lon * 10000) / 10000;\n    }\n    if (NotEmpty(config._locationLabelOverride)) {\n        location = config._locationLabelOverride;\n    }\n    return location;\n}\nfunction CapitalizeFirstLetter(description) {\n    if ((description == undefined || description == null)) {\n        return \"\";\n    }\n    return description.charAt(0).toUpperCase() + description.slice(1);\n}\n;\nfunction CapitalizeEveryWord(description) {\n    if ((description == undefined || description == null)) {\n        return \"\";\n    }\n    let split = description.split(\" \");\n    let result = \"\";\n    for (let index = 0; index < split.length; index++) {\n        const element = split[index];\n        result += CapitalizeFirstLetter(element);\n        if (index != split.length - 1)\n            result += \" \";\n    }\n    return result;\n}\nfunction NormalizeTimezone(tz) {\n    if (!tz || tz == \"\" || tz == \"UTC\")\n        tz = undefined;\n    return tz;\n}\nfunction GetDayName(date, locale, showDate = false, tz) {\n    let params = {\n        weekday: \"long\",\n        timeZone: tz\n    };\n    params.timeZone = NormalizeTimezone(tz);\n    if (showDate) {\n        params.day = 'numeric';\n    }\n    let now = new Date();\n    let tomorrow = new Date();\n    tomorrow.setDate(now.getDate() + 1);\n    if (date.getDate() == now.getDate() || date.getDate() == tomorrow.getDate())\n        delete params.weekday;\n    let dateString = date.toLocaleString(locale, params);\n    if (locale.startsWith(\"fr\"))\n        dateString = CapitalizeFirstLetter(dateString);\n    if (date.getDate() == now.getDate())\n        dateString = _(\"Today\");\n    if (date.getDate() == tomorrow.getDate())\n        dateString = _(\"Tomorrow\");\n    return dateString;\n}\nfunction GetHoursMinutes(date, locale, hours24Format, tz, onlyHours = false) {\n    let params = {\n        hour: \"numeric\",\n        hour12: !hours24Format,\n        timeZone: tz\n    };\n    params.timeZone = NormalizeTimezone(tz);\n    if (!onlyHours)\n        params.minute = \"2-digit\";\n    return date.toLocaleString(locale, params);\n}\nfunction AwareDateString(date, locale, hours24Format, tz) {\n    let now = new Date();\n    let params = {\n        hour: \"numeric\",\n        minute: \"2-digit\",\n        hour12: !hours24Format,\n        timeZone: tz\n    };\n    if (date.toDateString() != now.toDateString()) {\n        params.month = \"short\";\n        params.day = \"numeric\";\n    }\n    if (date.getFullYear() != now.getFullYear()) {\n        params.year = \"numeric\";\n    }\n    params.timeZone = NormalizeTimezone(tz);\n    return date.toLocaleString(locale, params);\n}\nfunction MilitaryTime(date) {\n    return date.getHours() * 100 + date.getMinutes();\n}\nfunction AddHours(date, hours) {\n    let result = new Date(date);\n    result.setHours(result.getHours() + hours);\n    return result;\n}\nfunction OnSameDay(date1, date2, config) {\n    return date1.toDateString() == date2.toDateString();\n}\nfunction ProcessCondition(condition, shouldTranslate) {\n    if (condition == null)\n        return null;\n    condition = CapitalizeFirstLetter(condition);\n    if (shouldTranslate)\n        condition = _(condition);\n    return condition;\n}\nfunction LocalizedColon(locale) {\n    if (locale == null)\n        return \":\";\n    if (locale.startsWith(\"fr\"))\n        return \" :\";\n    return \":\";\n}\nfunction PrecentToLocale(humidity, locale) {\n    return (humidity / 100).toLocaleString(locale, { style: \"percent\" });\n}\nconst WEATHER_CONV_MPH_IN_MPS = 2.23693629;\nconst WEATHER_CONV_KPH_IN_MPS = 3.6;\nconst WEATHER_CONV_KNOTS_IN_MPS = 1.94384449;\nfunction MPStoUserUnits(mps, units) {\n    if (mps == null)\n        return null;\n    switch (units) {\n        case \"mph\":\n            return (Math.round((mps * WEATHER_CONV_MPH_IN_MPS) * 10) / 10).toString();\n        case \"kph\":\n            return (Math.round((mps * WEATHER_CONV_KPH_IN_MPS) * 10) / 10).toString();\n        case \"m/s\":\n            return (Math.round(mps * 10) / 10).toString();\n        case \"Knots\":\n            return Math.round(mps * WEATHER_CONV_KNOTS_IN_MPS).toString();\n        case \"Beaufort\":\n            if (mps < 0.5) {\n                return \"0 (\" + _(\"Calm\") + \")\";\n            }\n            if (mps < 1.5) {\n                return \"1 (\" + _(\"Light air\") + \")\";\n            }\n            if (mps < 3.3) {\n                return \"2 (\" + _(\"Light breeze\") + \")\";\n            }\n            if (mps < 5.5) {\n                return \"3 (\" + _(\"Gentle breeze\") + \")\";\n            }\n            if (mps < 7.9) {\n                return \"4 (\" + _(\"Moderate breeze\") + \")\";\n            }\n            if (mps < 10.7) {\n                return \"5 (\" + _(\"Fresh breeze\") + \")\";\n            }\n            if (mps < 13.8) {\n                return \"6 (\" + _(\"Strong breeze\") + \")\";\n            }\n            if (mps < 17.1) {\n                return \"7 (\" + _(\"Near gale\") + \")\";\n            }\n            if (mps < 20.7) {\n                return \"8 (\" + _(\"Gale\") + \")\";\n            }\n            if (mps < 24.4) {\n                return \"9 (\" + _(\"Strong gale\") + \")\";\n            }\n            if (mps < 28.4) {\n                return \"10 (\" + _(\"Storm\") + \")\";\n            }\n            if (mps < 32.6) {\n                return \"11 (\" + _(\"Violent storm\") + \")\";\n            }\n            return \"12 (\" + _(\"Hurricane\") + \")\";\n    }\n}\nfunction TempToUserConfig(kelvin, config, withUnit = true) {\n    if (kelvin == null)\n        return null;\n    let temp = (config.TemperatureUnit == \"celsius\") ? KelvinToCelsius(kelvin) : KelvinToFahrenheit(kelvin);\n    temp = RussianTransform(temp, config._tempRussianStyle);\n    if (withUnit)\n        temp = `${temp} ${UnitToUnicode(config.TemperatureUnit)}`;\n    if (config._showBothTempUnits) {\n        let secondUnit = (config.TemperatureUnit == \"celsius\") ? \"fahrenheit\" : \"celsius\";\n        let secondTemp = (config.TemperatureUnit == \"celsius\") ? KelvinToFahrenheit(kelvin) : KelvinToCelsius(kelvin);\n        secondTemp = RussianTransform(secondTemp, config._tempRussianStyle);\n        if (withUnit)\n            temp += ` (${secondTemp.toString()} ${UnitToUnicode(secondUnit)})`;\n        else\n            temp += ` (${secondTemp.toString()})`;\n    }\n    return temp.toString();\n}\nfunction RussianTransform(temp, russianStyle) {\n    if (russianStyle) {\n        if (temp < 0)\n            return `−${Math.abs(temp).toString()}`;\n        else if (temp > 0)\n            return `+${temp.toString()}`;\n    }\n    else\n        return temp.toString();\n}\nfunction TempRangeToUserConfig(min, max, config) {\n    let t_low = TempToUserConfig(min, config, false);\n    let t_high = TempToUserConfig(max, config, false);\n    let first_temperature = config._temperatureHighFirst ? t_high : t_low;\n    let second_temperature = config._temperatureHighFirst ? t_low : t_high;\n    let result = \"\";\n    if (first_temperature != null)\n        result = first_temperature;\n    result += ((config._tempRussianStyle) ? ELLIPSIS : ` ${FORWARD_SLASH} `);\n    if (second_temperature != null)\n        result += `${second_temperature} `;\n    result += `${UnitToUnicode(config.TemperatureUnit)}`;\n    if (config._showBothTempUnits) {\n        let secondUnit = (config.TemperatureUnit == \"celsius\") ? \"fahrenheit\" : \"celsius\";\n        result += ` (${UnitToUnicode(secondUnit)})`;\n    }\n    return result;\n}\nfunction KelvinToCelsius(k) {\n    return Math.round((k - 273.15));\n}\nfunction KelvinToFahrenheit(k) {\n    return Math.round((9 / 5 * (k - 273.15) + 32));\n}\nfunction PressToUserUnits(hpa, units) {\n    switch (units) {\n        case \"hPa\":\n            return Math.round(hpa * 100) / 100;\n        case \"at\":\n            return Math.round((hpa * 0.001019716) * 1000) / 1000;\n        case \"atm\":\n            return Math.round((hpa * 0.0009869233) * 1000) / 1000;\n        case \"in Hg\":\n            return Math.round((hpa * 0.029529983071445) * 10) / 10;\n        case \"mm Hg\":\n            return Math.round((hpa * 0.7500638));\n        case \"Pa\":\n            return Math.round((hpa * 100));\n        case \"psi\":\n            return Math.round((hpa * 0.01450377) * 100) / 100;\n    }\n}\n;\nfunction MetreToUserUnits(m, distanceUnit) {\n    if (distanceUnit == \"metric\")\n        return Math.round(m / 1000 * 10) / 10;\n    return Math.round(KmToM(m / 1000) * 10) / 10;\n}\nfunction MillimeterToUserUnits(mm, distanceUnit) {\n    if (distanceUnit == \"metric\")\n        return Math.round(mm * 100) / 100;\n    return Math.round(mm * 0.03937 * 100) / 100;\n}\nfunction KPHtoMPS(speed) {\n    if (speed == null)\n        return null;\n    return speed / WEATHER_CONV_KPH_IN_MPS;\n}\n;\nfunction CelsiusToKelvin(celsius) {\n    if (celsius == null)\n        return null;\n    return (celsius + 273.15);\n}\nfunction FahrenheitToKelvin(fahrenheit) {\n    if (fahrenheit == null)\n        return null;\n    return ((fahrenheit - 32) / 1.8 + 273.15);\n}\n;\nfunction MPHtoMPS(speed) {\n    if (speed == null || speed == undefined)\n        return null;\n    return speed * 0.44704;\n}\nfunction KmToM(km) {\n    if (km == null)\n        return null;\n    return km * 0.6213712;\n}\nfunction CompassToDeg(compass) {\n    if (!compass)\n        return null;\n    compass = compass.toUpperCase();\n    switch (compass) {\n        case \"N\": return 0;\n        case \"NNE\": return 22.5;\n        case \"NE\": return 45;\n        case \"ENE\": return 67.5;\n        case \"E\": return 90;\n        case \"ESE\": return 112.5;\n        case \"SE\": return 135;\n        case \"SSE\": return 157.5;\n        case \"S\": return 180;\n        case \"SSW\": return 202.5;\n        case \"SW\": return 225;\n        case \"WSW\": return 247.5;\n        case \"W\": return 270;\n        case \"WNW\": return 292.5;\n        case \"NW\": return 315;\n        case \"NNW\": return 337.5;\n        default: return null;\n    }\n}\nfunction CompassDirection(deg) {\n    let directions = [\n        'south-arrow-weather-symbolic',\n        'south-west-arrow-weather-symbolic',\n        'west-arrow-weather-symbolic',\n        'north-west-arrow-weather-symbolic',\n        'north-arrow-weather-symbolic',\n        'north-east-arrow-weather-symbolic',\n        'east-arrow-weather-symbolic',\n        'south-east-arrow-weather-symbolic'\n    ];\n    return directions[Math.round(deg / 45) % directions.length];\n}\nfunction CompassDirectionText(deg) {\n    if (!deg)\n        return null;\n    let directions = [_('N'), _('NE'), _('E'), _('SE'), _('S'), _('SW'), _('W'), _('NW')];\n    return directions[Math.round(deg / 45) % directions.length];\n}\nfunction IsNight(sunTimes, date) {\n    if (!sunTimes)\n        return false;\n    let time = (!!date) ? MilitaryTime(date) : MilitaryTime(new Date());\n    let sunrise = MilitaryTime(sunTimes.sunrise);\n    let sunset = MilitaryTime(sunTimes.sunset);\n    if (time >= sunrise && time < sunset)\n        return false;\n    return true;\n}\nfunction IsCoordinate(text) {\n    text = text.trim();\n    if (/^-?\\d{1,3}(?:\\.\\d*)?,(\\s)*-?\\d{1,3}(?:\\.\\d*)?/.test(text)) {\n        return true;\n    }\n    return false;\n}\nfunction NotEmpty(str) {\n    return (str != null && str.length > 0 && str != undefined);\n}\nfunction IsLangSupported(lang, languages) {\n    return (languages.includes(lang));\n}\n;\nfunction HasIcon(icon, icon_type) {\n    return IconTheme.get_default().has_icon(icon + (icon_type == IconType.SYMBOLIC ? '-symbolic' : ''));\n}\nfunction mode(arr) {\n    return arr.reduce(function (current, item) {\n        var val = current.numMapping[item] = (current.numMapping[item] || 0) + 1;\n        if (val > current.greatestFreq) {\n            current.greatestFreq = val;\n            current.mode = item;\n        }\n        return current;\n    }, { mode: null, greatestFreq: -Infinity, numMapping: {} }).mode;\n}\n;\nfunction WeatherIconSafely(code, icon_type) {\n    for (let i = 0; i < code.length; i++) {\n        if (HasIcon(code[i], icon_type))\n            return code[i];\n    }\n    return 'weather-severe-alert';\n}\nfunction ShadeHexColor(color, percent) {\n    var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;\n    return \"#\" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\n}\nfunction ConstructJsLocale(locale) {\n    let jsLocale = locale.split(\".\")[0];\n    let tmp = jsLocale.split(\"_\");\n    jsLocale = \"\";\n    for (let i = 0; i < tmp.length; i++) {\n        if (i != 0)\n            jsLocale += \"-\";\n        jsLocale += tmp[i].toLowerCase();\n    }\n    if (locale == \"c\" || locale == null)\n        jsLocale = undefined;\n    return jsLocale;\n}\nfunction GetDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371e3;\n    const φ1 = lat1 * Math.PI / 180;\n    const φ2 = lat2 * Math.PI / 180;\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n        Math.cos(φ1) * Math.cos(φ2) *\n            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n}\nfunction GetFuncName(func) {\n    if (!!func.name)\n        return func.name;\n    var result = /^function\\s+([\\w\\$]+)\\s*\\(/.exec(func.toString());\n    return result ? result[1] : '';\n}\nfunction Guid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\nfunction utils_setTimeout(func, ms) {\n    let args = [];\n    if (arguments.length > 2) {\n        args = args.slice.call(arguments, 2);\n    }\n    let id = timeout_add(ms, () => {\n        func.apply(null, args);\n        return false;\n    }, null);\n    return id;\n}\n;\nasync function delay(ms) {\n    return await new Promise((resolve, reject) => {\n        utils_setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nfunction utils_clearTimeout(id) {\n    source_remove(id);\n}\n;\nfunction utils_setInterval(func, ms) {\n    let args = [];\n    if (arguments.length > 2) {\n        args = args.slice.call(arguments, 2);\n    }\n    let id = timeout_add(ms, () => {\n        func.apply(null, args);\n        return true;\n    }, null);\n    return id;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/climacell.ts\n\n\nconst Lang = imports.lang;\nclass Climacell {\n    constructor(_app) {\n        this.prettyName = _(\"Climacell\");\n        this.name = \"Climacell\";\n        this.maxForecastSupport = 16;\n        this.website = \"https://www.climacell.co/\";\n        this.maxHourlyForecastSupport = 96;\n        this.needsApiKey = true;\n        this.baseUrl = \"https://api.climacell.co/v3/weather/\";\n        this.callData = {\n            current: {\n                url: \"realtime/\",\n                required_fields: [\"temp\", \"feels_like\", \"humidity\", \"wind_speed\", \"wind_direction\", \"baro_pressure\", \"sunrise\", \"sunset\", \"weather_code\"]\n            },\n            hourly: {\n                url: \"forecast/hourly/\",\n                required_fields: [\"temp\", \"weather_code\", \"sunset\", \"sunrise\", \"precipitation_type\", \"precipitation_probability\"]\n            },\n            daily: {\n                url: \"forecast/daily/\",\n                required_fields: [\"temp\", \"weather_code\", \"sunset\", \"sunrise\"],\n            }\n        };\n        this.unit = \"si\";\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        let now = new Date(Date.now());\n        if (now >= new Date(2021, 7, 1)) {\n            this.app.ShowError({\n                type: \"hard\",\n                detail: \"no api response\",\n                message: _(\"This API has ceased to function, please use another one.\")\n            });\n            return null;\n        }\n        let hourly = this.GetData(\"hourly\", loc, Lang.bind(this, this.ParseHourly));\n        let daily = this.GetData(\"daily\", loc, Lang.bind(this, this.ParseDaily));\n        let current = await this.GetData(\"current\", loc, Lang.bind(this, this.ParseWeather));\n        current.forecasts = await daily;\n        current.hourlyForecasts = await hourly;\n        return current;\n    }\n    ;\n    async GetData(baseUrl, loc, ParseFunction) {\n        let query = this.ConstructQuery(baseUrl, loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, Lang.bind(this, this.HandleError));\n        if (json == null)\n            return null;\n        return ParseFunction(json);\n    }\n    ;\n    ParseWeather(json) {\n        try {\n            let sunTimes = {\n                sunrise: new Date(json.sunrise.value),\n                sunset: new Date(json.sunset.value)\n            };\n            let result = {\n                coord: {\n                    lat: json.lat,\n                    lon: json.lon\n                },\n                date: new Date(json.observation_time.value),\n                sunrise: new Date(json.sunrise.value),\n                sunset: new Date(json.sunset.value),\n                temperature: CelsiusToKelvin(json.temp.value),\n                humidity: json.humidity.value,\n                location: {\n                    url: null,\n                    city: null,\n                    country: null,\n                    timeZone: null\n                },\n                pressure: json.baro_pressure.value,\n                wind: {\n                    degree: json.wind_direction.value,\n                    speed: json.wind_speed.value\n                },\n                extra_field: {\n                    name: _(\"Feels Like\"),\n                    type: \"temperature\",\n                    value: CelsiusToKelvin(json.feels_like.value)\n                },\n                condition: this.ResolveCondition(json.weather_code.value, IsNight(sunTimes)),\n                forecasts: []\n            };\n            return result;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"Climacell payload parsing error: \" + e);\n            this.app.ShowError({ type: \"soft\", detail: \"unusual payload\", service: \"climacell\", message: _(\"Failed to Process Weather Info\") });\n            return null;\n        }\n    }\n    ;\n    ParseHourly(json) {\n        let results = [];\n        for (let index = 0; index < json.length; index++) {\n            const element = json[index];\n            let sunTimes = {\n                sunrise: new Date(element.sunrise.value),\n                sunset: new Date(element.sunset.value)\n            };\n            let hour = {\n                temp: CelsiusToKelvin(element.temp.value),\n                date: new Date(element.observation_time.value),\n                precipitation: {\n                    type: element.precipitation_type.value,\n                    volume: null,\n                    chance: element.precipitation_probability.value\n                },\n                condition: this.ResolveCondition(element.weather_code.value, IsNight(sunTimes, new Date(element.observation_time.value)))\n            };\n            results.push(hour);\n        }\n        return results;\n    }\n    ParseDaily(json) {\n        let results = [];\n        for (let index = 0; index < json.length; index++) {\n            const element = json[index];\n            let day = {\n                date: new Date(element.observation_time.value),\n                temp_max: CelsiusToKelvin(element.temp[1].max.value),\n                temp_min: CelsiusToKelvin(element.temp[0].min.value),\n                condition: this.ResolveCondition(element.weather_code.value)\n            };\n            results.push(day);\n        }\n        return results;\n    }\n    ConstructQuery(callType, loc) {\n        return this.baseUrl + this.callData[callType].url + \"?apikey=\" + this.app.config.ApiKey + \"&lat=\" + loc.lat + \"&lon=\" + loc.lon + \"&unit_system=\" + this.unit + \"&fields=\" + this.callData[callType].required_fields.join();\n    }\n    ;\n    HandleError(message) {\n        if (message.code == 403) {\n            this.app.ShowError({\n                type: \"hard\",\n                userError: true,\n                detail: \"bad key\",\n                service: \"climacell\",\n                message: _(\"Please Make sure you\\nentered the API key correctly and your account is not locked\")\n            });\n            return false;\n        }\n        else if (message.code == 401) {\n            this.app.ShowError({\n                type: \"hard\",\n                userError: true,\n                detail: \"no key\",\n                service: \"climacell\",\n                message: _(\"Please Make sure you\\nentered the API key that you have from Climacell\")\n            });\n            return false;\n        }\n        return true;\n    }\n    ResolveCondition(condition, isNight = false) {\n        switch (condition) {\n            case (\"rain_heavy\"):\n                return {\n                    customIcon: \"rain-symbolic\",\n                    description: _(\"Heavy rain\"),\n                    main: _(\"Heavy rain\"),\n                    icons: [\"weather-rain\", \"weather-freezing-rain\", \"weather-showers-scattered\"]\n                };\n            case (\"rain\"):\n                return {\n                    customIcon: \"rain-symbolic\",\n                    description: _(\"Rain\"),\n                    main: _(\"Rain\"),\n                    icons: [\"weather-rain\", \"weather-freezing-rain\", \"weather-showers-scattered\"]\n                };\n            case (\"rain_light\"):\n                return {\n                    customIcon: \"rain-mix-symbolic\",\n                    description: _(\"Light rain\"),\n                    main: _(\"Light rain\"),\n                    icons: [\"weather-showers-scattered\", \"weather-rain\", \"weather-freezing-rain\"]\n                };\n            case (\"freezing_rain_heavy\"):\n                return {\n                    customIcon: \"hail-symbolic\",\n                    description: _(\"Heavy freezing rain\"),\n                    main: _(\"Freezing rain\"),\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers-scattered\"]\n                };\n            case (\"freezing_rain\"):\n                return {\n                    customIcon: \"hail-symbolic\",\n                    description: _(\"Freezing rain\"),\n                    main: _(\"Freezing rain\"),\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers-scattered\"]\n                };\n            case (\"freezing_rain_light\"):\n                return {\n                    customIcon: \"hail-symbolic\",\n                    description: _(\"Light freezing rain\"),\n                    main: _(\"Freezing rain\"),\n                    icons: [\"weather-showers-scattered\", \"weather-freezing-rain\", \"weather-rain\"]\n                };\n            case (\"freezing_drizzle\"):\n                return {\n                    customIcon: \"sleet-symbolic\",\n                    description: _(\"Light freezing drizzle\"),\n                    main: _(\"Freezing drizzle\"),\n                    icons: [\"weather-showers-scattered\", \"weather-rain\", \"weather-freezing-rain\"]\n                };\n            case (\"drizzle\"):\n                return {\n                    customIcon: \"sleet-symbolic\",\n                    description: _(\"Light drizzle\"),\n                    main: _(\"Light drizzle\"),\n                    icons: [\"weather-showers-scattered\", \"weather-rain\", \"weather-freezing-rain\"]\n                };\n            case (\"ice_pellets_heavy\"):\n                return {\n                    customIcon: \"snow-wind-symbolic\",\n                    description: _(\"Heavy ice pellets\"),\n                    main: _(\"Ice pellets\"),\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers-scattered\"]\n                };\n            case (\"ice_pellets\"):\n                return {\n                    customIcon: \"snow-wind-symbolic\",\n                    description: _(\"Ice pellets\"),\n                    main: _(\"Ice pellets\"),\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers-scattered\"]\n                };\n            case (\"ice_pellets_light\"):\n                return {\n                    customIcon: \"snow-wind-symbolic\",\n                    description: _(\"Light ice pellets\"),\n                    main: _(\"Ice pellets\"),\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers-scattered\"]\n                };\n            case (\"snow_heavy\"):\n                return {\n                    customIcon: \"snow-symbolic\",\n                    description: _(\"Heavy snow\"),\n                    main: _(\"Heavy snow\"),\n                    icons: [\"weather-snow\"]\n                };\n            case (\"snow\"):\n                return {\n                    customIcon: \"snow-symbolic\",\n                    description: _(\"Snow\"),\n                    main: _(\"Snow\"),\n                    icons: [\"weather-snow\"]\n                };\n            case (\"snow_light\"):\n                return {\n                    customIcon: \"snow-symbolic\",\n                    description: _(\"Light Snow\"),\n                    main: _(\"Light Snow\"),\n                    icons: [\"weather-snow\"]\n                };\n            case (\"flurries\"):\n                return {\n                    customIcon: \"cloudy-gusts-symbolic\",\n                    description: _(\"Flurries\"),\n                    main: _(\"Flurries\"),\n                    icons: [\"weather-snow\"]\n                };\n            case (\"tstorm\"):\n                return {\n                    customIcon: \"thunderstorm-symbolic\",\n                    description: _(\"Thunderstorm\"),\n                    main: _(\"Thunderstorm\"),\n                    icons: [\"weather-storm\"]\n                };\n            case (\"fog_light\"):\n                return {\n                    customIcon: (isNight) ? \"night-fog-symbolic\" : \"day-fog-symbolic\",\n                    description: _(\"Light fog\"),\n                    main: _(\"Light fog\"),\n                    icons: [\"weather-fog\"]\n                };\n            case (\"fog\"):\n                return {\n                    customIcon: \"fog-symbolic\",\n                    description: _(\"Fog\"),\n                    main: _(\"Fog\"),\n                    icons: [\"weather-fog\"]\n                };\n            case (\"cloudy\"):\n                return {\n                    customIcon: \"cloudy-symbolic\",\n                    description: _(\"Cloudy\"),\n                    main: _(\"Cloudy\"),\n                    icons: (isNight) ? [\"weather-overcast\", \"weather-clouds-night\", \"weather-few-clouds-night\"] : [\"weather-overcast\", \"weather-clouds\", \"weather-few-clouds\"]\n                };\n            case (\"mostly_cloudy\"):\n                return {\n                    customIcon: (isNight) ? \"night-alt-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    description: _(\"Mostly cloudy\"),\n                    main: _(\"Mostly cloudy\"),\n                    icons: (isNight) ? [\"weather-clouds-night\", \"weather-few-clouds-night\", \"weather-overcast\"] : [\"weather-clouds\", \"weather-few-clouds\", \"weather-overcast\"]\n                };\n            case (\"partly_cloudy\"):\n                return {\n                    customIcon: (isNight) ? \"night-alt-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    description: _(\"Partly cloudy\"),\n                    main: _(\"Partly cloudy\"),\n                    icons: (isNight) ? [\"weather-clouds-night\", \"weather-few-clouds-night\", \"weather-overcast\"] : [\"weather-clouds\", \"weather-few-clouds\", \"weather-overcast\"]\n                };\n            case (\"mostly_clear\"):\n                return {\n                    customIcon: (isNight) ? \"night-alt-partly-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    description: _(\"Mostly clear\"),\n                    main: _(\"Mostly clear\"),\n                    icons: (isNight) ? [\"weather-few-clouds-night\", \"weather-clouds-night\", \"weather-overcast\"] : [\"weather-few-clouds\", \"weather-clouds\", \"weather-overcast\"]\n                };\n            case (\"clear\"):\n                return {\n                    customIcon: (isNight) ? \"night-clear-symbolic\" : \"day-sunny-symbolic\",\n                    description: (isNight) ? _(\"Clear\") : _(\"Sunny\"),\n                    main: (isNight) ? _(\"Clear\") : _(\"Sunny\"),\n                    icons: (isNight) ? [\"weather-clear-night\"] : [\"weather-clear\"]\n                };\n            default:\n                logger_Log.Instance.Error(\"condition code not found: \" + condition);\n                return {\n                    customIcon: \"refresh-symbolic\",\n                    description: _(\"Unknown\"),\n                    main: _(\"Unknown\"),\n                    icons: [\"weather-severe-alert\"]\n                };\n        }\n    }\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/location_services/ipApi.ts\n\n\nclass IpApi {\n    constructor(_app) {\n        this.query = \"http://ip-api.com/json/?fields=status,message,country,countryCode,city,lat,lon,timezone,mobile,query\";\n        this.app = _app;\n    }\n    async GetLocation() {\n        let json = await this.app.LoadJsonAsync(this.query);\n        if (!json) {\n            return null;\n        }\n        if (json.status != \"success\") {\n            this.HandleErrorResponse(json);\n            return null;\n        }\n        return this.ParseInformation(json);\n    }\n    ;\n    ParseInformation(json) {\n        try {\n            let result = {\n                lat: json.lat,\n                lon: json.lon,\n                city: json.city,\n                country: json.country,\n                timeZone: json.timezone,\n                entryText: json.lat + \",\" + json.lon,\n            };\n            logger_Log.Instance.Debug(\"Location obtained:\" + json.lat + \",\" + json.lon);\n            return result;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"ip-api parsing error: \" + e);\n            this.app.ShowError({ type: \"hard\", detail: \"no location\", service: \"ipapi\", message: _(\"Could not obtain location\") });\n            return null;\n        }\n    }\n    ;\n    HandleErrorResponse(json) {\n        this.app.ShowError({ type: \"hard\", detail: \"bad api response\", message: _(\"Location Service responded with errors, please see the logs in Looking Glass\"), service: \"ipapi\" });\n        logger_Log.Instance.Error(\"ip-api responds with Error: \" + json.reason);\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/lib/events.ts\nclass Event {\n    constructor() {\n        this.subscribers = [];\n    }\n    Subscribe(fn) {\n        this.subscribers.push(fn);\n    }\n    Unsubscribe(fn) {\n        for (let index = this.subscribers.length - 1; index >= 0; index--) {\n            const element = this.subscribers[index];\n            if (element == fn) {\n                this.subscribers.splice(index, 1);\n                return;\n            }\n        }\n    }\n    Invoke(sender, args) {\n        if (this.subscribers.length == 0)\n            return;\n        for (let index = 0; index < this.subscribers.length; index++) {\n            const element = this.subscribers[index];\n            element(sender, args);\n        }\n    }\n    UnSubscribeAll() {\n        this.subscribers = [];\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/lib/notification_service.ts\n\nconst { messageTray } = imports.ui.main;\nconst { SystemNotificationSource, Notification } = imports.ui.messageTray;\nclass NotificationService {\n    constructor() {\n        this.Title = _(\"Weather Applet\");\n        this.MessageSource = new SystemNotificationSource(this.Title);\n        messageTray.add(this.MessageSource);\n    }\n    static get Instance() {\n        if (this.instance == null)\n            this.instance = new NotificationService();\n        return this.instance;\n    }\n    Send(title, message, transient) {\n        let notification = new Notification(this.MessageSource, this.Title + \": \" + title, message);\n        if (transient)\n            notification.setTransient((!transient) ? false : true);\n        this.MessageSource.notify(notification);\n    }\n}\nNotificationService.instance = null;\n\n;// CONCATENATED MODULE: ./src/3_8/location_services/locationstore.ts\n\n\n\n\nclass LocationStore {\n    constructor(app, config) {\n        this.locations = [];\n        this.app = null;\n        this.config = null;\n        this.currentIndex = 0;\n        this.StoreChanged = new Event();\n        this.app = app;\n        this.config = config;\n        this.locations = config._locationList;\n    }\n    OnLocationChanged(locs) {\n        var _a;\n        if (this.app.Locked())\n            return;\n        for (let index = 0; index < locs.length; index++) {\n            const element = locs[index];\n            if (!element.entryText) {\n                locs[index] = this.EnsureSearchEntry(element);\n            }\n        }\n        let currentIndex = this.FindIndex(this.config.CurrentLocation);\n        let newIndex = this.FindIndex(this.config.CurrentLocation, locs);\n        let currentlyDisplayedChanged = false;\n        let currentlyDisplayedDeleted = false;\n        if (newIndex == -1 && currentIndex == -1) {\n            let tmp = [];\n            this.locations = locs.concat(tmp);\n            this.InvokeStorageChanged();\n            return;\n        }\n        else if (newIndex == currentIndex)\n            currentlyDisplayedChanged = !this.IsEqual((_a = this.locations) === null || _a === void 0 ? void 0 : _a[currentIndex], locs === null || locs === void 0 ? void 0 : locs[currentIndex]);\n        else if (newIndex == -1)\n            currentlyDisplayedDeleted = true;\n        else if (newIndex != currentIndex)\n            this.currentIndex = newIndex;\n        let tmp = [];\n        this.locations = locs.concat(tmp);\n        if (currentlyDisplayedChanged || currentlyDisplayedDeleted) {\n            logger_Log.Instance.Debug(\"Currently used location was changed or deleted from locationstore, triggering refresh.\");\n            this.app.RefreshAndRebuild();\n        }\n        this.InvokeStorageChanged();\n    }\n    SwitchToLocation(loc) {\n        let index = this.FindIndex(loc);\n        if (index == -1)\n            return false;\n        this.currentIndex = index;\n    }\n    FindLocation(entryText) {\n        for (let index = 0; index < this.locations.length; index++) {\n            const element = this.locations[index];\n            if (element.entryText == entryText)\n                return {\n                    country: element.country,\n                    city: element.city,\n                    entryText: element.entryText,\n                    lat: element.lat,\n                    lon: element.lon,\n                    timeZone: element.timeZone,\n                };\n        }\n        return null;\n    }\n    EnsureSearchEntry(loc) {\n        if (!loc.entryText)\n            loc.entryText = `${loc.lat},${loc.lon}`;\n        return loc;\n    }\n    GetNextLocation(currentLoc) {\n        logger_Log.Instance.Debug(\"Current location: \" + JSON.stringify(currentLoc, null, 2));\n        if (this.locations.length == 0)\n            return currentLoc;\n        let nextIndex = null;\n        if (this.InStorage(currentLoc)) {\n            nextIndex = this.FindIndex(currentLoc) + 1;\n            logger_Log.Instance.Debug(\"Current location found in storage at index \" + (nextIndex - 1).toString() + \", moving to the next index\");\n        }\n        else {\n            nextIndex = this.currentIndex++;\n        }\n        if (nextIndex > this.locations.length - 1) {\n            nextIndex = 0;\n            logger_Log.Instance.Debug(\"Reached end of storage, move to the beginning\");\n        }\n        logger_Log.Instance.Debug(\"Switching to index \" + nextIndex.toString() + \"...\");\n        this.currentIndex = nextIndex;\n        return {\n            country: this.locations[nextIndex].country,\n            city: this.locations[nextIndex].city,\n            entryText: this.locations[nextIndex].entryText,\n            lat: this.locations[nextIndex].lat,\n            lon: this.locations[nextIndex].lon,\n            timeZone: this.locations[nextIndex].timeZone,\n        };\n    }\n    GetPreviousLocation(currentLoc) {\n        if (this.locations.length == 0)\n            return currentLoc;\n        let previousIndex = null;\n        if (this.InStorage(currentLoc)) {\n            previousIndex = this.FindIndex(currentLoc) - 1;\n            logger_Log.Instance.Debug(\"Current location found in storage at index \" + (previousIndex + 1).toString() + \", moving to the next index\");\n        }\n        else {\n            previousIndex = this.currentIndex--;\n        }\n        if (previousIndex < 0) {\n            previousIndex = this.locations.length - 1;\n            logger_Log.Instance.Debug(\"Reached start of storage, move to the end\");\n        }\n        logger_Log.Instance.Debug(\"Switching to index \" + previousIndex.toString() + \"...\");\n        this.currentIndex = previousIndex;\n        return {\n            country: this.locations[previousIndex].country,\n            city: this.locations[previousIndex].city,\n            entryText: this.locations[previousIndex].entryText,\n            lat: this.locations[previousIndex].lat,\n            lon: this.locations[previousIndex].lon,\n            timeZone: this.locations[previousIndex].timeZone,\n        };\n    }\n    ShouldShowLocationSelectors(currentLoc) {\n        let threshold = this.InStorage(currentLoc) ? 2 : 1;\n        if (this.locations.length >= threshold)\n            return true;\n        else\n            return false;\n    }\n    async SaveCurrentLocation(loc) {\n        if (this.app.Locked()) {\n            NotificationService.Instance.Send(_(\"Warning\") + \" - \" + _(\"Location Store\"), _(\"You can only save correct locations when the applet is not refreshing\"), true);\n            return;\n        }\n        if (loc == null) {\n            NotificationService.Instance.Send(_(\"Warning\") + \" - \" + _(\"Location Store\"), _(\"You can't save an incorrect location\"), true);\n            return;\n        }\n        if (this.InStorage(loc)) {\n            NotificationService.Instance.Send(_(\"Info\") + \" - \" + _(\"Location Store\"), _(\"Location is already saved\"), true);\n            return;\n        }\n        loc.timeZone = this.app.config.Timezone;\n        this.locations.push(loc);\n        this.currentIndex = this.locations.length - 1;\n        this.InvokeStorageChanged();\n        this.SaveBackLocations();\n    }\n    InvokeStorageChanged() {\n        this.StoreChanged.Invoke(this, this.locations.length);\n    }\n    SaveBackLocations() {\n        this.config.SetLocationList(this.locations);\n    }\n    InStorage(loc) {\n        return this.FindIndex(loc) != -1;\n    }\n    FindIndex(loc, locations = null) {\n        if (loc == null)\n            return -1;\n        if (locations == null)\n            locations = this.locations;\n        for (let index = 0; index < locations.length; index++) {\n            const element = locations[index];\n            if (element.entryText == loc.entryText)\n                return index;\n        }\n        return -1;\n    }\n    IsEqual(oldLoc, newLoc) {\n        if (oldLoc == null)\n            return false;\n        if (newLoc == null)\n            return false;\n        for (let key in newLoc) {\n            if (oldLoc[key] != newLoc[key]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/location_services/nominatim.ts\n\n\nclass GeoLocation {\n    constructor(app) {\n        this.url = \"https://nominatim.openstreetmap.org/search/\";\n        this.params = \"?format=json&addressdetails=1&limit=1\";\n        this.App = null;\n        this.cache = {};\n        this.App = app;\n    }\n    async GetLocation(searchText) {\n        var _a;\n        try {\n            searchText = searchText.trim();\n            let cached = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.searchText;\n            if (cached != null) {\n                logger_Log.Instance.Debug(\"Returning cached geolocation info for '\" + searchText + \"'.\");\n                return cached;\n            }\n            let locationData = await this.App.LoadJsonAsync(this.url + encodeURIComponent(searchText) + this.params);\n            if (locationData == null)\n                return null;\n            if (locationData.length == 0) {\n                this.App.ShowError({\n                    type: \"hard\",\n                    detail: \"bad location format\",\n                    message: _(\"Could not find location based on address, please check if it's right\")\n                });\n                return null;\n            }\n            logger_Log.Instance.Debug(\"Location is found, payload: \" + JSON.stringify(locationData, null, 2));\n            let result = {\n                lat: parseFloat(locationData[0].lat),\n                lon: parseFloat(locationData[0].lon),\n                city: locationData[0].address.city || locationData[0].address.town || locationData[0].address.village,\n                country: locationData[0].address.country,\n                timeZone: null,\n                entryText: this.BuildEntryText(locationData[0]),\n            };\n            this.cache[searchText] = result;\n            return result;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"Could not geo locate, error: \" + JSON.stringify(e, null, 2));\n            this.App.ShowError({\n                type: \"soft\",\n                detail: \"bad api response\",\n                message: _(\"Failed to call Geolocation API, see Looking Glass for errors.\")\n            });\n            return null;\n        }\n    }\n    BuildEntryText(locationData) {\n        if (locationData.address == null)\n            return locationData.display_name;\n        let entryText = [];\n        for (let key in locationData.address) {\n            if (key == \"state_district\")\n                continue;\n            if (key == \"county\")\n                continue;\n            if (key == \"country_code\")\n                continue;\n            entryText.push(locationData.address[key]);\n        }\n        return entryText.join(\", \");\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/config.ts\n\n\n\n\n\n\nconst { AppletSettings, BindingDirection } = imports.ui.settings;\nconst config_Lang = imports.lang;\nconst keybindingManager = imports.ui.main.keybindingManager;\nconst { IconType: config_IconType } = imports.gi.St;\nconst { get_language_names } = imports.gi.GLib;\nconst { Settings } = imports.gi.Gio;\nconst Keys = {\n    DATA_SERVICE: \"dataService\",\n    API_KEY: \"apiKey\",\n    TEMPERATURE_UNIT_KEY: \"temperatureUnit\",\n    TEMPERATURE_HIGH_FIRST: \"temperatureHighFirst\",\n    WIND_SPEED_UNIT: \"windSpeedUnit\",\n    DISTANCE_UNIT: \"distanceUnit\",\n    CITY: \"locationLabelOverride\",\n    TRANSLATE_CONDITION: \"translateCondition\",\n    VERTICAL_ORIENTATION: \"verticalOrientation\",\n    SHOW_TEXT_IN_PANEL: \"showTextInPanel\",\n    TEMP_TEXT_OVERRIDE: \"tempTextOverride\",\n    SHOW_COMMENT_IN_PANEL: \"showCommentInPanel\",\n    SHOW_SUNRISE: \"showSunrise\",\n    SHOW_24HOURS: \"show24Hours\",\n    FORECAST_DAYS: \"forecastDays\",\n    FORECAST_HOURS: \"forecastHours\",\n    FORECAST_COLS: \"forecastColumns\",\n    FORECAST_ROWS: \"forecastRows\",\n    REFRESH_INTERVAL: \"refreshInterval\",\n    PRESSURE_UNIT: \"pressureUnit\",\n    SHORT_CONDITIONS: \"shortConditions\",\n    MANUAL_LOCATION: \"manualLocation\",\n    USE_CUSTOM_APPLETICONS: 'useCustomAppletIcons',\n    USE_CUSTOM_MENUICONS: \"useCustomMenuIcons\",\n    RUSSIAN_STYLE: \"tempRussianStyle\",\n    SHORT_HOURLY_TIME: \"shortHourlyTime\",\n    SHOW_FORECAST_DATES: \"showForecastDates\",\n    WEATHER_USE_SYMBOLIC_ICONS_KEY: 'useSymbolicIcons',\n    IMMEDIATE_PRECIP: \"immediatePrecip\",\n    SHOW_BOTH_TEMP: \"showBothTempUnits\",\n    DISPLAY_WIND_DIR_AS_TEXT: \"displayWindAsText\"\n};\nclass Config {\n    constructor(app, instanceID) {\n        this.fahrenheitCountries = [\"bs\", \"bz\", \"ky\", \"pr\", \"pw\", \"us\"];\n        this.windSpeedUnitLocales = {\n            \"fi kr no pl ru se\": \"m/s\",\n            \"us gb\": \"mph\"\n        };\n        this.distanceUnitLocales = {\n            \"us gb\": \"imperial\"\n        };\n        this.WEATHER_LOCATION = \"location\";\n        this.WEATHER_LOCATION_LIST = \"locationList\";\n        this.doneTypingLocation = null;\n        this.currentLocation = null;\n        this.timezone = null;\n        this.app = app;\n        this.currentLocale = ConstructJsLocale(get_language_names()[0]);\n        logger_Log.Instance.Debug(\"System locale is \" + this.currentLocale);\n        this.autoLocProvider = new IpApi(app);\n        this.geoLocationService = new GeoLocation(app);\n        this.countryCode = this.GetCountryCode(this.currentLocale);\n        this.settings = new AppletSettings(this, UUID, instanceID);\n        this.InterfaceSettings = new Settings({ schema: \"org.cinnamon.desktop.interface\" });\n        this.InterfaceSettings.connect('changed::font-name', () => this.OnFontChanged());\n        this.currentFontSize = this.GetCurrentFontSize();\n        this.BindSettings();\n        this.LocStore = new LocationStore(this.app, this);\n    }\n    get Timezone() {\n        return this.timezone;\n    }\n    set Timezone(value) {\n        if (!value || value == \"\")\n            value = null;\n        this.timezone = value;\n    }\n    BindSettings() {\n        let k;\n        for (k in Keys) {\n            let key = Keys[k];\n            let keyProp = \"_\" + key;\n            this.settings.bindProperty(BindingDirection.IN, key, keyProp, config_Lang.bind(this, this.OnSettingChanged), null);\n        }\n        this.settings.bindProperty(BindingDirection.BIDIRECTIONAL, this.WEATHER_LOCATION, (\"_\" + this.WEATHER_LOCATION), config_Lang.bind(this, this.OnLocationChanged), null);\n        this.settings.bindProperty(BindingDirection.BIDIRECTIONAL, this.WEATHER_LOCATION_LIST, (\"_\" + this.WEATHER_LOCATION_LIST), config_Lang.bind(this, this.OnLocationStoreChanged), null);\n        this.settings.bindProperty(BindingDirection.IN, \"keybinding\", \"keybinding\", config_Lang.bind(this, this.OnKeySettingsUpdated), null);\n        keybindingManager.addHotKey(UUID, this.keybinding, config_Lang.bind(this.app, this.app.on_applet_clicked));\n    }\n    get CurrentFontSize() {\n        return this.currentFontSize;\n    }\n    get CurrentLocation() {\n        return this.currentLocation;\n    }\n    get ApiKey() {\n        return this._apiKey.replace(\" \", \"\");\n    }\n    get Language() {\n        return this.GetLanguage(this.currentLocale);\n    }\n    get TemperatureUnit() {\n        if (this._temperatureUnit == \"automatic\")\n            return this.GetLocaleTemperateUnit(this.countryCode);\n        return this._temperatureUnit;\n    }\n    get WindSpeedUnit() {\n        if (this._windSpeedUnit == \"automatic\")\n            return this.GetLocaleWindSpeedUnit(this.countryCode);\n        return this._windSpeedUnit;\n    }\n    get DistanceUnit() {\n        if (this._distanceUnit == \"automatic\")\n            return this.GetLocaleDistanceUnit(this.countryCode);\n        return this._distanceUnit;\n    }\n    get IconType() {\n        if (this._useCustomMenuIcons)\n            return config_IconType.SYMBOLIC;\n        return this._useSymbolicIcons ?\n            config_IconType.SYMBOLIC :\n            config_IconType.FULLCOLOR;\n    }\n    ;\n    get AppletIconType() {\n        if (this._useCustomAppletIcons)\n            return config_IconType.SYMBOLIC;\n        return this._useSymbolicIcons ?\n            config_IconType.SYMBOLIC :\n            config_IconType.FULLCOLOR;\n    }\n    SwitchToNextLocation() {\n        let nextLoc = this.LocStore.GetNextLocation(this.CurrentLocation);\n        if (nextLoc == null)\n            return null;\n        this.InjectLocationToConfig(nextLoc, true);\n        return nextLoc;\n    }\n    SwitchToPreviousLocation() {\n        let previousLoc = this.LocStore.GetPreviousLocation(this.CurrentLocation);\n        if (previousLoc == null)\n            return null;\n        this.InjectLocationToConfig(previousLoc, true);\n        return previousLoc;\n    }\n    NoApiKey() {\n        var _a;\n        let key = (_a = this._apiKey) === null || _a === void 0 ? void 0 : _a.replace(\" \", \"\");\n        return (!key || key == \"\");\n    }\n    ;\n    async EnsureLocation() {\n        this.currentLocation = null;\n        if (!this._manualLocation) {\n            let location = await this.autoLocProvider.GetLocation();\n            if (!location)\n                return null;\n            this.InjectLocationToConfig(location);\n            return location;\n        }\n        let loc = this._location;\n        if (loc == undefined || loc.trim() == \"\") {\n            this.app.ShowError({\n                type: \"hard\",\n                detail: \"no location\",\n                userError: true,\n                message: _(\"Make sure you entered a location or use Automatic location instead\")\n            });\n            return null;\n        }\n        let location = this.LocStore.FindLocation(this._location);\n        if (location != null) {\n            logger_Log.Instance.Debug(\"location exist in locationstore, retrieve\");\n            this.LocStore.SwitchToLocation(location);\n            this.InjectLocationToConfig(location, true);\n            return location;\n        }\n        else if (IsCoordinate(loc)) {\n            loc = loc.replace(\" \", \"\");\n            let latLong = loc.split(\",\");\n            let location = {\n                lat: parseFloat(latLong[0]),\n                lon: parseFloat(latLong[1]),\n                city: null,\n                country: null,\n                timeZone: null,\n                entryText: loc,\n            };\n            this.InjectLocationToConfig(location);\n            return location;\n        }\n        logger_Log.Instance.Debug(\"Location is text, geolocating...\");\n        let locationData = await this.geoLocationService.GetLocation(loc);\n        if (locationData == null)\n            return null;\n        if (!!(locationData === null || locationData === void 0 ? void 0 : locationData.entryText)) {\n            logger_Log.Instance.Debug(\"Address found via address search\");\n        }\n        location = this.LocStore.FindLocation(locationData.entryText);\n        if (location != null) {\n            logger_Log.Instance.Debug(\"Found location was found in locationStore, return that instead\");\n            this.InjectLocationToConfig(location);\n            this.LocStore.SwitchToLocation(location);\n            return location;\n        }\n        else {\n            this.InjectLocationToConfig(locationData);\n            return locationData;\n        }\n    }\n    InjectLocationToConfig(loc, switchToManual = false) {\n        logger_Log.Instance.Debug(\"Location setting is now: \" + loc.entryText);\n        let text = (loc.entryText + \"\");\n        this.SetLocation(text);\n        this.currentLocation = loc;\n        if (switchToManual == true)\n            this.settings.setValue(Keys.MANUAL_LOCATION, true);\n    }\n    OnKeySettingsUpdated() {\n        if (this.keybinding != null) {\n            keybindingManager.addHotKey(UUID, this.keybinding, config_Lang.bind(this.app, this.app.on_applet_clicked));\n        }\n    }\n    OnLocationChanged() {\n        logger_Log.Instance.Debug(\"User changed location, waiting 3 seconds...\");\n        if (this.doneTypingLocation != null)\n            utils_clearTimeout(this.doneTypingLocation);\n        this.doneTypingLocation = utils_setTimeout(config_Lang.bind(this, this.DoneTypingLocation), 3000);\n    }\n    OnLocationStoreChanged() {\n        this.LocStore.OnLocationChanged(this._locationList);\n    }\n    OnFontChanged() {\n        this.currentFontSize = this.GetCurrentFontSize();\n        this.app.RefreshAndRebuild();\n    }\n    DoneTypingLocation() {\n        logger_Log.Instance.Debug(\"User has finished typing, beginning refresh\");\n        this.doneTypingLocation = null;\n        this.app.RefreshAndRebuild();\n    }\n    OnSettingChanged() {\n        this.app.RefreshAndRebuild();\n    }\n    SetLocation(value) {\n        this.settings.setValue(this.WEATHER_LOCATION, value);\n    }\n    SetLocationList(list) {\n        this.settings.setValue(this.WEATHER_LOCATION_LIST, list);\n    }\n    GetLocaleTemperateUnit(code) {\n        if (code == null || !this.fahrenheitCountries.includes(code))\n            return \"celsius\";\n        return \"fahrenheit\";\n    }\n    GetLocaleWindSpeedUnit(code) {\n        if (code == null)\n            return \"kph\";\n        for (const key in this.windSpeedUnitLocales) {\n            if (key.includes(code))\n                return this.windSpeedUnitLocales[key];\n        }\n        return \"kph\";\n    }\n    GetLocaleDistanceUnit(code) {\n        if (code == null)\n            return \"metric\";\n        for (const key in this.distanceUnitLocales) {\n            if (key.includes(code))\n                return this.distanceUnitLocales[key];\n        }\n        return \"metric\";\n    }\n    GetCountryCode(locale) {\n        let split = locale.split(\"-\");\n        if (split.length < 2)\n            return null;\n        return split[1];\n    }\n    GetLanguage(locale) {\n        let split = locale.split(\"-\");\n        if (split.length < 1)\n            return null;\n        return split[0];\n    }\n    GetCurrentFontSize() {\n        let nameString = this.InterfaceSettings.get_string(\"font-name\");\n        let elements = nameString.split(\" \");\n        let size = parseFloat(elements[elements.length - 1]);\n        logger_Log.Instance.Debug(\"Font size changed to \" + size.toString());\n        return size;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/loop.ts\n\n\nvar weatherAppletGUIDs = {};\nclass WeatherLoop {\n    constructor(app, instanceID) {\n        this.lastUpdated = new Date(0);\n        this.pauseRefresh = false;\n        this.LOOP_INTERVAL = 15;\n        this.appletRemoved = false;\n        this.errorCount = 0;\n        this.app = app;\n        this.instanceID = instanceID;\n        this.GUID = Guid();\n        weatherAppletGUIDs[instanceID] = this.GUID;\n    }\n    IsDataTooOld() {\n        if (!this.lastUpdated)\n            return true;\n        let oldDate = this.lastUpdated;\n        oldDate.setMinutes(oldDate.getMinutes() + (this.app.config._refreshInterval * 2));\n        return (this.lastUpdated > oldDate);\n    }\n    async Start() {\n        while (true) {\n            try {\n                if (this.IsStray())\n                    return;\n                if (this.app.encounteredError == true)\n                    this.IncrementErrorCount();\n                this.ValidateLastUpdate();\n                if (this.pauseRefresh) {\n                    logger_Log.Instance.Debug(\"Configuration error, updating paused\");\n                    await delay(this.LoopInterval());\n                    continue;\n                }\n                if (this.errorCount > 0 || this.NextUpdate() < new Date()) {\n                    logger_Log.Instance.Debug(\"Refresh triggered in main loop with these values: lastUpdated \" + ((!this.lastUpdated) ? \"null\" : this.lastUpdated.toLocaleString())\n                        + \", errorCount \" + this.errorCount.toString() + \" , loopInterval \" + (this.LoopInterval() / 1000).toString()\n                        + \" seconds, refreshInterval \" + this.app.config._refreshInterval + \" minutes\");\n                    let state = await this.app.RefreshWeather(false);\n                    if (state == \"error\")\n                        logger_Log.Instance.Print(\"App is currently refreshing, refresh skipped in main loop\");\n                    if (state == \"success\" || \"locked\")\n                        this.lastUpdated = new Date();\n                }\n                else {\n                    logger_Log.Instance.Debug(\"No need to update yet, skipping\");\n                }\n            }\n            catch (e) {\n                logger_Log.Instance.Error(\"Error in Main loop: \" + e);\n                this.app.encounteredError = true;\n            }\n            await delay(this.LoopInterval());\n        }\n    }\n    ;\n    Stop() {\n        this.appletRemoved = true;\n    }\n    Pause() {\n        this.pauseRefresh = true;\n    }\n    Resume() {\n        this.pauseRefresh = false;\n    }\n    ResetErrorCount() {\n        this.errorCount = 0;\n    }\n    GetSecondsUntilNextRefresh() {\n        return (this.errorCount > 0) ? (this.errorCount) * this.LOOP_INTERVAL : this.LOOP_INTERVAL;\n    }\n    IsStray() {\n        if (this.appletRemoved == true)\n            return true;\n        if (this.GUID != weatherAppletGUIDs[this.instanceID]) {\n            logger_Log.Instance.Debug(\"Applet GUID: \" + this.GUID);\n            logger_Log.Instance.Debug(\"GUID stored globally: \" + weatherAppletGUIDs[this.instanceID]);\n            logger_Log.Instance.Print(\"GUID mismatch, terminating applet\");\n            return true;\n        }\n        return false;\n    }\n    IncrementErrorCount() {\n        this.app.encounteredError = false;\n        this.errorCount++;\n        logger_Log.Instance.Debug(\"Encountered error in previous loop\");\n        if (this.errorCount > 60)\n            this.errorCount = 60;\n    }\n    NextUpdate() {\n        return new Date(this.lastUpdated.getTime() + this.app.config._refreshInterval * 60000);\n    }\n    ValidateLastUpdate() {\n        if (this.lastUpdated > new Date())\n            this.lastUpdated = new Date(0);\n    }\n    LoopInterval() {\n        return (this.errorCount > 0) ? this.LOOP_INTERVAL * this.errorCount * 1000 : this.LOOP_INTERVAL * 1000;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/lib/sunCalc.ts\nconst PI = Math.PI, sin = Math.sin, cos = Math.cos, tan = Math.tan, asin = Math.asin, atan = Math.atan2, acos = Math.acos, rad = PI / 180;\nconst dayMs = 1000 * 60 * 60 * 24, J1970 = 2440588, J2000 = 2451545;\nfunction toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }\nfunction fromJulian(j) { return new Date((j + 0.5 - J1970) * dayMs); }\nfunction toDays(date) { return toJulian(date) - J2000; }\nvar e = rad * 23.4397;\nfunction rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }\nfunction declination(l, b) { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }\nfunction azimuth(H, phi, dec) { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }\nfunction altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }\nfunction siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }\nfunction astroRefraction(h) {\n    if (h < 0)\n        h = 0;\n    return 0.0002967 / Math.tan(h + 0.00312536 / (h + 0.08901179));\n}\nfunction solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }\nfunction eclipticLongitude(M) {\n    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), P = rad * 102.9372;\n    return M + C + P + PI;\n}\nfunction sunCoords(d) {\n    var M = solarMeanAnomaly(d), L = eclipticLongitude(M);\n    return {\n        dec: declination(L, 0),\n        ra: rightAscension(L, 0)\n    };\n}\nvar J0 = 0.0009;\nfunction julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }\nfunction approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }\nfunction solarTransitJ(ds, M, L) { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }\nfunction hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }\nfunction observerAngle(height) { return -2.076 * Math.sqrt(height) / 60; }\nfunction getSetJ(h, lw, phi, dec, n, M, L) {\n    var w = hourAngle(h, phi, dec), a = approxTransit(w, lw, n);\n    return solarTransitJ(a, M, L);\n}\nfunction moonCoords(d) {\n    var L = rad * (218.316 + 13.176396 * d), M = rad * (134.963 + 13.064993 * d), F = rad * (93.272 + 13.229350 * d), l = L + rad * 6.289 * sin(M), b = rad * 5.128 * sin(F), dt = 385001 - 20905 * cos(M);\n    return {\n        ra: rightAscension(l, b),\n        dec: declination(l, b),\n        dist: dt\n    };\n}\nfunction hoursLater(date, h) {\n    return new Date(date.valueOf() + h * dayMs / 24);\n}\nclass SunCalc {\n    constructor() {\n        this.times = [\n            [-0.833, 'sunrise', 'sunset'],\n            [-0.3, 'sunriseEnd', 'sunsetStart'],\n            [-6, 'dawn', 'dusk'],\n            [-12, 'nauticalDawn', 'nauticalDusk'],\n            [-18, 'nightEnd', 'night'],\n            [6, 'goldenHourEnd', 'goldenHour']\n        ];\n    }\n    getPosition(date, lat, lng) {\n        var lw = rad * -lng, phi = rad * lat, d = toDays(date), c = sunCoords(d), H = siderealTime(d, lw) - c.ra;\n        return {\n            azimuth: azimuth(H, phi, c.dec),\n            altitude: altitude(H, phi, c.dec)\n        };\n    }\n    addTime(angle, riseName, setName) {\n        this.times.push([angle, riseName, setName]);\n    }\n    ;\n    getTimes(date, lat, lng, height) {\n        height = height || 0;\n        var lw = rad * -lng, phi = rad * lat, dh = observerAngle(height), d = toDays(date), n = julianCycle(d, lw), ds = approxTransit(0, lw, n), M = solarMeanAnomaly(ds), L = eclipticLongitude(M), dec = declination(L, 0), Jnoon = solarTransitJ(ds, M, L), i, len, time, h0, Jset, Jrise;\n        var result = {\n            solarNoon: fromJulian(Jnoon),\n            nadir: fromJulian(Jnoon - 0.5)\n        };\n        for (i = 0, len = this.times.length; i < len; i += 1) {\n            time = this.times[i];\n            h0 = (time[0] + dh) * rad;\n            Jset = getSetJ(h0, lw, phi, dec, n, M, L);\n            Jrise = Jnoon - (Jset - Jnoon);\n            result[time[1]] = fromJulian(Jrise);\n            result[time[2]] = fromJulian(Jset);\n        }\n        return result;\n    }\n    ;\n    getMoonPosition(date, lat, lng) {\n        var lw = rad * -lng, phi = rad * lat, d = toDays(date), c = moonCoords(d), H = siderealTime(d, lw) - c.ra, h = altitude(H, phi, c.dec), pa = atan(sin(H), tan(phi) * cos(c.dec) - sin(c.dec) * cos(H));\n        h = h + astroRefraction(h);\n        return {\n            azimuth: azimuth(H, phi, c.dec),\n            altitude: h,\n            distance: c.dist,\n            parallacticAngle: pa\n        };\n    }\n    ;\n    getMoonIllumination(date) {\n        var d = toDays(date || new Date()), s = sunCoords(d), m = moonCoords(d), sunDist = 149598000, phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)), inc = atan(sunDist * sin(phi), m.dist - sunDist * cos(phi)), angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -\n            cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));\n        return {\n            fraction: (1 + cos(inc)) / 2,\n            phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,\n            angle: angle\n        };\n    }\n    ;\n    getMoonTimes(date, lat, lng, inUTC) {\n        var t = new Date(date);\n        if (inUTC)\n            t.setUTCHours(0, 0, 0, 0);\n        else\n            t.setHours(0, 0, 0, 0);\n        var hc = 0.133 * rad, h0 = this.getMoonPosition(t, lat, lng).altitude - hc, h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;\n        for (var i = 1; i <= 24; i += 2) {\n            h1 = this.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;\n            h2 = this.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n            a = (h0 + h2) / 2 - h1;\n            b = (h2 - h0) / 2;\n            xe = -b / (2 * a);\n            ye = (a * xe + b) * xe + h1;\n            d = b * b - 4 * a * h1;\n            roots = 0;\n            if (d >= 0) {\n                dx = Math.sqrt(d) / (Math.abs(a) * 2);\n                x1 = xe - dx;\n                x2 = xe + dx;\n                if (Math.abs(x1) <= 1)\n                    roots++;\n                if (Math.abs(x2) <= 1)\n                    roots++;\n                if (x1 < -1)\n                    x1 = x2;\n            }\n            if (roots === 1) {\n                if (h0 < 0)\n                    rise = i + x1;\n                else\n                    set = i + x1;\n            }\n            else if (roots === 2) {\n                rise = i + (ye < 0 ? x2 : x1);\n                set = i + (ye < 0 ? x1 : x2);\n            }\n            if (rise && set)\n                break;\n            h0 = h2;\n        }\n        var result = {};\n        if (rise)\n            result.rise = hoursLater(t, rise);\n        if (set)\n            result.set = hoursLater(t, set);\n        if (!rise && !set)\n            result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;\n        return result;\n    }\n    ;\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/met_uk.ts\n\n\n\nclass MetUk {\n    constructor(_app) {\n        this.prettyName = _(\"Met Office UK\");\n        this.name = \"Met Office UK\";\n        this.maxForecastSupport = 5;\n        this.website = \"https://www.metoffice.gov.uk/\";\n        this.maxHourlyForecastSupport = 36;\n        this.needsApiKey = false;\n        this.baseUrl = \"http://datapoint.metoffice.gov.uk/public/data/val/\";\n        this.forecastPrefix = \"wxfcs/all/json/\";\n        this.threeHourlyUrl = \"?res=3hourly\";\n        this.dailyUrl = \"?res=daily\";\n        this.currentPrefix = \"wxobs/all/json/\";\n        this.sitesUrl = \"sitelist\";\n        this.key = \"key=05de1ee8-de70-46aa-9b41-299d4cc60219\";\n        this.forecastSite = null;\n        this.observationSites = null;\n        this.currentLoc = null;\n        this.currentLocID = null;\n        this.MAX_STATION_DIST = 50000;\n        this.app = _app;\n        this.sunCalc = new SunCalc();\n    }\n    async GetWeather(newLoc) {\n        if (newLoc == null)\n            return null;\n        let loc = newLoc.lat.toString() + \",\" + newLoc.lon.toString();\n        if (this.currentLocID == null || this.currentLocID != loc || this.forecastSite == null || this.observationSites == null || this.observationSites.length == 0) {\n            logger_Log.Instance.Print(\"Downloading new site data\");\n            this.currentLoc = newLoc;\n            this.currentLocID = loc;\n            let forecastSite = await this.GetClosestForecastSite(newLoc);\n            if (forecastSite == null)\n                return null;\n            let observationSites = await this.GetObservationSitesInRange(newLoc, this.MAX_STATION_DIST);\n            if (observationSites == null)\n                return null;\n            this.forecastSite = forecastSite;\n            this.observationSites = observationSites;\n        }\n        else {\n            logger_Log.Instance.Debug(\"Site data downloading skipped\");\n        }\n        if (this.observationSites.length == 0 || this.forecastSite.dist > 100000) {\n            logger_Log.Instance.Error(\"User is probably not in UK, aborting\");\n            this.app.ShowError({\n                type: \"hard\",\n                userError: true,\n                detail: \"location not covered\",\n                message: \"MET Office UK only covers the UK, please make sure your location is in the country\",\n                service: \"met-uk\"\n            });\n            return null;\n        }\n        let forecastPromise = this.GetData(this.baseUrl + this.forecastPrefix + this.forecastSite.id + this.dailyUrl + \"&\" + this.key, this.ParseForecast);\n        let hourlyPayload = this.GetData(this.baseUrl + this.forecastPrefix + this.forecastSite.id + this.threeHourlyUrl + \"&\" + this.key, this.ParseHourlyForecast);\n        let observations = await this.GetObservationData(this.observationSites);\n        let currentResult = this.ParseCurrent(observations);\n        if (!currentResult)\n            return null;\n        let forecastResult = await forecastPromise;\n        currentResult.forecasts = (!forecastResult) ? [] : forecastResult;\n        let threeHourlyForecast = await hourlyPayload;\n        currentResult.hourlyForecasts = (!threeHourlyForecast) ? [] : threeHourlyForecast;\n        return currentResult;\n    }\n    ;\n    async GetClosestForecastSite(loc) {\n        let forecastSitelist = await this.app.LoadJsonAsync(this.baseUrl + this.forecastPrefix + this.sitesUrl + \"?\" + this.key);\n        if (forecastSitelist == null)\n            return null;\n        return this.GetClosestSite(forecastSitelist, loc);\n    }\n    async GetObservationSitesInRange(loc, range) {\n        let observationSiteList = await this.app.LoadJsonAsync(this.baseUrl + this.currentPrefix + this.sitesUrl + \"?\" + this.key);\n        if (observationSiteList == null)\n            return null;\n        let observationSites = [];\n        for (let index = 0; index < observationSiteList.Locations.Location.length; index++) {\n            const element = observationSiteList.Locations.Location[index];\n            element.dist = GetDistance(parseFloat(element.latitude), parseFloat(element.longitude), loc.lat, loc.lon);\n            if (element.dist > range)\n                continue;\n            observationSites.push(element);\n        }\n        observationSites = this.SortObservationSites(observationSites);\n        logger_Log.Instance.Debug(\"Observation sites found: \" + JSON.stringify(observationSites, null, 2));\n        return observationSites;\n    }\n    async GetObservationData(observationSites) {\n        let observations = [];\n        for (let index = 0; index < observationSites.length; index++) {\n            const element = observationSites[index];\n            logger_Log.Instance.Debug(\"Getting observation data from station: \" + element.id);\n            let payload = await this.app.LoadJsonAsync(this.baseUrl + this.currentPrefix + element.id + \"?res=hourly&\" + this.key);\n            if (!!payload)\n                observations.push(payload);\n            else {\n                logger_Log.Instance.Debug(\"Failed to get observations from \" + element.id);\n            }\n        }\n        return observations;\n    }\n    async GetData(query, ParseFunction) {\n        if (query == null)\n            return null;\n        logger_Log.Instance.Debug(\"Query: \" + query);\n        let json = await this.app.LoadJsonAsync(query);\n        if (json == null)\n            return null;\n        return ParseFunction(json, this);\n    }\n    ;\n    ParseCurrent(json) {\n        let observation = this.MeshObservations(json);\n        if (!observation) {\n            return null;\n        }\n        let dataIndex;\n        for (let index = 0; index < json.length; index++) {\n            const element = json[index];\n            if (element.SiteRep.DV.Location == null)\n                continue;\n            dataIndex = index;\n            break;\n        }\n        if (dataIndex == null) {\n            this.app.ShowError({\n                detail: \"no api response\",\n                type: \"hard\",\n                message: _(\"Data was not found for location\"),\n                service: \"met-uk\",\n            });\n            return null;\n        }\n        let times = this.sunCalc.getTimes(new Date(), parseFloat(json[dataIndex].SiteRep.DV.Location.lat), parseFloat(json[dataIndex].SiteRep.DV.Location.lon), parseFloat(json[dataIndex].SiteRep.DV.Location.elevation));\n        try {\n            let weather = {\n                coord: {\n                    lat: parseFloat(json[dataIndex].SiteRep.DV.Location.lat),\n                    lon: parseFloat(json[dataIndex].SiteRep.DV.Location.lon)\n                },\n                location: {\n                    city: null,\n                    country: null,\n                    url: null,\n                    timeZone: null,\n                    distanceFrom: this.observationSites[dataIndex].dist\n                },\n                date: new Date(json[dataIndex].SiteRep.DV.dataDate),\n                sunrise: times.sunrise,\n                sunset: times.sunset,\n                wind: {\n                    speed: null,\n                    degree: null\n                },\n                temperature: null,\n                pressure: null,\n                humidity: null,\n                condition: this.ResolveCondition(observation === null || observation === void 0 ? void 0 : observation.W),\n                forecasts: []\n            };\n            if ((observation === null || observation === void 0 ? void 0 : observation.V) != null) {\n                weather.extra_field = {\n                    name: _(\"Visibility\"),\n                    value: this.VisibilityToText(observation.V),\n                    type: \"string\"\n                };\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.S) != null) {\n                weather.wind.speed = MPHtoMPS(parseFloat(observation.S));\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.D) != null) {\n                weather.wind.degree = CompassToDeg(observation.D);\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.T) != null) {\n                weather.temperature = CelsiusToKelvin(parseFloat(observation.T));\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.P) != null) {\n                weather.pressure = parseFloat(observation.P);\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.H) != null) {\n                weather.humidity = parseFloat(observation.H);\n            }\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"Met UK Weather Parsing error: \" + e);\n            this.app.ShowError({ type: \"soft\", service: \"met-uk\", detail: \"unusual payload\", message: _(\"Failed to Process Current Weather Info\") });\n            return null;\n        }\n    }\n    ;\n    ParseForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.SiteRep.DV.Location.Period.length; i++) {\n                let element = json.SiteRep.DV.Location.Period[i];\n                if (!Array.isArray(element.Rep))\n                    continue;\n                let day = element.Rep[0];\n                let night = element.Rep[1];\n                let forecast = {\n                    date: new Date(self.PartialToISOString(element.value)),\n                    temp_min: CelsiusToKelvin(parseFloat(night.Nm)),\n                    temp_max: CelsiusToKelvin(parseFloat(day.Dm)),\n                    condition: self.ResolveCondition(day.W),\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"MET UK Forecast Parsing error: \" + e);\n            self.app.ShowError({ type: \"soft\", service: \"met-uk\", detail: \"unusual payload\", message: _(\"Failed to Process Forecast Info\") });\n            return null;\n        }\n    }\n    ;\n    ParseHourlyForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.SiteRep.DV.Location.Period.length; i++) {\n                let day = json.SiteRep.DV.Location.Period[i];\n                let date = new Date(self.PartialToISOString(day.value));\n                if (!Array.isArray(day.Rep))\n                    continue;\n                for (let index = 0; index < day.Rep.length; index++) {\n                    const hour = day.Rep[index];\n                    let timestamp = new Date(date.getTime());\n                    timestamp.setHours(timestamp.getHours() + (parseInt(hour.$) / 60));\n                    let threshold = new Date();\n                    threshold.setHours(threshold.getHours() - 3);\n                    if (timestamp < threshold)\n                        continue;\n                    let forecast = {\n                        date: timestamp,\n                        temp: CelsiusToKelvin(parseFloat(hour.T)),\n                        condition: self.ResolveCondition(hour.W),\n                        precipitation: {\n                            type: \"rain\",\n                            volume: null,\n                            chance: parseFloat(hour.Pp)\n                        }\n                    };\n                    forecasts.push(forecast);\n                }\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"MET UK Forecast Parsing error: \" + e);\n            self.app.ShowError({ type: \"soft\", service: \"met-uk\", detail: \"unusual payload\", message: _(\"Failed to Process Forecast Info\") });\n            return null;\n        }\n    }\n    VisibilityToText(dist) {\n        let distance = parseInt(dist);\n        let unit = this.app.config.DistanceUnit;\n        let stringFormat = {\n            distanceUnit: this.DistanceUnitFor(unit)\n        };\n        if (distance < 1000) {\n            stringFormat.distance = MetreToUserUnits(1000, unit).toString();\n            return `${_(\"Very poor\")} - ${_(\"Less than {distance} {distanceUnit}\", stringFormat)}`;\n        }\n        else if (distance >= 40000) {\n            stringFormat.distance = MetreToUserUnits(40000, unit).toString();\n            return `${_(\"Excellent\")} - ${_(\"More than {distance} {distanceUnit}\", stringFormat)}`;\n        }\n        else if (distance < 4000) {\n            stringFormat.smallerDistance = MetreToUserUnits(1000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(4000, unit).toString();\n            return `${_(\"Poor\")} - ${_(\"Between {smallerDistance}-{biggerDistance} {distanceUnit}\", stringFormat)}`;\n        }\n        else if (distance < 10000) {\n            stringFormat.smallerDistance = MetreToUserUnits(4000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(10000, unit).toString();\n            return `${_(\"Moderate\")} - ${_(\"Between {smallerDistance}-{biggerDistance} {distanceUnit}\", stringFormat)}`;\n        }\n        else if (distance < 20000) {\n            stringFormat.smallerDistance = MetreToUserUnits(10000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(20000, unit).toString();\n            return `${_(\"Good\")} - ${_(\"Between {smallerDistance}-{biggerDistance} {distanceUnit}\", stringFormat)}`;\n        }\n        else if (distance < 40000) {\n            stringFormat.smallerDistance = MetreToUserUnits(20000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(40000, unit).toString();\n            return `${_(\"Very good\")} ${_(\"Between {smallerDistance}-{biggerDistance} {distanceUnit}\", stringFormat)}`;\n        }\n    }\n    DistanceUnitFor(unit) {\n        if (unit == \"imperial\")\n            return _(\"mi\");\n        return _(\"km\");\n    }\n    SortObservationSites(observations) {\n        if (observations == null)\n            return null;\n        observations = observations.sort((a, b) => {\n            if (a.dist < b.dist)\n                return -1;\n            if (a.dist == b.dist)\n                return 0;\n            return 1;\n        });\n        return observations;\n    }\n    MeshObservations(observations) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (!observations)\n            return null;\n        if (observations.length == 0)\n            return null;\n        let result = this.GetLatestObservation((_d = (_c = (_b = (_a = observations[0]) === null || _a === void 0 ? void 0 : _a.SiteRep) === null || _b === void 0 ? void 0 : _b.DV) === null || _c === void 0 ? void 0 : _c.Location) === null || _d === void 0 ? void 0 : _d.Period, new Date());\n        if (observations.length == 1)\n            return result;\n        for (let index = 0; index < observations.length; index++) {\n            if (((_h = (_g = (_f = (_e = observations[index]) === null || _e === void 0 ? void 0 : _e.SiteRep) === null || _f === void 0 ? void 0 : _f.DV) === null || _g === void 0 ? void 0 : _g.Location) === null || _h === void 0 ? void 0 : _h.Period) == null)\n                continue;\n            let nextObservation = this.GetLatestObservation(observations[index].SiteRep.DV.Location.Period, new Date());\n            if (result == null)\n                result = nextObservation;\n            let debugText = \" Observation data missing, plugged in from ID \" +\n                observations[index].SiteRep.DV.Location.i + \", index \" + index +\n                \", distance \"\n                + Math.round(GetDistance(parseFloat(observations[index].SiteRep.DV.Location.lat), parseFloat(observations[index].SiteRep.DV.Location.lon), this.currentLoc.lat, this.currentLoc.lon))\n                + \" metres\";\n            if ((result === null || result === void 0 ? void 0 : result.V) == null) {\n                result.V = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.V;\n                logger_Log.Instance.Debug(\"Visibility\" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.W) == null) {\n                result.W = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.W;\n                logger_Log.Instance.Debug(\"Weather condition\" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.S) == null) {\n                result.S = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.S;\n                logger_Log.Instance.Debug(\"Wind Speed\" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.D) == null) {\n                result.D = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.D;\n                logger_Log.Instance.Debug(\"Wind degree\" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.T) == null) {\n                result.T = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.T;\n                logger_Log.Instance.Debug(\"Temperature\" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.P) == null) {\n                result.P = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.P;\n                logger_Log.Instance.Debug(\"Pressure\" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.H) == null) {\n                result.H = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.H;\n                logger_Log.Instance.Debug(\"Humidity\" + debugText);\n            }\n        }\n        return result;\n    }\n    GetLatestObservation(observations, day) {\n        if (observations == null)\n            return null;\n        for (let index = 0; index < observations.length; index++) {\n            const element = observations[index];\n            let date = new Date(this.PartialToISOString(element.value));\n            if (date.toLocaleDateString() != day.toLocaleDateString())\n                continue;\n            if (Array.isArray(element.Rep))\n                return element.Rep[element.Rep.length - 1];\n            else\n                return element.Rep;\n        }\n        return null;\n    }\n    PartialToISOString(date) {\n        return (date.replace(\"Z\", \"\")) + \"T00:00:00Z\";\n    }\n    GetClosestSite(siteList, loc) {\n        let sites = siteList.Locations.Location;\n        let closest = sites[0];\n        closest.dist = GetDistance(parseFloat(closest.latitude), parseFloat(closest.longitude), loc.lat, loc.lon);\n        for (let index = 0; index < sites.length; index++) {\n            const element = sites[index];\n            element.dist = GetDistance(parseFloat(element.latitude), parseFloat(element.longitude), loc.lat, loc.lon);\n            if (element.dist < closest.dist) {\n                closest = element;\n            }\n        }\n        return closest;\n    }\n    ResolveCondition(icon) {\n        switch (icon) {\n            case \"NA\":\n                return {\n                    main: _(\"Unknown\"),\n                    description: _(\"Unknown\"),\n                    customIcon: \"cloud-refresh-symbolic\",\n                    icons: [\"weather-severe-alert\"]\n                };\n            case \"0\":\n                return {\n                    main: _(\"Clear\"),\n                    description: _(\"Clear\"),\n                    customIcon: \"night-clear-symbolic\",\n                    icons: [\"weather-clear-night\", \"weather-severe-alert\"]\n                };\n            case \"1\":\n                return {\n                    main: _(\"Sunny\"),\n                    description: _(\"Sunny\"),\n                    customIcon: \"day-sunny-symbolic\",\n                    icons: [\"weather-clear\", \"weather-severe-alert\"]\n                };\n            case \"2\":\n                return {\n                    main: _(\"Partly cloudy\"),\n                    description: _(\"Partly cloudy\"),\n                    customIcon: \"night-alt-cloudy-symbolic\",\n                    icons: [\"weather-clouds-night\", \"weather-overcast\", \"weather-severe-alert\"]\n                };\n            case \"3\":\n                return {\n                    main: _(\"Partly cloudy\"),\n                    description: _(\"Partly cloudy\"),\n                    customIcon: \"day-cloudy-symbolic\",\n                    icons: [\"weather-clouds\", \"weather-overcast\", \"weather-severe-alert\"]\n                };\n            case \"4\":\n                return {\n                    main: _(\"Unknown\"),\n                    description: _(\"Unknown\"),\n                    customIcon: \"cloud-refresh-symbolic\",\n                    icons: [\"weather-severe-alert\"]\n                };\n            case \"5\":\n                return {\n                    main: _(\"Mist\"),\n                    description: _(\"Mist\"),\n                    customIcon: \"fog-symbolic\",\n                    icons: [\"weather-fog\", \"weather-severe-alert\"]\n                };\n            case \"6\":\n                return {\n                    main: _(\"Fog\"),\n                    description: _(\"Fog\"),\n                    customIcon: \"fog-symbolic\",\n                    icons: [\"weather-fog\", \"weather-severe-alert\"]\n                };\n            case \"7\":\n                return {\n                    main: _(\"Cloudy\"),\n                    description: _(\"Cloudy\"),\n                    customIcon: \"cloud-symbolic\",\n                    icons: [\"weather-overcast\", \"weather-many-clouds\", \"weather-severe-alert\"]\n                };\n            case \"8\":\n                return {\n                    main: _(\"Overcast\"),\n                    description: _(\"Overcast\"),\n                    customIcon: \"cloudy-symbolic\",\n                    icons: [\"weather-overcast\", \"weather-many-clouds\", \"weather-severe-alert\"]\n                };\n            case \"9\":\n                return {\n                    main: _(\"Light rain\"),\n                    description: _(\"Light rain shower\"),\n                    customIcon: \"night-alt-showers-symbolic\",\n                    icons: [\"weather-showers-scattered-night\", \"weather-showers-night\", \"weather-showers-scattered\", \"weather-showers\", \"weather-freezing-rain\", \"weather-severe-alert\"]\n                };\n            case \"10\":\n                return {\n                    main: _(\"Light rain\"),\n                    description: _(\"Light rain shower\"),\n                    customIcon: \"day-showers-symbolic\",\n                    icons: [\"weather-showers-scattered-day\", \"weather-showers-day\", \"weather-showers-scattered\", \"weather-showers\", \"weather-freezing-rain\", \"weather-severe-alert\"]\n                };\n            case \"11\":\n                return {\n                    main: _(\"Drizzle\"),\n                    description: _(\"Drizzle\"),\n                    customIcon: \"showers-symbolic\",\n                    icons: [\"weather-showers-scattered\", \"weather-showers\", \"weather-rain\", \"weather-freezing-rain\", \"weather-severe-alert\"]\n                };\n            case \"12\":\n                return {\n                    main: _(\"Light rain\"),\n                    description: _(\"Light rain\"),\n                    customIcon: \"showers-symbolic\",\n                    icons: [\"weather-showers-scattered\", \"weather-showers\", \"weather-rain\", \"weather-freezing-rain\", \"weather-severe-alert\"]\n                };\n            case \"13\":\n                return {\n                    main: _(\"Heavy rain\"),\n                    description: _(\"Heavy rain shower\"),\n                    customIcon: \"night-alt-rain-symbolic\",\n                    icons: [\"weather-showers-night\", \"weather-showers\", \"weather-showers-scattered\", \"weather-severe-alert\"]\n                };\n            case \"14\":\n                return {\n                    main: _(\"Heavy rain\"),\n                    description: _(\"Heavy rain shower\"),\n                    customIcon: \"day-rain-symbolic\",\n                    icons: [\"weather-showers-day\", \"weather-showers\", \"weather-showers-scattered\", \"weather-severe-alert\"]\n                };\n            case \"15\":\n                return {\n                    main: _(\"Heavy rain\"),\n                    description: _(\"Heavy rain\"),\n                    customIcon: \"rain-symbolic\",\n                    icons: [\"weather-showers\", \"weather-showers-scattered\", \"weather-severe-alert\"]\n                };\n            case \"16\":\n                return {\n                    main: _(\"Sleet\"),\n                    description: _(\"Sleet shower\"),\n                    customIcon: \"night-alt-rain-mix-symbolic\",\n                    icons: [\"weather-showers-night\", \"weather-showers\", \"weather-showers-scattered\", \"weather-severe-alert\"]\n                };\n            case \"17\":\n                return {\n                    main: _(\"Sleet\"),\n                    description: _(\"Sleet shower\"),\n                    customIcon: \"day-rain-mix-symbolic\",\n                    icons: [\"weather-showers-day\", \"weather-showers\", \"weather-showers-scattered\", \"weather-severe-alert\"]\n                };\n            case \"18\":\n                return {\n                    main: _(\"Sleet\"),\n                    description: _(\"Sleet\"),\n                    customIcon: \"rain-mix-symbolic\",\n                    icons: [\"weather-showers\", \"weather-showers-scattered\", \"weather-severe-alert\"]\n                };\n            case \"19\":\n                return {\n                    main: _(\"Hail\"),\n                    description: _(\"Hail shower\"),\n                    customIcon: \"night-alt-hail-symbolic\",\n                    icons: [\"weather-showers-night\", \"weather-showers\", \"weather-showers-scattered\", \"weather-severe-alert\"]\n                };\n            case \"20\":\n                return {\n                    main: _(\"Hail\"),\n                    description: _(\"Hail shower\"),\n                    customIcon: \"day-hail-symbolic\",\n                    icons: [\"weather-showers-day\", \"weather-showers\", \"weather-showers-scattered\", \"weather-severe-alert\"]\n                };\n            case \"21\":\n                return {\n                    main: _(\"Hail\"),\n                    description: _(\"Hail\"),\n                    customIcon: \"hail-symbolic\",\n                    icons: [\"weather-showers\", \"weather-showers-scattered\", \"weather-severe-alert\"]\n                };\n            case \"22\":\n                return {\n                    main: _(\"Light snow\"),\n                    description: _(\"Light snow shower\"),\n                    customIcon: \"night-alt-snow-symbolic\",\n                    icons: [\"weather-snow-scattered\", \"weather-snow\", \"weather-severe-alert\"]\n                };\n            case \"23\":\n                return {\n                    main: _(\"Light snow\"),\n                    description: _(\"Light snow shower\"),\n                    customIcon: \"day-snow-symbolic\",\n                    icons: [\"weather-snow-scattered\", \"weather-snow\", \"weather-severe-alert\"]\n                };\n            case \"24\":\n                return {\n                    main: _(\"Light snow\"),\n                    description: _(\"Light snow\"),\n                    customIcon: \"snow-symbolic\",\n                    icons: [\"weather-snow-scattered\", \"weather-snow\", \"weather-severe-alert\"]\n                };\n            case \"25\":\n                return {\n                    main: _(\"Heavy snow\"),\n                    description: _(\"Heavy snow shower\"),\n                    customIcon: \"night-alt-snow-symbolic\",\n                    icons: [\"weather-snow\", \"weather-snow-scattered\", \"weather-severe-alert\"]\n                };\n            case \"26\":\n                return {\n                    main: _(\"Heavy snow\"),\n                    description: _(\"Heavy snow shower\"),\n                    customIcon: \"day-snow-symbolic\",\n                    icons: [\"weather-snow\", \"weather-snow-scattered\", \"weather-severe-alert\"]\n                };\n            case \"27\":\n                return {\n                    main: _(\"Heavy snow\"),\n                    description: _(\"Heavy snow\"),\n                    customIcon: \"snow-symbolic\",\n                    icons: [\"weather-snow\", \"weather-snow-scattered\", \"weather-severe-alert\"]\n                };\n            case \"28\":\n                return {\n                    main: _(\"Thunder\"),\n                    description: _(\"Thunder shower\"),\n                    customIcon: \"day-storm-showers-symbolic\",\n                    icons: [\"weather-storm\", \"weather-severe-alert\"]\n                };\n            case \"29\":\n                return {\n                    main: _(\"Thunder\"),\n                    description: _(\"Thunder shower\"),\n                    customIcon: \"night-alt-storm-showers-symbolic\",\n                    icons: [\"weather-storm\", \"weather-severe-alert\"]\n                };\n            case \"30\":\n                return {\n                    main: _(\"Thunder\"),\n                    description: _(\"Thunder\"),\n                    customIcon: \"thunderstorm-symbolic\",\n                    icons: [\"weather-storm\", \"weather-severe-alert\"]\n                };\n            default:\n                return {\n                    main: _(\"Unknown\"),\n                    description: _(\"Unknown\"),\n                    customIcon: \"cloud-refresh-symbolic\",\n                    icons: [\"weather-severe-alert\"]\n                };\n        }\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/lib/commandRunner.ts\n\nconst { spawnCommandLineAsyncIO } = imports.misc.util;\nasync function SpawnProcessJson(command) {\n    let response = await SpawnProcess(command);\n    if (!response.Success)\n        return response;\n    try {\n        response.Data = JSON.parse(response.Data);\n    }\n    catch (e) {\n        Log.Instance.Error(\"Error: Command response is not JSON. The response: \" + response.Data);\n        response.Success = false;\n        response.ErrorData = {\n            Code: -1,\n            Message: null,\n            Type: \"jsonParse\",\n        };\n    }\n    finally {\n        return response;\n    }\n}\nasync function SpawnProcess(command) {\n    let cmd = \"\";\n    for (let index = 0; index < command.length; index++) {\n        const element = command[index];\n        cmd += \"'\" + element + \"' \";\n    }\n    let response = await new Promise((resolve, reject) => {\n        spawnCommandLineAsyncIO(cmd, (aStdout, err, exitCode) => {\n            let result = {\n                Success: exitCode == 0,\n                ErrorData: null,\n                Data: aStdout !== null && aStdout !== void 0 ? aStdout : null\n            };\n            if (exitCode != 0) {\n                result.ErrorData = {\n                    Code: exitCode,\n                    Message: err !== null && err !== void 0 ? err : null,\n                    Type: \"unknown\"\n                };\n            }\n            resolve(result);\n            return result;\n        });\n    });\n    return response;\n}\nfunction OpenUrl(element) {\n    if (!element.url)\n        return;\n    imports.gi.Gio.app_info_launch_default_for_uri(element.url, global.create_app_launch_context());\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/weatherbutton.ts\n\nconst { Button } = imports.gi.St;\nconst { SignalManager } = imports.misc.signalManager;\nclass WeatherButton {\n    constructor(options, doNotAddPadding = false) {\n        this.signals = new SignalManager();\n        this.disabled = false;\n        this.Hovered = new Event();\n        this.Clicked = new Event();\n        this.actor = new Button(options);\n        this.actor.add_style_class_name(\"popup-menu-item\");\n        if (doNotAddPadding)\n            this.actor.set_style('padding: 0px; border-radius: 2px;');\n        else\n            this.actor.set_style('padding-top: 0px;padding-bottom: 0px; padding-right: 2px; padding-left: 2px; border-radius: 2px;');\n        this.signals.connect(this.actor, 'enter-event', this.handleEnter, this);\n        this.signals.connect(this.actor, 'leave-event', this.handleLeave, this);\n        this.actor.connect(\"clicked\", () => this.clicked());\n        this.actor.connect(\"enter-event\", (actor, event) => this.hovered(event));\n    }\n    handleEnter(actor) {\n        if (!this.disabled)\n            this.actor.add_style_pseudo_class('active');\n    }\n    handleLeave() {\n        this.actor.remove_style_pseudo_class('active');\n    }\n    disable() {\n        this.disabled = true;\n        this.actor.reactive = false;\n    }\n    enable() {\n        this.disabled = false;\n        this.actor.reactive = true;\n    }\n    clicked() {\n        if (!this.disabled) {\n            this.actor.add_style_pseudo_class('active');\n            this.Clicked.Invoke(this, null);\n        }\n    }\n    hovered(event) {\n        this.Hovered.Invoke(this, event);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiCurrentWeather.ts\n\n\n\n\n\nconst { Bin, BoxLayout, IconType: uiCurrentWeather_IconType, Label, Icon, Align } = imports.gi.St;\nconst uiCurrentWeather_Lang = imports.lang;\nconst STYLE_SUMMARYBOX = 'weather-current-summarybox';\nconst STYLE_SUMMARY = 'weather-current-summary';\nconst STYLE_DATABOX = 'weather-current-databox';\nconst STYLE_ICON = 'weather-current-icon';\nconst STYLE_ICONBOX = 'weather-current-iconbox';\nconst STYLE_DATABOX_CAPTIONS = 'weather-current-databox-captions';\nconst STYLE_ASTRONOMY = 'weather-current-astronomy';\nconst STYLE_DATABOX_VALUES = 'weather-current-databox-values';\nconst STYLE_CURRENT = 'current';\nconst STYLE_LOCATION_SELECTOR = 'location-selector';\nclass CurrentWeather {\n    constructor(app) {\n        this.app = app;\n        this.actor = new Bin();\n        this.actor.style_class = STYLE_CURRENT;\n        this.app.config.LocStore.StoreChanged.Subscribe((s, a) => this.onLocationStorageChanged(s, a));\n    }\n    Display(weather, config) {\n        try {\n            if (this.app.config.LocStore.ShouldShowLocationSelectors(config.CurrentLocation))\n                this.ShowLocationSelectors();\n            else\n                this.HideLocationSelectors();\n            let location = GenerateLocationText(weather, config);\n            this.SetLocation(location, weather.location.url);\n            this.SetConditionText(weather.condition.description);\n            this.SetWeatherIcon(weather.condition.icons, weather.condition.customIcon);\n            this.SetTemperature(weather.temperature);\n            this.SetHumidity(weather.humidity);\n            this.SetWind(weather.wind.speed, weather.wind.degree);\n            this.SetPressure(weather.pressure);\n            this.SetAPIUniqueField(weather.extra_field);\n            if (config._showSunrise)\n                this.SetSunriseAndSunset(weather.sunrise, weather.sunset, weather.location.timeZone);\n            this.SetImmediatePrecipitation(weather.immediatePrecipitation, config);\n            return true;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"DisplayWeatherError: \" + e);\n            return false;\n        }\n    }\n    ;\n    UpdateIconType(iconType) {\n        this.weatherIcon.icon_type = iconType;\n    }\n    Destroy() {\n        if (this.actor.get_child() != null)\n            this.actor.get_child().destroy();\n    }\n    Rebuild(config, textColorStyle) {\n        this.Destroy();\n        this.weatherIcon = new Icon({\n            icon_type: config.IconType,\n            icon_size: 64,\n            icon_name: APPLET_ICON,\n            style_class: STYLE_ICON\n        });\n        let box = new BoxLayout({ style_class: STYLE_ICONBOX });\n        box.add_actor(this.weatherIcon);\n        box.add_actor(this.BuildMiddleColumn(config, textColorStyle));\n        box.add_actor(this.BuildRightColumn(textColorStyle, config));\n        this.actor.set_child(box);\n    }\n    ;\n    BuildMiddleColumn(config, textColorStyle) {\n        this.weatherSummary = new Label({ text: _('Loading ...'), style_class: STYLE_SUMMARY });\n        let middleColumn = new BoxLayout({ vertical: true, style_class: STYLE_SUMMARYBOX });\n        middleColumn.add_actor(this.BuildLocationSection());\n        middleColumn.add(this.weatherSummary, { expand: true, x_align: Align.MIDDLE, y_align: Align.MIDDLE, x_fill: false, y_fill: false });\n        this.immediatePrecipitationLabel = new Label({ style_class: \"weather-immediate-precipitation\" });\n        this.immediatePrecipitationBox = new Bin();\n        this.immediatePrecipitationBox.add_actor(this.immediatePrecipitationLabel);\n        this.immediatePrecipitationBox.hide();\n        middleColumn.add_actor(this.immediatePrecipitationBox);\n        if (config._showSunrise)\n            middleColumn.add_actor(this.BuildSunBox(config, textColorStyle));\n        return middleColumn;\n    }\n    BuildRightColumn(textColorStyle, config) {\n        let textOb = {\n            text: ELLIPSIS\n        };\n        this.temperatureLabel = new Label(textOb);\n        this.humidityLabel = new Label(textOb);\n        this.pressureLabel = new Label(textOb);\n        this.apiUniqueLabel = new Label({ text: '' });\n        this.apiUniqueCaptionLabel = new Label({ text: '', style: textColorStyle });\n        let rb_captions = new BoxLayout({ vertical: true, style_class: STYLE_DATABOX_CAPTIONS });\n        let rb_values = new BoxLayout({ vertical: true, style_class: STYLE_DATABOX_VALUES });\n        rb_captions.add_actor(new Label({ text: _('Temperature') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(new Label({ text: _('Humidity') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(new Label({ text: _('Pressure') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(new Label({ text: _('Wind') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(this.apiUniqueCaptionLabel);\n        rb_values.add_actor(this.temperatureLabel);\n        rb_values.add_actor(this.humidityLabel);\n        rb_values.add_actor(this.pressureLabel);\n        rb_values.add_actor(this.BuildWind(config));\n        rb_values.add_actor(this.apiUniqueLabel);\n        let rightColumn = new BoxLayout({ style_class: STYLE_DATABOX });\n        rightColumn.add_actor(rb_captions);\n        rightColumn.add_actor(rb_values);\n        return rightColumn;\n    }\n    BuildWind(config) {\n        let windBox = new BoxLayout({ vertical: false });\n        let iconPaddingBottom = Math.round(config.CurrentFontSize * 0.05);\n        let iconPaddingTop = Math.round(config.CurrentFontSize * 0.15);\n        let iconSize = Math.round(config.CurrentFontSize * 0.8);\n        this.windLabel = new Label({ text: ELLIPSIS });\n        this.windDirectionIcon = new Icon({\n            icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n            icon_name: APPLET_ICON,\n            icon_size: iconSize,\n            style: \"padding-right: 5px; padding-top: \" + iconPaddingTop + \"px; padding-bottom: \" + iconPaddingBottom + \"px;\"\n        });\n        if (!config._displayWindAsText)\n            windBox.add(this.windDirectionIcon, { x_fill: false, y_fill: true, x_align: Align.MIDDLE, y_align: Align.MIDDLE, expand: false });\n        windBox.add(this.windLabel);\n        return windBox;\n    }\n    BuildLocationSection() {\n        this.locationButton = new WeatherButton({ reactive: true, label: _('Refresh'), });\n        this.location = this.locationButton.actor;\n        this.location.connect(SIGNAL_CLICKED, () => {\n            if (this.app.encounteredError)\n                this.app.RefreshWeather(true);\n            else if (this.locationButton.url == null)\n                return;\n            else\n                OpenUrl(this.locationButton);\n        });\n        this.nextLocationButton = new WeatherButton({\n            reactive: true,\n            can_focus: true,\n            child: new Icon({\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: this.app.config.CurrentFontSize,\n                icon_name: \"custom-right-arrow-symbolic\",\n                style_class: STYLE_LOCATION_SELECTOR\n            }),\n        });\n        this.nextLocationButton.actor.connect(SIGNAL_CLICKED, uiCurrentWeather_Lang.bind(this, this.NextLocationClicked));\n        this.previousLocationButton = new WeatherButton({\n            reactive: true,\n            can_focus: true,\n            child: new Icon({\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: this.app.config.CurrentFontSize,\n                icon_name: \"custom-left-arrow-symbolic\",\n                style_class: STYLE_LOCATION_SELECTOR\n            }),\n        });\n        this.previousLocationButton.actor.connect(SIGNAL_CLICKED, uiCurrentWeather_Lang.bind(this, this.PreviousLocationClicked));\n        let box = new BoxLayout();\n        box.add(this.previousLocationButton.actor, { x_fill: false, x_align: Align.START, y_align: Align.MIDDLE, expand: false });\n        box.add(this.location, { x_fill: true, x_align: Align.MIDDLE, y_align: Align.MIDDLE, expand: true });\n        box.add(this.nextLocationButton.actor, { x_fill: false, x_align: Align.END, y_align: Align.MIDDLE, expand: false });\n        return box;\n    }\n    BuildSunBox(config, textColorStyle) {\n        let sunBin = new Bin();\n        this.sunriseLabel = new Label({ text: ELLIPSIS, style: textColorStyle });\n        this.sunsetLabel = new Label({ text: ELLIPSIS, style: textColorStyle });\n        let sunriseBox = new BoxLayout();\n        let sunsetBox = new BoxLayout();\n        if (config._showSunrise) {\n            let sunsetIcon = new Icon({\n                icon_name: \"sunset-symbolic\",\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: 25,\n                style: textColorStyle\n            });\n            let sunriseIcon = new Icon({\n                icon_name: \"sunrise-symbolic\",\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: 25,\n                style: textColorStyle\n            });\n            sunriseBox.add_actor(sunriseIcon);\n            sunsetBox.add_actor(sunsetIcon);\n        }\n        let textOptions = {\n            x_fill: false,\n            x_align: Align.START,\n            y_align: Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        };\n        sunriseBox.add(this.sunriseLabel, textOptions);\n        sunsetBox.add(this.sunsetLabel, textOptions);\n        let ab_spacerLabel = new Label({ text: BLANK });\n        let sunBox = new BoxLayout({ style_class: STYLE_ASTRONOMY });\n        sunBox.add_actor(sunriseBox);\n        sunBox.add_actor(ab_spacerLabel);\n        sunBox.add_actor(sunsetBox);\n        sunBin.set_child(sunBox);\n        return sunBin;\n    }\n    SetImmediatePrecipitation(precip, config) {\n        if (!config._immediatePrecip || !precip || precip.end == null || precip.start == null) {\n            this.immediatePrecipitationBox.hide();\n            return;\n        }\n        this.immediatePrecipitationBox.show();\n        if (precip.start == -1) {\n            this.immediatePrecipitationBox.hide();\n        }\n        else if (precip.start == 0) {\n            if (precip.end != -1)\n                this.immediatePrecipitationLabel.text = _(\"Precipitation will end in {precipEnd} minutes\", { precipEnd: precip.end });\n            else\n                this.immediatePrecipitationLabel.text = _(\"Precipitation won't end in within an hour\");\n        }\n        else {\n            this.immediatePrecipitationLabel.text = _(\"Precipitation will start within {precipStart} minutes\", { precipStart: precip.start });\n        }\n    }\n    SetSunriseAndSunset(sunrise, sunset, tz) {\n        let sunriseText = \"\";\n        let sunsetText = \"\";\n        if (sunrise != null && sunset != null && this.app.config._showSunrise) {\n            sunriseText = (GetHoursMinutes(sunrise, this.app.config.currentLocale, this.app.config._show24Hours, tz));\n            sunsetText = (GetHoursMinutes(sunset, this.app.config.currentLocale, this.app.config._show24Hours, tz));\n        }\n        this.sunriseLabel.text = sunriseText;\n        this.sunsetLabel.text = sunsetText;\n    }\n    SetAPIUniqueField(extra_field) {\n        this.apiUniqueLabel.text = \"\";\n        this.apiUniqueCaptionLabel.text = \"\";\n        if (!!extra_field) {\n            this.apiUniqueCaptionLabel.text = _(extra_field.name) + LocalizedColon(this.app.config.currentLocale);\n            let value;\n            switch (extra_field.type) {\n                case \"percent\":\n                    value = PrecentToLocale(extra_field.value, this.app.config.currentLocale);\n                    break;\n                case \"temperature\":\n                    value = TempToUserConfig(extra_field.value, this.app.config);\n                    break;\n                default:\n                    value = _(extra_field.value);\n                    break;\n            }\n            this.apiUniqueLabel.text = value;\n        }\n    }\n    SetWeatherIcon(iconNames, customIconName) {\n        if (this.app.config._useCustomMenuIcons) {\n            this.weatherIcon.icon_name = customIconName;\n            this.UpdateIconType(uiCurrentWeather_IconType.SYMBOLIC);\n        }\n        else {\n            let icon = WeatherIconSafely(iconNames, this.app.config.IconType);\n            this.weatherIcon.icon_name = icon;\n            this.UpdateIconType(this.app.config.IconType);\n        }\n    }\n    SetConditionText(condition) {\n        this.weatherSummary.text = condition;\n    }\n    SetTemperature(temperature) {\n        let temp = TempToUserConfig(temperature, this.app.config);\n        if (temp == null)\n            return;\n        this.temperatureLabel.text = temp;\n    }\n    SetHumidity(humidity) {\n        if (humidity != null) {\n            this.humidityLabel.text = PrecentToLocale(humidity, this.app.config.currentLocale);\n        }\n    }\n    async SetWind(windSpeed, windDegree) {\n        let wind_direction = CompassDirection(windDegree);\n        this.windDirectionIcon.icon_name = wind_direction;\n        if (this.app.config._displayWindAsText) {\n            let dirText = CompassDirectionText(windDegree);\n            this.windLabel.text = `${(dirText != null ? _(dirText) + \" \" : \"\")}${MPStoUserUnits(windSpeed, this.app.config.WindSpeedUnit)}`;\n        }\n        else {\n            this.windLabel.text = MPStoUserUnits(windSpeed, this.app.config.WindSpeedUnit);\n        }\n        if (this.app.config.WindSpeedUnit != \"Beaufort\")\n            this.windLabel.text += \" \" + _(this.app.config.WindSpeedUnit);\n    }\n    SetPressure(pressure) {\n        if (pressure != null) {\n            this.pressureLabel.text = PressToUserUnits(pressure, this.app.config._pressureUnit) + ' ' + _(this.app.config._pressureUnit);\n        }\n    }\n    SetLocation(locationString, url) {\n        this.location.label = locationString;\n        this.locationButton.url = url;\n        if (!url)\n            this.locationButton.disable();\n    }\n    NextLocationClicked() {\n        let loc = this.app.config.SwitchToNextLocation();\n        this.app.RefreshAndRebuild(loc);\n    }\n    PreviousLocationClicked() {\n        let loc = this.app.config.SwitchToPreviousLocation();\n        this.app.RefreshAndRebuild(loc);\n    }\n    onLocationStorageChanged(sender, itemCount) {\n        logger_Log.Instance.Debug(\"On location storage callback called, number of locations now \" + itemCount.toString());\n        if (this.app.config.LocStore.ShouldShowLocationSelectors(this.app.config.CurrentLocation))\n            this.ShowLocationSelectors();\n        else\n            this.HideLocationSelectors();\n    }\n    ShowLocationSelectors() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.nextLocationButton) === null || _a === void 0 ? void 0 : _a.actor) === null || _b === void 0 ? void 0 : _b.show();\n        (_d = (_c = this.previousLocationButton) === null || _c === void 0 ? void 0 : _c.actor) === null || _d === void 0 ? void 0 : _d.show();\n    }\n    HideLocationSelectors() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.nextLocationButton) === null || _a === void 0 ? void 0 : _a.actor) === null || _b === void 0 ? void 0 : _b.hide();\n        (_d = (_c = this.previousLocationButton) === null || _c === void 0 ? void 0 : _c.actor) === null || _d === void 0 ? void 0 : _d.hide();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiForecasts.ts\n\n\n\n\n\nconst { Bin: uiForecasts_Bin, BoxLayout: uiForecasts_BoxLayout, Label: uiForecasts_Label, Icon: uiForecasts_Icon, Widget } = imports.gi.St;\nconst { GridLayout } = imports.gi.Clutter;\nconst STYLE_FORECAST_ICON = 'weather-forecast-icon';\nconst STYLE_FORECAST_DATABOX = 'weather-forecast-databox';\nconst STYLE_FORECAST_DAY = 'weather-forecast-day';\nconst STYLE_FORECAST_SUMMARY = 'weather-forecast-summary';\nconst STYLE_FORECAST_TEMPERATURE = 'weather-forecast-temperature';\nconst STYLE_FORECAST_BOX = 'weather-forecast-box';\nconst STYLE_FORECAST_CONTAINER = 'weather-forecast-container';\nconst STYLE_FORECAST = 'forecast';\nclass UIForecasts {\n    constructor(app) {\n        this.DayClicked = new Event();\n        this.DayHovered = new Event();\n        this.app = app;\n        this.actor = new uiForecasts_Bin({ style_class: STYLE_FORECAST });\n        this.DayClickedCallback = (s, e) => this.OnDayClicked(s, e);\n        this.DayHoveredCallback = (s, e) => this.OnDayHovered(s, e);\n    }\n    UpdateIconType(iconType) {\n        var _a;\n        if (!this.forecasts)\n            return;\n        for (let i = 0; i < this.forecasts.length; i++) {\n            if (!((_a = this.forecasts[i]) === null || _a === void 0 ? void 0 : _a.Icon))\n                continue;\n            this.forecasts[i].Icon.icon_type = iconType;\n        }\n    }\n    Display(weather, config) {\n        try {\n            if (!weather.forecasts)\n                return false;\n            let len = Math.min(this.forecasts.length, weather.forecasts.length);\n            for (let i = 0; i < len; i++) {\n                let forecastData = weather.forecasts[i];\n                let forecastUi = this.forecasts[i];\n                let comment = (config._shortConditions) ? forecastData.condition.main : forecastData.condition.description;\n                let dayName = GetDayName(forecastData.date, config.currentLocale, config._showForecastDates, weather.location.timeZone);\n                forecastUi.Day.actor.label = dayName;\n                forecastUi.Day.Hovered.Unsubscribe(this.DayHoveredCallback);\n                forecastUi.Day.Clicked.Unsubscribe(this.DayClickedCallback);\n                let hasHourlyWeather = false;\n                for (let index = 0; index < this.app.GetMaxHourlyForecasts(); index++) {\n                    const element = weather.hourlyForecasts[index];\n                    if (!element)\n                        break;\n                    if (OnSameDay(element.date, forecastData.date, config)) {\n                        hasHourlyWeather = true;\n                        break;\n                    }\n                }\n                forecastUi.Day.ID = forecastData.date;\n                if (hasHourlyWeather) {\n                    forecastUi.Day.enable();\n                    forecastUi.Day.Hovered.Subscribe(this.DayHoveredCallback);\n                    forecastUi.Day.Clicked.Subscribe(this.DayClickedCallback);\n                }\n                else {\n                    forecastUi.Day.disable();\n                }\n                forecastUi.Temperature.text = TempRangeToUserConfig(forecastData.temp_min, forecastData.temp_max, config);\n                forecastUi.Summary.text = comment;\n                forecastUi.Icon.icon_name = (config._useCustomMenuIcons) ? forecastData.condition.customIcon : WeatherIconSafely(forecastData.condition.icons, config.IconType);\n            }\n            return true;\n        }\n        catch (e) {\n            this.app.ShowError({\n                type: \"hard\",\n                detail: \"unknown\",\n                message: \"Forecast parsing failed: \" + e.toString(),\n                userError: false\n            });\n            logger_Log.Instance.Error(\"DisplayForecastError \" + e);\n            return false;\n        }\n    }\n    ;\n    Rebuild(config, textColorStyle) {\n        this.Destroy();\n        this.forecasts = [];\n        this.grid = new GridLayout({\n            orientation: config._verticalOrientation\n        });\n        this.grid.set_column_homogeneous(true);\n        let table = new Widget({\n            layout_manager: this.grid,\n            style_class: STYLE_FORECAST_CONTAINER\n        });\n        this.actor.set_child(table);\n        let maxDays = this.app.GetMaxForecastDays();\n        let maxRow = config._forecastRows;\n        let maxCol = config._forecastColumns;\n        if (config._verticalOrientation) {\n            [maxRow, maxCol] = [maxCol, maxRow];\n        }\n        let curRow = 0;\n        let curCol = 0;\n        for (let i = 0; i < maxDays; i++) {\n            let forecastWeather = {};\n            if (curCol >= maxCol) {\n                curRow++;\n                curCol = 0;\n            }\n            if (curRow >= maxRow)\n                break;\n            forecastWeather.Icon = new uiForecasts_Icon({\n                icon_type: config.IconType,\n                icon_size: 48,\n                icon_name: APPLET_ICON,\n                style_class: STYLE_FORECAST_ICON\n            });\n            forecastWeather.Day = new WeatherButton({\n                style_class: STYLE_FORECAST_DAY,\n                reactive: true,\n                style: textColorStyle,\n                label: \"\"\n            }, true);\n            forecastWeather.Day.disable();\n            forecastWeather.Summary = new uiForecasts_Label({\n                style_class: STYLE_FORECAST_SUMMARY,\n                reactive: true\n            });\n            forecastWeather.Temperature = new uiForecasts_Label({\n                style_class: STYLE_FORECAST_TEMPERATURE\n            });\n            let by = new uiForecasts_BoxLayout({\n                vertical: true,\n                style_class: STYLE_FORECAST_DATABOX\n            });\n            by.add(forecastWeather.Day.actor, { x_align: imports.gi.St.Align.START, expand: false, x_fill: false });\n            by.add_actor(forecastWeather.Summary);\n            by.add_actor(forecastWeather.Temperature);\n            let bb = new uiForecasts_BoxLayout({\n                style_class: STYLE_FORECAST_BOX\n            });\n            bb.add_actor(forecastWeather.Icon);\n            bb.add_actor(by);\n            this.forecasts[i] = forecastWeather;\n            if (!config._verticalOrientation) {\n                this.grid.attach(bb, curCol, curRow, 1, 1);\n            }\n            else {\n                this.grid.attach(bb, curRow, curCol, 1, 1);\n            }\n            curCol++;\n        }\n    }\n    Destroy() {\n        if (this.actor.get_child() != null)\n            this.actor.get_child().destroy();\n    }\n    OnDayHovered(sender, event) {\n        logger_Log.Instance.Debug(\"Day Hovered: \" + sender.ID.toDateString());\n        this.DayHovered.Invoke(sender, sender.ID);\n    }\n    OnDayClicked(sender, event) {\n        logger_Log.Instance.Debug(\"Day Clicked: \" + sender.ID.toDateString());\n        this.DayClicked.Invoke(sender, sender.ID);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiHourlyForecasts.ts\n\n\n\nconst { PolicyType } = imports.gi.Gtk;\nconst { addTween } = imports.ui.tweener;\nconst { BoxLayout: uiHourlyForecasts_BoxLayout, Side, Label: uiHourlyForecasts_Label, ScrollView, Icon: uiHourlyForecasts_Icon, Align: uiHourlyForecasts_Align } = imports.gi.St;\nclass UIHourlyForecasts {\n    constructor(app, menu) {\n        this.hourlyToggled = false;\n        this.app = app;\n        this.actor = new ScrollView({\n            hscrollbar_policy: PolicyType.AUTOMATIC,\n            vscrollbar_policy: PolicyType.NEVER,\n            x_fill: true,\n            y_fill: true,\n            y_align: uiHourlyForecasts_Align.MIDDLE,\n            x_align: uiHourlyForecasts_Align.MIDDLE\n        });\n        this.actor.overlay_scrollbars = true;\n        let vScroll = this.actor.get_vscroll_bar();\n        vScroll.connect(\"scroll-start\", () => { menu.passEvents = true; });\n        vScroll.connect(\"scroll-stop\", () => { menu.passEvents = false; });\n        let hScroll = this.actor.get_hscroll_bar();\n        hScroll.connect(\"scroll-start\", () => { menu.passEvents = true; });\n        hScroll.connect(\"scroll-stop\", () => { menu.passEvents = false; });\n        this.actor.hide();\n        this.actor.set_clip_to_allocation(true);\n        this.container = new uiHourlyForecasts_BoxLayout({ style_class: \"hourly-box\" });\n        this.actor.add_actor(this.container);\n    }\n    get Toggled() {\n        return this.hourlyToggled;\n    }\n    ScrollTo(date) {\n        if (this.hourlyForecastDates == null)\n            return;\n        let itemWidth = this.GetHourlyBoxItemWidth();\n        let midnightIndex = null;\n        for (let index = 0; index < this.hourlyForecastDates.length; index++) {\n            if (OnSameDay(this.hourlyForecastDates[index], date, this.app.config))\n                midnightIndex = index;\n            const element = AddHours(this.hourlyForecastDates[index], -6);\n            if (OnSameDay(element, date, this.app.config)) {\n                this.actor.get_hscroll_bar().get_adjustment().set_value(index * itemWidth);\n                break;\n            }\n        }\n        if (midnightIndex != null)\n            this.actor.get_hscroll_bar().get_adjustment().set_value(midnightIndex * itemWidth);\n    }\n    UpdateIconType(iconType) {\n        var _a;\n        if (!this.hourlyForecasts)\n            return;\n        for (let i = 0; i < this.hourlyForecasts.length; i++) {\n            if (!((_a = this.hourlyForecasts[i]) === null || _a === void 0 ? void 0 : _a.Icon))\n                continue;\n            this.hourlyForecasts[i].Icon.icon_type = iconType;\n        }\n    }\n    Display(forecasts, config, tz) {\n        this.hourlyForecastDates = [];\n        let max = Math.min(forecasts.length, this.hourlyForecasts.length);\n        for (let index = 0; index < max; index++) {\n            const hour = forecasts[index];\n            const ui = this.hourlyForecasts[index];\n            this.hourlyForecastDates.push(hour.date);\n            ui.Hour.text = GetHoursMinutes(hour.date, config.currentLocale, config._show24Hours, tz, config._shortHourlyTime);\n            ui.Temperature.text = TempToUserConfig(hour.temp, config);\n            ui.Icon.icon_name = (config._useCustomMenuIcons) ? hour.condition.customIcon : WeatherIconSafely(hour.condition.icons, config.IconType);\n            ui.Summary.text = hour.condition.main;\n            ui.Precipitation.text = this.GeneratePrecipitationText(hour.precipitation, config);\n        }\n        this.AdjustHourlyBoxItemWidth();\n        return !(max <= 0);\n    }\n    async Show() {\n        this.actor.show();\n        this.actor.hide();\n        this.AdjustHourlyBoxItemWidth();\n        let [minWidth, naturalWidth] = this.actor.get_preferred_width(-1);\n        let [minHeight, naturalHeight] = this.actor.get_preferred_height(minWidth);\n        logger_Log.Instance.Debug(\"hourlyScrollView requested height and is set to: \" + naturalHeight);\n        this.actor.set_width(minWidth);\n        this.actor.show();\n        this.actor.style = \"min-height: \" + naturalHeight.toString() + \"px;\";\n        this.hourlyToggled = true;\n        return new Promise((resolve, reject) => {\n            if (global.settings.get_boolean(\"desktop-effects-on-menus\")) {\n                this.actor.height = 0;\n                addTween(this.actor, {\n                    height: naturalHeight,\n                    time: 0.25,\n                    onUpdate: () => { },\n                    onComplete: () => {\n                        this.actor.set_height(naturalHeight);\n                        resolve();\n                    }\n                });\n            }\n            else {\n                this.actor.set_height(naturalHeight);\n                resolve();\n            }\n        });\n    }\n    async Hide() {\n        let hscroll = this.actor.get_hscroll_bar();\n        this.hourlyToggled = false;\n        return new Promise((resolve, reject) => {\n            if (global.settings.get_boolean(\"desktop-effects-on-menus\")) {\n                addTween(this.actor, {\n                    height: 0,\n                    time: 0.25,\n                    onUpdate: () => { },\n                    onComplete: () => {\n                        this.actor.set_height(-1);\n                        this.actor.style = null;\n                        this.actor.hide();\n                        hscroll.get_adjustment().set_value(0);\n                        resolve();\n                    }\n                });\n            }\n            else {\n                this.actor.style = null;\n                this.actor.set_height(-1);\n                this.actor.hide();\n                resolve();\n            }\n        });\n    }\n    AdjustHourlyBoxItemWidth() {\n        let requiredWidth = this.GetHourlyBoxItemWidth();\n        for (let index = 0; index < this.hourlyContainers.length; index++) {\n            const element = this.hourlyContainers[index];\n            element.set_width(requiredWidth);\n        }\n    }\n    GetHourlyBoxItemWidth() {\n        let requiredWidth = 0;\n        for (let index = 0; index < this.hourlyContainers.length; index++) {\n            const ui = this.hourlyForecasts[index];\n            let hourWidth = ui.Hour.get_preferred_width(-1)[1];\n            let iconWidth = ui.Icon.get_preferred_width(-1)[1];\n            let summaryWidth = ui.Summary.get_preferred_width(-1)[1];\n            let temperatureWidth = ui.Temperature.get_preferred_width(-1)[1];\n            let precipitationWidth = ui.Precipitation.get_preferred_width(-1)[1];\n            if (precipitationWidth > iconWidth || summaryWidth > iconWidth) {\n                if (precipitationWidth > summaryWidth)\n                    precipitationWidth += 10;\n                else\n                    summaryWidth += 10;\n            }\n            if (requiredWidth < hourWidth)\n                requiredWidth = hourWidth;\n            if (requiredWidth < iconWidth)\n                requiredWidth = iconWidth;\n            if (requiredWidth < summaryWidth)\n                requiredWidth = summaryWidth;\n            if (requiredWidth < temperatureWidth)\n                requiredWidth = temperatureWidth;\n            if (requiredWidth < precipitationWidth)\n                requiredWidth = precipitationWidth;\n        }\n        return requiredWidth;\n    }\n    Destroy() {\n        this.container.destroy_all_children();\n    }\n    Rebuild(config, textColorStyle) {\n        this.Destroy();\n        let hours = this.app.GetMaxHourlyForecasts();\n        this.hourlyForecasts = [];\n        this.hourlyContainers = [];\n        for (let index = 0; index < hours; index++) {\n            let box = new uiHourlyForecasts_BoxLayout({ vertical: true, style_class: \"hourly-box-item\" });\n            this.hourlyContainers.push(box);\n            this.hourlyForecasts.push({\n                Hour: new uiHourlyForecasts_Label({ text: \"Hour\", style_class: \"hourly-time\", style: textColorStyle }),\n                Icon: new uiHourlyForecasts_Icon({\n                    icon_type: config.IconType,\n                    icon_size: 24,\n                    icon_name: APPLET_ICON,\n                    style_class: \"hourly-icon\"\n                }),\n                Precipitation: new uiHourlyForecasts_Label({ text: \" \", style_class: \"hourly-data\" }),\n                Summary: new uiHourlyForecasts_Label({ text: _(ELLIPSIS), style_class: \"hourly-data\" }),\n                Temperature: new uiHourlyForecasts_Label({ text: _(ELLIPSIS), style_class: \"hourly-data\" })\n            });\n            this.hourlyForecasts[index].Summary.clutter_text.set_line_wrap(true);\n            box.add_child(this.hourlyForecasts[index].Hour);\n            box.add_child(this.hourlyForecasts[index].Icon);\n            box.add_child(this.hourlyForecasts[index].Summary);\n            box.add_child(this.hourlyForecasts[index].Temperature);\n            box.add_child(this.hourlyForecasts[index].Precipitation);\n            this.container.add(box, {\n                x_fill: true,\n                x_align: uiHourlyForecasts_Align.MIDDLE,\n                y_align: uiHourlyForecasts_Align.MIDDLE,\n                y_fill: true,\n                expand: true\n            });\n        }\n    }\n    GeneratePrecipitationText(precip, config) {\n        if (!precip)\n            return \"\";\n        let precipitationText = \"\";\n        if (!!precip.volume && precip.volume > 0) {\n            precipitationText = MillimeterToUserUnits(precip.volume, config.DistanceUnit) + \" \" + ((config.DistanceUnit == \"metric\") ? _(\"mm\") : _(\"in\"));\n        }\n        if (!!precip.chance) {\n            precipitationText = (NotEmpty(precipitationText)) ? (precipitationText + \", \") : \"\";\n            precipitationText += (Math.round(precip.chance).toString() + \"%\");\n        }\n        return precipitationText;\n    }\n    GetScrollViewHeight() {\n        let boxItemHeight = 0;\n        for (let index = 0; index < this.hourlyContainers.length; index++) {\n            const ui = this.hourlyForecasts[index];\n            logger_Log.Instance.Debug(\"Height requests of Hourly box Items: \" + index);\n            let hourHeight = ui.Hour.get_preferred_height(-1)[1];\n            let iconHeight = ui.Icon.get_preferred_height(-1)[1];\n            let summaryHeight = ui.Summary.get_preferred_height(-1)[1];\n            let temperatureHeight = ui.Temperature.get_preferred_height(-1)[1];\n            let precipitationHeight = ui.Precipitation.get_preferred_height(-1)[1];\n            let itemHeight = hourHeight + iconHeight + summaryHeight + temperatureHeight + precipitationHeight;\n            if (boxItemHeight < itemHeight)\n                boxItemHeight = itemHeight;\n        }\n        logger_Log.Instance.Debug(\"Final Hourly box item height is: \" + boxItemHeight);\n        let scrollBarHeight = this.actor.get_hscroll_bar().get_preferred_width(-1)[1];\n        logger_Log.Instance.Debug(\"Scrollbar height is \" + scrollBarHeight);\n        let theme = this.container.get_theme_node();\n        let styling = theme.get_margin(Side.TOP) + theme.get_margin(Side.BOTTOM) + theme.get_padding(Side.TOP) + theme.get_padding(Side.BOTTOM);\n        logger_Log.Instance.Debug(\"ScollbarBox vertical padding and margin is: \" + styling);\n        return (boxItemHeight + scrollBarHeight + styling);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiBar.ts\n\n\n\n\n\nconst { BoxLayout: uiBar_BoxLayout, IconType: uiBar_IconType, Label: uiBar_Label, Icon: uiBar_Icon, Align: uiBar_Align, } = imports.gi.St;\nconst STYLE_BAR = 'bottombar';\nclass UIBar {\n    constructor(app) {\n        this.ToggleClicked = new Event();\n        this.providerCreditButton = null;\n        this.hourlyButton = null;\n        this._timestamp = null;\n        this.app = app;\n        this.actor = new uiBar_BoxLayout({ vertical: false, style_class: STYLE_BAR });\n    }\n    get Actor() {\n        return this.actor;\n    }\n    SwitchButtonToShow() {\n        var _a;\n        if (!!((_a = this.hourlyButton) === null || _a === void 0 ? void 0 : _a.actor.child))\n            this.hourlyButton.actor.child.icon_name = \"custom-down-arrow-symbolic\";\n    }\n    SwitchButtonToHide() {\n        var _a;\n        if (!!((_a = this.hourlyButton) === null || _a === void 0 ? void 0 : _a.actor.child))\n            this.hourlyButton.actor.child.icon_name = \"custom-up-arrow-symbolic\";\n    }\n    DisplayErrorMessage(msg) {\n        this._timestamp.text = msg;\n    }\n    Display(weather, provider, config, shouldShowToggle) {\n        this.providerCreditButton.actor.label = _(\"Powered by\") + \" \" + provider.prettyName;\n        this.providerCreditButton.url = provider.website;\n        let lastUpdatedTime = AwareDateString(weather.date, config.currentLocale, config._show24Hours);\n        this._timestamp.text = _(\"As of {lastUpdatedTime}\", { \"lastUpdatedTime\": lastUpdatedTime });\n        if (weather.location.distanceFrom != null) {\n            let stringFormat = {\n                distance: MetreToUserUnits(weather.location.distanceFrom, config.DistanceUnit).toString(),\n                distanceUnit: this.BigDistanceUnitFor(config.DistanceUnit)\n            };\n            this._timestamp.text += `, ${_(\"{distance}{distanceUnit} from you\", stringFormat)}`;\n        }\n        if (!shouldShowToggle)\n            this.HideHourlyToggle();\n        return true;\n    }\n    Destroy() {\n        this.actor.destroy_all_children();\n    }\n    Rebuild(config) {\n        this.Destroy();\n        this._timestamp = new uiBar_Label({ text: \"Placeholder\" });\n        this.actor.add(this._timestamp, {\n            x_fill: false,\n            x_align: uiBar_Align.START,\n            y_align: uiBar_Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        });\n        this.hourlyButton = new WeatherButton({\n            reactive: true,\n            can_focus: true,\n            child: new uiBar_Icon({\n                icon_type: uiBar_IconType.SYMBOLIC,\n                icon_size: config.CurrentFontSize + 3,\n                icon_name: \"custom-down-arrow-symbolic\",\n                style: \"margin: 2px 5px;\"\n            }),\n        });\n        this.hourlyButton.actor.connect(SIGNAL_CLICKED, () => this.ToggleClicked.Invoke(this, true));\n        this.actor.add(this.hourlyButton.actor, {\n            x_fill: false,\n            x_align: uiBar_Align.MIDDLE,\n            y_align: uiBar_Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        });\n        if (this.app.GetMaxHourlyForecasts() <= 0) {\n            this.HideHourlyToggle();\n        }\n        this.providerCreditButton = new WeatherButton({ label: _(ELLIPSIS), reactive: true });\n        this.providerCreditButton.actor.connect(SIGNAL_CLICKED, () => OpenUrl(this.providerCreditButton));\n        this.actor.add(this.providerCreditButton.actor, {\n            x_fill: false,\n            x_align: uiBar_Align.END,\n            y_align: uiBar_Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        });\n    }\n    BigDistanceUnitFor(unit) {\n        if (unit == \"imperial\")\n            return _(\"mi\");\n        return _(\"km\");\n    }\n    HideHourlyToggle() {\n        if (this.hourlyButton != null)\n            this.hourlyButton.actor.child = null;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiSeparator.ts\nconst { PopupSeparatorMenuItem } = imports.ui.popupMenu;\nclass UISeparator {\n    constructor() {\n        this.actor = new PopupSeparatorMenuItem();\n        this.actor.actor.remove_style_class_name(\"popup-menu-item\");\n    }\n    get Actor() {\n        return this.actor.actor;\n    }\n    Show() {\n        this.actor.actor.show();\n    }\n    Hide() {\n        this.actor.actor.hide();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui.ts\n\n\n\n\n\n\n\nconst { PopupMenuManager } = imports.ui.popupMenu;\nconst { BoxLayout: ui_BoxLayout, IconType: ui_IconType, Label: ui_Label } = imports.gi.St;\nconst ui_Lang = imports.lang;\nconst { AppletPopupMenu } = imports.ui.applet;\nconst { themeManager } = imports.ui.main;\nconst { SignalManager: ui_SignalManager } = imports.misc.signalManager;\nconst STYLE_WEATHER_MENU = 'weather-menu';\nclass UI {\n    constructor(app, orientation) {\n        this.lightTheme = false;\n        this.lastDateToggled = null;\n        this.App = app;\n        this.menuManager = new PopupMenuManager(this.App);\n        this.menu = new AppletPopupMenu(this.App, orientation);\n        this.menu.box.add_style_class_name(STYLE_WEATHER_MENU);\n        logger_Log.Instance.Debug(\"Popup Menu applied classes are: \" + this.menu.box.get_style_class_name());\n        this.menuManager.addMenu(this.menu);\n        this.menuManager._signals.connect(this.menu, \"open-state-changed\", this.PopupMenuToggled, this);\n        this.signals = new ui_SignalManager();\n        this.lightTheme = this.IsLightTheme();\n        this.BuildPopupMenu();\n        this.signals.connect(themeManager, 'theme-set', this.OnThemeChanged, this);\n    }\n    Toggle() {\n        this.menu.toggle();\n    }\n    async ToggleHourlyWeather() {\n        if (this.HourlyWeather.Toggled) {\n            await this.HideHourlyWeather();\n        }\n        else {\n            await this.ShowHourlyWeather();\n        }\n    }\n    Rebuild(config) {\n        this.ShowLoadingUi();\n        let textColorStyle = this.GetTextColorStyle();\n        this.CurrentWeather.Rebuild(config, textColorStyle);\n        this.HourlyWeather.Rebuild(config, textColorStyle);\n        this.FutureWeather.Rebuild(config, textColorStyle);\n        this.Bar.Rebuild(config);\n    }\n    UpdateIconType(iconType) {\n        if (iconType == ui_IconType.FULLCOLOR && this.App.config._useCustomMenuIcons)\n            return;\n        this.CurrentWeather.UpdateIconType(iconType);\n        this.FutureWeather.UpdateIconType(iconType);\n        this.HourlyWeather.UpdateIconType(iconType);\n    }\n    DisplayErrorMessage(msg, errorType) {\n        this.Bar.DisplayErrorMessage(msg);\n    }\n    Display(weather, config, provider) {\n        this.CurrentWeather.Display(weather, config);\n        this.FutureWeather.Display(weather, config);\n        let shouldShowToggle = this.HourlyWeather.Display(weather.hourlyForecasts, config, weather.location.timeZone);\n        this.Bar.Display(weather, provider, config, shouldShowToggle);\n        return true;\n    }\n    OnThemeChanged() {\n        this.HideHourlyWeather();\n        let newThemeIsLight = this.IsLightTheme();\n        if (newThemeIsLight != this.lightTheme) {\n            this.lightTheme = newThemeIsLight;\n        }\n        this.App.RefreshAndRebuild();\n    }\n    async PopupMenuToggled(caller, data) {\n        if (data == false) {\n            await delay(100);\n            this.HideHourlyWeather();\n        }\n    }\n    IsLightTheme() {\n        let color = this.menu.actor.get_theme_node().get_color(\"color\");\n        let luminance = (2126 * color.red + 7152 * color.green + 722 * color.blue) / 10000 / 255;\n        luminance = Math.abs(1 - luminance);\n        logger_Log.Instance.Debug(\"Theme is Light: \" + (luminance > 0.5));\n        return (luminance > 0.5);\n    }\n    ForegroundColor() {\n        let hex = this.menu.actor.get_theme_node().get_foreground_color().to_string().substring(0, 7);\n        return hex;\n    }\n    GetTextColorStyle() {\n        let hexColor = null;\n        if (this.lightTheme) {\n            hexColor = ShadeHexColor(this.ForegroundColor(), -0.40);\n        }\n        return \"color: \" + hexColor;\n    }\n    BuildPopupMenu() {\n        this.CurrentWeather = new CurrentWeather(this.App);\n        this.FutureWeather = new UIForecasts(this.App);\n        this.HourlyWeather = new UIHourlyForecasts(this.App, this.menu);\n        this.FutureWeather.DayClicked.Subscribe((s, e) => this.OnDayClicked(s, e));\n        this.Bar = new UIBar(this.App);\n        this.Bar.ToggleClicked.Subscribe(ui_Lang.bind(this, this.ToggleHourlyWeather));\n        this.ForecastSeparator = new UISeparator();\n        this.HourlySeparator = new UISeparator();\n        this.BarSeparator = new UISeparator();\n        this.HourlySeparator.Hide();\n        let mainBox = new ui_BoxLayout({ vertical: true });\n        mainBox.add_actor(this.CurrentWeather.actor);\n        mainBox.add_actor(this.HourlySeparator.Actor);\n        mainBox.add_actor(this.HourlyWeather.actor);\n        mainBox.add_actor(this.ForecastSeparator.Actor);\n        mainBox.add_actor(this.FutureWeather.actor);\n        mainBox.add_actor(this.BarSeparator.Actor);\n        mainBox.add_actor(this.Bar.Actor);\n        this.menu.addActor(mainBox);\n    }\n    ShowLoadingUi() {\n        this.CurrentWeather.Destroy();\n        this.FutureWeather.Destroy();\n        this.Bar.Destroy();\n        this.CurrentWeather.actor.set_child(new ui_Label({\n            text: _('Loading current weather ...')\n        }));\n        this.FutureWeather.actor.set_child(new ui_Label({\n            text: _('Loading future weather ...')\n        }));\n    }\n    async OnDayClicked(sender, date) {\n        if (!this.HourlyWeather.Toggled)\n            await this.ShowHourlyWeather();\n        else if (this.lastDateToggled == date) {\n            await this.HideHourlyWeather();\n            return;\n        }\n        this.HourlyWeather.ScrollTo(date);\n        this.lastDateToggled = date;\n    }\n    async ShowHourlyWeather() {\n        this.HourlySeparator.Show();\n        this.Bar.SwitchButtonToHide();\n        await this.HourlyWeather.Show();\n    }\n    async HideHourlyWeather() {\n        this.lastDateToggled = null;\n        this.HourlySeparator.Hide();\n        this.Bar.SwitchButtonToShow();\n        await this.HourlyWeather.Hide();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/darkSky.ts\n\n\nconst darkSky_Lang = imports.lang;\nclass DarkSky {\n    constructor(_app) {\n        this.prettyName = _(\"DarkSky\");\n        this.name = \"DarkSky\";\n        this.maxForecastSupport = 8;\n        this.website = \"https://darksky.net/poweredby/\";\n        this.maxHourlyForecastSupport = 168;\n        this.needsApiKey = true;\n        this.descriptionLineLength = 25;\n        this.supportedLanguages = [\n            'ar', 'az', 'be', 'bg', 'bs', 'ca', 'cs', 'da', 'de', 'el', 'en', 'es',\n            'et', 'fi', 'fr', 'he', 'hr', 'hu', 'id', 'is', 'it', 'ja', 'ka', 'ko',\n            'kw', 'lv', 'nb', 'nl', 'no', 'pl', 'pt', 'ro', 'ru', 'sk', 'sl', 'sr',\n            'sv', 'tet', 'tr', 'uk', 'x-pig-latin', 'zh', 'zh-tw'\n        ];\n        this.query = \"https://api.darksky.net/forecast/\";\n        this.DarkSkyFilterWords = [_(\"and\"), _(\"until\"), _(\"in\"), _(\"Possible\")];\n        this.unit = null;\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        let now = new Date(Date.now());\n        if (now.getUTCFullYear() >= 2022) {\n            this.app.ShowError({\n                type: \"hard\",\n                detail: \"no api response\",\n                message: _(\"This API has ceased to function, please use another one.\")\n            });\n            return null;\n        }\n        let query = this.ConstructQuery(loc);\n        if (query == \"\" && query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, darkSky_Lang.bind(this, this.HandleError));\n        if (!json)\n            return null;\n        if (!json.code) {\n            return this.ParseWeather(json);\n        }\n        else {\n            this.HandleResponseErrors(json);\n            return null;\n        }\n    }\n    ;\n    ParseWeather(json) {\n        try {\n            let sunrise = new Date(json.daily.data[0].sunriseTime * 1000);\n            let sunset = new Date(json.daily.data[0].sunsetTime * 1000);\n            let result = {\n                date: new Date(json.currently.time * 1000),\n                coord: {\n                    lat: json.latitude,\n                    lon: json.longitude\n                },\n                location: {\n                    url: \"https://darksky.net/forecast/\" + json.latitude + \",\" + json.longitude,\n                    timeZone: json.timezone,\n                },\n                sunrise: sunrise,\n                sunset: sunset,\n                wind: {\n                    speed: this.ToMPS(json.currently.windSpeed),\n                    degree: json.currently.windBearing\n                },\n                temperature: this.ToKelvin(json.currently.temperature),\n                pressure: json.currently.pressure,\n                humidity: json.currently.humidity * 100,\n                condition: {\n                    main: this.GetShortCurrentSummary(json.currently.summary),\n                    description: json.currently.summary,\n                    icons: this.ResolveIcon(json.currently.icon, { sunrise: sunrise, sunset: sunset }),\n                    customIcon: this.ResolveCustomIcon(json.currently.icon)\n                },\n                extra_field: {\n                    name: _(\"Feels Like\"),\n                    value: this.ToKelvin(json.currently.apparentTemperature),\n                    type: \"temperature\"\n                },\n                forecasts: [],\n                hourlyForecasts: []\n            };\n            for (let i = 0; i < json.daily.data.length; i++) {\n                let day = json.daily.data[i];\n                let forecast = {\n                    date: new Date(day.time * 1000),\n                    temp_min: this.ToKelvin(day.temperatureLow),\n                    temp_max: this.ToKelvin(day.temperatureHigh),\n                    condition: {\n                        main: this.GetShortSummary(day.summary),\n                        description: this.ProcessSummary(day.summary),\n                        icons: this.ResolveIcon(day.icon),\n                        customIcon: this.ResolveCustomIcon(day.icon)\n                    },\n                };\n                forecast.date.setHours(forecast.date.getHours() + 12);\n                result.forecasts.push(forecast);\n            }\n            for (let i = 0; i < json.hourly.data.length; i++) {\n                let hour = json.hourly.data[i];\n                let forecast = {\n                    date: new Date(hour.time * 1000),\n                    temp: this.ToKelvin(hour.temperature),\n                    condition: {\n                        main: this.GetShortSummary(hour.summary),\n                        description: this.ProcessSummary(hour.summary),\n                        icons: this.ResolveIcon(hour.icon, { sunrise: sunrise, sunset: sunset }, new Date(hour.time * 1000)),\n                        customIcon: this.ResolveCustomIcon(hour.icon)\n                    },\n                    precipitation: {\n                        type: hour.precipType,\n                        volume: hour.precipProbability,\n                        chance: hour.precipProbability * 100\n                    }\n                };\n                result.hourlyForecasts.push(forecast);\n            }\n            return result;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"DarkSky payload parsing error: \" + e);\n            this.app.ShowError({ type: \"soft\", detail: \"unusual payload\", service: \"darksky\", message: _(\"Failed to Process Weather Info\") });\n            return null;\n        }\n    }\n    ;\n    ConvertToAPILocale(systemLocale) {\n        if (systemLocale == \"zh-tw\") {\n            return systemLocale;\n        }\n        let lang = systemLocale.split(\"-\")[0];\n        return lang;\n    }\n    ConstructQuery(loc) {\n        this.SetQueryUnit();\n        let query = this.query + this.app.config.ApiKey + \"/\" + loc.lat.toString() + \",\" + loc.lon.toString() + \"?exclude=minutely,flags\" + \"&units=\" + this.unit;\n        let locale = this.ConvertToAPILocale(this.app.config.currentLocale);\n        if (IsLangSupported(locale, this.supportedLanguages) && this.app.config._translateCondition) {\n            query = query + \"&lang=\" + locale;\n        }\n        return query;\n    }\n    HandleError(message) {\n        if (message.code == 403) {\n            this.app.ShowError({\n                type: \"hard\",\n                userError: true,\n                detail: \"bad key\",\n                service: \"darksky\",\n                message: _(\"Please Make sure you\\nentered the API key correctly and your account is not locked\")\n            });\n            return false;\n        }\n        else if (message.code == 401) {\n            this.app.ShowError({\n                type: \"hard\",\n                userError: true,\n                detail: \"no key\",\n                service: \"darksky\",\n                message: _(\"Please Make sure you\\nentered the API key that you have from DarkSky\")\n            });\n            return false;\n        }\n        return true;\n    }\n    HandleResponseErrors(json) {\n        let code = json.code;\n        let error = json.error;\n        let errorMsg = \"DarkSky API: \";\n        logger_Log.Instance.Debug(\"DarksSky API error payload: \" + json);\n        switch (code) {\n            case \"400\":\n                logger_Log.Instance.Error(errorMsg + error);\n                break;\n            default:\n                logger_Log.Instance.Error(errorMsg + error);\n                break;\n        }\n    }\n    ;\n    ProcessSummary(summary) {\n        let processed = summary.split(\" \");\n        let result = \"\";\n        let lineLength = 0;\n        for (let i = 0; i < processed.length; i++) {\n            if (lineLength + processed[i].length > this.descriptionLineLength) {\n                result = result + \"\\n\";\n                lineLength = 0;\n            }\n            result = result + processed[i] + \" \";\n            lineLength = lineLength + processed[i].length + 1;\n        }\n        return result;\n    }\n    ;\n    GetShortSummary(summary) {\n        let processed = summary.split(\" \");\n        if (processed.length == 1)\n            return processed[0];\n        let result = [];\n        for (let i = 0; i < processed.length; i++) {\n            if (!/[\\(\\)]/.test(processed[i]) && !this.WordBanned(processed[i])) {\n                result.push(processed[i]) + \" \";\n            }\n            if (result.length == 2)\n                break;\n        }\n        return result.join(\" \");\n    }\n    ;\n    GetShortCurrentSummary(summary) {\n        let processed = summary.split(\" \");\n        let result = \"\";\n        let maxLoop;\n        (processed.length < 2) ? maxLoop = processed.length : maxLoop = 2;\n        for (let i = 0; i < maxLoop; i++) {\n            if (processed[i] != \"and\") {\n                result = result + processed[i] + \" \";\n            }\n        }\n        return result;\n    }\n    WordBanned(word) {\n        return this.DarkSkyFilterWords.includes(word);\n    }\n    ResolveIcon(icon, sunTimes, date) {\n        switch (icon) {\n            case \"rain\":\n                return [\"weather-rain\", \"weather-showers-scattered\", \"weather-freezing-rain\"];\n            case \"snow\":\n                return [\"weather-snow\"];\n            case \"sleet\":\n                return [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers-scattered\"];\n            case \"fog\":\n                return [\"weather-fog\"];\n            case \"wind\":\n                return (sunTimes && IsNight(sunTimes, date)) ? [\"weather-windy\", \"weather-breeze\", \"weather-clouds\", \"weather-few-clouds-night\"] : [\"weather-windy\", \"weather-breeze\", \"weather-clouds\", \"weather-few-clouds\"];\n            case \"cloudy\":\n                return (sunTimes && IsNight(sunTimes, date)) ? [\"weather-overcast\", \"weather-clouds\", \"weather-few-clouds-night\"] : [\"weather-overcast\", \"weather-clouds\", \"weather-few-clouds\"];\n            case \"partly-cloudy-night\":\n                return [\"weather-few-clouds-night\"];\n            case \"partly-cloudy-day\":\n                return [\"weather-few-clouds\"];\n            case \"clear-night\":\n                return [\"weather-clear-night\"];\n            case \"clear-day\":\n                return [\"weather-clear\"];\n            case \"storm\":\n                return [\"weather-storm\"];\n            case \"showers\":\n                return [\"weather-showers\", \"weather-showers-scattered\"];\n            default:\n                return [\"weather-severe-alert\"];\n        }\n    }\n    ;\n    ResolveCustomIcon(icon) {\n        switch (icon) {\n            case \"rain\":\n                return \"rain-symbolic\";\n            case \"snow\":\n                return \"snow-symbolic\";\n            case \"fog\":\n                return \"fog-symbolic\";\n            case \"cloudy\":\n                return \"cloudy-symbolic\";\n            case \"partly-cloudy-night\":\n                return \"night-alt-cloudy-symbolic\";\n            case \"partly-cloudy-day\":\n                return \"day-cloudy-symbolic\";\n            case \"clear-night\":\n                return \"night-clear-symbolic\";\n            case \"clear-day\":\n                return \"day-sunny-symbolic\";\n            case \"storm\":\n                return \"thunderstorm-symbolic\";\n            case \"showers\":\n                return \"showers-symbolic\";\n            case \"wind\":\n                return \"strong-wind-symbolic\";\n            default:\n                return \"cloud-refresh-symbolic\";\n        }\n    }\n    SetQueryUnit() {\n        if (this.app.config.TemperatureUnit == \"celsius\") {\n            if (this.app.config.WindSpeedUnit == \"kph\" || this.app.config.WindSpeedUnit == \"m/s\") {\n                this.unit = 'si';\n            }\n            else {\n                this.unit = 'uk2';\n            }\n        }\n        else {\n            this.unit = 'us';\n        }\n    }\n    ;\n    ToKelvin(temp) {\n        if (this.unit == 'us') {\n            return FahrenheitToKelvin(temp);\n        }\n        else {\n            return CelsiusToKelvin(temp);\n        }\n    }\n    ;\n    ToMPS(speed) {\n        if (this.unit == 'si') {\n            return speed;\n        }\n        else {\n            return MPHtoMPS(speed);\n        }\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/openWeatherMap.ts\n\n\nconst openWeatherMap_Lang = imports.lang;\nclass OpenWeatherMap {\n    constructor(_app) {\n        this.prettyName = _(\"OpenWeatherMap\");\n        this.name = \"OpenWeatherMap\";\n        this.maxForecastSupport = 8;\n        this.website = \"https://openweathermap.org/\";\n        this.maxHourlyForecastSupport = 48;\n        this.needsApiKey = false;\n        this.supportedLanguages = [\"af\", \"al\", \"ar\", \"az\", \"bg\", \"ca\", \"cz\", \"da\", \"de\", \"el\", \"en\", \"eu\", \"fa\", \"fi\",\n            \"fr\", \"gl\", \"he\", \"hi\", \"hr\", \"hu\", \"id\", \"it\", \"ja\", \"kr\", \"la\", \"lt\", \"mk\", \"no\", \"nl\", \"pl\",\n            \"pt\", \"pt_br\", \"ro\", \"ru\", \"se\", \"sk\", \"sl\", \"sp\", \"es\", \"sr\", \"th\", \"tr\", \"ua\", \"uk\", \"vi\", \"zh_cn\", \"zh_tw\", \"zu\"\n        ];\n        this.base_url = \"https://api.openweathermap.org/data/2.5/onecall?\";\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        let query = this.ConstructQuery(this.base_url, loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, openWeatherMap_Lang.bind(this, this.HandleError));\n        if (!json)\n            return null;\n        if (this.HadErrors(json))\n            return null;\n        return this.ParseWeather(json, this);\n    }\n    ;\n    ParseWeather(json, self) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        try {\n            let weather = {\n                coord: {\n                    lat: json.lat,\n                    lon: json.lon\n                },\n                location: {\n                    url: \"https://openweathermap.org/city/\",\n                    timeZone: json.timezone\n                },\n                date: new Date((json.current.dt) * 1000),\n                sunrise: new Date((json.current.sunrise) * 1000),\n                sunset: new Date((json.current.sunset) * 1000),\n                wind: {\n                    speed: json.current.wind_speed,\n                    degree: json.current.wind_deg\n                },\n                temperature: json.current.temp,\n                pressure: json.current.pressure,\n                humidity: json.current.humidity,\n                condition: {\n                    main: (_c = (_b = (_a = json === null || json === void 0 ? void 0 : json.current) === null || _a === void 0 ? void 0 : _a.weather) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.main,\n                    description: (_f = (_e = (_d = json === null || json === void 0 ? void 0 : json.current) === null || _d === void 0 ? void 0 : _d.weather) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.description,\n                    icons: self.ResolveIcon((_j = (_h = (_g = json === null || json === void 0 ? void 0 : json.current) === null || _g === void 0 ? void 0 : _g.weather) === null || _h === void 0 ? void 0 : _h[0]) === null || _j === void 0 ? void 0 : _j.icon),\n                    customIcon: self.ResolveCustomIcon((_m = (_l = (_k = json === null || json === void 0 ? void 0 : json.current) === null || _k === void 0 ? void 0 : _k.weather) === null || _l === void 0 ? void 0 : _l[0]) === null || _m === void 0 ? void 0 : _m.icon)\n                },\n                extra_field: {\n                    name: _(\"Feels Like\"),\n                    value: json.current.feels_like,\n                    type: \"temperature\"\n                },\n                forecasts: []\n            };\n            if (json.minutely != null) {\n                let immediate = {\n                    start: -1,\n                    end: -1\n                };\n                for (let index = 0; index < json.minutely.length; index++) {\n                    const element = json.minutely[index];\n                    if (element.precipitation > 0 && immediate.start == -1) {\n                        immediate.start = index;\n                        continue;\n                    }\n                    else if (element.precipitation == 0 && immediate.start != -1) {\n                        immediate.end = index;\n                        break;\n                    }\n                }\n                weather.immediatePrecipitation = immediate;\n            }\n            let forecasts = [];\n            for (let i = 0; i < json.daily.length; i++) {\n                let day = json.daily[i];\n                let forecast = {\n                    date: new Date(day.dt * 1000),\n                    temp_min: day.temp.min,\n                    temp_max: day.temp.max,\n                    condition: {\n                        main: day.weather[0].main,\n                        description: day.weather[0].description,\n                        icons: self.ResolveIcon(day.weather[0].icon),\n                        customIcon: self.ResolveCustomIcon(day.weather[0].icon)\n                    },\n                };\n                forecasts.push(forecast);\n            }\n            weather.forecasts = forecasts;\n            let hourly = [];\n            for (let index = 0; index < json.hourly.length; index++) {\n                const hour = json.hourly[index];\n                let forecast = {\n                    date: new Date(hour.dt * 1000),\n                    temp: hour.temp,\n                    condition: {\n                        main: hour.weather[0].main,\n                        description: hour.weather[0].description,\n                        icons: self.ResolveIcon(hour.weather[0].icon),\n                        customIcon: self.ResolveCustomIcon(hour.weather[0].icon)\n                    },\n                };\n                if (hour.pop >= 0.1) {\n                    forecast.precipitation = {\n                        chance: hour.pop * 100,\n                        type: \"none\",\n                        volume: null\n                    };\n                }\n                if (!!hour.rain && forecast.precipitation != null) {\n                    forecast.precipitation.volume = hour.rain[\"1h\"];\n                    forecast.precipitation.type = \"rain\";\n                }\n                if (!!hour.snow && forecast.precipitation != null) {\n                    forecast.precipitation.volume = hour.snow[\"1h\"];\n                    forecast.precipitation.type = \"snow\";\n                }\n                hourly.push(forecast);\n            }\n            weather.hourlyForecasts = hourly;\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"OpenWeatherMap Weather Parsing error: \" + e);\n            self.app.ShowError({\n                type: \"soft\",\n                service: \"openweathermap\",\n                detail: \"unusual payload\",\n                message: _(\"Failed to Process Current Weather Info\")\n            });\n            return null;\n        }\n    }\n    ;\n    ConstructQuery(baseUrl, loc) {\n        let query = baseUrl;\n        query = query + \"lat=\" + loc.lat + \"&lon=\" + loc.lon + \"&appid=\";\n        query += \"1c73f8259a86c6fd43c7163b543c8640\";\n        let locale = this.ConvertToAPILocale(this.app.config.currentLocale);\n        if (this.app.config._translateCondition && IsLangSupported(locale, this.supportedLanguages)) {\n            query = query + \"&lang=\" + locale;\n        }\n        return query;\n    }\n    ;\n    ConvertToAPILocale(systemLocale) {\n        if (systemLocale == \"zh-cn\" || systemLocale == \"zh-cn\" || systemLocale == \"pt-br\") {\n            return systemLocale;\n        }\n        let lang = systemLocale.split(\"-\")[0];\n        if (lang == \"sv\") {\n            return \"se\";\n        }\n        else if (lang == \"cs\") {\n            return \"cz\";\n        }\n        else if (lang == \"ko\") {\n            return \"kr\";\n        }\n        else if (lang == \"lv\") {\n            return \"la\";\n        }\n        else if (lang == \"nn\" || lang == \"nb\") {\n            return \"no\";\n        }\n        return lang;\n    }\n    HadErrors(json) {\n        if (!this.HasReturnedError(json))\n            return false;\n        let errorMsg = \"OpenWeatherMap Response: \";\n        let error = {\n            service: \"openweathermap\",\n            type: \"hard\",\n        };\n        let errorPayload = json;\n        switch (errorPayload.cod) {\n            case (\"400\"):\n                error.detail = \"bad location format\";\n                error.message = _(\"Please make sure Location is in the correct format in the Settings\");\n                break;\n            case (\"401\"):\n                error.detail = \"bad key\";\n                error.message = _(\"Make sure you entered the correct key in settings\");\n                break;\n            case (\"404\"):\n                error.detail = \"location not found\";\n                error.message = _(\"Location not found, make sure location is available or it is in the correct format\");\n                break;\n            case (\"429\"):\n                error.detail = \"key blocked\";\n                error.message = _(\"If this problem persists, please contact the Author of this applet\");\n                break;\n            default:\n                error.detail = \"unknown\";\n                error.message = _(\"Unknown Error, please see the logs in Looking Glass\");\n                break;\n        }\n        ;\n        this.app.ShowError(error);\n        logger_Log.Instance.Debug(\"OpenWeatherMap Error Code: \" + errorPayload.cod);\n        logger_Log.Instance.Error(errorMsg + errorPayload.message);\n        return true;\n    }\n    ;\n    HasReturnedError(json) {\n        return (!!(json === null || json === void 0 ? void 0 : json.cod));\n    }\n    HandleError(error) {\n        if (error.code == 404) {\n            this.app.ShowError({\n                detail: \"location not found\",\n                message: _(\"Location not found, make sure location is available or it is in the correct format\"),\n                userError: true,\n                type: \"hard\"\n            });\n            return false;\n        }\n        return true;\n    }\n    ResolveIcon(icon) {\n        switch (icon) {\n            case \"10d\":\n                return [\"weather-rain\", \"weather-showers-scattered\", \"weather-freezing-rain\"];\n            case \"10n\":\n                return [\"weather-rain\", \"weather-showers-scattered\", \"weather-freezing-rain\"];\n            case \"09n\":\n                return [\"weather-showers\"];\n            case \"09d\":\n                return [\"weather-showers\"];\n            case \"13d\":\n                return [\"weather-snow\"];\n            case \"13n\":\n                return [\"weather-snow\"];\n            case \"50d\":\n                return [\"weather-fog\"];\n            case \"50n\":\n                return [\"weather-fog\"];\n            case \"04d\":\n                return [\"weather-overcast\", \"weather-clouds\", \"weather-few-clouds\"];\n            case \"04n\":\n                return [\"weather-overcast\", \"weather-clouds-night\", \"weather-few-clouds-night\"];\n            case \"03n\":\n                return ['weather-clouds-night', \"weather-few-clouds-night\"];\n            case \"03d\":\n                return [\"weather-clouds\", \"weather-few-clouds\", \"weather-overcast\"];\n            case \"02n\":\n                return [\"weather-few-clouds-night\"];\n            case \"02d\":\n                return [\"weather-few-clouds\"];\n            case \"01n\":\n                return [\"weather-clear-night\"];\n            case \"01d\":\n                return [\"weather-clear\"];\n            case \"11d\":\n                return [\"weather-storm\"];\n            case \"11n\":\n                return [\"weather-storm\"];\n            default:\n                return [\"weather-severe-alert\"];\n        }\n    }\n    ;\n    ResolveCustomIcon(icon) {\n        switch (icon) {\n            case \"10d\":\n                return \"day-rain-symbolic\";\n            case \"10n\":\n                return \"night-rain-symbolic\";\n            case \"09n\":\n                return \"night-showers-symbolic\";\n            case \"09d\":\n                return \"day-showers-symbolic\";\n            case \"13d\":\n                return \"day-snow-symbolic\";\n            case \"13n\":\n                return \"night-alt-snow-symbolic\";\n            case \"50d\":\n                return \"day-fog-symbolic\";\n            case \"50n\":\n                return \"night-fog-symbolic\";\n            case \"04d\":\n                return \"day-cloudy-symbolic\";\n            case \"04n\":\n                return \"night-alt-cloudy-symbolic\";\n            case \"03n\":\n                return \"night-alt-cloudy-symbolic\";\n            case \"03d\":\n                return \"day-cloudy-symbolic\";\n            case \"02n\":\n                return \"night-alt-cloudy-symbolic\";\n            case \"02d\":\n                return \"day-cloudy-symbolic\";\n            case \"01n\":\n                return \"night-clear-symbolic\";\n            case \"01d\":\n                return \"day-sunny-symbolic\";\n            case \"11d\":\n                return \"day-thunderstorm-symbolic\";\n            case \"11n\":\n                return \"night-alt-thunderstorm-symbolic\";\n            default:\n                return \"cloud-refresh-symbolic\";\n        }\n    }\n    ;\n}\n;\nconst openWeatherMapConditionLibrary = [\n    _(\"Thunderstorm with light rain\"),\n    _(\"Thunderstorm with rain\"),\n    _(\"Thunderstorm with heavy rain\"),\n    _(\"Light thunderstorm\"),\n    _(\"Thunderstorm\"),\n    _(\"Heavy thunderstorm\"),\n    _(\"Ragged thunderstorm\"),\n    _(\"Thunderstorm with light drizzle\"),\n    _(\"Thunderstorm with drizzle\"),\n    _(\"Thunderstorm with heavy drizzle\"),\n    _(\"Light intensity drizzle\"),\n    _(\"Drizzle\"),\n    _(\"Heavy intensity drizzle\"),\n    _(\"Light intensity drizzle rain\"),\n    _(\"Drizzle rain\"),\n    _(\"Heavy intensity drizzle rain\"),\n    _(\"Shower rain and drizzle\"),\n    _(\"Heavy shower rain and drizzle\"),\n    _(\"Shower drizzle\"),\n    _(\"Light rain\"),\n    _(\"Moderate rain\"),\n    _(\"Heavy intensity rain\"),\n    _(\"Very heavy rain\"),\n    _(\"Extreme rain\"),\n    _(\"Freezing rain\"),\n    _(\"Light intensity shower rain\"),\n    _(\"Shower rain\"),\n    _(\"Heavy intensity shower rain\"),\n    _(\"Ragged shower rain\"),\n    _(\"Light snow\"),\n    _(\"Snow\"),\n    _(\"Heavy snow\"),\n    _(\"Sleet\"),\n    _(\"Shower sleet\"),\n    _(\"Light rain and snow\"),\n    _(\"Rain and snow\"),\n    _(\"Light shower snow\"),\n    _(\"Shower snow\"),\n    _(\"Heavy shower snow\"),\n    _(\"Mist\"),\n    _(\"Smoke\"),\n    _(\"Haze\"),\n    _(\"Sand, dust whirls\"),\n    _(\"Fog\"),\n    _(\"Sand\"),\n    _(\"Dust\"),\n    _(\"Volcanic ash\"),\n    _(\"Squalls\"),\n    _(\"Tornado\"),\n    _(\"Clear\"),\n    _(\"Clear sky\"),\n    _(\"Sky is clear\"),\n    _(\"Clouds\"),\n    _(\"Few clouds\"),\n    _(\"Scattered clouds\"),\n    _(\"Broken clouds\"),\n    _(\"Overcast clouds\")\n];\n\n;// CONCATENATED MODULE: ./src/3_8/providers/us_weather.ts\n\n\n\nclass USWeather {\n    constructor(_app) {\n        this.prettyName = _(\"US Weather\");\n        this.name = \"US Weather\";\n        this.maxForecastSupport = 7;\n        this.website = \"https://www.weather.gov/\";\n        this.maxHourlyForecastSupport = 156;\n        this.needsApiKey = false;\n        this.sitesUrl = \"https://api.weather.gov/points/\";\n        this.grid = null;\n        this.MAX_STATION_DIST = 50000;\n        this.observationStations = null;\n        this.currentLoc = null;\n        this.currentLocID = null;\n        this.app = _app;\n        this.sunCalc = new SunCalc();\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        let locID = loc.lat.toString() + \",\" + loc.lon.toString();\n        if (!this.grid || !this.observationStations || this.currentLocID != locID) {\n            logger_Log.Instance.Print(\"Downloading new site data\");\n            this.currentLoc = loc;\n            this.currentLocID = locID;\n            let grid = await this.GetGridData(loc);\n            if (grid == null)\n                return null;\n            logger_Log.Instance.Debug(\"Grid found: \" + JSON.stringify(grid, null, 2));\n            let observationStations = await this.GetStationData(grid.properties.observationStations);\n            if (observationStations == null)\n                return null;\n            this.grid = grid;\n            this.observationStations = observationStations;\n        }\n        else {\n            logger_Log.Instance.Debug(\"Site data downloading skipped\");\n        }\n        let observations = await this.GetObservationsInRange(this.MAX_STATION_DIST, loc, this.observationStations);\n        let hourlyForecastPromise = this.app.LoadJsonAsync(this.grid.properties.forecastHourly + \"?units=si\");\n        let forecastPromise = this.app.LoadJsonAsync(this.grid.properties.forecast);\n        let hourly = await hourlyForecastPromise;\n        let forecast = await forecastPromise;\n        if (!hourly || !forecast) {\n            logger_Log.Instance.Error(\"Failed to obtain forecast Data\");\n            return null;\n        }\n        let weather = this.ParseCurrent(observations, hourly);\n        weather.forecasts = this.ParseForecast(forecast);\n        weather.hourlyForecasts = this.ParseHourlyForecast(hourly, this);\n        return weather;\n    }\n    ;\n    async GetGridData(loc) {\n        let siteData = await this.app.LoadJsonAsync(this.sitesUrl + loc.lat.toString() + \",\" + loc.lon.toString(), null, (msg) => this.OnObtainingGridData(msg));\n        return siteData;\n    }\n    async GetStationData(stationListUrl) {\n        let stations = await this.app.LoadJsonAsync(stationListUrl);\n        return stations === null || stations === void 0 ? void 0 : stations.features;\n    }\n    async GetObservationsInRange(range, loc, stations) {\n        let observations = [];\n        for (let index = 0; index < stations.length; index++) {\n            const element = stations[index];\n            element.dist = GetDistance(element.geometry.coordinates[1], element.geometry.coordinates[0], loc.lat, loc.lon);\n            if (element.dist > range)\n                break;\n            let observation = await this.app.LoadJsonAsync(stations[index].id + \"/observations/latest\", null, (msg) => false);\n            if (observation == null) {\n                logger_Log.Instance.Debug(\"Failed to get observations from \" + stations[index].id);\n            }\n            else {\n                observations.push(observation);\n            }\n        }\n        return observations;\n    }\n    OnObtainingGridData(message) {\n        var _a, _b;\n        if (message.code == 404) {\n            let data = JSON.parse((_b = (_a = message === null || message === void 0 ? void 0 : message.response) === null || _a === void 0 ? void 0 : _a.response_body) === null || _b === void 0 ? void 0 : _b.data);\n            if (data.title == \"Data Unavailable For Requested Point\") {\n                this.app.ShowError({\n                    type: \"hard\",\n                    userError: true,\n                    detail: \"location not covered\",\n                    service: \"us-weather\",\n                    message: _(\"Location is outside US, please use a different provider.\")\n                });\n            }\n            return false;\n        }\n        return true;\n    }\n    MeshObservationData(observations) {\n        if (observations.length < 1)\n            return null;\n        let result = observations[0];\n        if (observations.length == 1)\n            return result;\n        for (let index = 1; index < observations.length; index++) {\n            const element = observations[index];\n            let debugText = \" Observation data missing, plugged in from ID \" +\n                element.id + \", index \" + index +\n                \", distance \"\n                + Math.round(GetDistance(element.geometry.coordinates[1], element.geometry.coordinates[0], this.currentLoc.lat, this.currentLoc.lon))\n                + \" metres\";\n            if (result.properties.icon == null) {\n                result.properties.icon = element.properties.icon;\n                result.properties.textDescription = element.properties.textDescription;\n                logger_Log.Instance.Debug(\"Weather condition\" + debugText);\n            }\n            if (result.properties.temperature.value == null) {\n                result.properties.temperature.value = element.properties.temperature.value;\n                logger_Log.Instance.Debug(\"Temperature\" + debugText);\n            }\n            if (result.properties.windSpeed.value == null) {\n                result.properties.windSpeed.value = element.properties.windSpeed.value;\n                logger_Log.Instance.Debug(\"Wind Speed\" + debugText);\n            }\n            if (result.properties.windDirection.value == null) {\n                result.properties.windDirection.value = element.properties.windDirection.value;\n                logger_Log.Instance.Debug(\"Wind degree\" + debugText);\n            }\n            if (result.properties.barometricPressure.value == null) {\n                result.properties.barometricPressure.value = element.properties.barometricPressure.value;\n                logger_Log.Instance.Debug(\"Pressure\" + debugText);\n            }\n            if (result.properties.relativeHumidity.value == null) {\n                result.properties.relativeHumidity.value = element.properties.relativeHumidity.value;\n                logger_Log.Instance.Debug(\"Humidity\" + debugText);\n            }\n            if (result.properties.windChill.value == null) {\n                result.properties.windChill.value = element.properties.windChill.value;\n                logger_Log.Instance.Debug(\"WindChill\" + debugText);\n            }\n            if (result.properties.visibility.value == null) {\n                result.properties.visibility.value = element.properties.visibility.value;\n                logger_Log.Instance.Debug(\"Visibility\" + debugText);\n            }\n        }\n        return result;\n    }\n    ParseCurrent(json, hourly) {\n        if (json.length == 0) {\n            logger_Log.Instance.Error(\"No observation stations/data are available\");\n            return null;\n        }\n        let observation = this.MeshObservationData(json);\n        let timestamp = new Date(observation.properties.timestamp);\n        let times = this.sunCalc.getTimes(new Date(), observation.geometry.coordinates[1], observation.geometry.coordinates[0], observation.properties.elevation.value);\n        try {\n            let weather = {\n                coord: {\n                    lat: observation.geometry.coordinates[1],\n                    lon: observation.geometry.coordinates[0]\n                },\n                location: {\n                    city: null,\n                    country: null,\n                    url: \"https://forecast.weather.gov/MapClick.php?lat=\" + this.currentLoc.lat.toString() + \"&lon=\" + this.currentLoc.lon.toString(),\n                    timeZone: this.observationStations[0].properties.timeZone,\n                    distanceFrom: this.observationStations[0].dist\n                },\n                date: timestamp,\n                sunrise: times.sunrise,\n                sunset: times.sunset,\n                wind: {\n                    speed: KPHtoMPS(observation.properties.windSpeed.value),\n                    degree: observation.properties.windDirection.value\n                },\n                temperature: CelsiusToKelvin(observation.properties.temperature.value),\n                pressure: observation.properties.barometricPressure.value / 100,\n                humidity: observation.properties.relativeHumidity.value,\n                condition: this.ResolveCondition(observation.properties.icon, IsNight(times)),\n                forecasts: []\n            };\n            if (observation.properties.windChill.value != null) {\n                weather.extra_field = {\n                    name: _(\"Feels Like\"),\n                    value: CelsiusToKelvin(observation.properties.windChill.value),\n                    type: \"temperature\"\n                };\n            }\n            if (weather.condition == null && hourly != null) {\n                weather.condition = this.ResolveCondition(hourly.properties.periods[0].icon);\n            }\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"US Weather Parsing error: \" + e);\n            this.app.ShowError({ type: \"soft\", service: \"us-weather\", detail: \"unusual payload\", message: _(\"Failed to Process Current Weather Info\") });\n            return null;\n        }\n    }\n    ;\n    CheckIfHasThreeElementsForDay(json) {\n        if (json.properties.periods.length < 3)\n            return false;\n        let counter = 0;\n        for (let index = 1; index < 3; index++) {\n            const element = json.properties.periods[index];\n            const prevElement = json.properties.periods[index - 1];\n            let prevDate = new Date(prevElement.startTime).toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            let curDate = new Date(element.startTime).toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            if (prevDate == curDate)\n                counter++;\n            else\n                counter = 0;\n            if (counter > 1)\n                return true;\n            return false;\n        }\n    }\n    FindTodayIndex(json, startIndex = 0) {\n        let today = new Date();\n        for (let index = startIndex; index < json.properties.periods.length; index++) {\n            const element = json.properties.periods[index];\n            let todayDate = today.toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            let curDate = new Date(element.startTime).toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            if (todayDate != curDate)\n                continue;\n            return index;\n        }\n    }\n    ParseForecast(json) {\n        let forecasts = [];\n        try {\n            let startIndex = (this.CheckIfHasThreeElementsForDay(json) ? 1 : 0);\n            startIndex = this.FindTodayIndex(json, startIndex);\n            if (json.properties.periods[startIndex].isDaytime == false) {\n                startIndex++;\n                let today = json.properties.periods[0];\n                let forecast = {\n                    date: new Date(today.startTime),\n                    temp_min: FahrenheitToKelvin(today.temperature),\n                    temp_max: FahrenheitToKelvin(today.temperature),\n                    condition: this.ResolveCondition(today.icon),\n                };\n                forecasts.push(forecast);\n            }\n            for (let i = startIndex; i < json.properties.periods.length; i += 2) {\n                let day = json.properties.periods[i];\n                let night = json.properties.periods[i + 1];\n                if (!night)\n                    night = day;\n                let forecast = {\n                    date: new Date(day.startTime),\n                    temp_min: FahrenheitToKelvin(night.temperature),\n                    temp_max: FahrenheitToKelvin(day.temperature),\n                    condition: this.ResolveCondition(day.icon),\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"US Weather Forecast Parsing error: \" + e);\n            this.app.ShowError({ type: \"soft\", service: \"us-weather\", detail: \"unusual payload\", message: _(\"Failed to Process Forecast Info\") });\n            return null;\n        }\n    }\n    ;\n    ParseHourlyForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.properties.periods.length; i++) {\n                let hour = json.properties.periods[i];\n                let timestamp = new Date(hour.startTime);\n                let forecast = {\n                    date: timestamp,\n                    temp: CelsiusToKelvin(hour.temperature),\n                    condition: self.ResolveCondition(hour.icon, !hour.isDaytime),\n                    precipitation: null\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"US Weather service Forecast Parsing error: \" + e);\n            self.app.ShowError({ type: \"soft\", service: \"us-weather\", detail: \"unusual payload\", message: _(\"Failed to Process Hourly Forecast Info\") });\n            return null;\n        }\n    }\n    ResolveCondition(icon, isNight = false) {\n        if (icon == null)\n            return null;\n        let code = icon.match(/(?!\\/)[a-z_]+(?=(\\?|,))/);\n        let iconType = this.app.config.IconType;\n        switch (code[0]) {\n            case \"skc\":\n                return {\n                    main: _(\"Clear\"),\n                    description: _(\"Clear\"),\n                    customIcon: (isNight) ? \"night-clear-symbolic\" : \"day-sunny-symbolic\",\n                    icons: (isNight) ? [\"weather-clear-night\", \"weather-severe-alert\"] : [\"weather-clear\", \"weather-severe-alert\"]\n                };\n            case \"few\":\n                return {\n                    main: _(\"Few clouds\"),\n                    description: _(\"Few clouds\"),\n                    customIcon: (isNight) ? \"night-alt-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    icons: [\"weather-clear-night\", \"weather-severe-alert\"]\n                };\n            case \"sct\":\n                return {\n                    main: _(\"Partly cloudy\"),\n                    description: _(\"Partly cloudy\"),\n                    customIcon: (isNight) ? \"night-alt-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    icons: [\"weather-clear\", \"weather-severe-alert\"]\n                };\n            case \"bkn\":\n                return {\n                    main: _(\"Mostly cloudy\"),\n                    description: _(\"Mostly cloudy\"),\n                    customIcon: (isNight) ? \"night-alt-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    icons: [\"weather-clouds-night\", \"weather-overcast\", \"weather-severe-alert\"]\n                };\n            case \"ovc\":\n                return {\n                    main: _(\"Overcast\"),\n                    description: _(\"Overcast\"),\n                    customIcon: \"cloudy-symbolic\",\n                    icons: [\"weather-clouds\", \"weather-overcast\", \"weather-severe-alert\"]\n                };\n            case \"wind_skc\":\n                return {\n                    main: _(\"Clear\"),\n                    description: _(\"Clear and windy\"),\n                    customIcon: (IsNight) ? \"night-alt-wind-symbolic\" : \"day-windy-symbolic\",\n                    icons: (isNight) ? [\"weather-clear-night\"] : [\"weather-clear\"]\n                };\n            case \"wind_few\":\n                return {\n                    main: _(\"Few clouds\"),\n                    description: _(\"Few clouds and windy\"),\n                    customIcon: (IsNight) ? \"night-alt-cloudy-windy-symbolic\" : \"day-cloudy-windy-symbolic\",\n                    icons: (isNight) ? [\"weather-few-clouds-night\"] : [\"weather-few-clouds\"]\n                };\n            case \"wind_sct\":\n                return {\n                    main: _(\"Partly cloudy\"),\n                    description: _(\"Partly cloudy and windy\"),\n                    customIcon: (IsNight) ? \"night-alt-cloudy-windy-symbolic\" : \"day-cloudy-windy-symbolic\",\n                    icons: (isNight) ? [\"weather-clouds-night\", \"weather-few-clouds-night\"] : [\"weather-clouds\", \"weather-few-clouds\"]\n                };\n            case \"wind_bkn\":\n                return {\n                    main: _(\"Mostly cloudy\"),\n                    description: _(\"Mostly cloudy and windy\"),\n                    customIcon: (IsNight) ? \"night-alt-cloudy-windy-symbolic\" : \"day-cloudy-windy-symbolic\",\n                    icons: (isNight) ? [\"weather-clouds-night\", \"weather-few-clouds-night\"] : [\"weather-clouds\", \"weather-few-clouds\"]\n                };\n            case \"wind_ovc\":\n                return {\n                    main: _(\"Overcast\"),\n                    description: _(\"Overcast and windy\"),\n                    customIcon: \"cloudy-symbolic\",\n                    icons: [\"weather-overcast\", \"weather-many-clouds\", \"weather-severe-alert\"]\n                };\n            case \"snow\":\n                return {\n                    main: _(\"Snow\"),\n                    description: _(\"Snow\"),\n                    customIcon: \"snow-symbolic\",\n                    icons: [\"weather-snow\", \"weather-severe-alert\"]\n                };\n            case \"rain_snow\":\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Snowy rain\"),\n                    customIcon: \"rain-mix-symbolic\",\n                    icons: [\"weather-snow-rain\", \"weather-snow\", \"weather-severe-alert\"]\n                };\n            case \"rain_sleet\":\n                return {\n                    main: _(\"Sleet\"),\n                    description: _(\"Sleet\"),\n                    customIcon: \"rain-mix-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-severe-alert\"]\n                };\n            case \"snow_sleet\":\n                return {\n                    main: _(\"Sleet\"),\n                    description: _(\"Sleet\"),\n                    customIcon: \"sleet-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-hail\", \"weather-severe-alert\"]\n                };\n            case \"fzra\":\n                return {\n                    main: _(\"Freezing rain\"),\n                    description: _(\"Freezing rain\"),\n                    customIcon: \"rain-wind-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-hail\", \"weather-severe-alert\"]\n                };\n            case \"rain_fzra\":\n                return {\n                    main: _(\"Freezing rain\"),\n                    description: _(\"Freezing rain\"),\n                    customIcon: \"rain-wind-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-hail\", \"weather-severe-alert\"]\n                };\n            case \"snow_fzra\":\n                return {\n                    main: _(\"Freezing rain\"),\n                    description: _(\"Freezing rain and snow\"),\n                    customIcon: \"rain-wind-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-hail\", \"weather-severe-alert\"]\n                };\n            case \"sleet\":\n                return {\n                    main: _(\"Sleet\"),\n                    description: _(\"Sleet\"),\n                    customIcon: \"rain-mix-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-severe-alert\"]\n                };\n            case \"rain\":\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Rain\"),\n                    customIcon: \"rain-symbolic\",\n                    icons: [\"weather-rain\", \"weather-freezing-rain\", \"weather-showers\", \"weather-showers-scattered\", \"weather-severe-alert\"]\n                };\n            case \"rain_showers\":\n            case \"rain_showers_hi\":\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Rain showers\"),\n                    customIcon: \"rain-mix-symbolic\",\n                    icons: [\"weather-showers\", \"weather-showers-scattered\", \"weather-rain\", \"weather-freezing-rain\", \"weather-severe-alert\"]\n                };\n            case \"tsra\":\n            case \"tsra_sct\":\n            case \"tsra_hi\":\n                return {\n                    main: _(\"Thunderstorm\"),\n                    description: _(\"Thunderstorm\"),\n                    customIcon: \"thunderstorm-symbolic\",\n                    icons: [\"weather-storm\", \"weather-severe-alert\"]\n                };\n            case \"tornado\":\n                return {\n                    main: _(\"Tornado\"),\n                    description: _(\"Tornado\"),\n                    customIcon: \"tornado-symbolic\",\n                    icons: [\"weather-severe-alert\"]\n                };\n            case \"hurricane\":\n                return {\n                    main: _(\"Hurricane\"),\n                    description: _(\"Hurricane\"),\n                    customIcon: \"hurricane-symbolic\",\n                    icons: [\"weather-severe-alert\"]\n                };\n            case \"tropical_storm\":\n                return {\n                    main: _(\"Storm\"),\n                    description: _(\"Tropical storm\"),\n                    customIcon: \"thunderstorm-symbolic\",\n                    icons: [\"weather-storm\", \"weather-severe-alert\"]\n                };\n            case \"dust\":\n                return {\n                    main: _(\"Dust\"),\n                    description: _(\"Dust\"),\n                    customIcon: \"dust-symbolic\",\n                    icons: [\"weather-fog\", \"weather-severe-alert\"]\n                };\n            case \"smoke\":\n                return {\n                    main: _(\"Smoke\"),\n                    description: _(\"Smoke\"),\n                    customIcon: \"smoke-symbolic\",\n                    icons: [\"weather-fog\", \"weather-severe-alert\"]\n                };\n            case \"haze\":\n                return {\n                    main: _(\"Haze\"),\n                    description: _(\"Haze\"),\n                    customIcon: \"fog-symbolic\",\n                    icons: [\"weather-fog\", \"weather-severe-alert\"]\n                };\n            case \"hot\":\n                return {\n                    main: _(\"Hot\"),\n                    description: _(\"Hot\"),\n                    customIcon: \"hot-symbolic\",\n                    icons: [\"weather-severe-alert\"]\n                };\n            case \"cold\":\n                return {\n                    main: _(\"Cold\"),\n                    description: _(\"Cold\"),\n                    customIcon: \"snowflake-cold-symbolic\",\n                    icons: [\"weather-storm\", \"weather-severe-alert\"]\n                };\n            case \"blizzard\":\n                return {\n                    main: _(\"Blizzard\"),\n                    description: _(\"Blizzard\"),\n                    customIcon: \"thunderstorm-symbolic\",\n                    icons: [\"weather-storm\", \"weather-severe-alert\"]\n                };\n            case \"fog\":\n                return {\n                    main: _(\"Fog\"),\n                    description: _(\"Fog\"),\n                    customIcon: \"fog-symbolic\",\n                    icons: [\"weather-fog\", \"weather-severe-alert\"]\n                };\n            default:\n                return {\n                    main: _(\"Unknown\"),\n                    description: _(\"Unknown\"),\n                    customIcon: \"cloud-refresh-symbolic\",\n                    icons: [\"weather-severe-alert\"]\n                };\n        }\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/weatherbit.ts\n\n\nconst weatherbit_Lang = imports.lang;\nclass Weatherbit {\n    constructor(_app) {\n        this.prettyName = _(\"WeatherBit\");\n        this.name = \"Weatherbit\";\n        this.maxForecastSupport = 16;\n        this.website = \"https://www.weatherbit.io/\";\n        this.maxHourlyForecastSupport = 48;\n        this.needsApiKey = true;\n        this.supportedLanguages = [\n            'ar', 'az', 'be', 'bg', 'bs', 'ca', 'cz', 'da', 'de', 'el', 'en',\n            'et', 'fi', 'fr', 'hr', 'hu', 'id', 'is', 'it',\n            'kw', 'lv', 'nb', 'nl', 'pl', 'pt', 'ro', 'ru', 'sk', 'sl', 'sr',\n            'sv', 'tr', 'uk', 'zh', 'zh-tw'\n        ];\n        this.current_url = \"https://api.weatherbit.io/v2.0/current?\";\n        this.daily_url = \"https://api.weatherbit.io/v2.0/forecast/daily?\";\n        this.hourly_url = \"https://api.weatherbit.io/v2.0/forecast/hourly?\";\n        this.hourlyAccess = true;\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        let forecastPromise = this.GetData(this.daily_url, loc, this.ParseForecast);\n        let hourlyPromise = null;\n        if (!!this.hourlyAccess)\n            hourlyPromise = this.GetHourlyData(this.hourly_url, loc);\n        let currentResult = await this.GetData(this.current_url, loc, this.ParseCurrent);\n        if (!currentResult)\n            return null;\n        let forecastResult = await forecastPromise;\n        currentResult.forecasts = (!forecastResult) ? [] : forecastResult;\n        let hourlyResult = await hourlyPromise;\n        currentResult.hourlyForecasts = (!hourlyResult) ? [] : hourlyResult;\n        return currentResult;\n    }\n    ;\n    async GetData(baseUrl, loc, ParseFunction) {\n        let query = this.ConstructQuery(baseUrl, loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, weatherbit_Lang.bind(this, this.HandleError));\n        if (json == null)\n            return null;\n        return ParseFunction(json, this);\n    }\n    async GetHourlyData(baseUrl, loc) {\n        let query = this.ConstructQuery(baseUrl, loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, weatherbit_Lang.bind(this, this.HandleHourlyError));\n        if (!!(json === null || json === void 0 ? void 0 : json.error)) {\n            return null;\n        }\n        if (json == null)\n            return null;\n        return this.ParseHourlyForecast(json, this);\n    }\n    ;\n    ParseCurrent(json, self) {\n        json = json.data[0];\n        let hourDiff = self.HourDifference(new Date(json.ts * 1000), self.ParseStringTime(json.ob_time));\n        if (hourDiff != 0)\n            logger_Log.Instance.Debug(\"Weatherbit reporting incorrect time, correcting with \" + (0 - hourDiff).toString() + \" hours\");\n        try {\n            let weather = {\n                coord: {\n                    lat: json.lat,\n                    lon: json.lon\n                },\n                location: {\n                    city: json.city_name,\n                    country: json.country_code,\n                    url: null,\n                    timeZone: json.timezone\n                },\n                date: new Date(json.ts * 1000),\n                sunrise: self.TimeToDate(json.sunrise, hourDiff),\n                sunset: self.TimeToDate(json.sunset, hourDiff),\n                wind: {\n                    speed: json.wind_spd,\n                    degree: json.wind_dir\n                },\n                temperature: json.temp,\n                pressure: json.pres,\n                humidity: json.rh,\n                condition: {\n                    main: json.weather.description,\n                    description: json.weather.description,\n                    icons: self.ResolveIcon(json.weather.icon),\n                    customIcon: self.ResolveCustomIcon(json.weather.icon)\n                },\n                extra_field: {\n                    name: _(\"Feels Like\"),\n                    value: json.app_temp,\n                    type: \"temperature\"\n                },\n                forecasts: []\n            };\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"Weatherbit Weather Parsing error: \" + e);\n            self.app.ShowError({ type: \"soft\", service: \"weatherbit\", detail: \"unusual payload\", message: _(\"Failed to Process Current Weather Info\") });\n            return null;\n        }\n    }\n    ;\n    ParseForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.data.length; i++) {\n                let day = json.data[i];\n                let forecast = {\n                    date: new Date(day.ts * 1000),\n                    temp_min: day.min_temp,\n                    temp_max: day.max_temp,\n                    condition: {\n                        main: day.weather.description,\n                        description: day.weather.description,\n                        icons: self.ResolveIcon(day.weather.icon),\n                        customIcon: self.ResolveCustomIcon(day.weather.icon)\n                    },\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"Weatherbit Forecast Parsing error: \" + e);\n            self.app.ShowError({ type: \"soft\", service: \"weatherbit\", detail: \"unusual payload\", message: _(\"Failed to Process Forecast Info\") });\n            return null;\n        }\n    }\n    ;\n    ParseHourlyForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.data.length; i++) {\n                let hour = json.data[i];\n                let forecast = {\n                    date: new Date(hour.ts * 1000),\n                    temp: hour.temp,\n                    condition: {\n                        main: hour.weather.description,\n                        description: hour.weather.description,\n                        icons: self.ResolveIcon(hour.weather.icon),\n                        customIcon: self.ResolveCustomIcon(hour.weather.icon)\n                    },\n                    precipitation: {\n                        type: \"rain\",\n                        volume: hour.precip,\n                        chance: hour.pop\n                    }\n                };\n                if (hour.snow != 0) {\n                    forecast.precipitation.type = \"snow\";\n                    forecast.precipitation.volume = hour.snow;\n                }\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"Weatherbit Forecast Parsing error: \" + e);\n            self.app.ShowError({ type: \"soft\", service: \"weatherbit\", detail: \"unusual payload\", message: _(\"Failed to Process Forecast Info\") });\n            return null;\n        }\n    }\n    TimeToDate(time, hourDiff) {\n        let hoursMinutes = time.split(\":\");\n        let date = new Date();\n        date.setHours(parseInt(hoursMinutes[0]) - hourDiff);\n        date.setMinutes(parseInt(hoursMinutes[1]));\n        return date;\n    }\n    HourDifference(correctTime, incorrectTime) {\n        return Math.round((incorrectTime.getTime() - correctTime.getTime()) / (1000 * 60 * 60));\n    }\n    ParseStringTime(last_ob_time) {\n        let split = last_ob_time.split(/[T\\-\\s:]/);\n        if (split.length != 5)\n            return null;\n        return new Date(parseInt(split[0]), parseInt(split[1]) - 1, parseInt(split[2]), parseInt(split[3]), parseInt(split[4]));\n    }\n    ConvertToAPILocale(systemLocale) {\n        if (systemLocale == \"zh-tw\") {\n            return systemLocale;\n        }\n        let lang = systemLocale.split(\"-\")[0];\n        if (lang == \"cs\") {\n            return \"cz\";\n        }\n        return lang;\n    }\n    ConstructQuery(query, loc) {\n        query = query + \"key=\" + this.app.config.ApiKey + \"&lat=\" + loc.lat + \"&lon=\" + loc.lon + \"&units=S\";\n        let lang = this.ConvertToAPILocale(this.app.config.currentLocale);\n        if (IsLangSupported(lang, this.supportedLanguages) && this.app.config._translateCondition) {\n            query = query + \"&lang=\" + lang;\n        }\n        return query;\n    }\n    ;\n    HandleError(message) {\n        if (message.code == 403) {\n            this.app.ShowError({\n                type: \"hard\",\n                userError: true,\n                detail: \"bad key\",\n                service: \"weatherbit\",\n                message: _(\"Please Make sure you\\nentered the API key correctly and your account is not locked\")\n            });\n        }\n        return true;\n    }\n    HandleHourlyError(message) {\n        if (message.code == 403) {\n            this.hourlyAccess = false;\n            logger_Log.Instance.Print(\"Hourly forecast is inaccessible, skipping\");\n            this.app.ShowError({\n                type: \"silent\",\n                userError: false,\n                detail: \"bad key\",\n                service: \"weatherbit\",\n                message: _(\"API key doesn't provide access to Hourly Weather, skipping\")\n            });\n        }\n        return true;\n    }\n    ResolveIcon(icon) {\n        switch (icon) {\n            case \"t01n\":\n            case \"t01d\":\n            case \"t02n\":\n            case \"t02d\":\n            case \"t03n\":\n            case \"t03d\":\n            case \"t04n\":\n            case \"t04d\":\n            case \"t05n\":\n            case \"t05d\":\n                return [\"weather-storm\"];\n            case \"d01d\":\n            case \"d01n\":\n            case \"d02d\":\n            case \"d02n\":\n            case \"d03d\":\n            case \"d03n\":\n                return [\"weather-showers-scattered\", \"weather-rain\", \"weather-freezing-rain\"];\n            case \"r01d\":\n            case \"r01n\":\n            case \"r02d\":\n            case \"r02n\":\n            case \"r03d\":\n            case \"r03n\":\n            case \"r04d\":\n            case \"r04n\":\n            case \"r05d\":\n            case \"r05n\":\n            case \"r06d\":\n            case \"r06n\":\n                return [\"weather-rain\", \"weather-freezing-rain\", \"weather-showers-scattered\"];\n            case \"s01d\":\n            case \"s01n\":\n            case \"s02d\":\n            case \"s02n\":\n            case \"s03d\":\n            case \"s03n\":\n            case \"s04d\":\n            case \"s04n\":\n            case \"s06d\":\n            case \"s06n\":\n                return [\"weather-snow\"];\n            case \"s05d\":\n            case \"s05n\":\n                return [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers-scattered\"];\n            case \"a01d\":\n            case \"a01n\":\n            case \"a02d\":\n            case \"a02n\":\n            case \"a03d\":\n            case \"a03n\":\n            case \"a04d\":\n            case \"a04n\":\n            case \"a05d\":\n            case \"a05n\":\n            case \"a06d\":\n            case \"a06n\":\n                return [\"weather-fog\"];\n            case \"c02d\":\n                return [\"weather-few-clouds\"];\n            case \"c02n\":\n                return [\"weather-few-clouds-night\"];\n            case \"c01n\":\n                return [\"weather-clear-night\"];\n            case \"c01d\":\n                return [\"weather-clear\"];\n            case \"c03d\":\n                return [\"weather-clouds\", \"weather-few-clouds\", \"weather-overcast\"];\n            case \"c03n\":\n                return [\"weather-clouds-night\", \"weather-few-clouds-night\", \"weather-overcast\"];\n            case \"c04n\":\n                return [\"weather-overcast\", \"weather-clouds-night\", \"weather-few-clouds-night\"];\n            case \"c04d\":\n                return [\"weather-overcast\", \"weather-clouds\", \"weather-few-clouds\"];\n            case \"u00d\":\n            case \"u00n\":\n                return [\"weather-severe-alert\"];\n            default:\n                return [\"weather-severe-alert\"];\n        }\n    }\n    ;\n    ResolveCustomIcon(icon) {\n        switch (icon) {\n            case \"t01d\":\n            case \"t02d\":\n            case \"t03d\":\n                return \"day-thunderstorm-symbolic\";\n            case \"t04d\":\n            case \"t05d\":\n                return \"thunderstorm-symbolic\";\n            case \"t01n\":\n            case \"t02n\":\n            case \"t03n\":\n                return \"night-alt-thunderstorm-symbolic\";\n            case \"t04n\":\n            case \"t05n\":\n                return \"thunderstorm-symbolic\";\n            case \"d01d\":\n            case \"d02d\":\n            case \"d03d\":\n            case \"d01n\":\n            case \"d02n\":\n            case \"d03n\":\n                return \"showers-symbolic\";\n            case \"r01d\":\n            case \"r02d\":\n            case \"r03d\":\n            case \"r01n\":\n            case \"r02n\":\n            case \"r03n\":\n                return \"rain-symbolic\";\n            case \"r04d\":\n            case \"r05d\":\n                return \"day-rain-symbolic\";\n            case \"r06d\":\n                return \"rain-symbolic\";\n            case \"r04n\":\n            case \"r05n\":\n                return \"night-alt-rain-symbolic\";\n            case \"r06n\":\n                return \"rain-symbolic\";\n            case \"s01d\":\n            case \"s04d\":\n                return \"day-snow-symbolic\";\n            case \"s02d\":\n            case \"s03d\":\n            case \"s06d\":\n                return \"snow-symbolic\";\n            case \"s01n\":\n            case \"s04n\":\n                return \"night-alt-snow-symbolic\";\n            case \"s02n\":\n            case \"s03n\":\n            case \"s06n\":\n                return \"snow-symbolic\";\n            case \"s05d\":\n            case \"s05n\":\n                return \"sleet-symbolic\";\n            case \"a01d\":\n            case \"a02d\":\n            case \"a03d\":\n            case \"a04d\":\n            case \"a05d\":\n            case \"a06d\":\n                return \"day-fog-symbolic\";\n            case \"a01n\":\n            case \"a02n\":\n            case \"a03n\":\n            case \"a04n\":\n            case \"a05n\":\n            case \"a06n\":\n                return \"night-fog-symbolic\";\n            case \"c02d\":\n                return \"day-cloudy-symbolic\";\n            case \"c02n\":\n                return \"night-alt-cloudy-symbolic\";\n            case \"c01n\":\n                return \"night-clear-symbolic\";\n            case \"c01d\":\n                return \"day-sunny-symbolic\";\n            case \"c03d\":\n                return \"day-cloudy-symbolic\";\n            case \"c03n\":\n                return \"night-alt-cloudy-symbolic\";\n            case \"c04n\":\n                return \"cloudy-symbolic\";\n            case \"c04d\":\n                return \"cloudy-symbolic\";\n            case \"u00d\":\n            case \"u00n\":\n                return \"cloud-refresh-symbolic\";\n            default:\n                return \"cloud-refresh-symbolic\";\n        }\n    }\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/met_norway.ts\n\n\n\nclass MetNorway {\n    constructor(app) {\n        this.prettyName = _(\"MET Norway\");\n        this.name = \"MetNorway\";\n        this.maxForecastSupport = 10;\n        this.website = \"https://www.met.no/en\";\n        this.maxHourlyForecastSupport = 48;\n        this.needsApiKey = false;\n        this.baseUrl = \"https://api.met.no/weatherapi/locationforecast/2.0/complete?\";\n        this.app = app;\n        this.sunCalc = new SunCalc();\n    }\n    async GetWeather(loc) {\n        let query = this.GetUrl(loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query);\n        if (!json) {\n            logger_Log.Instance.Error(\"MET Norway: Empty response from API\");\n            return null;\n        }\n        return this.ParseWeather(json);\n    }\n    RemoveEarlierElements(json) {\n        let now = new Date();\n        let startIndex = -1;\n        for (let i = 0; i < json.properties.timeseries.length; i++) {\n            const element = json.properties.timeseries[i];\n            let timestamp = new Date(element.time);\n            if (timestamp < now && now.getHours() != timestamp.getHours()) {\n                startIndex = i;\n            }\n            else {\n                break;\n            }\n        }\n        if (startIndex != -1) {\n            logger_Log.Instance.Debug(\"Removing outdated weather information...\");\n            json.properties.timeseries.splice(0, startIndex + 1);\n        }\n        return json;\n    }\n    ParseWeather(json) {\n        json = this.RemoveEarlierElements(json);\n        let times = this.sunCalc.getTimes(new Date(), json.geometry.coordinates[1], json.geometry.coordinates[0], json.geometry.coordinates[2]);\n        let current = json.properties.timeseries[0];\n        let result = {\n            temperature: CelsiusToKelvin(current.data.instant.details.air_temperature),\n            coord: {\n                lat: json.geometry.coordinates[1],\n                lon: json.geometry.coordinates[0]\n            },\n            date: new Date(current.time),\n            condition: this.ResolveCondition(current.data.next_1_hours.summary.symbol_code, IsNight(times)),\n            humidity: current.data.instant.details.relative_humidity,\n            pressure: current.data.instant.details.air_pressure_at_sea_level,\n            extra_field: {\n                name: _(\"Cloudiness\"),\n                type: \"percent\",\n                value: current.data.instant.details.cloud_area_fraction\n            },\n            sunrise: times.sunrise,\n            sunset: times.sunset,\n            wind: {\n                degree: current.data.instant.details.wind_from_direction,\n                speed: current.data.instant.details.wind_speed\n            },\n            location: {\n                url: null,\n            },\n            forecasts: []\n        };\n        let hourlyForecasts = [];\n        for (let i = 0; i < json.properties.timeseries.length; i++) {\n            const element = json.properties.timeseries[i];\n            if (!!element.data.next_1_hours) {\n                hourlyForecasts.push({\n                    date: new Date(element.time),\n                    temp: CelsiusToKelvin(element.data.instant.details.air_temperature),\n                    precipitation: {\n                        type: \"rain\",\n                        volume: element.data.next_1_hours.details.precipitation_amount\n                    },\n                    condition: this.ResolveCondition(element.data.next_1_hours.summary.symbol_code, IsNight(times, new Date(element.time)))\n                });\n            }\n        }\n        result.hourlyForecasts = hourlyForecasts;\n        result.forecasts = this.BuildForecasts(json.properties.timeseries);\n        return result;\n    }\n    BuildForecasts(forecastsData) {\n        let forecasts = [];\n        let days = this.SortDataByDay(forecastsData);\n        for (let i = 0; i < days.length; i++) {\n            let forecast = {\n                condition: {\n                    customIcon: \"cloudy-symbolic\",\n                    description: \"\",\n                    icons: [],\n                    main: \"\"\n                },\n                date: null,\n                temp_max: Number.NEGATIVE_INFINITY,\n                temp_min: Number.POSITIVE_INFINITY\n            };\n            let conditionCounter = {};\n            for (let j = 0; j < days[i].length; j++) {\n                const element = days[i][j];\n                if (!element.data.next_6_hours)\n                    continue;\n                forecast.date = new Date(element.time);\n                if (element.data.next_6_hours.details.air_temperature_max > forecast.temp_max)\n                    forecast.temp_max = element.data.next_6_hours.details.air_temperature_max;\n                if (element.data.next_6_hours.details.air_temperature_min < forecast.temp_min)\n                    forecast.temp_min = element.data.next_6_hours.details.air_temperature_min;\n                let [symbol] = element.data.next_6_hours.summary.symbol_code.split(\"_\");\n                let severity = conditionSeverity[symbol];\n                if (!conditionCounter[severity])\n                    conditionCounter[severity] = { count: 0, name: symbol };\n                conditionCounter[severity].count = conditionCounter[severity].count + 1;\n            }\n            forecast.temp_max = CelsiusToKelvin(forecast.temp_max);\n            forecast.temp_min = CelsiusToKelvin(forecast.temp_min);\n            forecast.condition = this.ResolveCondition(this.GetMostSevereCondition(conditionCounter));\n            forecasts.push(forecast);\n        }\n        return forecasts;\n    }\n    GetEarliestDataForToday(events) {\n        let earliest = 0;\n        for (let i = 0; i < events.length; i++) {\n            const earliestElementTime = new Date(events[earliest].time);\n            let timestamp = new Date(events[i].time);\n            if (timestamp.toDateString() != new Date().toDateString())\n                continue;\n            if (earliestElementTime < timestamp)\n                continue;\n            earliest = i;\n        }\n        return events[earliest];\n    }\n    SortDataByDay(data) {\n        let days = [];\n        let currentDay = new Date(this.GetEarliestDataForToday(data).time);\n        let dayIndex = 0;\n        days.push([]);\n        for (let i = 0; i < data.length; i++) {\n            const element = data[i];\n            const timestamp = new Date(element.time);\n            if (timestamp.toDateString() == currentDay.toDateString()) {\n                days[dayIndex].push(element);\n            }\n            else if (timestamp.toDateString() != currentDay.toDateString()) {\n                dayIndex++;\n                currentDay = timestamp;\n                days.push([]);\n                days[dayIndex].push(element);\n            }\n        }\n        return days;\n    }\n    GetMostCommonCondition(count) {\n        let result = null;\n        for (let key in count) {\n            if (result == null)\n                result = parseInt(key);\n            if (count[result].count < count[key].count)\n                result = parseInt(key);\n        }\n        return count[result].name;\n    }\n    GetMostSevereCondition(conditions) {\n        let result = null;\n        for (let key in conditions) {\n            let conditionID = parseInt(key);\n            let resultStripped = (result > 100) ? result - 100 : result;\n            let conditionIDStripped = (conditionID > 100) ? conditionID - 100 : conditionID;\n            if (conditionIDStripped > resultStripped)\n                result = conditionID;\n        }\n        if (result <= 4) {\n            return this.GetMostCommonCondition(conditions);\n        }\n        return conditions[result].name;\n    }\n    GetUrl(loc) {\n        let url = this.baseUrl + \"lat=\";\n        url += (loc.lat + \"&lon=\" + loc.lon);\n        return url;\n    }\n    DeconstructCondition(icon) {\n        let condition = icon.split(\"_\");\n        return {\n            timeOfDay: condition[1],\n            condition: condition[0]\n        };\n    }\n    ResolveCondition(icon, isNight = false) {\n        let weather = this.DeconstructCondition(icon);\n        switch (weather.condition) {\n            case \"clearsky\":\n                return {\n                    customIcon: (isNight) ? \"night-clear-symbolic\" : \"day-sunny-symbolic\",\n                    main: _(\"Clear sky\"),\n                    description: _(\"Clear sky\"),\n                    icons: (isNight) ? [\"weather-clear-night\"] : [\"weather-clear\"]\n                };\n            case \"cloudy\":\n                return {\n                    customIcon: \"cloudy-symbolic\",\n                    main: _(\"Cloudy\"),\n                    description: _(\"Cloudy\"),\n                    icons: (isNight) ? [\"weather-overcast\", \"weather-clouds-night\", \"weather-few-clouds-night\"] : [\"weather-overcast\", \"weather-clouds\", \"weather-few-clouds\"]\n                };\n            case \"fair\":\n                return {\n                    customIcon: (isNight) ? \"night-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    main: _(\"Fair\"),\n                    description: _(\"Fair\"),\n                    icons: (isNight) ? [\"weather-few-clouds-night\", \"weather-clouds-night\", \"weather-overcast\"] : [\"weather-few-clouds\", \"weather-clouds\", \"weather-overcast\"]\n                };\n            case \"fog\":\n                return {\n                    customIcon: \"fog-symbolic\",\n                    main: _(\"Fog\"),\n                    description: _(\"Fog\"),\n                    icons: [\"weather-fog\", \"weather-severe-alert\"]\n                };\n            case \"heavyrain\":\n                return {\n                    customIcon: \"rain-symbolic\",\n                    main: _(\"Heavy rain\"),\n                    description: _(\"Heavy rain\"),\n                    icons: [\"weather-rain\", \"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case \"heavyrainandthunder\":\n                return {\n                    customIcon: \"thunderstorm-symbolic\",\n                    main: _(\"Heavy rain\"),\n                    description: _(\"Heavy rain and thunder\"),\n                    icons: [\"weather-rain\", \"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case \"heavyrainshowers\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-rain-symbolic\" : \"day-rain-symbolic\",\n                    main: _(\"Heavy rain\"),\n                    description: _(\"Heavy rain showers\"),\n                    icons: [\"weather-showers\", \"weather-showers-scattered\"]\n                };\n            case \"heavyrainshowersandthunder\":\n                return {\n                    customIcon: (IsNight) ? \"night-alt-thunderstorm-symbolic\" : \"day-thunderstorm-symbolic\",\n                    main: _(\"Heavy rain\"),\n                    description: _(\"Heavy rain showers and thunder\"),\n                    icons: [\"weather-showers\", \"weather-showers-scattered\"]\n                };\n            case \"heavysleet\":\n                return {\n                    customIcon: \"sleet-symbolic\",\n                    main: _(\"Heavy sleet\"),\n                    description: _(\"Heavy sleet\"),\n                    icons: [\"weather-showers\", \"weather-freezing-rain\", \"weather-rain\"]\n                };\n            case \"heavysleetandthunder\":\n                return {\n                    customIcon: \"sleet-storm-symbolic\",\n                    main: _(\"Heavy sleet\"),\n                    description: _(\"Heavy sleet and thunder\"),\n                    icons: [\"weather-showers\", \"weather-freezing-rain\", \"weather-rain\"]\n                };\n            case \"heavysleetshowers\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-sleet-symbolic\" : \"day-sleet-symbolic\",\n                    main: _(\"Heavy sleet\"),\n                    description: _(\"Heavy sleet showers\"),\n                    icons: [\"weather-showers\", \"weather-showers-scattered\", \"weather-freezing-rain\"]\n                };\n            case \"heavysleetshowersandthunder\":\n                return {\n                    customIcon: (IsNight) ? \"night-alt-sleet-storm-symbolic\" : \"day-sleet-storm-symbolic\",\n                    main: _(\"Heavy sleet\"),\n                    description: _(\"Heavy sleet showers and thunder\"),\n                    icons: [\"weather-showers\", \"weather-showers-scattered\", \"weather-freezing-rain\"]\n                };\n            case \"heavysnow\":\n                return {\n                    customIcon: \"snow-symbolic\",\n                    main: _(\"Heavy snow\"),\n                    description: _(\"Heavy snow\"),\n                    icons: [\"weather-snow\"]\n                };\n            case \"heavysnowandthunder\":\n                return {\n                    customIcon: \"snow-symbolic\",\n                    main: _(\"Heavy snow\"),\n                    description: _(\"Heavy snow and thunder\"),\n                    icons: [\"weather-snow\"]\n                };\n            case \"heavysnowshowers\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-snow-symbolic\" : \"day-snow-symbolic\",\n                    main: _(\"Heavy snow\"),\n                    description: _(\"Heavy snow showers\"),\n                    icons: [\"weather-snow-scattered\", \"weather-snow\"]\n                };\n            case \"heavysnowshowersandthunder\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-snow-thunderstorm-symbolic\" : \"day-snow-thunderstorm-symbolic\",\n                    main: _(\"Heavy snow\"),\n                    description: _(\"Heavy snow showers and thunder\"),\n                    icons: [\"weather-snow-scattered\", \"weather-snow\"]\n                };\n            case \"lightrain\":\n                return {\n                    customIcon: \"rain-mix-symbolic\",\n                    main: _(\"Light rain\"),\n                    description: _(\"Light rain\"),\n                    icons: [\"weather-showers-scattered\", \"weather-rain\"]\n                };\n            case \"lightrainandthunder\":\n                return {\n                    customIcon: \"rain-mix-storm-symbolic\",\n                    main: _(\"Light rain\"),\n                    description: _(\"Light rain and thunder\"),\n                    icons: [\"weather-showers-scattered\", \"weather-rain\"]\n                };\n            case \"lightrainshowers\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-rain-mix-symbolic\" : \"day-rain-mix-symbolic\",\n                    main: _(\"Light rain\"),\n                    description: _(\"Light rain showers\"),\n                    icons: [\"weather-showers-scattered\", \"weather-rain\"]\n                };\n            case \"lightrainshowersandthunder\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-rain-mix-storm-symbolic\" : \"day-rain-mix-storm-symbolic\",\n                    main: _(\"Light rain\"),\n                    description: _(\"Light rain showers and thunder\"),\n                    icons: [\"weather-showers-scattered\", \"weather-rain\"]\n                };\n            case \"lightsleet\":\n                return {\n                    customIcon: \"sleet-symbolic\",\n                    main: _(\"Light sleet\"),\n                    description: _(\"Light sleet\"),\n                    icons: [\"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case \"lightsleetandthunder\":\n                return {\n                    customIcon: \"sleet-storm-symbolic\",\n                    main: _(\"Light sleet\"),\n                    description: _(\"Light sleet and thunder\"),\n                    icons: [\"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case \"lightsleetshowers\":\n                return {\n                    customIcon: (IsNight) ? \"night-alt-sleet-symbolic\" : \"day-sleet-symbolic\",\n                    main: _(\"Light sleet\"),\n                    description: _(\"Light sleet showers\"),\n                    icons: [\"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case \"lightssleetshowersandthunder\":\n                return {\n                    customIcon: (IsNight) ? \"night-alt-sleet-storm-symbolic\" : \"day-sleet-storm-symbolic\",\n                    main: _(\"Light sleet\"),\n                    description: _(\"Light sleet showers and thunder\"),\n                    icons: [\"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case \"lightsnow\":\n                return {\n                    customIcon: \"snow-symbolic\",\n                    main: _(\"Light snow\"),\n                    description: _(\"Light snow\"),\n                    icons: [\"weather-snow\"]\n                };\n            case \"lightsnowandthunder\":\n                return {\n                    customIcon: \"snow-storm-symbolic\",\n                    main: _(\"Light snow\"),\n                    description: _(\"Light snow and thunder\"),\n                    icons: [\"weather-snow\"]\n                };\n            case \"lightsnowshowers\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-snow-symbolic\" : \"day-snow-symbolic\",\n                    main: _(\"Light snow\"),\n                    description: _(\"Light snow showers\"),\n                    icons: [\"weather-snow-scattered\", \"weather-snow\"]\n                };\n            case \"lightssnowshowersandthunder\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-snow-thunderstorm-symbolic\" : \"day-snow-thunderstorm-symbolic\",\n                    main: _(\"Light snow\"),\n                    description: _(\"Light snow showers and thunder\"),\n                    icons: [\"weather-snow-scattered\", \"weather-snow\"]\n                };\n            case \"partlycloudy\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    main: _(\"Partly cloudy\"),\n                    description: _(\"Partly cloudy\"),\n                    icons: (isNight) ? [\"weather-clouds-night\", \"weather-few-clouds-night\", \"weather-overcast\"] : [\"weather-clouds\", \"weather-few-clouds\", \"weather-overcast\"]\n                };\n            case \"rain\":\n                return {\n                    customIcon: \"rain-symbolic\",\n                    main: _(\"Rain\"),\n                    description: _(\"Rain\"),\n                    icons: [\"weather-rain\", \"weather-freezing-rain\", \"weather-showers-scattered\"]\n                };\n            case \"rainandthunder\":\n                return {\n                    customIcon: \"thunderstorm-symbolic\",\n                    main: _(\"Rain\"),\n                    description: _(\"Rain and thunder\"),\n                    icons: [\"weather-storm\", \"weather-rain\", \"weather-freezing-rain\", \"weather-showers-scattered\"]\n                };\n            case \"rainshowers\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-rain-mix-symbolic\" : \"day-rain-mix-symbolic\",\n                    main: _(\"Rain showers\"),\n                    description: _(\"Rain showers\"),\n                    icons: [\"weather-showers-scattered\", \"weather-rain\", \"weather-freezing-rain\"]\n                };\n            case \"rainshowersandthunder\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-rain-mix-storm-symbolic\" : \"day-rain-mix-storm-symbolic\",\n                    main: _(\"Rain showers\"),\n                    description: _(\"Rain showers and thunder\"),\n                    icons: [\"weather-showers-scattered\", \"weather-rain\", \"weather-freezing-rain\"]\n                };\n            case \"sleet\":\n                return {\n                    customIcon: \"sleet-symbolic\",\n                    main: _(\"Sleet\"),\n                    description: _(\"Sleet\"),\n                    icons: [\"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case \"sleetandthunder\":\n                return {\n                    customIcon: \"sleet-storm-symbolic\",\n                    main: _(\"Sleet\"),\n                    description: _(\"Sleet and thunder\"),\n                    icons: [\"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case \"sleetshowers\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-sleet-symbolic\" : \"day-sleet-symbolic\",\n                    main: _(\"Sleet\"),\n                    description: _(\"Sleet showers\"),\n                    icons: [\"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case \"sleetshowersandthunder\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-sleet-storm-symbolic\" : \"day-sleet-storm-symbolic\",\n                    main: _(\"Sleet\"),\n                    description: _(\"Sleet showers and thunder\"),\n                    icons: [\"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case \"snow\":\n                return {\n                    customIcon: \"snow-symbolic\",\n                    main: _(\"Snow\"),\n                    description: _(\"Snow\"),\n                    icons: [\"weather-snow\"]\n                };\n            case \"snowandthunder\":\n                return {\n                    customIcon: \"snow-storm-symbolic\",\n                    main: _(\"Snow\"),\n                    description: _(\"Snow and thunder\"),\n                    icons: [\"weather-snow\"]\n                };\n            case \"snowshowers\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-snow-symbolic\" : \"day-snow-symbolic\",\n                    main: _(\"Snow showers\"),\n                    description: _(\"Snow showers\"),\n                    icons: [\"weather-snow-scattered\", \"weather-snow\"]\n                };\n            case \"snowshowersandthunder\":\n                return {\n                    customIcon: (isNight) ? \"night-alt-snow-thunderstorm-symbolic\" : \"day-snow-thunderstorm-symbolic\",\n                    main: _(\"Snow showers\"),\n                    description: _(\"Snow showers and thunder\"),\n                    icons: [\"weather-snow-scattered\", \"weather-snow\"]\n                };\n            default:\n                logger_Log.Instance.Error(\"condition code not found: \" + weather.condition);\n                return {\n                    customIcon: \"cloud-refresh-symbolic\",\n                    main: _(\"Unknown\"),\n                    description: _(\"Unknown\"),\n                    icons: [\"weather-severe-alert\"]\n                };\n        }\n    }\n}\nconst conditionSeverity = {\n    clearsky: 1,\n    cloudy: 4,\n    fair: 2,\n    fog: 15,\n    heavyrain: 10,\n    heavyrainandthunder: 11,\n    heavyrainshowers: 41,\n    heavyrainshowersandthunder: 25,\n    heavysleet: 48,\n    heavysleetandthunder: 32,\n    heavysleetshowers: 43,\n    heavysleetshowersandthunder: 27,\n    heavysnow: 50,\n    heavysnowandthunder: 34,\n    heavysnowshowers: 45,\n    heavysnowshowersandthunder: 29,\n    lightrain: 46,\n    lightrainandthunder: 30,\n    lightrainshowers: 40,\n    lightrainshowersandthunder: 24,\n    lightsleet: 47,\n    lightsleetandthunder: 31,\n    lightsleetshowers: 42,\n    lightsnow: 49,\n    lightsnowandthunder: 33,\n    lightsnowshowers: 44,\n    lightssleetshowersandthunder: 26,\n    lightssnowshowersandthunder: 28,\n    partlycloudy: 3,\n    rain: 9,\n    rainandthunder: 22,\n    rainshowers: 5,\n    rainshowersandthunder: 6,\n    sleet: 12,\n    sleetandthunder: 23,\n    sleetshowers: 7,\n    sleetshowersandthunder: 20,\n    snow: 13,\n    snowandthunder: 14,\n    snowshowers: 8,\n    snowshowersandthunder: 21\n};\n\n;// CONCATENATED MODULE: ./src/3_8/lib/httpLib.ts\n\nconst { Message, ProxyResolverDefault, SessionAsync } = imports.gi.Soup;\nclass HttpLib {\n    constructor() {\n        this._httpSession = new SessionAsync();\n        this._httpSession.user_agent = \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:37.0) Gecko/20100101 Firefox/37.0\";\n        this._httpSession.timeout = 10;\n        this._httpSession.idle_timeout = 10;\n        this._httpSession.add_feature(new ProxyResolverDefault());\n    }\n    static get Instance() {\n        if (this.instance == null)\n            this.instance = new HttpLib();\n        return this.instance;\n    }\n    async LoadJsonAsync(url, params, method = \"GET\") {\n        let response = await this.LoadAsync(url, params, method);\n        if (!response.Success)\n            return response;\n        try {\n            let payload = JSON.parse(response.Data);\n            response.Data = payload;\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"Error: API response is not JSON. The response: \" + response.Data);\n            response.Success = false;\n            response.ErrorData = {\n                code: -1,\n                message: \"bad api response - non json\",\n                reason_phrase: null,\n            };\n        }\n        finally {\n            return response;\n        }\n    }\n    async LoadAsync(url, params, method = \"GET\") {\n        var _a, _b, _c, _d, _e;\n        let message = await this.Send(url, params, method);\n        let error = null;\n        if (!message) {\n            error = {\n                code: 0,\n                message: \"no network response\",\n                reason_phrase: \"no network response\",\n                response: null\n            };\n        }\n        else if (message.status_code < 100 && message.status_code >= 0) {\n            error = {\n                code: message.status_code,\n                message: \"no network response\",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        else if (message.status_code > 300 || message.status_code < 200) {\n            error = {\n                code: message.status_code,\n                message: \"bad status code\",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        else if (!message.response_body) {\n            error = {\n                code: message.status_code,\n                message: \"no response body\",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        else if (!message.response_body.data) {\n            error = {\n                code: message.status_code,\n                message: \"no response data\",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        if ((message === null || message === void 0 ? void 0 : message.status_code) > 200 && (message === null || message === void 0 ? void 0 : message.status_code) < 300) {\n            logger_Log.Instance.Print(\"Wrning: API returned non-OK status code '\" + (message === null || message === void 0 ? void 0 : message.status_code) + \"'\");\n        }\n        logger_Log.Instance.Debug2(\"API full response: \" + ((_b = (_a = message === null || message === void 0 ? void 0 : message.response_body) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.toString()));\n        if (error != null)\n            logger_Log.Instance.Error(\"Error calling URL: \" + error.reason_phrase + \", \" + ((_d = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.response_body) === null || _d === void 0 ? void 0 : _d.data));\n        return {\n            Success: (error == null),\n            Data: (_e = message === null || message === void 0 ? void 0 : message.response_body) === null || _e === void 0 ? void 0 : _e.data,\n            ErrorData: error\n        };\n    }\n    async Send(url, params, method = \"GET\") {\n        if (params != null) {\n            let items = Object.keys(params);\n            for (let index = 0; index < items.length; index++) {\n                const item = items[index];\n                url += (index == 0) ? \"?\" : \"&\";\n                url += (item) + \"=\" + params[item];\n            }\n        }\n        let query = encodeURI(url);\n        logger_Log.Instance.Debug(\"URL called: \" + query);\n        let data = await new Promise((resolve, reject) => {\n            let message = Message.new(method, query);\n            this._httpSession.queue_message(message, (session, message) => {\n                resolve(message);\n            });\n        });\n        return data;\n    }\n}\nHttpLib.instance = null;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/visualcrossing.ts\n\nclass VisualCrossing {\n    constructor(app) {\n        this.prettyName = _(\"Visual Crossing\");\n        this.name = \"Visual Crossing\";\n        this.maxForecastSupport = 15;\n        this.maxHourlyForecastSupport = 336;\n        this.website = \"https://weather.visualcrossing.com/\";\n        this.needsApiKey = true;\n        this.url = \"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/\";\n        this.params = {\n            unitGroup: \"metric\",\n            key: null,\n            include: \"fcst,hours,current\",\n            lang: \"id\"\n        };\n        this.supportedLangs = [\"en\", \"de\", \"fr\", \"es\"];\n        this.app = app;\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        this.params['key'] = this.app.config.ApiKey;\n        let translate = true;\n        if (IsLangSupported(this.app.config.Language, this.supportedLangs)) {\n            this.params['lang'] = this.app.config.Language;\n            translate = false;\n        }\n        let url = this.url + loc.lat + \",\" + loc.lon;\n        let json = await this.app.LoadJsonAsync(url, this.params, (e) => this.HandleHttpError(e));\n        if (!json)\n            return null;\n        return this.ParseWeather(json, translate);\n    }\n    ParseWeather(weather, translate) {\n        var _a, _b, _c, _d, _e, _f;\n        let currentHour = this.GetCurrentHour(weather.days);\n        let result = {\n            date: new Date(weather.currentConditions.datetimeEpoch * 1000),\n            location: {\n                url: encodeURI(\"https://www.visualcrossing.com/weather-history/\" + weather.latitude + \",\" + weather.longitude + \"/\"),\n                timeZone: weather.timezone,\n                tzOffset: weather.tzoffset,\n            },\n            coord: {\n                lat: weather.latitude,\n                lon: weather.longitude,\n            },\n            humidity: (_a = weather.currentConditions.humidity) !== null && _a !== void 0 ? _a : currentHour.humidity,\n            pressure: (_b = weather.currentConditions.pressure) !== null && _b !== void 0 ? _b : currentHour.pressure,\n            wind: {\n                degree: (_c = weather.currentConditions.winddir) !== null && _c !== void 0 ? _c : currentHour.winddir,\n                speed: (_d = weather.currentConditions.windspeed) !== null && _d !== void 0 ? _d : currentHour.windspeed,\n            },\n            temperature: CelsiusToKelvin((_e = weather.currentConditions.temp) !== null && _e !== void 0 ? _e : currentHour.temp),\n            sunrise: new Date(weather.currentConditions.sunriseEpoch * 1000),\n            sunset: new Date(weather.currentConditions.sunsetEpoch * 1000),\n            condition: this.GenerateCondition(weather.currentConditions.icon, weather.currentConditions.conditions, translate),\n            extra_field: {\n                name: _(\"Feels Like\"),\n                type: \"temperature\",\n                value: CelsiusToKelvin((_f = currentHour.feelslike) !== null && _f !== void 0 ? _f : weather.currentConditions.feelslike)\n            },\n            forecasts: this.ParseForecasts(weather.days, translate),\n            hourlyForecasts: this.ParseHourlyForecasts(weather.days, translate)\n        };\n        return result;\n    }\n    ParseForecasts(forecasts, translate) {\n        let result = [];\n        for (let index = 0; index < forecasts.length; index++) {\n            const element = forecasts[index];\n            result.push({\n                date: new Date(element.datetimeEpoch * 1000),\n                condition: this.GenerateCondition(element.icon, element.conditions, translate),\n                temp_max: CelsiusToKelvin(element.tempmax),\n                temp_min: CelsiusToKelvin(element.tempmin)\n            });\n        }\n        return result;\n    }\n    ParseHourlyForecasts(forecasts, translate) {\n        let currentHour = new Date();\n        currentHour.setMinutes(0, 0, 0);\n        let result = [];\n        for (let index = 0; index < forecasts.length; index++) {\n            const element = forecasts[index];\n            for (let index = 0; index < element.hours.length; index++) {\n                const hour = element.hours[index];\n                let time = new Date(hour.datetimeEpoch * 1000);\n                if (time < currentHour)\n                    continue;\n                let item = {\n                    date: time,\n                    temp: CelsiusToKelvin(hour.temp),\n                    condition: this.GenerateCondition(hour.icon, hour.conditions, translate)\n                };\n                if (hour.preciptype != null) {\n                    item.precipitation = {\n                        type: hour.preciptype[0],\n                        chance: hour.precipprob,\n                        volume: hour.precip\n                    };\n                }\n                result.push(item);\n            }\n        }\n        return result;\n    }\n    GetCurrentHour(forecasts) {\n        if ((forecasts === null || forecasts === void 0 ? void 0 : forecasts.length) < 1)\n            return null;\n        let currentHour = new Date();\n        currentHour.setMinutes(0, 0, 0);\n        const element = forecasts[0];\n        for (let index = 0; index < element.hours.length; index++) {\n            const hour = element.hours[index];\n            let time = new Date(hour.datetimeEpoch * 1000);\n            if (time < currentHour)\n                continue;\n            return hour;\n        }\n        return null;\n    }\n    GenerateCondition(icon, condition, translate) {\n        let result = {\n            main: (translate) ? this.ResolveTypeID(this.GetFirstCondition(condition)) : this.GetFirstCondition(condition),\n            description: (translate) ? this.ResolveTypeIDs(condition) : condition,\n            icons: [],\n            customIcon: \"refresh-symbolic\"\n        };\n        switch (icon) {\n            case \"clear-day\":\n                result.icons = [\"weather-clear\"];\n                result.customIcon = \"day-sunny-symbolic\";\n                break;\n            case \"clear-night\":\n                result.icons = [\"weather-clear-night\"];\n                result.customIcon = \"night-clear-symbolic\";\n                break;\n            case \"partly-cloudy-day\":\n                result.icons = [\"weather-few-clouds\"];\n                result.customIcon = \"day-cloudy-symbolic\";\n                break;\n            case \"partly-cloudy-night\":\n                result.icons = [\"weather-few-clouds-night\"];\n                result.customIcon = \"night-alt-cloudy-symbolic\";\n                break;\n            case \"cloudy\":\n                result.icons = [\"weather-overcast\", \"weather-clouds\", \"weather-many-clouds\"];\n                result.customIcon = \"cloudy-symbolic\";\n                break;\n            case \"wind\":\n                result.icons = [\"weather-windy\", \"weather-breeze\"];\n                result.customIcon = \"windy-symbolic\";\n                break;\n            case \"fog\":\n                result.icons = [\"weather-fog\"];\n                result.customIcon = \"fog-symbolic\";\n                break;\n            case \"rain\":\n                result.icons = [\"weather-rain\", \"weather-freezing-rain\", \"weather-snow-rain\", \"weather-showers\"];\n                result.customIcon = \"rain-symbolic\";\n                break;\n            case \"snow\":\n                result.icons = [\"weather-snow\"];\n                result.customIcon = \"snow-symbolic\";\n                break;\n        }\n        return result;\n    }\n    GetFirstCondition(condition) {\n        let split = condition.split(\", \");\n        return split[0];\n    }\n    ResolveTypeID(condition) {\n        switch (condition.toLowerCase()) {\n            case \"type_1\":\n                return _(\"Blowing or drifting snow\");\n            case \"type_2\":\n                return _(\"Drizzle\");\n            case \"type_3\":\n                return _(\"Heavy drizzle\");\n            case \"type_4\":\n                return _(\"Light drizzle\");\n            case \"type_5\":\n                return _(\"Heavy drizzle/rain\");\n            case \"type_6\":\n                return _(\"Light drizzle/rain\");\n            case \"type_7\":\n                return _(\"Duststorm\");\n            case \"type_8\":\n                return _(\"Fog\");\n            case \"type_9\":\n                return _(\"Freezing drizzle/freezing rain\");\n            case \"type_10\":\n                return _(\"Heavy freezing drizzle/freezing rain\");\n            case \"type_11\":\n                return _(\"Light freezing drizzle/freezing rain\");\n            case \"type_12\":\n                return _(\"Freezing fog\");\n            case \"type_13\":\n                return _(\"Heavy freezing rain\");\n            case \"type_14\":\n                return _(\"Light freezing rain\");\n            case \"type_15\":\n                return _(\"Funnel cloud/tornado\");\n            case \"type_16\":\n                return _(\"Hail showers\");\n            case \"type_17\":\n                return _(\"Ice\");\n            case \"type_18\":\n                return _(\"Lightning without thunder\");\n            case \"type_19\":\n                return _(\"Mist\");\n            case \"type_20\":\n                return _(\"Precipitation in vicinity\");\n            case \"type_21\":\n                return _(\"Rain\");\n            case \"type_22\":\n                return _(\"Heavy rain and snow\");\n            case \"type_23\":\n                return _(\"Light rain And snow\");\n            case \"type_24\":\n                return _(\"Rain showers\");\n            case \"type_25\":\n                return _(\"Heavy rain\");\n            case \"type_26\":\n                return _(\"Light rain\");\n            case \"type_27\":\n                return _(\"Sky coverage decreasing\");\n            case \"type_28\":\n                return _(\"Sky coverage increasing\");\n            case \"type_29\":\n                return _(\"Sky unchanged\");\n            case \"type_30\":\n                return _(\"Smoke or haze\");\n            case \"type_31\":\n                return _(\"Snow\");\n            case \"type_32\":\n                return _(\"Snow and rain showers\");\n            case \"type_33\":\n                return _(\"Snow showers\");\n            case \"type_34\":\n                return _(\"Heavy snow\");\n            case \"type_35\":\n                return _(\"Light snow\");\n            case \"type_36\":\n                return _(\"Squalls\");\n            case \"type_37\":\n                return _(\"Thunderstorm\");\n            case \"type_38\":\n                return _(\"Thunderstorm without precipitation\");\n            case \"type_39\":\n                return _(\"Diamond dust\");\n            case \"type_40\":\n                return _(\"Hail\");\n            case \"type_41\":\n                return _(\"Overcast\");\n            case \"type_42\":\n                return _(\"Partially cloudy\");\n            case \"type_43\":\n                return _(\"Clear\");\n        }\n        return condition;\n    }\n    ResolveTypeIDs(condition) {\n        let result = \"\";\n        let split = condition.split(\", \");\n        for (let index = 0; index < split.length; index++) {\n            const element = split[index];\n            result += this.ResolveTypeID(element);\n            if (index < split.length - 1)\n                result += \", \";\n        }\n        return result;\n    }\n    HandleHttpError(error) {\n        if ((error === null || error === void 0 ? void 0 : error.code) == 401) {\n            this.app.ShowError({\n                type: \"hard\",\n                userError: true,\n                detail: \"bad key\",\n                message: _(\"Please make sure you entered the API key correctly\")\n            });\n            return false;\n        }\n        return true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/climacellV4.ts\n\nclass ClimacellV4 {\n    constructor(app) {\n        this.needsApiKey = true;\n        this.prettyName = _(\"Climacell\");\n        this.name = \"ClimacellV4\";\n        this.maxForecastSupport = 15;\n        this.maxHourlyForecastSupport = 108;\n        this.website = \"https://www.climacell.co/\";\n        this.url = \"https://data.climacell.co/v4/timelines\";\n        this.params = {\n            apikey: null,\n            location: null,\n            timesteps: \"current,1h,1d\",\n            units: \"metric\",\n            fields: \"temperature,temperatureMax,temperatureMin,pressureSurfaceLevel,weatherCode,sunsetTime,sunriseTime,precipitationType,precipitationProbability,precipitationIntensity,windDirection,windSpeed,humidity,temperatureApparent\"\n        };\n        this.app = app;\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        this.params.apikey = this.app.config.ApiKey;\n        this.params.location = loc.lat + \",\" + loc.lon;\n        let response = await this.app.LoadJsonAsync(this.url, this.params, (m) => this.HandleHTTPError(m));\n        if (response == null)\n            return null;\n        return this.ParseWeather(loc, response);\n    }\n    HandleHTTPError(message) {\n        if (message.code == 401) {\n            this.app.ShowError({\n                type: \"hard\",\n                userError: true,\n                detail: \"no key\",\n                service: \"climacell\",\n                message: _(\"Please Make sure you\\nentered the API key that you have from Climacell\")\n            });\n            return false;\n        }\n        return true;\n    }\n    ParseWeather(loc, data) {\n        var _a, _b;\n        let current = (_b = (_a = data.data.timelines.find(x => x.timestep == \"current\")) === null || _a === void 0 ? void 0 : _a.intervals) === null || _b === void 0 ? void 0 : _b[0];\n        let hourly = data.data.timelines.find(x => x.timestep == \"1h\").intervals;\n        let daily = data.data.timelines.find(x => x.timestep == \"1d\").intervals;\n        let result = {\n            coord: {\n                lat: loc.lat,\n                lon: loc.lon\n            },\n            date: new Date(current.startTime),\n            condition: this.ResolveCondition(current.values.weatherCode),\n            humidity: current.values.humidity,\n            pressure: current.values.pressureSurfaceLevel,\n            temperature: CelsiusToKelvin(current.values.temperature),\n            wind: {\n                degree: current.values.windDirection,\n                speed: current.values.windSpeed\n            },\n            sunrise: new Date(daily === null || daily === void 0 ? void 0 : daily[0].values.sunriseTime),\n            sunset: new Date(daily === null || daily === void 0 ? void 0 : daily[0].values.sunsetTime),\n            location: {\n                url: \"https://www.climacell.co/weather\"\n            },\n            extra_field: {\n                name: _(\"Feels Like\"),\n                type: \"temperature\",\n                value: CelsiusToKelvin(current.values.temperatureApparent)\n            },\n            forecasts: []\n        };\n        let hours = [];\n        let days = [];\n        for (let index = 0; index < daily.length; index++) {\n            const element = daily[index];\n            days.push({\n                condition: this.ResolveCondition(element.values.weatherCode),\n                date: new Date(element.startTime),\n                temp_max: CelsiusToKelvin(element.values.temperatureMax),\n                temp_min: CelsiusToKelvin(element.values.temperatureMin)\n            });\n        }\n        for (let index = 0; index < hourly.length; index++) {\n            const element = hourly[index];\n            let hour = {\n                condition: this.ResolveCondition(element.values.weatherCode),\n                date: new Date(element.startTime),\n                temp: CelsiusToKelvin(element.values.temperature)\n            };\n            hour.date.setMinutes(0, 0, 0);\n            if (element.values.precipitationProbability > 0 && element.values.precipitationIntensity > 0) {\n                hour.precipitation = {\n                    chance: element.values.precipitationProbability,\n                    volume: element.values.precipitationIntensity,\n                    type: this.PrecipTypeToAppletType(element.values.precipitationType)\n                };\n            }\n            hours.push(hour);\n        }\n        result.forecasts = days;\n        result.hourlyForecasts = hours;\n        return result;\n    }\n    ResolveCondition(weatherCode, isNight = false) {\n        let result = {\n            customIcon: \"refresh-symbolic\",\n            icons: [\"weather-severe-alert\"],\n            main: _(\"Unknown\"),\n            description: _(\"Unknown\")\n        };\n        switch (weatherCode) {\n            case 0:\n                return result;\n            case 1000:\n                return {\n                    main: isNight ? _(\"Clear\") : _(\"Sunny\"),\n                    description: isNight ? _(\"Clear\") : _(\"Sunny\"),\n                    customIcon: isNight ? \"night-clear-symbolic\" : \"day-sunny-symbolic\",\n                    icons: isNight ? [\"weather-clear-night\"] : [\"weather-clear\"]\n                };\n            case 1001:\n                return {\n                    main: _(\"Cloudy\"),\n                    description: _(\"Cloudy\"),\n                    customIcon: \"cloudy-symbolic\",\n                    icons: [\"weather-overcast\", \"weather-many-clouds\", isNight ? \"weather-clouds-night\" : \"weather-clouds\"]\n                };\n            case 1100:\n                return {\n                    main: _(\"Mostly clear\"),\n                    description: _(\"Mostly clear\"),\n                    customIcon: isNight ? \"night-alt-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    icons: isNight ? [\"weather-few-clouds-night\", \"weather-clouds-night\"] : [\"weather-few-clouds\", \"weather-clouds\"]\n                };\n            case 1101:\n                return {\n                    main: _(\"Partly cloudy\"),\n                    description: _(\"Partly cloudy\"),\n                    customIcon: isNight ? \"night-alt-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    icons: isNight ? [\"weather-clouds-night\", \"weather-few-clouds-night\"] : [\"weather-clouds\", \"weather-few-clouds\"]\n                };\n            case 1102:\n                return {\n                    main: _(\"Mostly cloudy\"),\n                    description: _(\"Mostly cloudy\"),\n                    customIcon: \"cloud-symbolic\",\n                    icons: [\"weather-overcast\", \"weather-many-clouds\", isNight ? \"weather-clouds-night\" : \"weather-clouds\"]\n                };\n            case 2000:\n                return {\n                    main: _(\"Fog\"),\n                    description: _(\"Fog\"),\n                    customIcon: \"fog-symbolic\",\n                    icons: [\"weather-fog\"]\n                };\n            case 2100:\n                return {\n                    main: _(\"Fog\"),\n                    description: _(\"Light fog\"),\n                    customIcon: isNight ? \"night-fog-symbolic\" : \"day-fog-symbolic\",\n                    icons: [\"weather-fog\"]\n                };\n            case 3000:\n                return {\n                    main: _(\"Wind\"),\n                    description: _(\"Light wind\"),\n                    customIcon: isNight ? \"night-alt-wind-symbolic\" : \"day-windy-symbolic\",\n                    icons: [\"weather-windy\"]\n                };\n            case 3001:\n                return {\n                    main: _(\"Wind\"),\n                    description: _(\"Wind\"),\n                    customIcon: \"windy-symbolic\",\n                    icons: [\"weather-windy\"]\n                };\n            case 3002:\n                return {\n                    main: _(\"Wind\"),\n                    description: _(\"Strong wind\"),\n                    customIcon: \"windy-symbolic\",\n                    icons: [\"weather-windy\"]\n                };\n            case 4000:\n                return {\n                    main: _(\"Drizzle\"),\n                    description: _(\"Drizzle\"),\n                    customIcon: \"rain-mix-symbolic\",\n                    icons: [\"weather-showers-scattered\", \"weather-showers\", \"weather-rain\", \"weather-freezing-rain\"]\n                };\n            case 4001:\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Rain\"),\n                    customIcon: \"rain-symbolic\",\n                    icons: [\"weather-rain\", \"weather-showers\", \"weather-freezing-rain\", \"weather-showers-scattered\"]\n                };\n            case 4200:\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Light rain\"),\n                    customIcon: isNight ? \"night-alt-rain-symbolic\" : \"day-rain-symbolic\",\n                    icons: [\"weather-showers-scattered\", \"weather-rain\", \"weather-freezing-rain\", \"weather-showers-scattered\"]\n                };\n            case 4201:\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Heavy rain\"),\n                    customIcon: \"rain-symbolic\",\n                    icons: [\"weather-rain\", \"weather-showers\", \"weather-freezing-rain\", \"weather-showers-scattered\"]\n                };\n            case 5000:\n                return {\n                    main: _(\"Snow\"),\n                    description: _(\"Snow\"),\n                    customIcon: \"snow-symbolic\",\n                    icons: [\"weather-snow\", \"weather-snow-scattered\", isNight ? \"weather-snow-night\" : \"weather-snow-day\"]\n                };\n            case 5001:\n                return {\n                    main: _(\"Flurries\"),\n                    description: _(\"Flurries\"),\n                    customIcon: \"snow-wind-symbolic\",\n                    icons: [\"weather-snow\", \"weather-snow-scattered\", isNight ? \"weather-snow-night\" : \"weather-snow-day\"]\n                };\n            case 5100:\n                return {\n                    main: _(\"Snow\"),\n                    description: _(\"Light snow\"),\n                    customIcon: isNight ? \"night-alt-snow-symbolic\" : \"day-snow-symbolic\",\n                    icons: isNight ? [\"weather-snow-scattered-night\", \"weather-snow-night\", \"weather-snow\"] : [\"weather-snow-scattered-day\", \"weather-snow-day\", \"weather-snow\"]\n                };\n            case 5101:\n                return {\n                    main: _(\"Snow\"),\n                    description: _(\"Heavy snow\"),\n                    customIcon: \"snow-symbolic\",\n                    icons: [\"weather-snow\", \"weather-snow-scattered\"]\n                };\n            case 6000:\n                return {\n                    main: _(\"Drizzle\"),\n                    description: _(\"Freezing drizzle\"),\n                    customIcon: \"rain-mix-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-showers\", \"weather-showers-scattered\"]\n                };\n            case 6001:\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Freezing rain\"),\n                    customIcon: \"rain-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers\", \"weather-showers-scattered\"]\n                };\n            case 6200:\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Light freezing rain\"),\n                    customIcon: isNight ? \"night-alt-rain-symbolic\" : \"day-rain-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers\", \"weather-showers-scattered\"]\n                };\n            case 6201:\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Heavy freezing rain\"),\n                    customIcon: \"rain-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers\", \"weather-showers-scattered\"]\n                };\n            case 7000:\n                return {\n                    main: _(\"Ice pellets\"),\n                    description: _(\"Ice pellets\"),\n                    customIcon: \"sleet-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers\", \"weather-showers-scattered\"]\n                };\n            case 7101:\n                return {\n                    main: _(\"Ice pellets\"),\n                    description: _(\"Heavy ice pellets\"),\n                    customIcon: \"sleet-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers\", \"weather-showers-scattered\"]\n                };\n            case 7102:\n                return {\n                    main: _(\"Ice pellets\"),\n                    description: _(\"Light ice pellets\"),\n                    customIcon: isNight ? \"night-alt-sleet-symbolic\" : \"day-sleet-symbolic\",\n                    icons: [\"weather-freezing-rain\", \"weather-rain\", \"weather-showers\", \"weather-showers-scattered\"]\n                };\n            case 8000:\n                return {\n                    main: _(\"Thunderstorm\"),\n                    description: _(\"Thunderstorm\"),\n                    customIcon: \"thunderstorm-symbolic\",\n                    icons: [\"weather-storm\"]\n                };\n            default:\n                return result;\n        }\n    }\n    PrecipTypeToAppletType(type) {\n        switch (type) {\n            case 0:\n                return \"none\";\n            case 1:\n                return \"rain\";\n            case 2:\n                return \"snow\";\n            case 3:\n                return \"freezing rain\";\n            case 4:\n                return \"ice pellets\";\n            default:\n                return \"none\";\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/danishMI.ts\n\nclass DanishMI {\n    constructor(app) {\n        this.needsApiKey = false;\n        this.prettyName = _(\"DMI Denmark\");\n        this.name = \"DanishMI\";\n        this.maxForecastSupport = 10;\n        this.maxHourlyForecastSupport = 48;\n        this.website = \"https://www.dmi.dk/\";\n        this.url = \"https://www.dmi.dk/NinJo2DmiDk/ninjo2dmidk\";\n        this.forecastParams = {\n            cmd: \"llj\",\n            lon: null,\n            lat: null,\n            tz: \"UTC\"\n        };\n        this.observationParams = {\n            cmd: \"obj\",\n            east: null,\n            west: null,\n            south: null,\n            north: null\n        };\n        this.app = app;\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        this.GetLocationBoundingBox(loc);\n        let observations = this.OrderObservations(await this.app.LoadJsonAsync(this.url, this.observationParams), loc);\n        this.forecastParams.lat = loc.lat;\n        this.forecastParams.lon = loc.lon;\n        let forecasts = await this.app.LoadJsonAsync(this.url, this.forecastParams);\n        return this.ParseWeather(observations, forecasts);\n    }\n    ParseWeather(observations, forecasts) {\n        var _a, _b, _c, _d, _e;\n        let observation = this.MergeObservations(observations);\n        let result = {\n            temperature: CelsiusToKelvin(observation.Temperature2m),\n            condition: this.ResolveCondition(observation.symbol),\n            humidity: observation.RelativeHumidity,\n            pressure: (!observation.PressureMSL) ? null : observation.PressureMSL / 100,\n            wind: {\n                degree: observation.WindDirection,\n                speed: observation.WindSpeed10m\n            }\n        };\n        result.location = {\n            city: forecasts.city,\n            country: forecasts.country,\n            timeZone: null,\n            url: `https://www.dmi.dk/lokation/show/${forecasts.country}/${forecasts.id}`\n        };\n        result.coord = {\n            lon: forecasts.longitude,\n            lat: forecasts.latitude\n        };\n        result.date = this.DateStringToDate(forecasts.lastupdate);\n        result.humidity = (_a = result.humidity) !== null && _a !== void 0 ? _a : forecasts.timeserie[0].humidity;\n        result.pressure = (_b = result.pressure) !== null && _b !== void 0 ? _b : forecasts.timeserie[0].pressure;\n        result.temperature = (_c = result.temperature) !== null && _c !== void 0 ? _c : CelsiusToKelvin(forecasts.timeserie[0].temp);\n        result.wind.degree = (_d = result.wind.degree) !== null && _d !== void 0 ? _d : forecasts.timeserie[0].windDegree;\n        result.wind.speed = (_e = result.wind.speed) !== null && _e !== void 0 ? _e : forecasts.timeserie[0].windSpeed;\n        result.sunrise = this.DateStringToDate(forecasts.sunrise);\n        result.sunset = this.DateStringToDate(forecasts.sunset);\n        if (result.condition.customIcon == \"alien-symbolic\") {\n            result.condition = this.ResolveCondition(forecasts.timeserie[0].symbol);\n        }\n        let forecastData = [];\n        for (let index = 0; index < forecasts.aggData.length - 1; index++) {\n            const element = forecasts.aggData[index];\n            forecastData.push({\n                date: this.DateStringToDate(element.time),\n                temp_max: CelsiusToKelvin(element.maxTemp),\n                temp_min: CelsiusToKelvin(element.minTemp),\n                condition: this.ResolveDailyCondition(forecasts.timeserie, this.DateStringToDate(element.time))\n            });\n        }\n        result.forecasts = forecastData;\n        let hourlyData = [];\n        for (let index = 0; index < forecasts.timeserie.length; index++) {\n            const element = forecasts.timeserie[index];\n            if (element.time == null)\n                continue;\n            let hour = {\n                date: this.DateStringToDate(element.time),\n                temp: CelsiusToKelvin(element.temp),\n                condition: this.ResolveCondition(element.symbol)\n            };\n            if (element.precip1 > 0.01 && element.precipType != null) {\n                hour.precipitation = {\n                    type: this.DanishPrecipToType(element.precipType),\n                    volume: element.precip1\n                };\n            }\n            hourlyData.push(hour);\n        }\n        result.hourlyForecasts = hourlyData;\n        return result;\n    }\n    MergeObservations(observations) {\n        var _a, _b, _c, _d, _e, _f;\n        let result = {\n            symbol: null,\n            PressureMSL: null,\n            Temperature2m: null,\n            WindDirection: null,\n            RelativeHumidity: null,\n            WindSpeed10m: null,\n        };\n        for (let index = 0; index < observations.length; index++) {\n            const element = observations[index];\n            result.symbol = (_a = result.symbol) !== null && _a !== void 0 ? _a : element.values.symbol;\n            result.PressureMSL = (_b = result.PressureMSL) !== null && _b !== void 0 ? _b : element.values.PressureMSL;\n            result.Temperature2m = (_c = result.Temperature2m) !== null && _c !== void 0 ? _c : element.values.Temperature2m;\n            result.WindDirection = (_d = result.WindDirection) !== null && _d !== void 0 ? _d : element.values.WindDirection;\n            result.RelativeHumidity = (_e = result.RelativeHumidity) !== null && _e !== void 0 ? _e : element.values.RelativeHumidity;\n            result.WindSpeed10m = (_f = result.WindSpeed10m) !== null && _f !== void 0 ? _f : element.values.WindSpeed10m;\n        }\n        return result;\n    }\n    ResolveDailyCondition(hourlyData, date) {\n        let target = new Date(date);\n        target.setHours(target.getHours() + 6);\n        let upto = new Date(target);\n        upto.setDate(upto.getDate() + 1);\n        let relevantHours = hourlyData.filter(x => {\n            let hour = this.DateStringToDate(x.time);\n            if (hour >= target && hour < upto)\n                return hour;\n        });\n        let normalizedSymbols = relevantHours.map(x => (x.symbol > 100) ? (x.symbol - 100) : x.symbol);\n        let resultSymbol = null;\n        if (!!normalizedSymbols.find(x => x > 10 && x != 45))\n            resultSymbol = Math.max(...normalizedSymbols);\n        else\n            resultSymbol = mode(normalizedSymbols);\n        return this.ResolveCondition(resultSymbol);\n    }\n    ResolveCondition(symbol) {\n        let isNight = (symbol > 100);\n        if (isNight)\n            symbol = symbol - 100;\n        switch (symbol) {\n            case 1:\n                return {\n                    main: _(\"Clear\"),\n                    description: _(\"Clear\"),\n                    customIcon: isNight ? \"night-clear-symbolic\" : \"day-sunny-symbolic\",\n                    icons: isNight ? [\"weather-clear-night\"] : [\"weather-clear\"]\n                };\n            case 2:\n                return {\n                    main: _(\"Partly cloudy\"),\n                    description: _(\"Partly cloudy\"),\n                    customIcon: isNight ? \"night-alt-cloudy-symbolic\" : \"day-cloudy-symbolic\",\n                    icons: isNight ? [\"weather-few-clouds-night\", \"weather-clouds-night\"] : [\"weather-few-clouds\", \"weather-clouds\"]\n                };\n            case 3:\n                return {\n                    main: _(\"Cloudy\"),\n                    description: _(\"Cloudy\"),\n                    customIcon: \"cloudy-symbolic\",\n                    icons: [\"weather-overcast\", \"weather-many-clouds\", \"weather-clouds\", \"weather-few-clouds\"]\n                };\n            case 38:\n                return {\n                    main: _(\"Snow\"),\n                    description: _(\"Blowing snow\"),\n                    customIcon: \"snow-symbolic\",\n                    icons: [\"weather-snow\"]\n                };\n            case 45:\n                return {\n                    main: _(\"Foggy\"),\n                    description: _(\"Foggy\"),\n                    customIcon: \"fog-symbolic\",\n                    icons: [\"weather-fog\"]\n                };\n            case 60:\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Rain\"),\n                    customIcon: \"rain-symbolic\",\n                    icons: [\"weather-rain\", \"weather-freezing-rain\", \"weather-showers\"]\n                };\n            case 63:\n                return {\n                    main: _(\"Moderate rain\"),\n                    description: _(\"Moderate rain\"),\n                    customIcon: \"rain-symbolic\",\n                    icons: [\"weather-rain\", \"weather-showers\", \"weather-freezing-rain\"]\n                };\n            case 68:\n                return {\n                    main: _(\"Rain and snow\"),\n                    description: _(\"Rain and snow\"),\n                    customIcon: \"rain-mix-symbolic\",\n                    icons: [\"weather-snow-rain\", \"weather-freezing-rain\", \"weather-rain\"]\n                };\n            case 69:\n                return {\n                    main: _(\"Rain and snow\"),\n                    description: _(\"Heavy rain and snow\"),\n                    customIcon: \"rain-mix-symbolic\",\n                    icons: [\"weather-snow-rain\", \"weather-freezing-rain\", \"weather-rain\"]\n                };\n            case 70:\n                return {\n                    main: _(\"Slight snow\"),\n                    description: _(\"Slight snow\"),\n                    customIcon: \"snow-symbolic\",\n                    icons: [\"weather-snow\", \"weather-snow-scattered\"]\n                };\n            case 73:\n                return {\n                    main: _(\"Moderate snow\"),\n                    description: _(\"Moderate snow\"),\n                    customIcon: \"snow-symbolic\",\n                    icons: [\"weather-snow\", \"weather-snow-scattered\"]\n                };\n            case 80:\n                return {\n                    main: _(\"Rain\"),\n                    description: _(\"Rain showers\"),\n                    customIcon: \"showers-symbolic\",\n                    icons: [\"weather-showers\", \"weather-freezing-rain\", \"weather-rain\"]\n                };\n            case 81:\n                return {\n                    main: _(\"Rain showers\"),\n                    description: _(\"Moderate rain showers\"),\n                    customIcon: isNight ? \"night-alt-showers-symbolic\" : \"day-showers-symbolic\",\n                    icons: isNight ? [\"weather-showers-night\", \"weather-showers-scattered-night\", \"weather-showers-scattered\", \"weather-showers\"] : [\"weather-showers-day\", \"weather-showers-scattered-day\", \"weather-showers\"]\n                };\n            case 83:\n                return {\n                    main: _(\"Rain and snow\"),\n                    description: _(\"Mixed rain and snow\"),\n                    customIcon: isNight ? \"night-alt-rain-mix-symbolic\" : \"day-rain-mix-symbolic\",\n                    icons: [\"weather-snow-rain\", \"weather-freezing-rain\", \"weather-snow-day\", \"weather-snow\"]\n                };\n            case 84:\n                return {\n                    main: _(\"Rain and snow\"),\n                    description: _(\"Heavy mixed rain and snow\"),\n                    customIcon: \"rain-mix-symbolic\",\n                    icons: [\"weather-snow-rain\", \"weather-freezing-rain\", \"weather-snow-day\", \"weather-snow\"]\n                };\n            case 85:\n                return {\n                    main: _(\"Snow\"),\n                    description: _(\"Snow showers\"),\n                    customIcon: isNight ? \"night-alt-snow-symbolic\" : \"day-snow-symbolic\",\n                    icons: isNight ? [\"weather-snow-night\", \"weather-snow\"] : [\"weather-snow-day\", \"weather-snow\"]\n                };\n            case 86:\n                return {\n                    main: _(\"Heavy snow\"),\n                    description: _(\"Heavy snow showers\"),\n                    customIcon: \"day-snow-symbolic\",\n                    icons: [\"weather-snow-day\", \"weather-snow\"]\n                };\n            case 95:\n                return {\n                    main: _(\"Thunderstorm\"),\n                    description: _(\"Thunderstorm\"),\n                    customIcon: \"thunderstorm-symbolic\",\n                    icons: [\"weather-storm\"]\n                };\n            default: {\n                return {\n                    main: _(\"NOT FOUND\"),\n                    description: _(\"NOT FOUND\"),\n                    customIcon: \"alien-symbolic\",\n                    icons: [\"weather-severe-alert\"]\n                };\n            }\n        }\n    }\n    DanishPrecipToType(type) {\n        switch (type) {\n            case \"sne\":\n                return \"snow\";\n            case \"regn\":\n                return \"rain\";\n            case \"slud\":\n                return \"ice pellets\";\n            default:\n                return \"none\";\n        }\n    }\n    GetLocationBoundingBox(loc) {\n        this.observationParams.west = loc.lon + 0.075;\n        this.observationParams.east = loc.lon - 0.075;\n        this.observationParams.north = loc.lat + 0.045;\n        this.observationParams.south = loc.lat - 0.04;\n    }\n    OrderObservations(observations, loc) {\n        let result = [];\n        for (const key in observations) {\n            const element = observations[key];\n            element.dist = GetDistance(loc.lat, loc.lon, element.latitude, element.longitude);\n            result.push(element);\n        }\n        return this.SortObservationSites(result);\n    }\n    SortObservationSites(observations) {\n        if (observations == null)\n            return null;\n        observations = observations.sort((a, b) => {\n            if (a.dist < b.dist)\n                return -1;\n            if (a.dist == b.dist)\n                return 0;\n            return 1;\n        });\n        return observations;\n    }\n    DateStringToDate(str) {\n        if (!str)\n            return null;\n        if (str.length == 14) {\n            return new Date(Date.UTC(parseInt(str.substring(0, 4)), parseInt(str.substring(4, 6)) - 1, parseInt(str.substring(6, 8)), parseInt(str.substring(8, 10)), parseInt(str.substring(10, 12)), parseInt(str.substring(12, 14))));\n        }\n        else if (str.length == 8) {\n            return new Date(Date.UTC(parseInt(str.substring(0, 4)), parseInt(str.substring(4, 6)) - 1, parseInt(str.substring(6, 8)), 0, 0, 0, 0));\n        }\n        else if (str.length == 4 || str.length == 3) {\n            if (str.length == 3) {\n                str = (\"0000\" + str).substr(-4, 4);\n            }\n            let today = new Date();\n            today.setUTCHours(parseInt(str.substring(0, 2)), parseInt(str.substring(2, 4)), 0, 0);\n            return today;\n        }\n        return null;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/main.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst { TextIconApplet, AllowedLayout, MenuItem } = imports.ui.applet;\nconst { spawnCommandLine } = imports.misc.util;\nconst { IconType: main_IconType, Side: main_Side } = imports.gi.St;\nclass WeatherApplet extends TextIconApplet {\n    constructor(metadata, orientation, panelHeight, instanceId) {\n        super(orientation, panelHeight, instanceId);\n        this.lock = false;\n        this.refreshTriggeredWhileLocked = false;\n        this.encounteredError = false;\n        this.errMsg = {\n            unknown: _(\"Error\"),\n            \"bad api response - non json\": _(\"Service Error\"),\n            \"bad key\": _(\"Incorrect API Key\"),\n            \"bad api response\": _(\"Service Error\"),\n            \"bad location format\": _(\"Incorrect Location Format\"),\n            \"bad status code\": _(\"Service Error\"),\n            \"key blocked\": _(\"Key Blocked\"),\n            \"location not found\": _(\"Can't find location\"),\n            \"no api response\": _(\"Service Error\"),\n            \"no key\": _(\"No Api Key\"),\n            \"no location\": _(\"No Location\"),\n            \"no network response\": _(\"Service Error\"),\n            \"no response body\": _(\"Service Error\"),\n            \"no response data\": _(\"Service Error\"),\n            \"unusual payload\": _(\"Service Error\"),\n            \"import error\": _(\"Missing Packages\"),\n            \"location not covered\": _(\"Location not covered\"),\n        };\n        this.AppletDir = metadata.path;\n        logger_Log.Instance.Debug(\"Applet created with instanceID \" + instanceId);\n        logger_Log.Instance.Debug(\"AppletDir is: \" + this.AppletDir);\n        this.SetAppletOnPanel();\n        this.config = new Config(this, instanceId);\n        this.AddRefreshButton();\n        this.EnsureProvider();\n        this.ui = new UI(this, orientation);\n        this.ui.Rebuild(this.config);\n        this.loop = new WeatherLoop(this, instanceId);\n        this.orientation = orientation;\n        try {\n            this.setAllowedLayout(AllowedLayout.BOTH);\n        }\n        catch (e) {\n        }\n        this.loop.Start();\n    }\n    get Orientation() {\n        return this.orientation;\n    }\n    Locked() {\n        return this.lock;\n    }\n    RefreshAndRebuild(loc) {\n        this.loop.Resume();\n        if (this.Locked()) {\n            this.refreshTriggeredWhileLocked = true;\n            return;\n        }\n        this.RefreshWeather(true, loc);\n    }\n    ;\n    async RefreshWeather(rebuild, location) {\n        try {\n            if (this.lock) {\n                logger_Log.Instance.Print(\"Refreshing in progress, refresh skipped.\");\n                return \"locked\";\n            }\n            this.lock = true;\n            this.encounteredError = false;\n            if (!location) {\n                location = await this.config.EnsureLocation();\n                if (!location) {\n                    this.Unlock();\n                    return \"error\";\n                }\n            }\n            this.EnsureProvider();\n            if (this.provider.needsApiKey && this.config.NoApiKey()) {\n                logger_Log.Instance.Error(\"No API Key given\");\n                this.ShowError({\n                    type: \"hard\",\n                    userError: true,\n                    detail: \"no key\",\n                    message: _(\"This provider requires an API key to operate\")\n                });\n                return null;\n            }\n            let weatherInfo = await this.provider.GetWeather(location);\n            if (weatherInfo == null) {\n                this.Unlock();\n                logger_Log.Instance.Error(\"Could not refresh weather, data could not be obtained.\");\n                this.ShowError({\n                    type: \"hard\",\n                    detail: \"no api response\",\n                    message: \"API did not return data\"\n                });\n                return \"fail\";\n            }\n            weatherInfo = this.MergeWeatherData(weatherInfo, location);\n            this.config.Timezone = weatherInfo.location.timeZone;\n            if (rebuild)\n                this.ui.Rebuild(this.config);\n            if (!this.ui.Display(weatherInfo, this.config, this.provider) ||\n                !this.DisplayWeather(weatherInfo)) {\n                this.Unlock();\n                return \"fail\";\n            }\n            logger_Log.Instance.Print(\"Weather Information refreshed\");\n            this.loop.ResetErrorCount();\n            this.Unlock();\n            return \"success\";\n        }\n        catch (e) {\n            logger_Log.Instance.Error(\"Generic Error while refreshing Weather info: \" + e + \", \", e);\n            this.ShowError({ type: \"hard\", detail: \"unknown\", message: _(\"Unexpected Error While Refreshing Weather, please see log in Looking Glass\") });\n            this.Unlock();\n            return \"fail\";\n        }\n    }\n    DisplayWeather(weather) {\n        let location = GenerateLocationText(weather, this.config);\n        let lastUpdatedTime = AwareDateString(weather.date, this.config.currentLocale, this.config._show24Hours);\n        this.SetAppletTooltip(`${location} - ${_(\"As of {lastUpdatedTime}\", { \"lastUpdatedTime\": lastUpdatedTime })}`);\n        this.DisplayWeatherOnLabel(weather.temperature, weather.condition.description);\n        this.SetAppletIcon(weather.condition.icons, weather.condition.customIcon);\n        return true;\n    }\n    DisplayWeatherOnLabel(temperature, mainCondition) {\n        mainCondition = CapitalizeFirstLetter(mainCondition);\n        let label = \"\";\n        if (this.Orientation != main_Side.LEFT && this.Orientation != main_Side.RIGHT) {\n            if (this.config._showCommentInPanel) {\n                label += mainCondition;\n            }\n            if (this.config._showTextInPanel) {\n                if (label != \"\") {\n                    label += \" \";\n                }\n                label += TempToUserConfig(temperature, this.config);\n            }\n        }\n        else {\n            if (this.config._showTextInPanel) {\n                label = TempToUserConfig(temperature, this.config, false);\n                if (this.GetPanelHeight() >= 35) {\n                    label += UnitToUnicode(this.config.TemperatureUnit);\n                }\n            }\n        }\n        if (NotEmpty(this.config._tempTextOverride)) {\n            label = this.config._tempTextOverride\n                .replace(\"{t}\", TempToUserConfig(temperature, this.config, false))\n                .replace(\"{u}\", UnitToUnicode(this.config.TemperatureUnit))\n                .replace(\"{c}\", mainCondition);\n        }\n        this.SetAppletLabel(label);\n    }\n    SetAppletTooltip(msg) {\n        this.set_applet_tooltip(msg);\n    }\n    SetAppletIcon(iconNames, customIcon) {\n        if (this.config._useCustomAppletIcons) {\n            this.SetCustomIcon(customIcon);\n        }\n        else {\n            let icon = WeatherIconSafely(iconNames, this.config.AppletIconType);\n            this.config.AppletIconType == main_IconType.SYMBOLIC ?\n                this.set_applet_icon_symbolic_name(icon) :\n                this.set_applet_icon_name(icon);\n        }\n    }\n    SetAppletLabel(label) {\n        this.set_applet_label(label);\n    }\n    GetPanelHeight() {\n        return this.panel.height;\n    }\n    GetMaxForecastDays() {\n        if (!this.provider)\n            return this.config._forecastDays;\n        return Math.min(this.config._forecastDays, this.provider.maxForecastSupport);\n    }\n    GetMaxHourlyForecasts() {\n        if (!this.provider)\n            return this.config._forecastHours;\n        return Math.min(this.config._forecastHours, this.provider.maxHourlyForecastSupport);\n    }\n    async LoadJsonAsync(url, params, HandleError, method = \"GET\") {\n        let response = await HttpLib.Instance.LoadJsonAsync(url, params, method);\n        if (!response.Success) {\n            if (!!HandleError && !HandleError(response.ErrorData))\n                return null;\n            else {\n                this.HandleHTTPError(response.ErrorData);\n                return null;\n            }\n        }\n        return response.Data;\n    }\n    async LoadAsync(url, params, HandleError, method = \"GET\") {\n        let response = await HttpLib.Instance.LoadAsync(url, params, method);\n        if (!response.Success) {\n            if (!!HandleError && !HandleError(response.ErrorData))\n                return null;\n            else {\n                this.HandleHTTPError(response.ErrorData);\n                return null;\n            }\n        }\n        return response.Data;\n    }\n    async locationLookup() {\n        let command = \"xdg-open \";\n        spawnCommandLine(command + \"https://cinnamon-spices.linuxmint.com/applets/view/17\");\n    }\n    async submitIssue() {\n        let command = \"xdg-open \";\n        spawnCommandLine(command + \"https://github.com/linuxmint/cinnamon-spices-applets/issues/new\");\n    }\n    async saveCurrentLocation() {\n        this.config.LocStore.SaveCurrentLocation(this.config.CurrentLocation);\n    }\n    on_orientation_changed(orientation) {\n        this.orientation = orientation;\n        this.RefreshWeather(true);\n    }\n    ;\n    on_applet_removed_from_panel(deleteConfig) {\n        logger_Log.Instance.Print(\"Removing applet instance...\");\n        this.loop.Stop();\n    }\n    on_applet_clicked(event) {\n        this.ui.Toggle();\n    }\n    on_applet_middle_clicked(event) {\n    }\n    on_panel_height_changed() {\n    }\n    SetAppletOnPanel() {\n        this.set_applet_icon_name(APPLET_ICON);\n        this.set_applet_label(_(\"...\"));\n        this.set_applet_tooltip(_(\"Click to open\"));\n    }\n    Unlock() {\n        this.lock = false;\n        if (this.refreshTriggeredWhileLocked) {\n            logger_Log.Instance.Print(\"Refreshing triggered by config change while refreshing, starting now...\");\n            this.refreshTriggeredWhileLocked = false;\n            this.RefreshAndRebuild();\n        }\n    }\n    AddRefreshButton() {\n        let itemLabel = _(\"Refresh\");\n        let refreshMenuItem = new MenuItem(itemLabel, REFRESH_ICON, () => this.RefreshAndRebuild());\n        this._applet_context_menu.addMenuItem(refreshMenuItem);\n    }\n    HandleHTTPError(error) {\n        let appletError = {\n            detail: error.message,\n            userError: false,\n            code: error.code,\n            message: this.errMsg[error.message],\n            type: \"soft\"\n        };\n        switch (error.message) {\n            case \"bad status code\":\n            case \"unknown\":\n                appletError.type = \"hard\";\n        }\n        this.ShowError(appletError);\n    }\n    SetCustomIcon(iconName) {\n        this.set_applet_icon_symbolic_name(iconName);\n    }\n    EnsureProvider(force = false) {\n        var _a;\n        let currentName = (_a = this.provider) === null || _a === void 0 ? void 0 : _a.name;\n        switch (this.config._dataService) {\n            case \"DarkSky\":\n                if (currentName != \"DarkSky\" || force)\n                    this.provider = new DarkSky(this);\n                break;\n            case \"OpenWeatherMap\":\n                if (currentName != \"OpenWeatherMap\" || force)\n                    this.provider = new OpenWeatherMap(this);\n                break;\n            case \"MetNorway\":\n                if (currentName != \"MetNorway\" || force)\n                    this.provider = new MetNorway(this);\n                break;\n            case \"Weatherbit\":\n                if (currentName != \"Weatherbit\" || force)\n                    this.provider = new Weatherbit(this);\n                break;\n            case \"ClimacellV4\":\n                if (currentName != \"ClimacellV4\" || force)\n                    this.provider = new ClimacellV4(this);\n                break;\n            case \"Climacell\":\n                if (currentName != \"Climacell\" || force)\n                    this.provider = new Climacell(this);\n                break;\n            case \"Met Office UK\":\n                if (currentName != \"Met Office UK\" || force)\n                    this.provider = new MetUk(this);\n                break;\n            case \"US Weather\":\n                if (currentName != \"US Weather\" || force)\n                    this.provider = new USWeather(this);\n                break;\n            case \"Visual Crossing\":\n                if (currentName != \"Visual Crossing\" || force)\n                    this.provider = new VisualCrossing(this);\n                break;\n            case \"DanishMI\":\n                if (currentName != \"DanishMI\" || force)\n                    this.provider = new DanishMI(this);\n                break;\n            default:\n                return null;\n        }\n    }\n    MergeWeatherData(weatherInfo, locationData) {\n        if (weatherInfo.location.city == null)\n            weatherInfo.location.city = locationData.city;\n        if (weatherInfo.location.country == null)\n            weatherInfo.location.country = locationData.country;\n        if (weatherInfo.location.timeZone == null)\n            weatherInfo.location.timeZone = locationData.timeZone;\n        if (weatherInfo.coord.lat == null)\n            weatherInfo.coord.lat = locationData.lat;\n        if (weatherInfo.coord.lon == null)\n            weatherInfo.coord.lon = locationData.lon;\n        if (weatherInfo.hourlyForecasts == null)\n            weatherInfo.hourlyForecasts = [];\n        weatherInfo.condition.main = ProcessCondition(weatherInfo.condition.main, this.config._translateCondition);\n        weatherInfo.condition.description = ProcessCondition(weatherInfo.condition.description, this.config._translateCondition);\n        for (let index = 0; index < weatherInfo.forecasts.length; index++) {\n            const condition = weatherInfo.forecasts[index].condition;\n            condition.main = ProcessCondition(condition.main, this.config._translateCondition);\n            condition.description = ProcessCondition(condition.description, this.config._translateCondition);\n        }\n        for (let index = 0; index < weatherInfo.hourlyForecasts.length; index++) {\n            const condition = weatherInfo.hourlyForecasts[index].condition;\n            condition.main = ProcessCondition(condition.main, this.config._translateCondition);\n            condition.description = ProcessCondition(condition.description, this.config._translateCondition);\n        }\n        return weatherInfo;\n    }\n    DisplayHardError(title, msg) {\n        this.set_applet_label(title);\n        this.set_applet_tooltip(\"Click to open\");\n        this.set_applet_icon_name(\"weather-severe-alert\");\n        this.ui.DisplayErrorMessage(msg, \"hard\");\n    }\n    ;\n    ShowError(error) {\n        if (error == null)\n            return;\n        if (this.encounteredError == true)\n            return;\n        this.encounteredError = true;\n        logger_Log.Instance.Debug(\"User facing Error received, error: \" + JSON.stringify(error, null, 2));\n        if (error.type == \"hard\") {\n            logger_Log.Instance.Debug(\"Displaying hard error\");\n            this.ui.Rebuild(this.config);\n            this.DisplayHardError(this.errMsg[error.detail], (!error.message) ? \"\" : error.message);\n        }\n        if (error.type == \"soft\") {\n            if (this.loop.IsDataTooOld()) {\n                this.set_applet_tooltip(\"Click to open\");\n                this.set_applet_icon_name(\"weather-severe-alert\");\n                this.ui.DisplayErrorMessage(_(\"Could not update weather for a while...\\nare you connected to the internet?\"), \"soft\");\n            }\n        }\n        if (error.userError) {\n            this.loop.Pause();\n            return;\n        }\n        let nextRefresh = this.loop.GetSecondsUntilNextRefresh();\n        logger_Log.Instance.Error(\"Retrying in the next \" + nextRefresh.toString() + \" seconds...\");\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/applet.ts\n\n\n\nfunction main(metadata, orientation, panelHeight, instanceId) {\n    imports.gettext.bindtextdomain(UUID, imports.gi.GLib.get_home_dir() + \"/.local/share/locale\");\n    imports.gi.Gtk.IconTheme.get_default().append_search_path(metadata.path + \"/../icons\");\n    imports.gi.Gtk.IconTheme.get_default().append_search_path(metadata.path + \"/../arrow-icons\");\n    logger_Log.Instance.UpdateInstanceID(instanceId);\n    return new WeatherApplet(metadata, orientation, panelHeight, instanceId);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///393\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[393](0, __webpack_exports__, __webpack_require__);
/******/ 	weatherApplet = __webpack_exports__;
/******/ 	
/******/ })()
;