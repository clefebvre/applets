var weatherApplet;(()=>{"use strict";var __webpack_modules__={591:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "main": () => (/* binding */ main)\n});\n\n;// CONCATENATED MODULE: ./src/3_8/consts.ts\nconst UUID = "weather@mockturtl";\nconst SIGNAL_CHANGED = \'changed::\';\nconst SIGNAL_CLICKED = \'clicked\';\nconst SIGNAL_REPAINT = \'repaint\';\nconst APPLET_ICON = "view-refresh-symbolic";\nconst REFRESH_ICON = "view-refresh";\nconst BLANK = \'   \';\nconst ELLIPSIS = \'...\';\nconst EN_DASH = \'\\u2013\';\nconst FORWARD_SLASH = \'\\u002F\';\n\n;// CONCATENATED MODULE: ./src/3_8/lib/logger.ts\n\nclass logger_Log {\n    constructor(_instanceId) {\n        this.debug = false;\n        this.level = 1;\n        this.ID = _instanceId;\n        this.appletDir = imports.ui.appletManager.appletMeta[UUID].path;\n        this.debug = this.DEBUG();\n    }\n    static get Instance() {\n        if (this.instance == null)\n            this.instance = new logger_Log();\n        return this.instance;\n    }\n    DEBUG() {\n        let path = this.appletDir + "/../DEBUG";\n        let _debug = imports.gi.Gio.file_new_for_path(path);\n        let result = _debug.query_exists(null);\n        if (result)\n            this.Print("DEBUG file found in " + path + ", enabling Debug mode");\n        return result;\n    }\n    ;\n    Print(message) {\n        let msg = "[" + UUID + "#" + this.ID + "]: " + message.toString();\n        global.log(msg);\n    }\n    Error(error, e) {\n        global.logError("[" + UUID + "#" + this.ID + "]: " + error.toString());\n        if (e != null)\n            global.logError(e.stack);\n    }\n    ;\n    Debug(message) {\n        if (this.debug) {\n            this.Print(message);\n        }\n    }\n    Debug2(message) {\n        if (this.debug && this.level > 1) {\n            this.Print(message);\n        }\n    }\n    UpdateInstanceID(instanceID) {\n        this.ID = instanceID;\n    }\n}\nlogger_Log.instance = null;\n\n;// CONCATENATED MODULE: ./src/3_8/utils.ts\n\nconst { timeout_add, source_remove } = imports.mainloop;\nconst { IconType } = imports.gi.St;\nconst { IconTheme } = imports.gi.Gtk;\nfunction _(str, args) {\n    let result = imports.gettext.dgettext(UUID, str);\n    if (result === str && result === "")\n        result = imports.gettext.gettext(str);\n    if (!!args)\n        result = format(result, args);\n    return result;\n}\nfunction format(str, args) {\n    for (let key in args) {\n        str = str.replace(new RegExp("\\\\{" + key + "\\\\}"), args[key]);\n    }\n    return str;\n}\nfunction UnitToUnicode(unit) {\n    return unit == "fahrenheit" ? \'\\u2109\' : \'\\u2103\';\n}\nfunction GenerateLocationText(weather, config) {\n    let location = "";\n    if (weather.location.city != null && weather.location.country != null) {\n        location = weather.location.city + ", " + weather.location.country;\n    }\n    else {\n        location = Math.round(weather.coord.lat * 10000) / 10000 + ", " + Math.round(weather.coord.lon * 10000) / 10000;\n    }\n    if (NotEmpty(config._locationLabelOverride)) {\n        location = config._locationLabelOverride;\n    }\n    return location;\n}\nfunction CapitalizeFirstLetter(description) {\n    if ((description == undefined || description == null)) {\n        return "";\n    }\n    return description.charAt(0).toUpperCase() + description.slice(1);\n}\n;\nfunction CapitalizeEveryWord(description) {\n    if ((description == undefined || description == null)) {\n        return "";\n    }\n    let split = description.split(" ");\n    let result = "";\n    for (let index = 0; index < split.length; index++) {\n        const element = split[index];\n        result += CapitalizeFirstLetter(element);\n        if (index != split.length - 1)\n            result += " ";\n    }\n    return result;\n}\nfunction NormalizeTimezone(tz) {\n    if (!tz || tz == "" || tz == "UTC")\n        tz = undefined;\n    return tz;\n}\nfunction GetDayName(date, locale, showDate = false, tz) {\n    let params = {\n        weekday: "long",\n        timeZone: tz\n    };\n    params.timeZone = NormalizeTimezone(tz);\n    if (showDate) {\n        params.day = \'numeric\';\n    }\n    let now = new Date();\n    let tomorrow = new Date();\n    tomorrow.setDate(now.getDate() + 1);\n    if (date.getDate() == now.getDate() || date.getDate() == tomorrow.getDate())\n        delete params.weekday;\n    let dateString = date.toLocaleString(locale, params);\n    if (locale.startsWith("fr"))\n        dateString = CapitalizeFirstLetter(dateString);\n    if (date.getDate() == now.getDate())\n        dateString = _("Today");\n    if (date.getDate() == tomorrow.getDate())\n        dateString = _("Tomorrow");\n    return dateString;\n}\nfunction GetHoursMinutes(date, locale, hours24Format, tz, onlyHours = false) {\n    let params = {\n        hour: "numeric",\n        hour12: !hours24Format,\n        timeZone: tz\n    };\n    params.timeZone = NormalizeTimezone(tz);\n    if (!onlyHours)\n        params.minute = "2-digit";\n    return date.toLocaleString(locale, params);\n}\nfunction AwareDateString(date, locale, hours24Format, tz) {\n    let now = new Date();\n    let params = {\n        hour: "numeric",\n        minute: "2-digit",\n        hour12: !hours24Format,\n        timeZone: tz\n    };\n    if (date.toDateString() != now.toDateString()) {\n        params.month = "short";\n        params.day = "numeric";\n    }\n    if (date.getFullYear() != now.getFullYear()) {\n        params.year = "numeric";\n    }\n    params.timeZone = NormalizeTimezone(tz);\n    return date.toLocaleString(locale, params);\n}\nfunction MilitaryTime(date) {\n    return date.getHours() * 100 + date.getMinutes();\n}\nfunction AddHours(date, hours) {\n    let result = new Date(date);\n    result.setHours(result.getHours() + hours);\n    return result;\n}\nfunction OnSameDay(date1, date2, config) {\n    return date1.toDateString() == date2.toDateString();\n}\nfunction ProcessCondition(condition, shouldTranslate) {\n    if (condition == null)\n        return null;\n    condition = CapitalizeFirstLetter(condition);\n    if (shouldTranslate)\n        condition = _(condition);\n    return condition;\n}\nfunction LocalizedColon(locale) {\n    if (locale == null)\n        return ":";\n    if (locale.startsWith("fr"))\n        return " :";\n    return ":";\n}\nfunction PrecentToLocale(humidity, locale) {\n    return (humidity / 100).toLocaleString(locale, { style: "percent" });\n}\nconst WEATHER_CONV_MPH_IN_MPS = 2.23693629;\nconst WEATHER_CONV_KPH_IN_MPS = 3.6;\nconst WEATHER_CONV_KNOTS_IN_MPS = 1.94384449;\nfunction MPStoUserUnits(mps, units) {\n    if (mps == null)\n        return null;\n    switch (units) {\n        case "mph":\n            return (Math.round((mps * WEATHER_CONV_MPH_IN_MPS) * 10) / 10).toString();\n        case "kph":\n            return (Math.round((mps * WEATHER_CONV_KPH_IN_MPS) * 10) / 10).toString();\n        case "m/s":\n            return (Math.round(mps * 10) / 10).toString();\n        case "Knots":\n            return Math.round(mps * WEATHER_CONV_KNOTS_IN_MPS).toString();\n        case "Beaufort":\n            if (mps < 0.5) {\n                return "0 (" + _("Calm") + ")";\n            }\n            if (mps < 1.5) {\n                return "1 (" + _("Light air") + ")";\n            }\n            if (mps < 3.3) {\n                return "2 (" + _("Light breeze") + ")";\n            }\n            if (mps < 5.5) {\n                return "3 (" + _("Gentle breeze") + ")";\n            }\n            if (mps < 7.9) {\n                return "4 (" + _("Moderate breeze") + ")";\n            }\n            if (mps < 10.7) {\n                return "5 (" + _("Fresh breeze") + ")";\n            }\n            if (mps < 13.8) {\n                return "6 (" + _("Strong breeze") + ")";\n            }\n            if (mps < 17.1) {\n                return "7 (" + _("Near gale") + ")";\n            }\n            if (mps < 20.7) {\n                return "8 (" + _("Gale") + ")";\n            }\n            if (mps < 24.4) {\n                return "9 (" + _("Strong gale") + ")";\n            }\n            if (mps < 28.4) {\n                return "10 (" + _("Storm") + ")";\n            }\n            if (mps < 32.6) {\n                return "11 (" + _("Violent storm") + ")";\n            }\n            return "12 (" + _("Hurricane") + ")";\n    }\n}\nfunction TempToUserConfig(kelvin, config, withUnit = true) {\n    if (kelvin == null)\n        return null;\n    let temp = (config.TemperatureUnit == "celsius") ? KelvinToCelsius(kelvin) : KelvinToFahrenheit(kelvin);\n    temp = RussianTransform(temp, config._tempRussianStyle);\n    if (withUnit)\n        temp = `${temp} ${UnitToUnicode(config.TemperatureUnit)}`;\n    if (config._showBothTempUnits) {\n        let secondUnit = (config.TemperatureUnit == "celsius") ? "fahrenheit" : "celsius";\n        let secondTemp = (config.TemperatureUnit == "celsius") ? KelvinToFahrenheit(kelvin) : KelvinToCelsius(kelvin);\n        secondTemp = RussianTransform(secondTemp, config._tempRussianStyle);\n        if (withUnit)\n            temp += ` (${secondTemp.toString()} ${UnitToUnicode(secondUnit)})`;\n        else\n            temp += ` (${secondTemp.toString()})`;\n    }\n    return temp.toString();\n}\nfunction RussianTransform(temp, russianStyle) {\n    if (russianStyle) {\n        if (temp < 0)\n            return `âˆ’${Math.abs(temp).toString()}`;\n        else if (temp > 0)\n            return `+${temp.toString()}`;\n    }\n    else\n        return temp.toString();\n}\nfunction TempRangeToUserConfig(min, max, config) {\n    let t_low = TempToUserConfig(min, config, false);\n    let t_high = TempToUserConfig(max, config, false);\n    let first_temperature = config._temperatureHighFirst ? t_high : t_low;\n    let second_temperature = config._temperatureHighFirst ? t_low : t_high;\n    let result = "";\n    if (first_temperature != null)\n        result = first_temperature;\n    result += ((config._tempRussianStyle) ? ELLIPSIS : ` ${FORWARD_SLASH} `);\n    if (second_temperature != null)\n        result += `${second_temperature} `;\n    result += `${UnitToUnicode(config.TemperatureUnit)}`;\n    if (config._showBothTempUnits) {\n        let secondUnit = (config.TemperatureUnit == "celsius") ? "fahrenheit" : "celsius";\n        result += ` (${UnitToUnicode(secondUnit)})`;\n    }\n    return result;\n}\nfunction KelvinToCelsius(k) {\n    return Math.round((k - 273.15));\n}\nfunction KelvinToFahrenheit(k) {\n    return Math.round((9 / 5 * (k - 273.15) + 32));\n}\nfunction PressToUserUnits(hpa, units) {\n    switch (units) {\n        case "hPa":\n            return Math.round(hpa * 100) / 100;\n        case "at":\n            return Math.round((hpa * 0.001019716) * 1000) / 1000;\n        case "atm":\n            return Math.round((hpa * 0.0009869233) * 1000) / 1000;\n        case "in Hg":\n            return Math.round((hpa * 0.029529983071445) * 10) / 10;\n        case "mm Hg":\n            return Math.round((hpa * 0.7500638));\n        case "Pa":\n            return Math.round((hpa * 100));\n        case "psi":\n            return Math.round((hpa * 0.01450377) * 100) / 100;\n    }\n}\n;\nfunction MetreToUserUnits(m, distanceUnit) {\n    if (distanceUnit == "metric")\n        return Math.round(m / 1000 * 10) / 10;\n    return Math.round(KmToM(m / 1000) * 10) / 10;\n}\nfunction MillimeterToUserUnits(mm, distanceUnit) {\n    if (distanceUnit == "metric")\n        return Math.round(mm * 100) / 100;\n    return Math.round(mm * 0.03937 * 100) / 100;\n}\nfunction KPHtoMPS(speed) {\n    if (speed == null)\n        return null;\n    return speed / WEATHER_CONV_KPH_IN_MPS;\n}\n;\nfunction CelsiusToKelvin(celsius) {\n    if (celsius == null)\n        return null;\n    return (celsius + 273.15);\n}\nfunction FahrenheitToKelvin(fahrenheit) {\n    if (fahrenheit == null)\n        return null;\n    return ((fahrenheit - 32) / 1.8 + 273.15);\n}\n;\nfunction MPHtoMPS(speed) {\n    if (speed == null || speed == undefined)\n        return null;\n    return speed * 0.44704;\n}\nfunction KmToM(km) {\n    if (km == null)\n        return null;\n    return km * 0.6213712;\n}\nfunction CompassToDeg(compass) {\n    if (!compass)\n        return null;\n    compass = compass.toUpperCase();\n    switch (compass) {\n        case "N": return 0;\n        case "NNE": return 22.5;\n        case "NE": return 45;\n        case "ENE": return 67.5;\n        case "E": return 90;\n        case "ESE": return 112.5;\n        case "SE": return 135;\n        case "SSE": return 157.5;\n        case "S": return 180;\n        case "SSW": return 202.5;\n        case "SW": return 225;\n        case "WSW": return 247.5;\n        case "W": return 270;\n        case "WNW": return 292.5;\n        case "NW": return 315;\n        case "NNW": return 337.5;\n        default: return null;\n    }\n}\nfunction CompassDirection(deg) {\n    let directions = [\n        \'south-arrow-weather-symbolic\',\n        \'south-west-arrow-weather-symbolic\',\n        \'west-arrow-weather-symbolic\',\n        \'north-west-arrow-weather-symbolic\',\n        \'north-arrow-weather-symbolic\',\n        \'north-east-arrow-weather-symbolic\',\n        \'east-arrow-weather-symbolic\',\n        \'south-east-arrow-weather-symbolic\'\n    ];\n    return directions[Math.round(deg / 45) % directions.length];\n}\nfunction CompassDirectionText(deg) {\n    if (!deg)\n        return null;\n    let directions = [_(\'N\'), _(\'NE\'), _(\'E\'), _(\'SE\'), _(\'S\'), _(\'SW\'), _(\'W\'), _(\'NW\')];\n    return directions[Math.round(deg / 45) % directions.length];\n}\nfunction IsNight(sunTimes, date) {\n    if (!sunTimes)\n        return false;\n    let time = (!!date) ? MilitaryTime(date) : MilitaryTime(new Date());\n    let sunrise = MilitaryTime(sunTimes.sunrise);\n    let sunset = MilitaryTime(sunTimes.sunset);\n    if (time >= sunrise && time < sunset)\n        return false;\n    return true;\n}\nfunction IsCoordinate(text) {\n    text = text.trim();\n    if (/^-?\\d{1,3}(?:\\.\\d*)?,(\\s)*-?\\d{1,3}(?:\\.\\d*)?/.test(text)) {\n        return true;\n    }\n    return false;\n}\nfunction NotEmpty(str) {\n    return (str != null && str.length > 0 && str != undefined);\n}\nfunction IsLangSupported(lang, languages) {\n    return (languages.includes(lang));\n}\n;\nfunction HasIcon(icon, icon_type) {\n    return IconTheme.get_default().has_icon(icon + (icon_type == IconType.SYMBOLIC ? \'-symbolic\' : \'\'));\n}\nfunction mode(arr) {\n    return arr.reduce(function (current, item) {\n        var val = current.numMapping[item] = (current.numMapping[item] || 0) + 1;\n        if (val > current.greatestFreq) {\n            current.greatestFreq = val;\n            current.mode = item;\n        }\n        return current;\n    }, { mode: null, greatestFreq: -Infinity, numMapping: {} }).mode;\n}\n;\nfunction WeatherIconSafely(code, icon_type) {\n    for (let i = 0; i < code.length; i++) {\n        if (HasIcon(code[i], icon_type))\n            return code[i];\n    }\n    return \'weather-severe-alert\';\n}\nfunction ShadeHexColor(color, percent) {\n    var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;\n    return "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\n}\nfunction ConstructJsLocale(locale) {\n    let jsLocale = locale.split(".")[0];\n    let tmp = jsLocale.split("_");\n    jsLocale = "";\n    for (let i = 0; i < tmp.length; i++) {\n        if (i != 0)\n            jsLocale += "-";\n        jsLocale += tmp[i].toLowerCase();\n    }\n    if (locale == "c" || locale == null)\n        jsLocale = undefined;\n    return jsLocale;\n}\nfunction GetDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371e3;\n    const Ï†1 = lat1 * Math.PI / 180;\n    const Ï†2 = lat2 * Math.PI / 180;\n    const Î”Ï† = (lat2 - lat1) * Math.PI / 180;\n    const Î”Î» = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(Î”Ï† / 2) * Math.sin(Î”Ï† / 2) +\n        Math.cos(Ï†1) * Math.cos(Ï†2) *\n            Math.sin(Î”Î» / 2) * Math.sin(Î”Î» / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n}\nfunction GetFuncName(func) {\n    if (!!func.name)\n        return func.name;\n    var result = /^function\\s+([\\w\\$]+)\\s*\\(/.exec(func.toString());\n    return result ? result[1] : \'\';\n}\nfunction Guid() {\n    return \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == \'x\' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\nfunction utils_setTimeout(func, ms) {\n    let args = [];\n    if (arguments.length > 2) {\n        args = args.slice.call(arguments, 2);\n    }\n    let id = timeout_add(ms, () => {\n        func.apply(null, args);\n        return false;\n    }, null);\n    return id;\n}\n;\nasync function delay(ms) {\n    return await new Promise((resolve, reject) => {\n        utils_setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nfunction utils_clearTimeout(id) {\n    source_remove(id);\n}\n;\nfunction utils_setInterval(func, ms) {\n    let args = [];\n    if (arguments.length > 2) {\n        args = args.slice.call(arguments, 2);\n    }\n    let id = timeout_add(ms, () => {\n        func.apply(null, args);\n        return true;\n    }, null);\n    return id;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/location_services/ipApi.ts\n\n\nclass IpApi {\n    constructor(_app) {\n        this.query = "http://ip-api.com/json/?fields=status,message,country,countryCode,city,lat,lon,timezone,mobile,query";\n        this.app = _app;\n    }\n    async GetLocation() {\n        let json = await this.app.LoadJsonAsync(this.query);\n        if (!json) {\n            return null;\n        }\n        if (json.status != "success") {\n            this.HandleErrorResponse(json);\n            return null;\n        }\n        return this.ParseInformation(json);\n    }\n    ;\n    ParseInformation(json) {\n        try {\n            let result = {\n                lat: json.lat,\n                lon: json.lon,\n                city: json.city,\n                country: json.country,\n                timeZone: json.timezone,\n                entryText: json.lat + "," + json.lon,\n            };\n            logger_Log.Instance.Debug("Location obtained:" + json.lat + "," + json.lon);\n            return result;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("ip-api parsing error: " + e);\n            this.app.ShowError({ type: "hard", detail: "no location", service: "ipapi", message: _("Could not obtain location") });\n            return null;\n        }\n    }\n    ;\n    HandleErrorResponse(json) {\n        this.app.ShowError({ type: "hard", detail: "bad api response", message: _("Location Service responded with errors, please see the logs in Looking Glass"), service: "ipapi" });\n        logger_Log.Instance.Error("ip-api responds with Error: " + json.reason);\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/lib/events.ts\nclass Event {\n    constructor() {\n        this.subscribers = [];\n    }\n    Subscribe(fn) {\n        this.subscribers.push(fn);\n    }\n    Unsubscribe(fn) {\n        for (let index = this.subscribers.length - 1; index >= 0; index--) {\n            const element = this.subscribers[index];\n            if (element == fn) {\n                this.subscribers.splice(index, 1);\n                return;\n            }\n        }\n    }\n    Invoke(sender, args) {\n        if (this.subscribers.length == 0)\n            return;\n        for (let index = 0; index < this.subscribers.length; index++) {\n            const element = this.subscribers[index];\n            element(sender, args);\n        }\n    }\n    UnSubscribeAll() {\n        this.subscribers = [];\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/lib/notification_service.ts\n\nconst { messageTray } = imports.ui.main;\nconst { SystemNotificationSource, Notification } = imports.ui.messageTray;\nclass NotificationService {\n    constructor() {\n        this.Title = _("Weather Applet");\n        this.MessageSource = new SystemNotificationSource(this.Title);\n        messageTray.add(this.MessageSource);\n    }\n    static get Instance() {\n        if (this.instance == null)\n            this.instance = new NotificationService();\n        return this.instance;\n    }\n    Send(title, message, transient) {\n        let notification = new Notification(this.MessageSource, this.Title + ": " + title, message);\n        if (transient)\n            notification.setTransient((!transient) ? false : true);\n        this.MessageSource.notify(notification);\n    }\n}\nNotificationService.instance = null;\n\n;// CONCATENATED MODULE: ./src/3_8/location_services/locationstore.ts\n\n\n\n\nclass LocationStore {\n    constructor(app, config) {\n        this.locations = [];\n        this.app = null;\n        this.config = null;\n        this.currentIndex = 0;\n        this.StoreChanged = new Event();\n        this.app = app;\n        this.config = config;\n        this.locations = config._locationList;\n    }\n    OnLocationChanged(locs) {\n        var _a;\n        if (this.app.Locked())\n            return;\n        for (let index = 0; index < locs.length; index++) {\n            const element = locs[index];\n            if (!element.entryText) {\n                locs[index] = this.EnsureSearchEntry(element);\n            }\n        }\n        let currentIndex = this.FindIndex(this.config.CurrentLocation);\n        let newIndex = this.FindIndex(this.config.CurrentLocation, locs);\n        let currentlyDisplayedChanged = false;\n        let currentlyDisplayedDeleted = false;\n        if (newIndex == -1 && currentIndex == -1) {\n            let tmp = [];\n            this.locations = locs.concat(tmp);\n            this.InvokeStorageChanged();\n            return;\n        }\n        else if (newIndex == currentIndex)\n            currentlyDisplayedChanged = !this.IsEqual((_a = this.locations) === null || _a === void 0 ? void 0 : _a[currentIndex], locs === null || locs === void 0 ? void 0 : locs[currentIndex]);\n        else if (newIndex == -1)\n            currentlyDisplayedDeleted = true;\n        else if (newIndex != currentIndex)\n            this.currentIndex = newIndex;\n        let tmp = [];\n        this.locations = locs.concat(tmp);\n        if (currentlyDisplayedChanged || currentlyDisplayedDeleted) {\n            logger_Log.Instance.Debug("Currently used location was changed or deleted from locationstore, triggering refresh.");\n            this.app.RefreshAndRebuild();\n        }\n        this.InvokeStorageChanged();\n    }\n    SwitchToLocation(loc) {\n        let index = this.FindIndex(loc);\n        if (index == -1)\n            return false;\n        this.currentIndex = index;\n    }\n    FindLocation(entryText) {\n        for (let index = 0; index < this.locations.length; index++) {\n            const element = this.locations[index];\n            if (element.entryText == entryText)\n                return {\n                    country: element.country,\n                    city: element.city,\n                    entryText: element.entryText,\n                    lat: element.lat,\n                    lon: element.lon,\n                    timeZone: element.timeZone,\n                };\n        }\n        return null;\n    }\n    EnsureSearchEntry(loc) {\n        if (!loc.entryText)\n            loc.entryText = `${loc.lat},${loc.lon}`;\n        return loc;\n    }\n    GetNextLocation(currentLoc) {\n        logger_Log.Instance.Debug("Current location: " + JSON.stringify(currentLoc, null, 2));\n        if (this.locations.length == 0)\n            return currentLoc;\n        let nextIndex = null;\n        if (this.InStorage(currentLoc)) {\n            nextIndex = this.FindIndex(currentLoc) + 1;\n            logger_Log.Instance.Debug("Current location found in storage at index " + (nextIndex - 1).toString() + ", moving to the next index");\n        }\n        else {\n            nextIndex = this.currentIndex++;\n        }\n        if (nextIndex > this.locations.length - 1) {\n            nextIndex = 0;\n            logger_Log.Instance.Debug("Reached end of storage, move to the beginning");\n        }\n        logger_Log.Instance.Debug("Switching to index " + nextIndex.toString() + "...");\n        this.currentIndex = nextIndex;\n        return {\n            country: this.locations[nextIndex].country,\n            city: this.locations[nextIndex].city,\n            entryText: this.locations[nextIndex].entryText,\n            lat: this.locations[nextIndex].lat,\n            lon: this.locations[nextIndex].lon,\n            timeZone: this.locations[nextIndex].timeZone,\n        };\n    }\n    GetPreviousLocation(currentLoc) {\n        if (this.locations.length == 0)\n            return currentLoc;\n        let previousIndex = null;\n        if (this.InStorage(currentLoc)) {\n            previousIndex = this.FindIndex(currentLoc) - 1;\n            logger_Log.Instance.Debug("Current location found in storage at index " + (previousIndex + 1).toString() + ", moving to the next index");\n        }\n        else {\n            previousIndex = this.currentIndex--;\n        }\n        if (previousIndex < 0) {\n            previousIndex = this.locations.length - 1;\n            logger_Log.Instance.Debug("Reached start of storage, move to the end");\n        }\n        logger_Log.Instance.Debug("Switching to index " + previousIndex.toString() + "...");\n        this.currentIndex = previousIndex;\n        return {\n            country: this.locations[previousIndex].country,\n            city: this.locations[previousIndex].city,\n            entryText: this.locations[previousIndex].entryText,\n            lat: this.locations[previousIndex].lat,\n            lon: this.locations[previousIndex].lon,\n            timeZone: this.locations[previousIndex].timeZone,\n        };\n    }\n    ShouldShowLocationSelectors(currentLoc) {\n        let threshold = this.InStorage(currentLoc) ? 2 : 1;\n        if (this.locations.length >= threshold)\n            return true;\n        else\n            return false;\n    }\n    async SaveCurrentLocation(loc) {\n        if (this.app.Locked()) {\n            NotificationService.Instance.Send(_("Warning") + " - " + _("Location Store"), _("You can only save correct locations when the applet is not refreshing"), true);\n            return;\n        }\n        if (loc == null) {\n            NotificationService.Instance.Send(_("Warning") + " - " + _("Location Store"), _("You can\'t save an incorrect location"), true);\n            return;\n        }\n        if (this.InStorage(loc)) {\n            NotificationService.Instance.Send(_("Info") + " - " + _("Location Store"), _("Location is already saved"), true);\n            return;\n        }\n        loc.timeZone = this.app.config.Timezone;\n        this.locations.push(loc);\n        this.currentIndex = this.locations.length - 1;\n        this.InvokeStorageChanged();\n        this.SaveBackLocations();\n    }\n    InvokeStorageChanged() {\n        this.StoreChanged.Invoke(this, this.locations.length);\n    }\n    SaveBackLocations() {\n        this.config.SetLocationList(this.locations);\n    }\n    InStorage(loc) {\n        return this.FindIndex(loc) != -1;\n    }\n    FindIndex(loc, locations = null) {\n        if (loc == null)\n            return -1;\n        if (locations == null)\n            locations = this.locations;\n        for (let index = 0; index < locations.length; index++) {\n            const element = locations[index];\n            if (element.entryText == loc.entryText)\n                return index;\n        }\n        return -1;\n    }\n    IsEqual(oldLoc, newLoc) {\n        if (oldLoc == null)\n            return false;\n        if (newLoc == null)\n            return false;\n        for (let key in newLoc) {\n            if (oldLoc[key] != newLoc[key]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/location_services/nominatim.ts\n\n\nclass GeoLocation {\n    constructor(app) {\n        this.url = "https://nominatim.openstreetmap.org/search/";\n        this.params = "?format=json&addressdetails=1&limit=1";\n        this.App = null;\n        this.cache = {};\n        this.App = app;\n    }\n    async GetLocation(searchText) {\n        var _a;\n        try {\n            searchText = searchText.trim();\n            let cached = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.searchText;\n            if (cached != null) {\n                logger_Log.Instance.Debug("Returning cached geolocation info for \'" + searchText + "\'.");\n                return cached;\n            }\n            let locationData = await this.App.LoadJsonAsync(this.url + encodeURIComponent(searchText) + this.params);\n            if (locationData == null)\n                return null;\n            if (locationData.length == 0) {\n                this.App.ShowError({\n                    type: "hard",\n                    detail: "bad location format",\n                    message: _("Could not find location based on address, please check if it\'s right")\n                });\n                return null;\n            }\n            logger_Log.Instance.Debug("Location is found, payload: " + JSON.stringify(locationData, null, 2));\n            let result = {\n                lat: parseFloat(locationData[0].lat),\n                lon: parseFloat(locationData[0].lon),\n                city: locationData[0].address.city || locationData[0].address.town || locationData[0].address.village,\n                country: locationData[0].address.country,\n                timeZone: null,\n                entryText: this.BuildEntryText(locationData[0]),\n            };\n            this.cache[searchText] = result;\n            return result;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Could not geo locate, error: " + JSON.stringify(e, null, 2));\n            this.App.ShowError({\n                type: "soft",\n                detail: "bad api response",\n                message: _("Failed to call Geolocation API, see Looking Glass for errors.")\n            });\n            return null;\n        }\n    }\n    BuildEntryText(locationData) {\n        if (locationData.address == null)\n            return locationData.display_name;\n        let entryText = [];\n        for (let key in locationData.address) {\n            if (key == "state_district")\n                continue;\n            if (key == "county")\n                continue;\n            if (key == "country_code")\n                continue;\n            entryText.push(locationData.address[key]);\n        }\n        return entryText.join(", ");\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/config.ts\n\n\n\n\n\n\nconst { AppletSettings, BindingDirection } = imports.ui.settings;\nconst Lang = imports.lang;\nconst keybindingManager = imports.ui.main.keybindingManager;\nconst { IconType: config_IconType } = imports.gi.St;\nconst { get_language_names } = imports.gi.GLib;\nconst { Settings } = imports.gi.Gio;\nconst Keys = {\n    DATA_SERVICE: "dataService",\n    API_KEY: "apiKey",\n    TEMPERATURE_UNIT_KEY: "temperatureUnit",\n    TEMPERATURE_HIGH_FIRST: "temperatureHighFirst",\n    WIND_SPEED_UNIT: "windSpeedUnit",\n    DISTANCE_UNIT: "distanceUnit",\n    CITY: "locationLabelOverride",\n    TRANSLATE_CONDITION: "translateCondition",\n    VERTICAL_ORIENTATION: "verticalOrientation",\n    SHOW_TEXT_IN_PANEL: "showTextInPanel",\n    TEMP_TEXT_OVERRIDE: "tempTextOverride",\n    SHOW_COMMENT_IN_PANEL: "showCommentInPanel",\n    SHOW_SUNRISE: "showSunrise",\n    SHOW_24HOURS: "show24Hours",\n    FORECAST_DAYS: "forecastDays",\n    FORECAST_HOURS: "forecastHours",\n    FORECAST_COLS: "forecastColumns",\n    FORECAST_ROWS: "forecastRows",\n    REFRESH_INTERVAL: "refreshInterval",\n    PRESSURE_UNIT: "pressureUnit",\n    SHORT_CONDITIONS: "shortConditions",\n    MANUAL_LOCATION: "manualLocation",\n    USE_CUSTOM_APPLETICONS: \'useCustomAppletIcons\',\n    USE_CUSTOM_MENUICONS: "useCustomMenuIcons",\n    RUSSIAN_STYLE: "tempRussianStyle",\n    SHORT_HOURLY_TIME: "shortHourlyTime",\n    SHOW_FORECAST_DATES: "showForecastDates",\n    WEATHER_USE_SYMBOLIC_ICONS_KEY: \'useSymbolicIcons\',\n    IMMEDIATE_PRECIP: "immediatePrecip",\n    SHOW_BOTH_TEMP: "showBothTempUnits",\n    DISPLAY_WIND_DIR_AS_TEXT: "displayWindAsText"\n};\nclass Config {\n    constructor(app, instanceID) {\n        this.fahrenheitCountries = ["bs", "bz", "ky", "pr", "pw", "us"];\n        this.windSpeedUnitLocales = {\n            "fi kr no pl ru se": "m/s",\n            "us gb": "mph"\n        };\n        this.distanceUnitLocales = {\n            "us gb": "imperial"\n        };\n        this.WEATHER_LOCATION = "location";\n        this.WEATHER_LOCATION_LIST = "locationList";\n        this.doneTypingLocation = null;\n        this.currentLocation = null;\n        this.timezone = null;\n        this.app = app;\n        this.currentLocale = ConstructJsLocale(get_language_names()[0]);\n        logger_Log.Instance.Debug("System locale is " + this.currentLocale);\n        this.autoLocProvider = new IpApi(app);\n        this.geoLocationService = new GeoLocation(app);\n        this.countryCode = this.GetCountryCode(this.currentLocale);\n        this.settings = new AppletSettings(this, UUID, instanceID);\n        this.InterfaceSettings = new Settings({ schema: "org.cinnamon.desktop.interface" });\n        this.InterfaceSettings.connect(\'changed::font-name\', () => this.OnFontChanged());\n        this.currentFontSize = this.GetCurrentFontSize();\n        this.BindSettings();\n        this.LocStore = new LocationStore(this.app, this);\n    }\n    get Timezone() {\n        return this.timezone;\n    }\n    set Timezone(value) {\n        if (!value || value == "")\n            value = null;\n        this.timezone = value;\n    }\n    BindSettings() {\n        let k;\n        for (k in Keys) {\n            let key = Keys[k];\n            let keyProp = "_" + key;\n            this.settings.bindProperty(BindingDirection.IN, key, keyProp, Lang.bind(this, this.OnSettingChanged), null);\n        }\n        this.settings.bindProperty(BindingDirection.BIDIRECTIONAL, this.WEATHER_LOCATION, ("_" + this.WEATHER_LOCATION), Lang.bind(this, this.OnLocationChanged), null);\n        this.settings.bindProperty(BindingDirection.BIDIRECTIONAL, this.WEATHER_LOCATION_LIST, ("_" + this.WEATHER_LOCATION_LIST), Lang.bind(this, this.OnLocationStoreChanged), null);\n        this.settings.bindProperty(BindingDirection.IN, "keybinding", "keybinding", Lang.bind(this, this.OnKeySettingsUpdated), null);\n        keybindingManager.addHotKey(UUID, this.keybinding, Lang.bind(this.app, this.app.on_applet_clicked));\n    }\n    get CurrentFontSize() {\n        return this.currentFontSize;\n    }\n    get CurrentLocation() {\n        return this.currentLocation;\n    }\n    get ApiKey() {\n        return this._apiKey.replace(" ", "");\n    }\n    get Language() {\n        return this.GetLanguage(this.currentLocale);\n    }\n    get TemperatureUnit() {\n        if (this._temperatureUnit == "automatic")\n            return this.GetLocaleTemperateUnit(this.countryCode);\n        return this._temperatureUnit;\n    }\n    get WindSpeedUnit() {\n        if (this._windSpeedUnit == "automatic")\n            return this.GetLocaleWindSpeedUnit(this.countryCode);\n        return this._windSpeedUnit;\n    }\n    get DistanceUnit() {\n        if (this._distanceUnit == "automatic")\n            return this.GetLocaleDistanceUnit(this.countryCode);\n        return this._distanceUnit;\n    }\n    get IconType() {\n        if (this._useCustomMenuIcons)\n            return config_IconType.SYMBOLIC;\n        return this._useSymbolicIcons ?\n            config_IconType.SYMBOLIC :\n            config_IconType.FULLCOLOR;\n    }\n    ;\n    get AppletIconType() {\n        if (this._useCustomAppletIcons)\n            return config_IconType.SYMBOLIC;\n        return this._useSymbolicIcons ?\n            config_IconType.SYMBOLIC :\n            config_IconType.FULLCOLOR;\n    }\n    SwitchToNextLocation() {\n        let nextLoc = this.LocStore.GetNextLocation(this.CurrentLocation);\n        if (nextLoc == null)\n            return null;\n        this.InjectLocationToConfig(nextLoc, true);\n        return nextLoc;\n    }\n    SwitchToPreviousLocation() {\n        let previousLoc = this.LocStore.GetPreviousLocation(this.CurrentLocation);\n        if (previousLoc == null)\n            return null;\n        this.InjectLocationToConfig(previousLoc, true);\n        return previousLoc;\n    }\n    NoApiKey() {\n        var _a;\n        let key = (_a = this._apiKey) === null || _a === void 0 ? void 0 : _a.replace(" ", "");\n        return (!key || key == "");\n    }\n    ;\n    async EnsureLocation() {\n        this.currentLocation = null;\n        if (!this._manualLocation) {\n            let location = await this.autoLocProvider.GetLocation();\n            if (!location)\n                return null;\n            this.InjectLocationToConfig(location);\n            return location;\n        }\n        let loc = this._location;\n        if (loc == undefined || loc.trim() == "") {\n            this.app.ShowError({\n                type: "hard",\n                detail: "no location",\n                userError: true,\n                message: _("Make sure you entered a location or use Automatic location instead")\n            });\n            return null;\n        }\n        let location = this.LocStore.FindLocation(this._location);\n        if (location != null) {\n            logger_Log.Instance.Debug("location exist in locationstore, retrieve");\n            this.LocStore.SwitchToLocation(location);\n            this.InjectLocationToConfig(location, true);\n            return location;\n        }\n        else if (IsCoordinate(loc)) {\n            loc = loc.replace(" ", "");\n            let latLong = loc.split(",");\n            let location = {\n                lat: parseFloat(latLong[0]),\n                lon: parseFloat(latLong[1]),\n                city: null,\n                country: null,\n                timeZone: null,\n                entryText: loc,\n            };\n            this.InjectLocationToConfig(location);\n            return location;\n        }\n        logger_Log.Instance.Debug("Location is text, geolocating...");\n        let locationData = await this.geoLocationService.GetLocation(loc);\n        if (locationData == null)\n            return null;\n        if (!!(locationData === null || locationData === void 0 ? void 0 : locationData.entryText)) {\n            logger_Log.Instance.Debug("Address found via address search");\n        }\n        location = this.LocStore.FindLocation(locationData.entryText);\n        if (location != null) {\n            logger_Log.Instance.Debug("Found location was found in locationStore, return that instead");\n            this.InjectLocationToConfig(location);\n            this.LocStore.SwitchToLocation(location);\n            return location;\n        }\n        else {\n            this.InjectLocationToConfig(locationData);\n            return locationData;\n        }\n    }\n    InjectLocationToConfig(loc, switchToManual = false) {\n        logger_Log.Instance.Debug("Location setting is now: " + loc.entryText);\n        let text = (loc.entryText + "");\n        this.SetLocation(text);\n        this.currentLocation = loc;\n        if (switchToManual == true)\n            this.settings.setValue(Keys.MANUAL_LOCATION, true);\n    }\n    OnKeySettingsUpdated() {\n        if (this.keybinding != null) {\n            keybindingManager.addHotKey(UUID, this.keybinding, Lang.bind(this.app, this.app.on_applet_clicked));\n        }\n    }\n    OnLocationChanged() {\n        logger_Log.Instance.Debug("User changed location, waiting 3 seconds...");\n        if (this.doneTypingLocation != null)\n            utils_clearTimeout(this.doneTypingLocation);\n        this.doneTypingLocation = utils_setTimeout(Lang.bind(this, this.DoneTypingLocation), 3000);\n    }\n    OnLocationStoreChanged() {\n        this.LocStore.OnLocationChanged(this._locationList);\n    }\n    OnFontChanged() {\n        this.currentFontSize = this.GetCurrentFontSize();\n        this.app.RefreshAndRebuild();\n    }\n    DoneTypingLocation() {\n        logger_Log.Instance.Debug("User has finished typing, beginning refresh");\n        this.doneTypingLocation = null;\n        this.app.RefreshAndRebuild();\n    }\n    OnSettingChanged() {\n        this.app.RefreshAndRebuild();\n    }\n    SetLocation(value) {\n        this.settings.setValue(this.WEATHER_LOCATION, value);\n    }\n    SetLocationList(list) {\n        this.settings.setValue(this.WEATHER_LOCATION_LIST, list);\n    }\n    GetLocaleTemperateUnit(code) {\n        if (code == null || !this.fahrenheitCountries.includes(code))\n            return "celsius";\n        return "fahrenheit";\n    }\n    GetLocaleWindSpeedUnit(code) {\n        if (code == null)\n            return "kph";\n        for (const key in this.windSpeedUnitLocales) {\n            if (key.includes(code))\n                return this.windSpeedUnitLocales[key];\n        }\n        return "kph";\n    }\n    GetLocaleDistanceUnit(code) {\n        if (code == null)\n            return "metric";\n        for (const key in this.distanceUnitLocales) {\n            if (key.includes(code))\n                return this.distanceUnitLocales[key];\n        }\n        return "metric";\n    }\n    GetCountryCode(locale) {\n        let split = locale.split("-");\n        if (split.length < 2)\n            return null;\n        return split[1];\n    }\n    GetLanguage(locale) {\n        let split = locale.split("-");\n        if (split.length < 1)\n            return null;\n        return split[0];\n    }\n    GetCurrentFontSize() {\n        let nameString = this.InterfaceSettings.get_string("font-name");\n        let elements = nameString.split(" ");\n        let size = parseFloat(elements[elements.length - 1]);\n        logger_Log.Instance.Debug("Font size changed to " + size.toString());\n        return size;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/loop.ts\n\n\nvar weatherAppletGUIDs = {};\nclass WeatherLoop {\n    constructor(app, instanceID) {\n        this.lastUpdated = new Date(0);\n        this.pauseRefresh = false;\n        this.LOOP_INTERVAL = 15;\n        this.appletRemoved = false;\n        this.errorCount = 0;\n        this.app = app;\n        this.instanceID = instanceID;\n        this.GUID = Guid();\n        weatherAppletGUIDs[instanceID] = this.GUID;\n    }\n    IsDataTooOld() {\n        if (!this.lastUpdated)\n            return true;\n        let oldDate = this.lastUpdated;\n        oldDate.setMinutes(oldDate.getMinutes() + (this.app.config._refreshInterval * 2));\n        return (this.lastUpdated > oldDate);\n    }\n    async Start() {\n        while (true) {\n            try {\n                if (this.IsStray())\n                    return;\n                if (this.app.encounteredError == true)\n                    this.IncrementErrorCount();\n                this.ValidateLastUpdate();\n                if (this.pauseRefresh) {\n                    logger_Log.Instance.Debug("Configuration error, updating paused");\n                    await delay(this.LoopInterval());\n                    continue;\n                }\n                if (this.errorCount > 0 || this.NextUpdate() < new Date()) {\n                    logger_Log.Instance.Debug("Refresh triggered in main loop with these values: lastUpdated " + ((!this.lastUpdated) ? "null" : this.lastUpdated.toLocaleString())\n                        + ", errorCount " + this.errorCount.toString() + " , loopInterval " + (this.LoopInterval() / 1000).toString()\n                        + " seconds, refreshInterval " + this.app.config._refreshInterval + " minutes");\n                    let state = await this.app.RefreshWeather(false);\n                    if (state == "error")\n                        logger_Log.Instance.Print("App is currently refreshing, refresh skipped in main loop");\n                    if (state == "success" || "locked")\n                        this.lastUpdated = new Date();\n                }\n                else {\n                    logger_Log.Instance.Debug("No need to update yet, skipping");\n                }\n            }\n            catch (e) {\n                logger_Log.Instance.Error("Error in Main loop: " + e);\n                this.app.encounteredError = true;\n            }\n            await delay(this.LoopInterval());\n        }\n    }\n    ;\n    Stop() {\n        this.appletRemoved = true;\n    }\n    Pause() {\n        this.pauseRefresh = true;\n    }\n    Resume() {\n        this.pauseRefresh = false;\n    }\n    ResetErrorCount() {\n        this.errorCount = 0;\n    }\n    GetSecondsUntilNextRefresh() {\n        return (this.errorCount > 0) ? (this.errorCount) * this.LOOP_INTERVAL : this.LOOP_INTERVAL;\n    }\n    IsStray() {\n        if (this.appletRemoved == true)\n            return true;\n        if (this.GUID != weatherAppletGUIDs[this.instanceID]) {\n            logger_Log.Instance.Debug("Applet GUID: " + this.GUID);\n            logger_Log.Instance.Debug("GUID stored globally: " + weatherAppletGUIDs[this.instanceID]);\n            logger_Log.Instance.Print("GUID mismatch, terminating applet");\n            return true;\n        }\n        return false;\n    }\n    IncrementErrorCount() {\n        this.app.encounteredError = false;\n        this.errorCount++;\n        logger_Log.Instance.Debug("Encountered error in previous loop");\n        if (this.errorCount > 60)\n            this.errorCount = 60;\n    }\n    NextUpdate() {\n        return new Date(this.lastUpdated.getTime() + this.app.config._refreshInterval * 60000);\n    }\n    ValidateLastUpdate() {\n        if (this.lastUpdated > new Date())\n            this.lastUpdated = new Date(0);\n    }\n    LoopInterval() {\n        return (this.errorCount > 0) ? this.LOOP_INTERVAL * this.errorCount * 1000 : this.LOOP_INTERVAL * 1000;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/lib/sunCalc.ts\nconst PI = Math.PI, sin = Math.sin, cos = Math.cos, tan = Math.tan, asin = Math.asin, atan = Math.atan2, acos = Math.acos, rad = PI / 180;\nconst dayMs = 1000 * 60 * 60 * 24, J1970 = 2440588, J2000 = 2451545;\nfunction toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }\nfunction fromJulian(j) { return new Date((j + 0.5 - J1970) * dayMs); }\nfunction toDays(date) { return toJulian(date) - J2000; }\nvar e = rad * 23.4397;\nfunction rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }\nfunction declination(l, b) { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }\nfunction azimuth(H, phi, dec) { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }\nfunction altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }\nfunction siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }\nfunction astroRefraction(h) {\n    if (h < 0)\n        h = 0;\n    return 0.0002967 / Math.tan(h + 0.00312536 / (h + 0.08901179));\n}\nfunction solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }\nfunction eclipticLongitude(M) {\n    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), P = rad * 102.9372;\n    return M + C + P + PI;\n}\nfunction sunCoords(d) {\n    var M = solarMeanAnomaly(d), L = eclipticLongitude(M);\n    return {\n        dec: declination(L, 0),\n        ra: rightAscension(L, 0)\n    };\n}\nvar J0 = 0.0009;\nfunction julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }\nfunction approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }\nfunction solarTransitJ(ds, M, L) { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }\nfunction hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }\nfunction observerAngle(height) { return -2.076 * Math.sqrt(height) / 60; }\nfunction getSetJ(h, lw, phi, dec, n, M, L) {\n    var w = hourAngle(h, phi, dec), a = approxTransit(w, lw, n);\n    return solarTransitJ(a, M, L);\n}\nfunction moonCoords(d) {\n    var L = rad * (218.316 + 13.176396 * d), M = rad * (134.963 + 13.064993 * d), F = rad * (93.272 + 13.229350 * d), l = L + rad * 6.289 * sin(M), b = rad * 5.128 * sin(F), dt = 385001 - 20905 * cos(M);\n    return {\n        ra: rightAscension(l, b),\n        dec: declination(l, b),\n        dist: dt\n    };\n}\nfunction hoursLater(date, h) {\n    return new Date(date.valueOf() + h * dayMs / 24);\n}\nclass SunCalc {\n    constructor() {\n        this.times = [\n            [-0.833, \'sunrise\', \'sunset\'],\n            [-0.3, \'sunriseEnd\', \'sunsetStart\'],\n            [-6, \'dawn\', \'dusk\'],\n            [-12, \'nauticalDawn\', \'nauticalDusk\'],\n            [-18, \'nightEnd\', \'night\'],\n            [6, \'goldenHourEnd\', \'goldenHour\']\n        ];\n    }\n    getPosition(date, lat, lng) {\n        var lw = rad * -lng, phi = rad * lat, d = toDays(date), c = sunCoords(d), H = siderealTime(d, lw) - c.ra;\n        return {\n            azimuth: azimuth(H, phi, c.dec),\n            altitude: altitude(H, phi, c.dec)\n        };\n    }\n    addTime(angle, riseName, setName) {\n        this.times.push([angle, riseName, setName]);\n    }\n    ;\n    getTimes(date, lat, lng, height) {\n        height = height || 0;\n        var lw = rad * -lng, phi = rad * lat, dh = observerAngle(height), d = toDays(date), n = julianCycle(d, lw), ds = approxTransit(0, lw, n), M = solarMeanAnomaly(ds), L = eclipticLongitude(M), dec = declination(L, 0), Jnoon = solarTransitJ(ds, M, L), i, len, time, h0, Jset, Jrise;\n        var result = {\n            solarNoon: fromJulian(Jnoon),\n            nadir: fromJulian(Jnoon - 0.5)\n        };\n        for (i = 0, len = this.times.length; i < len; i += 1) {\n            time = this.times[i];\n            h0 = (time[0] + dh) * rad;\n            Jset = getSetJ(h0, lw, phi, dec, n, M, L);\n            Jrise = Jnoon - (Jset - Jnoon);\n            result[time[1]] = fromJulian(Jrise);\n            result[time[2]] = fromJulian(Jset);\n        }\n        return result;\n    }\n    ;\n    getMoonPosition(date, lat, lng) {\n        var lw = rad * -lng, phi = rad * lat, d = toDays(date), c = moonCoords(d), H = siderealTime(d, lw) - c.ra, h = altitude(H, phi, c.dec), pa = atan(sin(H), tan(phi) * cos(c.dec) - sin(c.dec) * cos(H));\n        h = h + astroRefraction(h);\n        return {\n            azimuth: azimuth(H, phi, c.dec),\n            altitude: h,\n            distance: c.dist,\n            parallacticAngle: pa\n        };\n    }\n    ;\n    getMoonIllumination(date) {\n        var d = toDays(date || new Date()), s = sunCoords(d), m = moonCoords(d), sunDist = 149598000, phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)), inc = atan(sunDist * sin(phi), m.dist - sunDist * cos(phi)), angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -\n            cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));\n        return {\n            fraction: (1 + cos(inc)) / 2,\n            phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,\n            angle: angle\n        };\n    }\n    ;\n    getMoonTimes(date, lat, lng, inUTC) {\n        var t = new Date(date);\n        if (inUTC)\n            t.setUTCHours(0, 0, 0, 0);\n        else\n            t.setHours(0, 0, 0, 0);\n        var hc = 0.133 * rad, h0 = this.getMoonPosition(t, lat, lng).altitude - hc, h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;\n        for (var i = 1; i <= 24; i += 2) {\n            h1 = this.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;\n            h2 = this.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n            a = (h0 + h2) / 2 - h1;\n            b = (h2 - h0) / 2;\n            xe = -b / (2 * a);\n            ye = (a * xe + b) * xe + h1;\n            d = b * b - 4 * a * h1;\n            roots = 0;\n            if (d >= 0) {\n                dx = Math.sqrt(d) / (Math.abs(a) * 2);\n                x1 = xe - dx;\n                x2 = xe + dx;\n                if (Math.abs(x1) <= 1)\n                    roots++;\n                if (Math.abs(x2) <= 1)\n                    roots++;\n                if (x1 < -1)\n                    x1 = x2;\n            }\n            if (roots === 1) {\n                if (h0 < 0)\n                    rise = i + x1;\n                else\n                    set = i + x1;\n            }\n            else if (roots === 2) {\n                rise = i + (ye < 0 ? x2 : x1);\n                set = i + (ye < 0 ? x1 : x2);\n            }\n            if (rise && set)\n                break;\n            h0 = h2;\n        }\n        var result = {};\n        if (rise)\n            result.rise = hoursLater(t, rise);\n        if (set)\n            result.set = hoursLater(t, set);\n        if (!rise && !set)\n            result[ye > 0 ? \'alwaysUp\' : \'alwaysDown\'] = true;\n        return result;\n    }\n    ;\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/met_uk.ts\n\n\n\nclass MetUk {\n    constructor(_app) {\n        this.prettyName = _("Met Office UK");\n        this.name = "Met Office UK";\n        this.maxForecastSupport = 5;\n        this.website = "https://www.metoffice.gov.uk/";\n        this.maxHourlyForecastSupport = 36;\n        this.needsApiKey = false;\n        this.baseUrl = "http://datapoint.metoffice.gov.uk/public/data/val/";\n        this.forecastPrefix = "wxfcs/all/json/";\n        this.threeHourlyUrl = "?res=3hourly";\n        this.dailyUrl = "?res=daily";\n        this.currentPrefix = "wxobs/all/json/";\n        this.sitesUrl = "sitelist";\n        this.key = "key=05de1ee8-de70-46aa-9b41-299d4cc60219";\n        this.forecastSite = null;\n        this.observationSites = null;\n        this.currentLoc = null;\n        this.currentLocID = null;\n        this.MAX_STATION_DIST = 50000;\n        this.app = _app;\n        this.sunCalc = new SunCalc();\n    }\n    async GetWeather(newLoc) {\n        if (newLoc == null)\n            return null;\n        let loc = newLoc.lat.toString() + "," + newLoc.lon.toString();\n        if (this.currentLocID == null || this.currentLocID != loc || this.forecastSite == null || this.observationSites == null || this.observationSites.length == 0) {\n            logger_Log.Instance.Print("Downloading new site data");\n            this.currentLoc = newLoc;\n            this.currentLocID = loc;\n            let forecastSite = await this.GetClosestForecastSite(newLoc);\n            if (forecastSite == null)\n                return null;\n            let observationSites = await this.GetObservationSitesInRange(newLoc, this.MAX_STATION_DIST);\n            if (observationSites == null)\n                return null;\n            this.forecastSite = forecastSite;\n            this.observationSites = observationSites;\n        }\n        else {\n            logger_Log.Instance.Debug("Site data downloading skipped");\n        }\n        if (this.observationSites.length == 0 || this.forecastSite.dist > 100000) {\n            logger_Log.Instance.Error("User is probably not in UK, aborting");\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "location not covered",\n                message: "MET Office UK only covers the UK, please make sure your location is in the country",\n                service: "met-uk"\n            });\n            return null;\n        }\n        let forecastPromise = this.GetData(this.baseUrl + this.forecastPrefix + this.forecastSite.id + this.dailyUrl + "&" + this.key, this.ParseForecast);\n        let hourlyPayload = this.GetData(this.baseUrl + this.forecastPrefix + this.forecastSite.id + this.threeHourlyUrl + "&" + this.key, this.ParseHourlyForecast);\n        let observations = await this.GetObservationData(this.observationSites);\n        let currentResult = this.ParseCurrent(observations);\n        if (!currentResult)\n            return null;\n        let forecastResult = await forecastPromise;\n        currentResult.forecasts = (!forecastResult) ? [] : forecastResult;\n        let threeHourlyForecast = await hourlyPayload;\n        currentResult.hourlyForecasts = (!threeHourlyForecast) ? [] : threeHourlyForecast;\n        return currentResult;\n    }\n    ;\n    async GetClosestForecastSite(loc) {\n        let forecastSitelist = await this.app.LoadJsonAsync(this.baseUrl + this.forecastPrefix + this.sitesUrl + "?" + this.key);\n        if (forecastSitelist == null)\n            return null;\n        return this.GetClosestSite(forecastSitelist, loc);\n    }\n    async GetObservationSitesInRange(loc, range) {\n        let observationSiteList = await this.app.LoadJsonAsync(this.baseUrl + this.currentPrefix + this.sitesUrl + "?" + this.key);\n        if (observationSiteList == null)\n            return null;\n        let observationSites = [];\n        for (let index = 0; index < observationSiteList.Locations.Location.length; index++) {\n            const element = observationSiteList.Locations.Location[index];\n            element.dist = GetDistance(parseFloat(element.latitude), parseFloat(element.longitude), loc.lat, loc.lon);\n            if (element.dist > range)\n                continue;\n            observationSites.push(element);\n        }\n        observationSites = this.SortObservationSites(observationSites);\n        logger_Log.Instance.Debug("Observation sites found: " + JSON.stringify(observationSites, null, 2));\n        return observationSites;\n    }\n    async GetObservationData(observationSites) {\n        let observations = [];\n        for (let index = 0; index < observationSites.length; index++) {\n            const element = observationSites[index];\n            logger_Log.Instance.Debug("Getting observation data from station: " + element.id);\n            let payload = await this.app.LoadJsonAsync(this.baseUrl + this.currentPrefix + element.id + "?res=hourly&" + this.key);\n            if (!!payload)\n                observations.push(payload);\n            else {\n                logger_Log.Instance.Debug("Failed to get observations from " + element.id);\n            }\n        }\n        return observations;\n    }\n    async GetData(query, ParseFunction) {\n        if (query == null)\n            return null;\n        logger_Log.Instance.Debug("Query: " + query);\n        let json = await this.app.LoadJsonAsync(query);\n        if (json == null)\n            return null;\n        return ParseFunction(json, this);\n    }\n    ;\n    ParseCurrent(json) {\n        let observation = this.MeshObservations(json);\n        if (!observation) {\n            return null;\n        }\n        let dataIndex;\n        for (let index = 0; index < json.length; index++) {\n            const element = json[index];\n            if (element.SiteRep.DV.Location == null)\n                continue;\n            dataIndex = index;\n            break;\n        }\n        if (dataIndex == null) {\n            this.app.ShowError({\n                detail: "no api response",\n                type: "hard",\n                message: _("Data was not found for location"),\n                service: "met-uk",\n            });\n            return null;\n        }\n        let times = this.sunCalc.getTimes(new Date(), parseFloat(json[dataIndex].SiteRep.DV.Location.lat), parseFloat(json[dataIndex].SiteRep.DV.Location.lon), parseFloat(json[dataIndex].SiteRep.DV.Location.elevation));\n        try {\n            let weather = {\n                coord: {\n                    lat: parseFloat(json[dataIndex].SiteRep.DV.Location.lat),\n                    lon: parseFloat(json[dataIndex].SiteRep.DV.Location.lon)\n                },\n                location: {\n                    city: null,\n                    country: null,\n                    url: null,\n                    timeZone: null,\n                    distanceFrom: this.observationSites[dataIndex].dist\n                },\n                date: new Date(json[dataIndex].SiteRep.DV.dataDate),\n                sunrise: times.sunrise,\n                sunset: times.sunset,\n                wind: {\n                    speed: null,\n                    degree: null\n                },\n                temperature: null,\n                pressure: null,\n                humidity: null,\n                condition: this.ResolveCondition(observation === null || observation === void 0 ? void 0 : observation.W),\n                forecasts: []\n            };\n            if ((observation === null || observation === void 0 ? void 0 : observation.V) != null) {\n                weather.extra_field = {\n                    name: _("Visibility"),\n                    value: this.VisibilityToText(observation.V),\n                    type: "string"\n                };\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.S) != null) {\n                weather.wind.speed = MPHtoMPS(parseFloat(observation.S));\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.D) != null) {\n                weather.wind.degree = CompassToDeg(observation.D);\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.T) != null) {\n                weather.temperature = CelsiusToKelvin(parseFloat(observation.T));\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.P) != null) {\n                weather.pressure = parseFloat(observation.P);\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.H) != null) {\n                weather.humidity = parseFloat(observation.H);\n            }\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Met UK Weather Parsing error: " + e);\n            this.app.ShowError({ type: "soft", service: "met-uk", detail: "unusual payload", message: _("Failed to Process Current Weather Info") });\n            return null;\n        }\n    }\n    ;\n    ParseForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.SiteRep.DV.Location.Period.length; i++) {\n                let element = json.SiteRep.DV.Location.Period[i];\n                if (!Array.isArray(element.Rep))\n                    continue;\n                let day = element.Rep[0];\n                let night = element.Rep[1];\n                let forecast = {\n                    date: new Date(self.PartialToISOString(element.value)),\n                    temp_min: CelsiusToKelvin(parseFloat(night.Nm)),\n                    temp_max: CelsiusToKelvin(parseFloat(day.Dm)),\n                    condition: self.ResolveCondition(day.W),\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("MET UK Forecast Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "met-uk", detail: "unusual payload", message: _("Failed to Process Forecast Info") });\n            return null;\n        }\n    }\n    ;\n    ParseHourlyForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.SiteRep.DV.Location.Period.length; i++) {\n                let day = json.SiteRep.DV.Location.Period[i];\n                let date = new Date(self.PartialToISOString(day.value));\n                if (!Array.isArray(day.Rep))\n                    continue;\n                for (let index = 0; index < day.Rep.length; index++) {\n                    const hour = day.Rep[index];\n                    let timestamp = new Date(date.getTime());\n                    timestamp.setHours(timestamp.getHours() + (parseInt(hour.$) / 60));\n                    let threshold = new Date();\n                    threshold.setHours(threshold.getHours() - 3);\n                    if (timestamp < threshold)\n                        continue;\n                    let forecast = {\n                        date: timestamp,\n                        temp: CelsiusToKelvin(parseFloat(hour.T)),\n                        condition: self.ResolveCondition(hour.W),\n                        precipitation: {\n                            type: "rain",\n                            volume: null,\n                            chance: parseFloat(hour.Pp)\n                        }\n                    };\n                    forecasts.push(forecast);\n                }\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("MET UK Forecast Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "met-uk", detail: "unusual payload", message: _("Failed to Process Forecast Info") });\n            return null;\n        }\n    }\n    VisibilityToText(dist) {\n        let distance = parseInt(dist);\n        let unit = this.app.config.DistanceUnit;\n        let stringFormat = {\n            distanceUnit: this.DistanceUnitFor(unit)\n        };\n        if (distance < 1000) {\n            stringFormat.distance = MetreToUserUnits(1000, unit).toString();\n            return `${_("Very poor")} - ${_("Less than {distance} {distanceUnit}", stringFormat)}`;\n        }\n        else if (distance >= 40000) {\n            stringFormat.distance = MetreToUserUnits(40000, unit).toString();\n            return `${_("Excellent")} - ${_("More than {distance} {distanceUnit}", stringFormat)}`;\n        }\n        else if (distance < 4000) {\n            stringFormat.smallerDistance = MetreToUserUnits(1000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(4000, unit).toString();\n            return `${_("Poor")} - ${_("Between {smallerDistance}-{biggerDistance} {distanceUnit}", stringFormat)}`;\n        }\n        else if (distance < 10000) {\n            stringFormat.smallerDistance = MetreToUserUnits(4000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(10000, unit).toString();\n            return `${_("Moderate")} - ${_("Between {smallerDistance}-{biggerDistance} {distanceUnit}", stringFormat)}`;\n        }\n        else if (distance < 20000) {\n            stringFormat.smallerDistance = MetreToUserUnits(10000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(20000, unit).toString();\n            return `${_("Good")} - ${_("Between {smallerDistance}-{biggerDistance} {distanceUnit}", stringFormat)}`;\n        }\n        else if (distance < 40000) {\n            stringFormat.smallerDistance = MetreToUserUnits(20000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(40000, unit).toString();\n            return `${_("Very good")} ${_("Between {smallerDistance}-{biggerDistance} {distanceUnit}", stringFormat)}`;\n        }\n    }\n    DistanceUnitFor(unit) {\n        if (unit == "imperial")\n            return _("mi");\n        return _("km");\n    }\n    SortObservationSites(observations) {\n        if (observations == null)\n            return null;\n        observations = observations.sort((a, b) => {\n            if (a.dist < b.dist)\n                return -1;\n            if (a.dist == b.dist)\n                return 0;\n            return 1;\n        });\n        return observations;\n    }\n    MeshObservations(observations) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (!observations)\n            return null;\n        if (observations.length == 0)\n            return null;\n        let result = this.GetLatestObservation((_d = (_c = (_b = (_a = observations[0]) === null || _a === void 0 ? void 0 : _a.SiteRep) === null || _b === void 0 ? void 0 : _b.DV) === null || _c === void 0 ? void 0 : _c.Location) === null || _d === void 0 ? void 0 : _d.Period, new Date());\n        if (observations.length == 1)\n            return result;\n        for (let index = 0; index < observations.length; index++) {\n            if (((_h = (_g = (_f = (_e = observations[index]) === null || _e === void 0 ? void 0 : _e.SiteRep) === null || _f === void 0 ? void 0 : _f.DV) === null || _g === void 0 ? void 0 : _g.Location) === null || _h === void 0 ? void 0 : _h.Period) == null)\n                continue;\n            let nextObservation = this.GetLatestObservation(observations[index].SiteRep.DV.Location.Period, new Date());\n            if (result == null)\n                result = nextObservation;\n            let debugText = " Observation data missing, plugged in from ID " +\n                observations[index].SiteRep.DV.Location.i + ", index " + index +\n                ", distance "\n                + Math.round(GetDistance(parseFloat(observations[index].SiteRep.DV.Location.lat), parseFloat(observations[index].SiteRep.DV.Location.lon), this.currentLoc.lat, this.currentLoc.lon))\n                + " metres";\n            if ((result === null || result === void 0 ? void 0 : result.V) == null) {\n                result.V = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.V;\n                logger_Log.Instance.Debug("Visibility" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.W) == null) {\n                result.W = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.W;\n                logger_Log.Instance.Debug("Weather condition" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.S) == null) {\n                result.S = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.S;\n                logger_Log.Instance.Debug("Wind Speed" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.D) == null) {\n                result.D = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.D;\n                logger_Log.Instance.Debug("Wind degree" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.T) == null) {\n                result.T = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.T;\n                logger_Log.Instance.Debug("Temperature" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.P) == null) {\n                result.P = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.P;\n                logger_Log.Instance.Debug("Pressure" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.H) == null) {\n                result.H = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.H;\n                logger_Log.Instance.Debug("Humidity" + debugText);\n            }\n        }\n        return result;\n    }\n    GetLatestObservation(observations, day) {\n        if (observations == null)\n            return null;\n        for (let index = 0; index < observations.length; index++) {\n            const element = observations[index];\n            let date = new Date(this.PartialToISOString(element.value));\n            if (date.toLocaleDateString() != day.toLocaleDateString())\n                continue;\n            if (Array.isArray(element.Rep))\n                return element.Rep[element.Rep.length - 1];\n            else\n                return element.Rep;\n        }\n        return null;\n    }\n    PartialToISOString(date) {\n        return (date.replace("Z", "")) + "T00:00:00Z";\n    }\n    GetClosestSite(siteList, loc) {\n        let sites = siteList.Locations.Location;\n        let closest = sites[0];\n        closest.dist = GetDistance(parseFloat(closest.latitude), parseFloat(closest.longitude), loc.lat, loc.lon);\n        for (let index = 0; index < sites.length; index++) {\n            const element = sites[index];\n            element.dist = GetDistance(parseFloat(element.latitude), parseFloat(element.longitude), loc.lat, loc.lon);\n            if (element.dist < closest.dist) {\n                closest = element;\n            }\n        }\n        return closest;\n    }\n    ResolveCondition(icon) {\n        switch (icon) {\n            case "NA":\n                return {\n                    main: _("Unknown"),\n                    description: _("Unknown"),\n                    customIcon: "cloud-refresh-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            case "0":\n                return {\n                    main: _("Clear"),\n                    description: _("Clear"),\n                    customIcon: "night-clear-symbolic",\n                    icons: ["weather-clear-night", "weather-severe-alert"]\n                };\n            case "1":\n                return {\n                    main: _("Sunny"),\n                    description: _("Sunny"),\n                    customIcon: "day-sunny-symbolic",\n                    icons: ["weather-clear", "weather-severe-alert"]\n                };\n            case "2":\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    customIcon: "night-alt-cloudy-symbolic",\n                    icons: ["weather-clouds-night", "weather-overcast", "weather-severe-alert"]\n                };\n            case "3":\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    customIcon: "day-cloudy-symbolic",\n                    icons: ["weather-clouds", "weather-overcast", "weather-severe-alert"]\n                };\n            case "4":\n                return {\n                    main: _("Unknown"),\n                    description: _("Unknown"),\n                    customIcon: "cloud-refresh-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            case "5":\n                return {\n                    main: _("Mist"),\n                    description: _("Mist"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "6":\n                return {\n                    main: _("Fog"),\n                    description: _("Fog"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "7":\n                return {\n                    main: _("Cloudy"),\n                    description: _("Cloudy"),\n                    customIcon: "cloud-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", "weather-severe-alert"]\n                };\n            case "8":\n                return {\n                    main: _("Overcast"),\n                    description: _("Overcast"),\n                    customIcon: "cloudy-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", "weather-severe-alert"]\n                };\n            case "9":\n                return {\n                    main: _("Light rain"),\n                    description: _("Light rain shower"),\n                    customIcon: "night-alt-showers-symbolic",\n                    icons: ["weather-showers-scattered-night", "weather-showers-night", "weather-showers-scattered", "weather-showers", "weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "10":\n                return {\n                    main: _("Light rain"),\n                    description: _("Light rain shower"),\n                    customIcon: "day-showers-symbolic",\n                    icons: ["weather-showers-scattered-day", "weather-showers-day", "weather-showers-scattered", "weather-showers", "weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "11":\n                return {\n                    main: _("Drizzle"),\n                    description: _("Drizzle"),\n                    customIcon: "showers-symbolic",\n                    icons: ["weather-showers-scattered", "weather-showers", "weather-rain", "weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "12":\n                return {\n                    main: _("Light rain"),\n                    description: _("Light rain"),\n                    customIcon: "showers-symbolic",\n                    icons: ["weather-showers-scattered", "weather-showers", "weather-rain", "weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "13":\n                return {\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain shower"),\n                    customIcon: "night-alt-rain-symbolic",\n                    icons: ["weather-showers-night", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "14":\n                return {\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain shower"),\n                    customIcon: "day-rain-symbolic",\n                    icons: ["weather-showers-day", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "15":\n                return {\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "16":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet shower"),\n                    customIcon: "night-alt-rain-mix-symbolic",\n                    icons: ["weather-showers-night", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "17":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet shower"),\n                    customIcon: "day-rain-mix-symbolic",\n                    icons: ["weather-showers-day", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "18":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "19":\n                return {\n                    main: _("Hail"),\n                    description: _("Hail shower"),\n                    customIcon: "night-alt-hail-symbolic",\n                    icons: ["weather-showers-night", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "20":\n                return {\n                    main: _("Hail"),\n                    description: _("Hail shower"),\n                    customIcon: "day-hail-symbolic",\n                    icons: ["weather-showers-day", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "21":\n                return {\n                    main: _("Hail"),\n                    description: _("Hail"),\n                    customIcon: "hail-symbolic",\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "22":\n                return {\n                    main: _("Light snow"),\n                    description: _("Light snow shower"),\n                    customIcon: "night-alt-snow-symbolic",\n                    icons: ["weather-snow-scattered", "weather-snow", "weather-severe-alert"]\n                };\n            case "23":\n                return {\n                    main: _("Light snow"),\n                    description: _("Light snow shower"),\n                    customIcon: "day-snow-symbolic",\n                    icons: ["weather-snow-scattered", "weather-snow", "weather-severe-alert"]\n                };\n            case "24":\n                return {\n                    main: _("Light snow"),\n                    description: _("Light snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow-scattered", "weather-snow", "weather-severe-alert"]\n                };\n            case "25":\n                return {\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow shower"),\n                    customIcon: "night-alt-snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered", "weather-severe-alert"]\n                };\n            case "26":\n                return {\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow shower"),\n                    customIcon: "day-snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered", "weather-severe-alert"]\n                };\n            case "27":\n                return {\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered", "weather-severe-alert"]\n                };\n            case "28":\n                return {\n                    main: _("Thunder"),\n                    description: _("Thunder shower"),\n                    customIcon: "day-storm-showers-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "29":\n                return {\n                    main: _("Thunder"),\n                    description: _("Thunder shower"),\n                    customIcon: "night-alt-storm-showers-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "30":\n                return {\n                    main: _("Thunder"),\n                    description: _("Thunder"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            default:\n                return {\n                    main: _("Unknown"),\n                    description: _("Unknown"),\n                    customIcon: "cloud-refresh-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n        }\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/lib/commandRunner.ts\n\nconst { spawnCommandLineAsyncIO } = imports.misc.util;\nasync function SpawnProcessJson(command) {\n    let response = await SpawnProcess(command);\n    if (!response.Success)\n        return response;\n    try {\n        response.Data = JSON.parse(response.Data);\n    }\n    catch (e) {\n        Log.Instance.Error("Error: Command response is not JSON. The response: " + response.Data);\n        response.Success = false;\n        response.ErrorData = {\n            Code: -1,\n            Message: null,\n            Type: "jsonParse",\n        };\n    }\n    finally {\n        return response;\n    }\n}\nasync function SpawnProcess(command) {\n    let cmd = "";\n    for (let index = 0; index < command.length; index++) {\n        const element = command[index];\n        cmd += "\'" + element + "\' ";\n    }\n    let response = await new Promise((resolve, reject) => {\n        spawnCommandLineAsyncIO(cmd, (aStdout, err, exitCode) => {\n            let result = {\n                Success: exitCode == 0,\n                ErrorData: null,\n                Data: aStdout !== null && aStdout !== void 0 ? aStdout : null\n            };\n            if (exitCode != 0) {\n                result.ErrorData = {\n                    Code: exitCode,\n                    Message: err !== null && err !== void 0 ? err : null,\n                    Type: "unknown"\n                };\n            }\n            resolve(result);\n            return result;\n        });\n    });\n    return response;\n}\nfunction OpenUrl(element) {\n    if (!element.url)\n        return;\n    imports.gi.Gio.app_info_launch_default_for_uri(element.url, global.create_app_launch_context());\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/weatherbutton.ts\n\nconst { Button } = imports.gi.St;\nconst { SignalManager } = imports.misc.signalManager;\nclass WeatherButton {\n    constructor(options, doNotAddPadding = false) {\n        this.signals = new SignalManager();\n        this.disabled = false;\n        this.Hovered = new Event();\n        this.Clicked = new Event();\n        this.actor = new Button(options);\n        this.actor.add_style_class_name("popup-menu-item");\n        if (doNotAddPadding)\n            this.actor.set_style(\'padding: 0px; border-radius: 2px;\');\n        else\n            this.actor.set_style(\'padding-top: 0px;padding-bottom: 0px; padding-right: 2px; padding-left: 2px; border-radius: 2px;\');\n        this.signals.connect(this.actor, \'enter-event\', this.handleEnter, this);\n        this.signals.connect(this.actor, \'leave-event\', this.handleLeave, this);\n        this.actor.connect("clicked", () => this.clicked());\n        this.actor.connect("enter-event", (actor, event) => this.hovered(event));\n    }\n    handleEnter(actor) {\n        if (!this.disabled)\n            this.actor.add_style_pseudo_class(\'active\');\n    }\n    handleLeave() {\n        this.actor.remove_style_pseudo_class(\'active\');\n    }\n    disable() {\n        this.disabled = true;\n        this.actor.reactive = false;\n    }\n    enable() {\n        this.disabled = false;\n        this.actor.reactive = true;\n    }\n    clicked() {\n        if (!this.disabled) {\n            this.actor.add_style_pseudo_class(\'active\');\n            this.Clicked.Invoke(this, null);\n        }\n    }\n    hovered(event) {\n        this.Hovered.Invoke(this, event);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiCurrentWeather.ts\n\n\n\n\n\nconst { Bin, BoxLayout, IconType: uiCurrentWeather_IconType, Label, Icon, Align } = imports.gi.St;\nconst uiCurrentWeather_Lang = imports.lang;\nconst STYLE_SUMMARYBOX = \'weather-current-summarybox\';\nconst STYLE_SUMMARY = \'weather-current-summary\';\nconst STYLE_DATABOX = \'weather-current-databox\';\nconst STYLE_ICON = \'weather-current-icon\';\nconst STYLE_ICONBOX = \'weather-current-iconbox\';\nconst STYLE_DATABOX_CAPTIONS = \'weather-current-databox-captions\';\nconst STYLE_ASTRONOMY = \'weather-current-astronomy\';\nconst STYLE_DATABOX_VALUES = \'weather-current-databox-values\';\nconst STYLE_CURRENT = \'current\';\nconst STYLE_LOCATION_SELECTOR = \'location-selector\';\nclass CurrentWeather {\n    constructor(app) {\n        this.app = app;\n        this.actor = new Bin();\n        this.actor.style_class = STYLE_CURRENT;\n        this.app.config.LocStore.StoreChanged.Subscribe((s, a) => this.onLocationStorageChanged(s, a));\n    }\n    Display(weather, config) {\n        try {\n            if (this.app.config.LocStore.ShouldShowLocationSelectors(config.CurrentLocation))\n                this.ShowLocationSelectors();\n            else\n                this.HideLocationSelectors();\n            let location = GenerateLocationText(weather, config);\n            this.SetLocation(location, weather.location.url);\n            this.SetConditionText(weather.condition.description);\n            this.SetWeatherIcon(weather.condition.icons, weather.condition.customIcon);\n            this.SetTemperature(weather.temperature);\n            this.SetHumidity(weather.humidity);\n            this.SetWind(weather.wind.speed, weather.wind.degree);\n            this.SetPressure(weather.pressure);\n            this.SetAPIUniqueField(weather.extra_field);\n            if (config._showSunrise)\n                this.SetSunriseAndSunset(weather.sunrise, weather.sunset, weather.location.timeZone);\n            this.SetImmediatePrecipitation(weather.immediatePrecipitation, config);\n            return true;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("DisplayWeatherError: " + e);\n            return false;\n        }\n    }\n    ;\n    UpdateIconType(iconType) {\n        this.weatherIcon.icon_type = iconType;\n    }\n    Destroy() {\n        if (this.actor.get_child() != null)\n            this.actor.get_child().destroy();\n    }\n    Rebuild(config, textColorStyle) {\n        this.Destroy();\n        this.weatherIcon = new Icon({\n            icon_type: config.IconType,\n            icon_size: 64,\n            icon_name: APPLET_ICON,\n            style_class: STYLE_ICON\n        });\n        let box = new BoxLayout({ style_class: STYLE_ICONBOX });\n        box.add_actor(this.weatherIcon);\n        box.add_actor(this.BuildMiddleColumn(config, textColorStyle));\n        box.add_actor(this.BuildRightColumn(textColorStyle, config));\n        this.actor.set_child(box);\n    }\n    ;\n    BuildMiddleColumn(config, textColorStyle) {\n        this.weatherSummary = new Label({ text: _(\'Loading ...\'), style_class: STYLE_SUMMARY });\n        let middleColumn = new BoxLayout({ vertical: true, style_class: STYLE_SUMMARYBOX });\n        middleColumn.add_actor(this.BuildLocationSection());\n        middleColumn.add(this.weatherSummary, { expand: true, x_align: Align.MIDDLE, y_align: Align.MIDDLE, x_fill: false, y_fill: false });\n        this.immediatePrecipitationLabel = new Label({ style_class: "weather-immediate-precipitation" });\n        this.immediatePrecipitationBox = new Bin();\n        this.immediatePrecipitationBox.add_actor(this.immediatePrecipitationLabel);\n        this.immediatePrecipitationBox.hide();\n        middleColumn.add_actor(this.immediatePrecipitationBox);\n        if (config._showSunrise)\n            middleColumn.add_actor(this.BuildSunBox(config, textColorStyle));\n        return middleColumn;\n    }\n    BuildRightColumn(textColorStyle, config) {\n        let textOb = {\n            text: ELLIPSIS\n        };\n        this.temperatureLabel = new Label(textOb);\n        this.humidityLabel = new Label(textOb);\n        this.pressureLabel = new Label(textOb);\n        this.apiUniqueLabel = new Label({ text: \'\' });\n        this.apiUniqueCaptionLabel = new Label({ text: \'\', style: textColorStyle });\n        let rb_captions = new BoxLayout({ vertical: true, style_class: STYLE_DATABOX_CAPTIONS });\n        let rb_values = new BoxLayout({ vertical: true, style_class: STYLE_DATABOX_VALUES });\n        rb_captions.add_actor(new Label({ text: _(\'Temperature\') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(new Label({ text: _(\'Humidity\') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(new Label({ text: _(\'Pressure\') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(new Label({ text: _(\'Wind\') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(this.apiUniqueCaptionLabel);\n        rb_values.add_actor(this.temperatureLabel);\n        rb_values.add_actor(this.humidityLabel);\n        rb_values.add_actor(this.pressureLabel);\n        rb_values.add_actor(this.BuildWind(config));\n        rb_values.add_actor(this.apiUniqueLabel);\n        let rightColumn = new BoxLayout({ style_class: STYLE_DATABOX });\n        rightColumn.add_actor(rb_captions);\n        rightColumn.add_actor(rb_values);\n        return rightColumn;\n    }\n    BuildWind(config) {\n        let windBox = new BoxLayout({ vertical: false });\n        let iconPaddingBottom = Math.round(config.CurrentFontSize * 0.05);\n        let iconPaddingTop = Math.round(config.CurrentFontSize * 0.15);\n        let iconSize = Math.round(config.CurrentFontSize * 0.8);\n        this.windLabel = new Label({ text: ELLIPSIS });\n        this.windDirectionIcon = new Icon({\n            icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n            icon_name: APPLET_ICON,\n            icon_size: iconSize,\n            style: "padding-right: 5px; padding-top: " + iconPaddingTop + "px; padding-bottom: " + iconPaddingBottom + "px;"\n        });\n        if (!config._displayWindAsText)\n            windBox.add(this.windDirectionIcon, { x_fill: false, y_fill: true, x_align: Align.MIDDLE, y_align: Align.MIDDLE, expand: false });\n        windBox.add(this.windLabel);\n        return windBox;\n    }\n    BuildLocationSection() {\n        this.locationButton = new WeatherButton({ reactive: true, label: _(\'Refresh\'), });\n        this.location = this.locationButton.actor;\n        this.location.connect(SIGNAL_CLICKED, () => {\n            if (this.app.encounteredError)\n                this.app.RefreshWeather(true);\n            else if (this.locationButton.url == null)\n                return;\n            else\n                OpenUrl(this.locationButton);\n        });\n        this.nextLocationButton = new WeatherButton({\n            reactive: true,\n            can_focus: true,\n            child: new Icon({\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: this.app.config.CurrentFontSize,\n                icon_name: "custom-right-arrow-symbolic",\n                style_class: STYLE_LOCATION_SELECTOR\n            }),\n        });\n        this.nextLocationButton.actor.connect(SIGNAL_CLICKED, uiCurrentWeather_Lang.bind(this, this.NextLocationClicked));\n        this.previousLocationButton = new WeatherButton({\n            reactive: true,\n            can_focus: true,\n            child: new Icon({\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: this.app.config.CurrentFontSize,\n                icon_name: "custom-left-arrow-symbolic",\n                style_class: STYLE_LOCATION_SELECTOR\n            }),\n        });\n        this.previousLocationButton.actor.connect(SIGNAL_CLICKED, uiCurrentWeather_Lang.bind(this, this.PreviousLocationClicked));\n        let box = new BoxLayout();\n        box.add(this.previousLocationButton.actor, { x_fill: false, x_align: Align.START, y_align: Align.MIDDLE, expand: false });\n        box.add(this.location, { x_fill: true, x_align: Align.MIDDLE, y_align: Align.MIDDLE, expand: true });\n        box.add(this.nextLocationButton.actor, { x_fill: false, x_align: Align.END, y_align: Align.MIDDLE, expand: false });\n        return box;\n    }\n    BuildSunBox(config, textColorStyle) {\n        let sunBin = new Bin();\n        this.sunriseLabel = new Label({ text: ELLIPSIS, style: textColorStyle });\n        this.sunsetLabel = new Label({ text: ELLIPSIS, style: textColorStyle });\n        let sunriseBox = new BoxLayout();\n        let sunsetBox = new BoxLayout();\n        if (config._showSunrise) {\n            let sunsetIcon = new Icon({\n                icon_name: "sunset-symbolic",\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: 25,\n                style: textColorStyle\n            });\n            let sunriseIcon = new Icon({\n                icon_name: "sunrise-symbolic",\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: 25,\n                style: textColorStyle\n            });\n            sunriseBox.add_actor(sunriseIcon);\n            sunsetBox.add_actor(sunsetIcon);\n        }\n        let textOptions = {\n            x_fill: false,\n            x_align: Align.START,\n            y_align: Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        };\n        sunriseBox.add(this.sunriseLabel, textOptions);\n        sunsetBox.add(this.sunsetLabel, textOptions);\n        let ab_spacerLabel = new Label({ text: BLANK });\n        let sunBox = new BoxLayout({ style_class: STYLE_ASTRONOMY });\n        sunBox.add_actor(sunriseBox);\n        sunBox.add_actor(ab_spacerLabel);\n        sunBox.add_actor(sunsetBox);\n        sunBin.set_child(sunBox);\n        return sunBin;\n    }\n    SetImmediatePrecipitation(precip, config) {\n        if (!config._immediatePrecip || !precip || precip.end == null || precip.start == null) {\n            this.immediatePrecipitationBox.hide();\n            return;\n        }\n        this.immediatePrecipitationBox.show();\n        if (precip.start == -1) {\n            this.immediatePrecipitationBox.hide();\n        }\n        else if (precip.start == 0) {\n            if (precip.end != -1)\n                this.immediatePrecipitationLabel.text = _("Precipitation will end in {precipEnd} minutes", { precipEnd: precip.end });\n            else\n                this.immediatePrecipitationLabel.text = _("Precipitation won\'t end in within an hour");\n        }\n        else {\n            this.immediatePrecipitationLabel.text = _("Precipitation will start within {precipStart} minutes", { precipStart: precip.start });\n        }\n    }\n    SetSunriseAndSunset(sunrise, sunset, tz) {\n        let sunriseText = "";\n        let sunsetText = "";\n        if (sunrise != null && sunset != null && this.app.config._showSunrise) {\n            sunriseText = (GetHoursMinutes(sunrise, this.app.config.currentLocale, this.app.config._show24Hours, tz));\n            sunsetText = (GetHoursMinutes(sunset, this.app.config.currentLocale, this.app.config._show24Hours, tz));\n        }\n        this.sunriseLabel.text = sunriseText;\n        this.sunsetLabel.text = sunsetText;\n    }\n    SetAPIUniqueField(extra_field) {\n        this.apiUniqueLabel.text = "";\n        this.apiUniqueCaptionLabel.text = "";\n        if (!!extra_field) {\n            this.apiUniqueCaptionLabel.text = _(extra_field.name) + LocalizedColon(this.app.config.currentLocale);\n            let value;\n            switch (extra_field.type) {\n                case "percent":\n                    value = PrecentToLocale(extra_field.value, this.app.config.currentLocale);\n                    break;\n                case "temperature":\n                    value = TempToUserConfig(extra_field.value, this.app.config);\n                    break;\n                default:\n                    value = _(extra_field.value);\n                    break;\n            }\n            this.apiUniqueLabel.text = value;\n        }\n    }\n    SetWeatherIcon(iconNames, customIconName) {\n        if (this.app.config._useCustomMenuIcons) {\n            this.weatherIcon.icon_name = customIconName;\n            this.UpdateIconType(uiCurrentWeather_IconType.SYMBOLIC);\n        }\n        else {\n            let icon = WeatherIconSafely(iconNames, this.app.config.IconType);\n            this.weatherIcon.icon_name = icon;\n            this.UpdateIconType(this.app.config.IconType);\n        }\n    }\n    SetConditionText(condition) {\n        this.weatherSummary.text = condition;\n    }\n    SetTemperature(temperature) {\n        let temp = TempToUserConfig(temperature, this.app.config);\n        if (temp == null)\n            return;\n        this.temperatureLabel.text = temp;\n    }\n    SetHumidity(humidity) {\n        if (humidity != null) {\n            this.humidityLabel.text = PrecentToLocale(humidity, this.app.config.currentLocale);\n        }\n    }\n    async SetWind(windSpeed, windDegree) {\n        let wind_direction = CompassDirection(windDegree);\n        this.windDirectionIcon.icon_name = wind_direction;\n        if (this.app.config._displayWindAsText) {\n            let dirText = CompassDirectionText(windDegree);\n            this.windLabel.text = `${(dirText != null ? _(dirText) + " " : "")}${MPStoUserUnits(windSpeed, this.app.config.WindSpeedUnit)}`;\n        }\n        else {\n            this.windLabel.text = MPStoUserUnits(windSpeed, this.app.config.WindSpeedUnit);\n        }\n        if (this.app.config.WindSpeedUnit != "Beaufort")\n            this.windLabel.text += " " + _(this.app.config.WindSpeedUnit);\n    }\n    SetPressure(pressure) {\n        if (pressure != null) {\n            this.pressureLabel.text = PressToUserUnits(pressure, this.app.config._pressureUnit) + \' \' + _(this.app.config._pressureUnit);\n        }\n    }\n    SetLocation(locationString, url) {\n        this.location.label = locationString;\n        this.locationButton.url = url;\n        if (!url)\n            this.locationButton.disable();\n    }\n    NextLocationClicked() {\n        let loc = this.app.config.SwitchToNextLocation();\n        this.app.RefreshAndRebuild(loc);\n    }\n    PreviousLocationClicked() {\n        let loc = this.app.config.SwitchToPreviousLocation();\n        this.app.RefreshAndRebuild(loc);\n    }\n    onLocationStorageChanged(sender, itemCount) {\n        logger_Log.Instance.Debug("On location storage callback called, number of locations now " + itemCount.toString());\n        if (this.app.config.LocStore.ShouldShowLocationSelectors(this.app.config.CurrentLocation))\n            this.ShowLocationSelectors();\n        else\n            this.HideLocationSelectors();\n    }\n    ShowLocationSelectors() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.nextLocationButton) === null || _a === void 0 ? void 0 : _a.actor) === null || _b === void 0 ? void 0 : _b.show();\n        (_d = (_c = this.previousLocationButton) === null || _c === void 0 ? void 0 : _c.actor) === null || _d === void 0 ? void 0 : _d.show();\n    }\n    HideLocationSelectors() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.nextLocationButton) === null || _a === void 0 ? void 0 : _a.actor) === null || _b === void 0 ? void 0 : _b.hide();\n        (_d = (_c = this.previousLocationButton) === null || _c === void 0 ? void 0 : _c.actor) === null || _d === void 0 ? void 0 : _d.hide();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiForecasts.ts\n\n\n\n\n\nconst { Bin: uiForecasts_Bin, BoxLayout: uiForecasts_BoxLayout, Label: uiForecasts_Label, Icon: uiForecasts_Icon, Widget } = imports.gi.St;\nconst { GridLayout } = imports.gi.Clutter;\nconst STYLE_FORECAST_ICON = \'weather-forecast-icon\';\nconst STYLE_FORECAST_DATABOX = \'weather-forecast-databox\';\nconst STYLE_FORECAST_DAY = \'weather-forecast-day\';\nconst STYLE_FORECAST_SUMMARY = \'weather-forecast-summary\';\nconst STYLE_FORECAST_TEMPERATURE = \'weather-forecast-temperature\';\nconst STYLE_FORECAST_BOX = \'weather-forecast-box\';\nconst STYLE_FORECAST_CONTAINER = \'weather-forecast-container\';\nconst STYLE_FORECAST = \'forecast\';\nclass UIForecasts {\n    constructor(app) {\n        this.DayClicked = new Event();\n        this.DayHovered = new Event();\n        this.app = app;\n        this.actor = new uiForecasts_Bin({ style_class: STYLE_FORECAST });\n        this.DayClickedCallback = (s, e) => this.OnDayClicked(s, e);\n        this.DayHoveredCallback = (s, e) => this.OnDayHovered(s, e);\n    }\n    UpdateIconType(iconType) {\n        var _a;\n        if (!this.forecasts)\n            return;\n        for (let i = 0; i < this.forecasts.length; i++) {\n            if (!((_a = this.forecasts[i]) === null || _a === void 0 ? void 0 : _a.Icon))\n                continue;\n            this.forecasts[i].Icon.icon_type = iconType;\n        }\n    }\n    Display(weather, config) {\n        try {\n            if (!weather.forecasts)\n                return false;\n            let len = Math.min(this.forecasts.length, weather.forecasts.length);\n            for (let i = 0; i < len; i++) {\n                let forecastData = weather.forecasts[i];\n                let forecastUi = this.forecasts[i];\n                let comment = (config._shortConditions) ? forecastData.condition.main : forecastData.condition.description;\n                let dayName = GetDayName(forecastData.date, config.currentLocale, config._showForecastDates, weather.location.timeZone);\n                forecastUi.Day.actor.label = dayName;\n                forecastUi.Day.Hovered.Unsubscribe(this.DayHoveredCallback);\n                forecastUi.Day.Clicked.Unsubscribe(this.DayClickedCallback);\n                let hasHourlyWeather = false;\n                for (let index = 0; index < this.app.GetMaxHourlyForecasts(); index++) {\n                    const element = weather.hourlyForecasts[index];\n                    if (!element)\n                        break;\n                    if (OnSameDay(element.date, forecastData.date, config)) {\n                        hasHourlyWeather = true;\n                        break;\n                    }\n                }\n                forecastUi.Day.ID = forecastData.date;\n                if (hasHourlyWeather) {\n                    forecastUi.Day.enable();\n                    forecastUi.Day.Hovered.Subscribe(this.DayHoveredCallback);\n                    forecastUi.Day.Clicked.Subscribe(this.DayClickedCallback);\n                }\n                else {\n                    forecastUi.Day.disable();\n                }\n                forecastUi.Temperature.text = TempRangeToUserConfig(forecastData.temp_min, forecastData.temp_max, config);\n                forecastUi.Summary.text = comment;\n                forecastUi.Icon.icon_name = (config._useCustomMenuIcons) ? forecastData.condition.customIcon : WeatherIconSafely(forecastData.condition.icons, config.IconType);\n            }\n            return true;\n        }\n        catch (e) {\n            this.app.ShowError({\n                type: "hard",\n                detail: "unknown",\n                message: "Forecast parsing failed: " + e.toString(),\n                userError: false\n            });\n            logger_Log.Instance.Error("DisplayForecastError " + e);\n            return false;\n        }\n    }\n    ;\n    Rebuild(config, textColorStyle) {\n        this.Destroy();\n        this.forecasts = [];\n        this.grid = new GridLayout({\n            orientation: config._verticalOrientation\n        });\n        this.grid.set_column_homogeneous(true);\n        let table = new Widget({\n            layout_manager: this.grid,\n            style_class: STYLE_FORECAST_CONTAINER\n        });\n        this.actor.set_child(table);\n        let maxDays = this.app.GetMaxForecastDays();\n        let maxRow = config._forecastRows;\n        let maxCol = config._forecastColumns;\n        if (config._verticalOrientation) {\n            [maxRow, maxCol] = [maxCol, maxRow];\n        }\n        let curRow = 0;\n        let curCol = 0;\n        for (let i = 0; i < maxDays; i++) {\n            let forecastWeather = {};\n            if (curCol >= maxCol) {\n                curRow++;\n                curCol = 0;\n            }\n            if (curRow >= maxRow)\n                break;\n            forecastWeather.Icon = new uiForecasts_Icon({\n                icon_type: config.IconType,\n                icon_size: 48,\n                icon_name: APPLET_ICON,\n                style_class: STYLE_FORECAST_ICON\n            });\n            forecastWeather.Day = new WeatherButton({\n                style_class: STYLE_FORECAST_DAY,\n                reactive: true,\n                style: textColorStyle,\n                label: ""\n            }, true);\n            forecastWeather.Day.disable();\n            forecastWeather.Summary = new uiForecasts_Label({\n                style_class: STYLE_FORECAST_SUMMARY,\n                reactive: true\n            });\n            forecastWeather.Temperature = new uiForecasts_Label({\n                style_class: STYLE_FORECAST_TEMPERATURE\n            });\n            let by = new uiForecasts_BoxLayout({\n                vertical: true,\n                style_class: STYLE_FORECAST_DATABOX\n            });\n            by.add(forecastWeather.Day.actor, { x_align: imports.gi.St.Align.START, expand: false, x_fill: false });\n            by.add_actor(forecastWeather.Summary);\n            by.add_actor(forecastWeather.Temperature);\n            let bb = new uiForecasts_BoxLayout({\n                style_class: STYLE_FORECAST_BOX\n            });\n            bb.add_actor(forecastWeather.Icon);\n            bb.add_actor(by);\n            this.forecasts[i] = forecastWeather;\n            if (!config._verticalOrientation) {\n                this.grid.attach(bb, curCol, curRow, 1, 1);\n            }\n            else {\n                this.grid.attach(bb, curRow, curCol, 1, 1);\n            }\n            curCol++;\n        }\n    }\n    Destroy() {\n        if (this.actor.get_child() != null)\n            this.actor.get_child().destroy();\n    }\n    OnDayHovered(sender, event) {\n        logger_Log.Instance.Debug("Day Hovered: " + sender.ID.toDateString());\n        this.DayHovered.Invoke(sender, sender.ID);\n    }\n    OnDayClicked(sender, event) {\n        logger_Log.Instance.Debug("Day Clicked: " + sender.ID.toDateString());\n        this.DayClicked.Invoke(sender, sender.ID);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiHourlyForecasts.ts\n\n\n\nconst { PolicyType } = imports.gi.Gtk;\nconst { addTween } = imports.ui.tweener;\nconst { BoxLayout: uiHourlyForecasts_BoxLayout, Side, Label: uiHourlyForecasts_Label, ScrollView, Icon: uiHourlyForecasts_Icon, Align: uiHourlyForecasts_Align } = imports.gi.St;\nclass UIHourlyForecasts {\n    constructor(app, menu) {\n        this.hourlyToggled = false;\n        this.app = app;\n        this.actor = new ScrollView({\n            hscrollbar_policy: PolicyType.AUTOMATIC,\n            vscrollbar_policy: PolicyType.NEVER,\n            x_fill: true,\n            y_fill: true,\n            y_align: uiHourlyForecasts_Align.MIDDLE,\n            x_align: uiHourlyForecasts_Align.MIDDLE\n        });\n        this.actor.overlay_scrollbars = true;\n        let vScroll = this.actor.get_vscroll_bar();\n        vScroll.connect("scroll-start", () => { menu.passEvents = true; });\n        vScroll.connect("scroll-stop", () => { menu.passEvents = false; });\n        let hScroll = this.actor.get_hscroll_bar();\n        hScroll.connect("scroll-start", () => { menu.passEvents = true; });\n        hScroll.connect("scroll-stop", () => { menu.passEvents = false; });\n        this.actor.hide();\n        this.actor.set_clip_to_allocation(true);\n        this.container = new uiHourlyForecasts_BoxLayout({ style_class: "hourly-box" });\n        this.actor.add_actor(this.container);\n    }\n    get Toggled() {\n        return this.hourlyToggled;\n    }\n    ScrollTo(date) {\n        if (this.hourlyForecastDates == null)\n            return;\n        let itemWidth = this.GetHourlyBoxItemWidth();\n        let midnightIndex = null;\n        for (let index = 0; index < this.hourlyForecastDates.length; index++) {\n            if (OnSameDay(this.hourlyForecastDates[index], date, this.app.config))\n                midnightIndex = index;\n            const element = AddHours(this.hourlyForecastDates[index], -6);\n            if (OnSameDay(element, date, this.app.config)) {\n                this.actor.get_hscroll_bar().get_adjustment().set_value(index * itemWidth);\n                break;\n            }\n        }\n        if (midnightIndex != null)\n            this.actor.get_hscroll_bar().get_adjustment().set_value(midnightIndex * itemWidth);\n    }\n    UpdateIconType(iconType) {\n        var _a;\n        if (!this.hourlyForecasts)\n            return;\n        for (let i = 0; i < this.hourlyForecasts.length; i++) {\n            if (!((_a = this.hourlyForecasts[i]) === null || _a === void 0 ? void 0 : _a.Icon))\n                continue;\n            this.hourlyForecasts[i].Icon.icon_type = iconType;\n        }\n    }\n    Display(forecasts, config, tz) {\n        this.hourlyForecastDates = [];\n        let max = Math.min(forecasts.length, this.hourlyForecasts.length);\n        for (let index = 0; index < max; index++) {\n            const hour = forecasts[index];\n            const ui = this.hourlyForecasts[index];\n            this.hourlyForecastDates.push(hour.date);\n            ui.Hour.text = GetHoursMinutes(hour.date, config.currentLocale, config._show24Hours, tz, config._shortHourlyTime);\n            ui.Temperature.text = TempToUserConfig(hour.temp, config);\n            ui.Icon.icon_name = (config._useCustomMenuIcons) ? hour.condition.customIcon : WeatherIconSafely(hour.condition.icons, config.IconType);\n            ui.Summary.text = hour.condition.main;\n            ui.Precipitation.text = this.GeneratePrecipitationText(hour.precipitation, config);\n        }\n        this.AdjustHourlyBoxItemWidth();\n        return !(max <= 0);\n    }\n    async Show() {\n        this.actor.show();\n        this.actor.hide();\n        this.AdjustHourlyBoxItemWidth();\n        let [minWidth, naturalWidth] = this.actor.get_preferred_width(-1);\n        let [minHeight, naturalHeight] = this.actor.get_preferred_height(minWidth);\n        logger_Log.Instance.Debug("hourlyScrollView requested height and is set to: " + naturalHeight);\n        this.actor.set_width(minWidth);\n        this.actor.show();\n        this.actor.style = "min-height: " + naturalHeight.toString() + "px;";\n        this.hourlyToggled = true;\n        return new Promise((resolve, reject) => {\n            if (global.settings.get_boolean("desktop-effects-on-menus")) {\n                this.actor.height = 0;\n                addTween(this.actor, {\n                    height: naturalHeight,\n                    time: 0.25,\n                    onUpdate: () => { },\n                    onComplete: () => {\n                        this.actor.set_height(naturalHeight);\n                        resolve();\n                    }\n                });\n            }\n            else {\n                this.actor.set_height(naturalHeight);\n                resolve();\n            }\n        });\n    }\n    async Hide() {\n        let hscroll = this.actor.get_hscroll_bar();\n        this.hourlyToggled = false;\n        return new Promise((resolve, reject) => {\n            if (global.settings.get_boolean("desktop-effects-on-menus")) {\n                addTween(this.actor, {\n                    height: 0,\n                    time: 0.25,\n                    onUpdate: () => { },\n                    onComplete: () => {\n                        this.actor.set_height(-1);\n                        this.actor.style = null;\n                        this.actor.hide();\n                        hscroll.get_adjustment().set_value(0);\n                        resolve();\n                    }\n                });\n            }\n            else {\n                this.actor.style = null;\n                this.actor.set_height(-1);\n                this.actor.hide();\n                resolve();\n            }\n        });\n    }\n    AdjustHourlyBoxItemWidth() {\n        let requiredWidth = this.GetHourlyBoxItemWidth();\n        for (let index = 0; index < this.hourlyContainers.length; index++) {\n            const element = this.hourlyContainers[index];\n            element.set_width(requiredWidth);\n        }\n    }\n    GetHourlyBoxItemWidth() {\n        let requiredWidth = 0;\n        for (let index = 0; index < this.hourlyContainers.length; index++) {\n            const ui = this.hourlyForecasts[index];\n            let hourWidth = ui.Hour.get_preferred_width(-1)[1];\n            let iconWidth = ui.Icon.get_preferred_width(-1)[1];\n            let summaryWidth = ui.Summary.get_preferred_width(-1)[1];\n            let temperatureWidth = ui.Temperature.get_preferred_width(-1)[1];\n            let precipitationWidth = ui.Precipitation.get_preferred_width(-1)[1];\n            if (precipitationWidth > iconWidth || summaryWidth > iconWidth) {\n                if (precipitationWidth > summaryWidth)\n                    precipitationWidth += 10;\n                else\n                    summaryWidth += 10;\n            }\n            if (requiredWidth < hourWidth)\n                requiredWidth = hourWidth;\n            if (requiredWidth < iconWidth)\n                requiredWidth = iconWidth;\n            if (requiredWidth < summaryWidth)\n                requiredWidth = summaryWidth;\n            if (requiredWidth < temperatureWidth)\n                requiredWidth = temperatureWidth;\n            if (requiredWidth < precipitationWidth)\n                requiredWidth = precipitationWidth;\n        }\n        return requiredWidth;\n    }\n    Destroy() {\n        this.container.destroy_all_children();\n    }\n    Rebuild(config, textColorStyle) {\n        this.Destroy();\n        let hours = this.app.GetMaxHourlyForecasts();\n        this.hourlyForecasts = [];\n        this.hourlyContainers = [];\n        for (let index = 0; index < hours; index++) {\n            let box = new uiHourlyForecasts_BoxLayout({ vertical: true, style_class: "hourly-box-item" });\n            this.hourlyContainers.push(box);\n            this.hourlyForecasts.push({\n                Hour: new uiHourlyForecasts_Label({ text: "Hour", style_class: "hourly-time", style: textColorStyle }),\n                Icon: new uiHourlyForecasts_Icon({\n                    icon_type: config.IconType,\n                    icon_size: 24,\n                    icon_name: APPLET_ICON,\n                    style_class: "hourly-icon"\n                }),\n                Precipitation: new uiHourlyForecasts_Label({ text: " ", style_class: "hourly-data" }),\n                Summary: new uiHourlyForecasts_Label({ text: _(ELLIPSIS), style_class: "hourly-data" }),\n                Temperature: new uiHourlyForecasts_Label({ text: _(ELLIPSIS), style_class: "hourly-data" })\n            });\n            this.hourlyForecasts[index].Summary.clutter_text.set_line_wrap(true);\n            box.add_child(this.hourlyForecasts[index].Hour);\n            box.add_child(this.hourlyForecasts[index].Icon);\n            box.add_child(this.hourlyForecasts[index].Summary);\n            box.add_child(this.hourlyForecasts[index].Temperature);\n            box.add_child(this.hourlyForecasts[index].Precipitation);\n            this.container.add(box, {\n                x_fill: true,\n                x_align: uiHourlyForecasts_Align.MIDDLE,\n                y_align: uiHourlyForecasts_Align.MIDDLE,\n                y_fill: true,\n                expand: true\n            });\n        }\n    }\n    GeneratePrecipitationText(precip, config) {\n        if (!precip)\n            return "";\n        let precipitationText = "";\n        if (!!precip.volume && precip.volume > 0) {\n            precipitationText = MillimeterToUserUnits(precip.volume, config.DistanceUnit) + " " + ((config.DistanceUnit == "metric") ? _("mm") : _("in"));\n        }\n        if (!!precip.chance) {\n            precipitationText = (NotEmpty(precipitationText)) ? (precipitationText + ", ") : "";\n            precipitationText += (Math.round(precip.chance).toString() + "%");\n        }\n        return precipitationText;\n    }\n    GetScrollViewHeight() {\n        let boxItemHeight = 0;\n        for (let index = 0; index < this.hourlyContainers.length; index++) {\n            const ui = this.hourlyForecasts[index];\n            logger_Log.Instance.Debug("Height requests of Hourly box Items: " + index);\n            let hourHeight = ui.Hour.get_preferred_height(-1)[1];\n            let iconHeight = ui.Icon.get_preferred_height(-1)[1];\n            let summaryHeight = ui.Summary.get_preferred_height(-1)[1];\n            let temperatureHeight = ui.Temperature.get_preferred_height(-1)[1];\n            let precipitationHeight = ui.Precipitation.get_preferred_height(-1)[1];\n            let itemHeight = hourHeight + iconHeight + summaryHeight + temperatureHeight + precipitationHeight;\n            if (boxItemHeight < itemHeight)\n                boxItemHeight = itemHeight;\n        }\n        logger_Log.Instance.Debug("Final Hourly box item height is: " + boxItemHeight);\n        let scrollBarHeight = this.actor.get_hscroll_bar().get_preferred_width(-1)[1];\n        logger_Log.Instance.Debug("Scrollbar height is " + scrollBarHeight);\n        let theme = this.container.get_theme_node();\n        let styling = theme.get_margin(Side.TOP) + theme.get_margin(Side.BOTTOM) + theme.get_padding(Side.TOP) + theme.get_padding(Side.BOTTOM);\n        logger_Log.Instance.Debug("ScollbarBox vertical padding and margin is: " + styling);\n        return (boxItemHeight + scrollBarHeight + styling);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiBar.ts\n\n\n\n\n\nconst { BoxLayout: uiBar_BoxLayout, IconType: uiBar_IconType, Label: uiBar_Label, Icon: uiBar_Icon, Align: uiBar_Align, } = imports.gi.St;\nconst STYLE_BAR = \'bottombar\';\nclass UIBar {\n    constructor(app) {\n        this.ToggleClicked = new Event();\n        this.providerCreditButton = null;\n        this.hourlyButton = null;\n        this._timestamp = null;\n        this.app = app;\n        this.actor = new uiBar_BoxLayout({ vertical: false, style_class: STYLE_BAR });\n    }\n    get Actor() {\n        return this.actor;\n    }\n    SwitchButtonToShow() {\n        var _a;\n        if (!!((_a = this.hourlyButton) === null || _a === void 0 ? void 0 : _a.actor.child))\n            this.hourlyButton.actor.child.icon_name = "custom-down-arrow-symbolic";\n    }\n    SwitchButtonToHide() {\n        var _a;\n        if (!!((_a = this.hourlyButton) === null || _a === void 0 ? void 0 : _a.actor.child))\n            this.hourlyButton.actor.child.icon_name = "custom-up-arrow-symbolic";\n    }\n    DisplayErrorMessage(msg) {\n        this._timestamp.text = msg;\n    }\n    Display(weather, provider, config, shouldShowToggle) {\n        this.providerCreditButton.actor.label = _("Powered by") + " " + provider.prettyName;\n        this.providerCreditButton.url = provider.website;\n        let lastUpdatedTime = AwareDateString(weather.date, config.currentLocale, config._show24Hours);\n        this._timestamp.text = _("As of {lastUpdatedTime}", { "lastUpdatedTime": lastUpdatedTime });\n        if (weather.location.distanceFrom != null) {\n            let stringFormat = {\n                distance: MetreToUserUnits(weather.location.distanceFrom, config.DistanceUnit).toString(),\n                distanceUnit: this.BigDistanceUnitFor(config.DistanceUnit)\n            };\n            this._timestamp.text += `, ${_("{distance}{distanceUnit} from you", stringFormat)}`;\n        }\n        if (!shouldShowToggle)\n            this.HideHourlyToggle();\n        return true;\n    }\n    Destroy() {\n        this.actor.destroy_all_children();\n    }\n    Rebuild(config) {\n        this.Destroy();\n        this._timestamp = new uiBar_Label({ text: "Placeholder" });\n        this.actor.add(this._timestamp, {\n            x_fill: false,\n            x_align: uiBar_Align.START,\n            y_align: uiBar_Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        });\n        this.hourlyButton = new WeatherButton({\n            reactive: true,\n            can_focus: true,\n            child: new uiBar_Icon({\n                icon_type: uiBar_IconType.SYMBOLIC,\n                icon_size: config.CurrentFontSize + 3,\n                icon_name: "custom-down-arrow-symbolic",\n                style: "margin: 2px 5px;"\n            }),\n        });\n        this.hourlyButton.actor.connect(SIGNAL_CLICKED, () => this.ToggleClicked.Invoke(this, true));\n        this.actor.add(this.hourlyButton.actor, {\n            x_fill: false,\n            x_align: uiBar_Align.MIDDLE,\n            y_align: uiBar_Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        });\n        if (this.app.GetMaxHourlyForecasts() <= 0) {\n            this.HideHourlyToggle();\n        }\n        this.providerCreditButton = new WeatherButton({ label: _(ELLIPSIS), reactive: true });\n        this.providerCreditButton.actor.connect(SIGNAL_CLICKED, () => OpenUrl(this.providerCreditButton));\n        this.actor.add(this.providerCreditButton.actor, {\n            x_fill: false,\n            x_align: uiBar_Align.END,\n            y_align: uiBar_Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        });\n    }\n    BigDistanceUnitFor(unit) {\n        if (unit == "imperial")\n            return _("mi");\n        return _("km");\n    }\n    HideHourlyToggle() {\n        if (this.hourlyButton != null)\n            this.hourlyButton.actor.child = null;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiSeparator.ts\nconst { PopupSeparatorMenuItem } = imports.ui.popupMenu;\nclass UISeparator {\n    constructor() {\n        this.actor = new PopupSeparatorMenuItem();\n        this.actor.actor.remove_style_class_name("popup-menu-item");\n    }\n    get Actor() {\n        return this.actor.actor;\n    }\n    Show() {\n        this.actor.actor.show();\n    }\n    Hide() {\n        this.actor.actor.hide();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui.ts\n\n\n\n\n\n\n\nconst { PopupMenuManager } = imports.ui.popupMenu;\nconst { BoxLayout: ui_BoxLayout, IconType: ui_IconType, Label: ui_Label } = imports.gi.St;\nconst ui_Lang = imports.lang;\nconst { AppletPopupMenu } = imports.ui.applet;\nconst { themeManager } = imports.ui.main;\nconst { SignalManager: ui_SignalManager } = imports.misc.signalManager;\nconst STYLE_WEATHER_MENU = \'weather-menu\';\nclass UI {\n    constructor(app, orientation) {\n        this.lightTheme = false;\n        this.lastDateToggled = null;\n        this.App = app;\n        this.menuManager = new PopupMenuManager(this.App);\n        this.menu = new AppletPopupMenu(this.App, orientation);\n        this.menu.box.add_style_class_name(STYLE_WEATHER_MENU);\n        logger_Log.Instance.Debug("Popup Menu applied classes are: " + this.menu.box.get_style_class_name());\n        this.menuManager.addMenu(this.menu);\n        this.menuManager._signals.connect(this.menu, "open-state-changed", this.PopupMenuToggled, this);\n        this.signals = new ui_SignalManager();\n        this.lightTheme = this.IsLightTheme();\n        this.BuildPopupMenu();\n        this.signals.connect(themeManager, \'theme-set\', this.OnThemeChanged, this);\n    }\n    Toggle() {\n        this.menu.toggle();\n    }\n    async ToggleHourlyWeather() {\n        if (this.HourlyWeather.Toggled) {\n            await this.HideHourlyWeather();\n        }\n        else {\n            await this.ShowHourlyWeather();\n        }\n    }\n    Rebuild(config) {\n        this.ShowLoadingUi();\n        let textColorStyle = this.GetTextColorStyle();\n        this.CurrentWeather.Rebuild(config, textColorStyle);\n        this.HourlyWeather.Rebuild(config, textColorStyle);\n        this.FutureWeather.Rebuild(config, textColorStyle);\n        this.Bar.Rebuild(config);\n    }\n    UpdateIconType(iconType) {\n        if (iconType == ui_IconType.FULLCOLOR && this.App.config._useCustomMenuIcons)\n            return;\n        this.CurrentWeather.UpdateIconType(iconType);\n        this.FutureWeather.UpdateIconType(iconType);\n        this.HourlyWeather.UpdateIconType(iconType);\n    }\n    DisplayErrorMessage(msg, errorType) {\n        this.Bar.DisplayErrorMessage(msg);\n    }\n    Display(weather, config, provider) {\n        this.CurrentWeather.Display(weather, config);\n        this.FutureWeather.Display(weather, config);\n        let shouldShowToggle = this.HourlyWeather.Display(weather.hourlyForecasts, config, weather.location.timeZone);\n        this.Bar.Display(weather, provider, config, shouldShowToggle);\n        return true;\n    }\n    OnThemeChanged() {\n        this.HideHourlyWeather();\n        let newThemeIsLight = this.IsLightTheme();\n        if (newThemeIsLight != this.lightTheme) {\n            this.lightTheme = newThemeIsLight;\n        }\n        this.App.RefreshAndRebuild();\n    }\n    async PopupMenuToggled(caller, data) {\n        if (data == false) {\n            await delay(100);\n            this.HideHourlyWeather();\n        }\n    }\n    IsLightTheme() {\n        let color = this.menu.actor.get_theme_node().get_color("color");\n        let luminance = (2126 * color.red + 7152 * color.green + 722 * color.blue) / 10000 / 255;\n        luminance = Math.abs(1 - luminance);\n        logger_Log.Instance.Debug("Theme is Light: " + (luminance > 0.5));\n        return (luminance > 0.5);\n    }\n    ForegroundColor() {\n        let hex = this.menu.actor.get_theme_node().get_foreground_color().to_string().substring(0, 7);\n        return hex;\n    }\n    GetTextColorStyle() {\n        let hexColor = null;\n        if (this.lightTheme) {\n            hexColor = ShadeHexColor(this.ForegroundColor(), -0.40);\n        }\n        return "color: " + hexColor;\n    }\n    BuildPopupMenu() {\n        this.CurrentWeather = new CurrentWeather(this.App);\n        this.FutureWeather = new UIForecasts(this.App);\n        this.HourlyWeather = new UIHourlyForecasts(this.App, this.menu);\n        this.FutureWeather.DayClicked.Subscribe((s, e) => this.OnDayClicked(s, e));\n        this.Bar = new UIBar(this.App);\n        this.Bar.ToggleClicked.Subscribe(ui_Lang.bind(this, this.ToggleHourlyWeather));\n        this.ForecastSeparator = new UISeparator();\n        this.HourlySeparator = new UISeparator();\n        this.BarSeparator = new UISeparator();\n        this.HourlySeparator.Hide();\n        let mainBox = new ui_BoxLayout({ vertical: true });\n        mainBox.add_actor(this.CurrentWeather.actor);\n        mainBox.add_actor(this.HourlySeparator.Actor);\n        mainBox.add_actor(this.HourlyWeather.actor);\n        mainBox.add_actor(this.ForecastSeparator.Actor);\n        mainBox.add_actor(this.FutureWeather.actor);\n        mainBox.add_actor(this.BarSeparator.Actor);\n        mainBox.add_actor(this.Bar.Actor);\n        this.menu.addActor(mainBox);\n    }\n    ShowLoadingUi() {\n        this.CurrentWeather.Destroy();\n        this.FutureWeather.Destroy();\n        this.Bar.Destroy();\n        this.CurrentWeather.actor.set_child(new ui_Label({\n            text: _(\'Loading current weather ...\')\n        }));\n        this.FutureWeather.actor.set_child(new ui_Label({\n            text: _(\'Loading future weather ...\')\n        }));\n    }\n    async OnDayClicked(sender, date) {\n        if (!this.HourlyWeather.Toggled)\n            await this.ShowHourlyWeather();\n        else if (this.lastDateToggled == date) {\n            await this.HideHourlyWeather();\n            return;\n        }\n        this.HourlyWeather.ScrollTo(date);\n        this.lastDateToggled = date;\n    }\n    async ShowHourlyWeather() {\n        this.HourlySeparator.Show();\n        this.Bar.SwitchButtonToHide();\n        await this.HourlyWeather.Show();\n    }\n    async HideHourlyWeather() {\n        this.lastDateToggled = null;\n        this.HourlySeparator.Hide();\n        this.Bar.SwitchButtonToShow();\n        await this.HourlyWeather.Hide();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/darkSky.ts\n\n\nconst darkSky_Lang = imports.lang;\nclass DarkSky {\n    constructor(_app) {\n        this.prettyName = _("DarkSky");\n        this.name = "DarkSky";\n        this.maxForecastSupport = 8;\n        this.website = "https://darksky.net/poweredby/";\n        this.maxHourlyForecastSupport = 168;\n        this.needsApiKey = true;\n        this.descriptionLineLength = 25;\n        this.supportedLanguages = [\n            \'ar\', \'az\', \'be\', \'bg\', \'bs\', \'ca\', \'cs\', \'da\', \'de\', \'el\', \'en\', \'es\',\n            \'et\', \'fi\', \'fr\', \'he\', \'hr\', \'hu\', \'id\', \'is\', \'it\', \'ja\', \'ka\', \'ko\',\n            \'kw\', \'lv\', \'nb\', \'nl\', \'no\', \'pl\', \'pt\', \'ro\', \'ru\', \'sk\', \'sl\', \'sr\',\n            \'sv\', \'tet\', \'tr\', \'uk\', \'x-pig-latin\', \'zh\', \'zh-tw\'\n        ];\n        this.query = "https://api.darksky.net/forecast/";\n        this.DarkSkyFilterWords = [_("and"), _("until"), _("in"), _("Possible")];\n        this.unit = null;\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        let now = new Date(Date.now());\n        if (now.getUTCFullYear() >= 2022) {\n            this.app.ShowError({\n                type: "hard",\n                detail: "no api response",\n                message: _("This API has ceased to function, please use another one.")\n            });\n            return null;\n        }\n        let query = this.ConstructQuery(loc);\n        if (query == "" && query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, darkSky_Lang.bind(this, this.HandleError));\n        if (!json)\n            return null;\n        if (!json.code) {\n            return this.ParseWeather(json);\n        }\n        else {\n            this.HandleResponseErrors(json);\n            return null;\n        }\n    }\n    ;\n    ParseWeather(json) {\n        try {\n            let sunrise = new Date(json.daily.data[0].sunriseTime * 1000);\n            let sunset = new Date(json.daily.data[0].sunsetTime * 1000);\n            let result = {\n                date: new Date(json.currently.time * 1000),\n                coord: {\n                    lat: json.latitude,\n                    lon: json.longitude\n                },\n                location: {\n                    url: "https://darksky.net/forecast/" + json.latitude + "," + json.longitude,\n                    timeZone: json.timezone,\n                },\n                sunrise: sunrise,\n                sunset: sunset,\n                wind: {\n                    speed: this.ToMPS(json.currently.windSpeed),\n                    degree: json.currently.windBearing\n                },\n                temperature: this.ToKelvin(json.currently.temperature),\n                pressure: json.currently.pressure,\n                humidity: json.currently.humidity * 100,\n                condition: {\n                    main: this.GetShortCurrentSummary(json.currently.summary),\n                    description: json.currently.summary,\n                    icons: this.ResolveIcon(json.currently.icon, { sunrise: sunrise, sunset: sunset }),\n                    customIcon: this.ResolveCustomIcon(json.currently.icon)\n                },\n                extra_field: {\n                    name: _("Feels Like"),\n                    value: this.ToKelvin(json.currently.apparentTemperature),\n                    type: "temperature"\n                },\n                forecasts: [],\n                hourlyForecasts: []\n            };\n            for (let i = 0; i < json.daily.data.length; i++) {\n                let day = json.daily.data[i];\n                let forecast = {\n                    date: new Date(day.time * 1000),\n                    temp_min: this.ToKelvin(day.temperatureLow),\n                    temp_max: this.ToKelvin(day.temperatureHigh),\n                    condition: {\n                        main: this.GetShortSummary(day.summary),\n                        description: this.ProcessSummary(day.summary),\n                        icons: this.ResolveIcon(day.icon),\n                        customIcon: this.ResolveCustomIcon(day.icon)\n                    },\n                };\n                forecast.date.setHours(forecast.date.getHours() + 12);\n                result.forecasts.push(forecast);\n            }\n            for (let i = 0; i < json.hourly.data.length; i++) {\n                let hour = json.hourly.data[i];\n                let forecast = {\n                    date: new Date(hour.time * 1000),\n                    temp: this.ToKelvin(hour.temperature),\n                    condition: {\n                        main: this.GetShortSummary(hour.summary),\n                        description: this.ProcessSummary(hour.summary),\n                        icons: this.ResolveIcon(hour.icon, { sunrise: sunrise, sunset: sunset }, new Date(hour.time * 1000)),\n                        customIcon: this.ResolveCustomIcon(hour.icon)\n                    },\n                    precipitation: {\n                        type: hour.precipType,\n                        volume: hour.precipProbability,\n                        chance: hour.precipProbability * 100\n                    }\n                };\n                result.hourlyForecasts.push(forecast);\n            }\n            return result;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("DarkSky payload parsing error: " + e);\n            this.app.ShowError({ type: "soft", detail: "unusual payload", service: "darksky", message: _("Failed to Process Weather Info") });\n            return null;\n        }\n    }\n    ;\n    ConvertToAPILocale(systemLocale) {\n        if (systemLocale == "zh-tw") {\n            return systemLocale;\n        }\n        let lang = systemLocale.split("-")[0];\n        return lang;\n    }\n    ConstructQuery(loc) {\n        this.SetQueryUnit();\n        let query = this.query + this.app.config.ApiKey + "/" + loc.lat.toString() + "," + loc.lon.toString() + "?exclude=minutely,flags" + "&units=" + this.unit;\n        let locale = this.ConvertToAPILocale(this.app.config.currentLocale);\n        if (IsLangSupported(locale, this.supportedLanguages) && this.app.config._translateCondition) {\n            query = query + "&lang=" + locale;\n        }\n        return query;\n    }\n    HandleError(message) {\n        if (message.code == 403) {\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "bad key",\n                service: "darksky",\n                message: _("Please Make sure you\\nentered the API key correctly and your account is not locked")\n            });\n            return false;\n        }\n        else if (message.code == 401) {\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "no key",\n                service: "darksky",\n                message: _("Please Make sure you\\nentered the API key that you have from DarkSky")\n            });\n            return false;\n        }\n        return true;\n    }\n    HandleResponseErrors(json) {\n        let code = json.code;\n        let error = json.error;\n        let errorMsg = "DarkSky API: ";\n        logger_Log.Instance.Debug("DarksSky API error payload: " + json);\n        switch (code) {\n            case "400":\n                logger_Log.Instance.Error(errorMsg + error);\n                break;\n            default:\n                logger_Log.Instance.Error(errorMsg + error);\n                break;\n        }\n    }\n    ;\n    ProcessSummary(summary) {\n        let processed = summary.split(" ");\n        let result = "";\n        let lineLength = 0;\n        for (let i = 0; i < processed.length; i++) {\n            if (lineLength + processed[i].length > this.descriptionLineLength) {\n                result = result + "\\n";\n                lineLength = 0;\n            }\n            result = result + processed[i] + " ";\n            lineLength = lineLength + processed[i].length + 1;\n        }\n        return result;\n    }\n    ;\n    GetShortSummary(summary) {\n        let processed = summary.split(" ");\n        if (processed.length == 1)\n            return processed[0];\n        let result = [];\n        for (let i = 0; i < processed.length; i++) {\n            if (!/[\\(\\)]/.test(processed[i]) && !this.WordBanned(processed[i])) {\n                result.push(processed[i]) + " ";\n            }\n            if (result.length == 2)\n                break;\n        }\n        return result.join(" ");\n    }\n    ;\n    GetShortCurrentSummary(summary) {\n        let processed = summary.split(" ");\n        let result = "";\n        let maxLoop;\n        (processed.length < 2) ? maxLoop = processed.length : maxLoop = 2;\n        for (let i = 0; i < maxLoop; i++) {\n            if (processed[i] != "and") {\n                result = result + processed[i] + " ";\n            }\n        }\n        return result;\n    }\n    WordBanned(word) {\n        return this.DarkSkyFilterWords.includes(word);\n    }\n    ResolveIcon(icon, sunTimes, date) {\n        switch (icon) {\n            case "rain":\n                return ["weather-rain", "weather-showers-scattered", "weather-freezing-rain"];\n            case "snow":\n                return ["weather-snow"];\n            case "sleet":\n                return ["weather-freezing-rain", "weather-rain", "weather-showers-scattered"];\n            case "fog":\n                return ["weather-fog"];\n            case "wind":\n                return (sunTimes && IsNight(sunTimes, date)) ? ["weather-windy", "weather-breeze", "weather-clouds", "weather-few-clouds-night"] : ["weather-windy", "weather-breeze", "weather-clouds", "weather-few-clouds"];\n            case "cloudy":\n                return (sunTimes && IsNight(sunTimes, date)) ? ["weather-overcast", "weather-clouds", "weather-few-clouds-night"] : ["weather-overcast", "weather-clouds", "weather-few-clouds"];\n            case "partly-cloudy-night":\n                return ["weather-few-clouds-night"];\n            case "partly-cloudy-day":\n                return ["weather-few-clouds"];\n            case "clear-night":\n                return ["weather-clear-night"];\n            case "clear-day":\n                return ["weather-clear"];\n            case "storm":\n                return ["weather-storm"];\n            case "showers":\n                return ["weather-showers", "weather-showers-scattered"];\n            default:\n                return ["weather-severe-alert"];\n        }\n    }\n    ;\n    ResolveCustomIcon(icon) {\n        switch (icon) {\n            case "rain":\n                return "rain-symbolic";\n            case "snow":\n                return "snow-symbolic";\n            case "fog":\n                return "fog-symbolic";\n            case "cloudy":\n                return "cloudy-symbolic";\n            case "partly-cloudy-night":\n                return "night-alt-cloudy-symbolic";\n            case "partly-cloudy-day":\n                return "day-cloudy-symbolic";\n            case "clear-night":\n                return "night-clear-symbolic";\n            case "clear-day":\n                return "day-sunny-symbolic";\n            case "storm":\n                return "thunderstorm-symbolic";\n            case "showers":\n                return "showers-symbolic";\n            case "wind":\n                return "strong-wind-symbolic";\n            default:\n                return "cloud-refresh-symbolic";\n        }\n    }\n    SetQueryUnit() {\n        if (this.app.config.TemperatureUnit == "celsius") {\n            if (this.app.config.WindSpeedUnit == "kph" || this.app.config.WindSpeedUnit == "m/s") {\n                this.unit = \'si\';\n            }\n            else {\n                this.unit = \'uk2\';\n            }\n        }\n        else {\n            this.unit = \'us\';\n        }\n    }\n    ;\n    ToKelvin(temp) {\n        if (this.unit == \'us\') {\n            return FahrenheitToKelvin(temp);\n        }\n        else {\n            return CelsiusToKelvin(temp);\n        }\n    }\n    ;\n    ToMPS(speed) {\n        if (this.unit == \'si\') {\n            return speed;\n        }\n        else {\n            return MPHtoMPS(speed);\n        }\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/openWeatherMap.ts\n\n\nconst openWeatherMap_Lang = imports.lang;\nclass OpenWeatherMap {\n    constructor(_app) {\n        this.prettyName = _("OpenWeatherMap");\n        this.name = "OpenWeatherMap";\n        this.maxForecastSupport = 8;\n        this.website = "https://openweathermap.org/";\n        this.maxHourlyForecastSupport = 48;\n        this.needsApiKey = false;\n        this.supportedLanguages = ["af", "al", "ar", "az", "bg", "ca", "cz", "da", "de", "el", "en", "eu", "fa", "fi",\n            "fr", "gl", "he", "hi", "hr", "hu", "id", "it", "ja", "kr", "la", "lt", "mk", "no", "nl", "pl",\n            "pt", "pt_br", "ro", "ru", "se", "sk", "sl", "sp", "es", "sr", "th", "tr", "ua", "uk", "vi", "zh_cn", "zh_tw", "zu"\n        ];\n        this.base_url = "https://api.openweathermap.org/data/2.5/onecall?";\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        let query = this.ConstructQuery(this.base_url, loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, openWeatherMap_Lang.bind(this, this.HandleError));\n        if (!json)\n            return null;\n        if (this.HadErrors(json))\n            return null;\n        return this.ParseWeather(json, this);\n    }\n    ;\n    ParseWeather(json, self) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        try {\n            let weather = {\n                coord: {\n                    lat: json.lat,\n                    lon: json.lon\n                },\n                location: {\n                    url: "https://openweathermap.org/city/",\n                    timeZone: json.timezone\n                },\n                date: new Date((json.current.dt) * 1000),\n                sunrise: new Date((json.current.sunrise) * 1000),\n                sunset: new Date((json.current.sunset) * 1000),\n                wind: {\n                    speed: json.current.wind_speed,\n                    degree: json.current.wind_deg\n                },\n                temperature: json.current.temp,\n                pressure: json.current.pressure,\n                humidity: json.current.humidity,\n                condition: {\n                    main: (_c = (_b = (_a = json === null || json === void 0 ? void 0 : json.current) === null || _a === void 0 ? void 0 : _a.weather) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.main,\n                    description: (_f = (_e = (_d = json === null || json === void 0 ? void 0 : json.current) === null || _d === void 0 ? void 0 : _d.weather) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.description,\n                    icons: self.ResolveIcon((_j = (_h = (_g = json === null || json === void 0 ? void 0 : json.current) === null || _g === void 0 ? void 0 : _g.weather) === null || _h === void 0 ? void 0 : _h[0]) === null || _j === void 0 ? void 0 : _j.icon),\n                    customIcon: self.ResolveCustomIcon((_m = (_l = (_k = json === null || json === void 0 ? void 0 : json.current) === null || _k === void 0 ? void 0 : _k.weather) === null || _l === void 0 ? void 0 : _l[0]) === null || _m === void 0 ? void 0 : _m.icon)\n                },\n                extra_field: {\n                    name: _("Feels Like"),\n                    value: json.current.feels_like,\n                    type: "temperature"\n                },\n                forecasts: []\n            };\n            if (json.minutely != null) {\n                let immediate = {\n                    start: -1,\n                    end: -1\n                };\n                for (let index = 0; index < json.minutely.length; index++) {\n                    const element = json.minutely[index];\n                    if (element.precipitation > 0 && immediate.start == -1) {\n                        immediate.start = index;\n                        continue;\n                    }\n                    else if (element.precipitation == 0 && immediate.start != -1) {\n                        immediate.end = index;\n                        break;\n                    }\n                }\n                weather.immediatePrecipitation = immediate;\n            }\n            let forecasts = [];\n            for (let i = 0; i < json.daily.length; i++) {\n                let day = json.daily[i];\n                let forecast = {\n                    date: new Date(day.dt * 1000),\n                    temp_min: day.temp.min,\n                    temp_max: day.temp.max,\n                    condition: {\n                        main: day.weather[0].main,\n                        description: day.weather[0].description,\n                        icons: self.ResolveIcon(day.weather[0].icon),\n                        customIcon: self.ResolveCustomIcon(day.weather[0].icon)\n                    },\n                };\n                forecasts.push(forecast);\n            }\n            weather.forecasts = forecasts;\n            let hourly = [];\n            for (let index = 0; index < json.hourly.length; index++) {\n                const hour = json.hourly[index];\n                let forecast = {\n                    date: new Date(hour.dt * 1000),\n                    temp: hour.temp,\n                    condition: {\n                        main: hour.weather[0].main,\n                        description: hour.weather[0].description,\n                        icons: self.ResolveIcon(hour.weather[0].icon),\n                        customIcon: self.ResolveCustomIcon(hour.weather[0].icon)\n                    },\n                };\n                if (hour.pop >= 0.1) {\n                    forecast.precipitation = {\n                        chance: hour.pop * 100,\n                        type: "none",\n                        volume: null\n                    };\n                }\n                if (!!hour.rain && forecast.precipitation != null) {\n                    forecast.precipitation.volume = hour.rain["1h"];\n                    forecast.precipitation.type = "rain";\n                }\n                if (!!hour.snow && forecast.precipitation != null) {\n                    forecast.precipitation.volume = hour.snow["1h"];\n                    forecast.precipitation.type = "snow";\n                }\n                hourly.push(forecast);\n            }\n            weather.hourlyForecasts = hourly;\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("OpenWeatherMap Weather Parsing error: " + e);\n            self.app.ShowError({\n                type: "soft",\n                service: "openweathermap",\n                detail: "unusual payload",\n                message: _("Failed to Process Current Weather Info")\n            });\n            return null;\n        }\n    }\n    ;\n    ConstructQuery(baseUrl, loc) {\n        let query = baseUrl;\n        query = query + "lat=" + loc.lat + "&lon=" + loc.lon + "&appid=";\n        query += "1c73f8259a86c6fd43c7163b543c8640";\n        let locale = this.ConvertToAPILocale(this.app.config.currentLocale);\n        if (this.app.config._translateCondition && IsLangSupported(locale, this.supportedLanguages)) {\n            query = query + "&lang=" + locale;\n        }\n        return query;\n    }\n    ;\n    ConvertToAPILocale(systemLocale) {\n        if (systemLocale == "zh-cn" || systemLocale == "zh-cn" || systemLocale == "pt-br") {\n            return systemLocale;\n        }\n        let lang = systemLocale.split("-")[0];\n        if (lang == "sv") {\n            return "se";\n        }\n        else if (lang == "cs") {\n            return "cz";\n        }\n        else if (lang == "ko") {\n            return "kr";\n        }\n        else if (lang == "lv") {\n            return "la";\n        }\n        else if (lang == "nn" || lang == "nb") {\n            return "no";\n        }\n        return lang;\n    }\n    HadErrors(json) {\n        if (!this.HasReturnedError(json))\n            return false;\n        let errorMsg = "OpenWeatherMap Response: ";\n        let error = {\n            service: "openweathermap",\n            type: "hard",\n        };\n        let errorPayload = json;\n        switch (errorPayload.cod) {\n            case ("400"):\n                error.detail = "bad location format";\n                error.message = _("Please make sure Location is in the correct format in the Settings");\n                break;\n            case ("401"):\n                error.detail = "bad key";\n                error.message = _("Make sure you entered the correct key in settings");\n                break;\n            case ("404"):\n                error.detail = "location not found";\n                error.message = _("Location not found, make sure location is available or it is in the correct format");\n                break;\n            case ("429"):\n                error.detail = "key blocked";\n                error.message = _("If this problem persists, please contact the Author of this applet");\n                break;\n            default:\n                error.detail = "unknown";\n                error.message = _("Unknown Error, please see the logs in Looking Glass");\n                break;\n        }\n        ;\n        this.app.ShowError(error);\n        logger_Log.Instance.Debug("OpenWeatherMap Error Code: " + errorPayload.cod);\n        logger_Log.Instance.Error(errorMsg + errorPayload.message);\n        return true;\n    }\n    ;\n    HasReturnedError(json) {\n        return (!!(json === null || json === void 0 ? void 0 : json.cod));\n    }\n    HandleError(error) {\n        if (error.code == 404) {\n            this.app.ShowError({\n                detail: "location not found",\n                message: _("Location not found, make sure location is available or it is in the correct format"),\n                userError: true,\n                type: "hard"\n            });\n            return false;\n        }\n        return true;\n    }\n    ResolveIcon(icon) {\n        switch (icon) {\n            case "10d":\n                return ["weather-rain", "weather-showers-scattered", "weather-freezing-rain"];\n            case "10n":\n                return ["weather-rain", "weather-showers-scattered", "weather-freezing-rain"];\n            case "09n":\n                return ["weather-showers"];\n            case "09d":\n                return ["weather-showers"];\n            case "13d":\n                return ["weather-snow"];\n            case "13n":\n                return ["weather-snow"];\n            case "50d":\n                return ["weather-fog"];\n            case "50n":\n                return ["weather-fog"];\n            case "04d":\n                return ["weather-overcast", "weather-clouds", "weather-few-clouds"];\n            case "04n":\n                return ["weather-overcast", "weather-clouds-night", "weather-few-clouds-night"];\n            case "03n":\n                return [\'weather-clouds-night\', "weather-few-clouds-night"];\n            case "03d":\n                return ["weather-clouds", "weather-few-clouds", "weather-overcast"];\n            case "02n":\n                return ["weather-few-clouds-night"];\n            case "02d":\n                return ["weather-few-clouds"];\n            case "01n":\n                return ["weather-clear-night"];\n            case "01d":\n                return ["weather-clear"];\n            case "11d":\n                return ["weather-storm"];\n            case "11n":\n                return ["weather-storm"];\n            default:\n                return ["weather-severe-alert"];\n        }\n    }\n    ;\n    ResolveCustomIcon(icon) {\n        switch (icon) {\n            case "10d":\n                return "day-rain-symbolic";\n            case "10n":\n                return "night-rain-symbolic";\n            case "09n":\n                return "night-showers-symbolic";\n            case "09d":\n                return "day-showers-symbolic";\n            case "13d":\n                return "day-snow-symbolic";\n            case "13n":\n                return "night-alt-snow-symbolic";\n            case "50d":\n                return "day-fog-symbolic";\n            case "50n":\n                return "night-fog-symbolic";\n            case "04d":\n                return "day-cloudy-symbolic";\n            case "04n":\n                return "night-alt-cloudy-symbolic";\n            case "03n":\n                return "night-alt-cloudy-symbolic";\n            case "03d":\n                return "day-cloudy-symbolic";\n            case "02n":\n                return "night-alt-cloudy-symbolic";\n            case "02d":\n                return "day-cloudy-symbolic";\n            case "01n":\n                return "night-clear-symbolic";\n            case "01d":\n                return "day-sunny-symbolic";\n            case "11d":\n                return "day-thunderstorm-symbolic";\n            case "11n":\n                return "night-alt-thunderstorm-symbolic";\n            default:\n                return "cloud-refresh-symbolic";\n        }\n    }\n    ;\n}\n;\nconst openWeatherMapConditionLibrary = [\n    _("Thunderstorm with light rain"),\n    _("Thunderstorm with rain"),\n    _("Thunderstorm with heavy rain"),\n    _("Light thunderstorm"),\n    _("Thunderstorm"),\n    _("Heavy thunderstorm"),\n    _("Ragged thunderstorm"),\n    _("Thunderstorm with light drizzle"),\n    _("Thunderstorm with drizzle"),\n    _("Thunderstorm with heavy drizzle"),\n    _("Light intensity drizzle"),\n    _("Drizzle"),\n    _("Heavy intensity drizzle"),\n    _("Light intensity drizzle rain"),\n    _("Drizzle rain"),\n    _("Heavy intensity drizzle rain"),\n    _("Shower rain and drizzle"),\n    _("Heavy shower rain and drizzle"),\n    _("Shower drizzle"),\n    _("Light rain"),\n    _("Moderate rain"),\n    _("Heavy intensity rain"),\n    _("Very heavy rain"),\n    _("Extreme rain"),\n    _("Freezing rain"),\n    _("Light intensity shower rain"),\n    _("Shower rain"),\n    _("Heavy intensity shower rain"),\n    _("Ragged shower rain"),\n    _("Light snow"),\n    _("Snow"),\n    _("Heavy snow"),\n    _("Sleet"),\n    _("Shower sleet"),\n    _("Light rain and snow"),\n    _("Rain and snow"),\n    _("Light shower snow"),\n    _("Shower snow"),\n    _("Heavy shower snow"),\n    _("Mist"),\n    _("Smoke"),\n    _("Haze"),\n    _("Sand, dust whirls"),\n    _("Fog"),\n    _("Sand"),\n    _("Dust"),\n    _("Volcanic ash"),\n    _("Squalls"),\n    _("Tornado"),\n    _("Clear"),\n    _("Clear sky"),\n    _("Sky is clear"),\n    _("Clouds"),\n    _("Few clouds"),\n    _("Scattered clouds"),\n    _("Broken clouds"),\n    _("Overcast clouds")\n];\n\n;// CONCATENATED MODULE: ./src/3_8/providers/us_weather.ts\n\n\n\nclass USWeather {\n    constructor(_app) {\n        this.prettyName = _("US Weather");\n        this.name = "US Weather";\n        this.maxForecastSupport = 7;\n        this.website = "https://www.weather.gov/";\n        this.maxHourlyForecastSupport = 156;\n        this.needsApiKey = false;\n        this.sitesUrl = "https://api.weather.gov/points/";\n        this.grid = null;\n        this.MAX_STATION_DIST = 50000;\n        this.observationStations = null;\n        this.currentLoc = null;\n        this.currentLocID = null;\n        this.app = _app;\n        this.sunCalc = new SunCalc();\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        let locID = loc.lat.toString() + "," + loc.lon.toString();\n        if (!this.grid || !this.observationStations || this.currentLocID != locID) {\n            logger_Log.Instance.Print("Downloading new site data");\n            this.currentLoc = loc;\n            this.currentLocID = locID;\n            let grid = await this.GetGridData(loc);\n            if (grid == null)\n                return null;\n            logger_Log.Instance.Debug("Grid found: " + JSON.stringify(grid, null, 2));\n            let observationStations = await this.GetStationData(grid.properties.observationStations);\n            if (observationStations == null)\n                return null;\n            this.grid = grid;\n            this.observationStations = observationStations;\n        }\n        else {\n            logger_Log.Instance.Debug("Site data downloading skipped");\n        }\n        let observations = await this.GetObservationsInRange(this.MAX_STATION_DIST, loc, this.observationStations);\n        let hourlyForecastPromise = this.app.LoadJsonAsync(this.grid.properties.forecastHourly + "?units=si");\n        let forecastPromise = this.app.LoadJsonAsync(this.grid.properties.forecast);\n        let hourly = await hourlyForecastPromise;\n        let forecast = await forecastPromise;\n        if (!hourly || !forecast) {\n            logger_Log.Instance.Error("Failed to obtain forecast Data");\n            return null;\n        }\n        let weather = this.ParseCurrent(observations, hourly);\n        weather.forecasts = this.ParseForecast(forecast);\n        weather.hourlyForecasts = this.ParseHourlyForecast(hourly, this);\n        return weather;\n    }\n    ;\n    async GetGridData(loc) {\n        let siteData = await this.app.LoadJsonAsync(this.sitesUrl + loc.lat.toString() + "," + loc.lon.toString(), null, (msg) => this.OnObtainingGridData(msg));\n        return siteData;\n    }\n    async GetStationData(stationListUrl) {\n        let stations = await this.app.LoadJsonAsync(stationListUrl);\n        return stations === null || stations === void 0 ? void 0 : stations.features;\n    }\n    async GetObservationsInRange(range, loc, stations) {\n        let observations = [];\n        for (let index = 0; index < stations.length; index++) {\n            const element = stations[index];\n            element.dist = GetDistance(element.geometry.coordinates[1], element.geometry.coordinates[0], loc.lat, loc.lon);\n            if (element.dist > range)\n                break;\n            let observation = await this.app.LoadJsonAsync(stations[index].id + "/observations/latest", null, (msg) => false);\n            if (observation == null) {\n                logger_Log.Instance.Debug("Failed to get observations from " + stations[index].id);\n            }\n            else {\n                observations.push(observation);\n            }\n        }\n        return observations;\n    }\n    OnObtainingGridData(message) {\n        var _a, _b;\n        if (message.code == 404) {\n            let data = JSON.parse((_b = (_a = message === null || message === void 0 ? void 0 : message.response) === null || _a === void 0 ? void 0 : _a.response_body) === null || _b === void 0 ? void 0 : _b.data);\n            if (data.title == "Data Unavailable For Requested Point") {\n                this.app.ShowError({\n                    type: "hard",\n                    userError: true,\n                    detail: "location not covered",\n                    service: "us-weather",\n                    message: _("Location is outside US, please use a different provider.")\n                });\n            }\n            return false;\n        }\n        return true;\n    }\n    MeshObservationData(observations) {\n        if (observations.length < 1)\n            return null;\n        let result = observations[0];\n        if (observations.length == 1)\n            return result;\n        for (let index = 1; index < observations.length; index++) {\n            const element = observations[index];\n            let debugText = " Observation data missing, plugged in from ID " +\n                element.id + ", index " + index +\n                ", distance "\n                + Math.round(GetDistance(element.geometry.coordinates[1], element.geometry.coordinates[0], this.currentLoc.lat, this.currentLoc.lon))\n                + " metres";\n            if (result.properties.icon == null) {\n                result.properties.icon = element.properties.icon;\n                result.properties.textDescription = element.properties.textDescription;\n                logger_Log.Instance.Debug("Weather condition" + debugText);\n            }\n            if (result.properties.temperature.value == null) {\n                result.properties.temperature.value = element.properties.temperature.value;\n                logger_Log.Instance.Debug("Temperature" + debugText);\n            }\n            if (result.properties.windSpeed.value == null) {\n                result.properties.windSpeed.value = element.properties.windSpeed.value;\n                logger_Log.Instance.Debug("Wind Speed" + debugText);\n            }\n            if (result.properties.windDirection.value == null) {\n                result.properties.windDirection.value = element.properties.windDirection.value;\n                logger_Log.Instance.Debug("Wind degree" + debugText);\n            }\n            if (result.properties.barometricPressure.value == null) {\n                result.properties.barometricPressure.value = element.properties.barometricPressure.value;\n                logger_Log.Instance.Debug("Pressure" + debugText);\n            }\n            if (result.properties.relativeHumidity.value == null) {\n                result.properties.relativeHumidity.value = element.properties.relativeHumidity.value;\n                logger_Log.Instance.Debug("Humidity" + debugText);\n            }\n            if (result.properties.windChill.value == null) {\n                result.properties.windChill.value = element.properties.windChill.value;\n                logger_Log.Instance.Debug("WindChill" + debugText);\n            }\n            if (result.properties.visibility.value == null) {\n                result.properties.visibility.value = element.properties.visibility.value;\n                logger_Log.Instance.Debug("Visibility" + debugText);\n            }\n        }\n        return result;\n    }\n    ParseCurrent(json, hourly) {\n        if (json.length == 0) {\n            logger_Log.Instance.Error("No observation stations/data are available");\n            return null;\n        }\n        let observation = this.MeshObservationData(json);\n        let timestamp = new Date(observation.properties.timestamp);\n        let times = this.sunCalc.getTimes(new Date(), observation.geometry.coordinates[1], observation.geometry.coordinates[0], observation.properties.elevation.value);\n        try {\n            let weather = {\n                coord: {\n                    lat: observation.geometry.coordinates[1],\n                    lon: observation.geometry.coordinates[0]\n                },\n                location: {\n                    city: null,\n                    country: null,\n                    url: "https://forecast.weather.gov/MapClick.php?lat=" + this.currentLoc.lat.toString() + "&lon=" + this.currentLoc.lon.toString(),\n                    timeZone: this.observationStations[0].properties.timeZone,\n                    distanceFrom: this.observationStations[0].dist\n                },\n                date: timestamp,\n                sunrise: times.sunrise,\n                sunset: times.sunset,\n                wind: {\n                    speed: KPHtoMPS(observation.properties.windSpeed.value),\n                    degree: observation.properties.windDirection.value\n                },\n                temperature: CelsiusToKelvin(observation.properties.temperature.value),\n                pressure: observation.properties.barometricPressure.value / 100,\n                humidity: observation.properties.relativeHumidity.value,\n                condition: this.ResolveCondition(observation.properties.icon, IsNight(times)),\n                forecasts: []\n            };\n            if (observation.properties.windChill.value != null) {\n                weather.extra_field = {\n                    name: _("Feels Like"),\n                    value: CelsiusToKelvin(observation.properties.windChill.value),\n                    type: "temperature"\n                };\n            }\n            if (weather.condition == null && hourly != null) {\n                weather.condition = this.ResolveCondition(hourly.properties.periods[0].icon);\n            }\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("US Weather Parsing error: " + e);\n            this.app.ShowError({ type: "soft", service: "us-weather", detail: "unusual payload", message: _("Failed to Process Current Weather Info") });\n            return null;\n        }\n    }\n    ;\n    CheckIfHasThreeElementsForDay(json) {\n        if (json.properties.periods.length < 3)\n            return false;\n        let counter = 0;\n        for (let index = 1; index < 3; index++) {\n            const element = json.properties.periods[index];\n            const prevElement = json.properties.periods[index - 1];\n            let prevDate = new Date(prevElement.startTime).toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            let curDate = new Date(element.startTime).toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            if (prevDate == curDate)\n                counter++;\n            else\n                counter = 0;\n            if (counter > 1)\n                return true;\n            return false;\n        }\n    }\n    FindTodayIndex(json, startIndex = 0) {\n        let today = new Date();\n        for (let index = startIndex; index < json.properties.periods.length; index++) {\n            const element = json.properties.periods[index];\n            let todayDate = today.toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            let curDate = new Date(element.startTime).toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            if (todayDate != curDate)\n                continue;\n            return index;\n        }\n    }\n    ParseForecast(json) {\n        let forecasts = [];\n        try {\n            let startIndex = (this.CheckIfHasThreeElementsForDay(json) ? 1 : 0);\n            startIndex = this.FindTodayIndex(json, startIndex);\n            if (json.properties.periods[startIndex].isDaytime == false) {\n                startIndex++;\n                let today = json.properties.periods[0];\n                let forecast = {\n                    date: new Date(today.startTime),\n                    temp_min: FahrenheitToKelvin(today.temperature),\n                    temp_max: FahrenheitToKelvin(today.temperature),\n                    condition: this.ResolveCondition(today.icon),\n                };\n                forecasts.push(forecast);\n            }\n            for (let i = startIndex; i < json.properties.periods.length; i += 2) {\n                let day = json.properties.periods[i];\n                let night = json.properties.periods[i + 1];\n                if (!night)\n                    night = day;\n                let forecast = {\n                    date: new Date(day.startTime),\n                    temp_min: FahrenheitToKelvin(night.temperature),\n                    temp_max: FahrenheitToKelvin(day.temperature),\n                    condition: this.ResolveCondition(day.icon),\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("US Weather Forecast Parsing error: " + e);\n            this.app.ShowError({ type: "soft", service: "us-weather", detail: "unusual payload", message: _("Failed to Process Forecast Info") });\n            return null;\n        }\n    }\n    ;\n    ParseHourlyForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.properties.periods.length; i++) {\n                let hour = json.properties.periods[i];\n                let timestamp = new Date(hour.startTime);\n                let forecast = {\n                    date: timestamp,\n                    temp: CelsiusToKelvin(hour.temperature),\n                    condition: self.ResolveCondition(hour.icon, !hour.isDaytime),\n                    precipitation: null\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("US Weather service Forecast Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "us-weather", detail: "unusual payload", message: _("Failed to Process Hourly Forecast Info") });\n            return null;\n        }\n    }\n    ResolveCondition(icon, isNight = false) {\n        if (icon == null)\n            return null;\n        let code = icon.match(/(?!\\/)[a-z_]+(?=(\\?|,))/);\n        let iconType = this.app.config.IconType;\n        switch (code[0]) {\n            case "skc":\n                return {\n                    main: _("Clear"),\n                    description: _("Clear"),\n                    customIcon: (isNight) ? "night-clear-symbolic" : "day-sunny-symbolic",\n                    icons: (isNight) ? ["weather-clear-night", "weather-severe-alert"] : ["weather-clear", "weather-severe-alert"]\n                };\n            case "few":\n                return {\n                    main: _("Few clouds"),\n                    description: _("Few clouds"),\n                    customIcon: (isNight) ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: ["weather-clear-night", "weather-severe-alert"]\n                };\n            case "sct":\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    customIcon: (isNight) ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: ["weather-clear", "weather-severe-alert"]\n                };\n            case "bkn":\n                return {\n                    main: _("Mostly cloudy"),\n                    description: _("Mostly cloudy"),\n                    customIcon: (isNight) ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: ["weather-clouds-night", "weather-overcast", "weather-severe-alert"]\n                };\n            case "ovc":\n                return {\n                    main: _("Overcast"),\n                    description: _("Overcast"),\n                    customIcon: "cloudy-symbolic",\n                    icons: ["weather-clouds", "weather-overcast", "weather-severe-alert"]\n                };\n            case "wind_skc":\n                return {\n                    main: _("Clear"),\n                    description: _("Clear and windy"),\n                    customIcon: (IsNight) ? "night-alt-wind-symbolic" : "day-windy-symbolic",\n                    icons: (isNight) ? ["weather-clear-night"] : ["weather-clear"]\n                };\n            case "wind_few":\n                return {\n                    main: _("Few clouds"),\n                    description: _("Few clouds and windy"),\n                    customIcon: (IsNight) ? "night-alt-cloudy-windy-symbolic" : "day-cloudy-windy-symbolic",\n                    icons: (isNight) ? ["weather-few-clouds-night"] : ["weather-few-clouds"]\n                };\n            case "wind_sct":\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy and windy"),\n                    customIcon: (IsNight) ? "night-alt-cloudy-windy-symbolic" : "day-cloudy-windy-symbolic",\n                    icons: (isNight) ? ["weather-clouds-night", "weather-few-clouds-night"] : ["weather-clouds", "weather-few-clouds"]\n                };\n            case "wind_bkn":\n                return {\n                    main: _("Mostly cloudy"),\n                    description: _("Mostly cloudy and windy"),\n                    customIcon: (IsNight) ? "night-alt-cloudy-windy-symbolic" : "day-cloudy-windy-symbolic",\n                    icons: (isNight) ? ["weather-clouds-night", "weather-few-clouds-night"] : ["weather-clouds", "weather-few-clouds"]\n                };\n            case "wind_ovc":\n                return {\n                    main: _("Overcast"),\n                    description: _("Overcast and windy"),\n                    customIcon: "cloudy-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", "weather-severe-alert"]\n                };\n            case "snow":\n                return {\n                    main: _("Snow"),\n                    description: _("Snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-severe-alert"]\n                };\n            case "rain_snow":\n                return {\n                    main: _("Rain"),\n                    description: _("Snowy rain"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-snow-rain", "weather-snow", "weather-severe-alert"]\n                };\n            case "rain_sleet":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "snow_sleet":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet"),\n                    customIcon: "sleet-symbolic",\n                    icons: ["weather-freezing-rain", "weather-hail", "weather-severe-alert"]\n                };\n            case "fzra":\n                return {\n                    main: _("Freezing rain"),\n                    description: _("Freezing rain"),\n                    customIcon: "rain-wind-symbolic",\n                    icons: ["weather-freezing-rain", "weather-hail", "weather-severe-alert"]\n                };\n            case "rain_fzra":\n                return {\n                    main: _("Freezing rain"),\n                    description: _("Freezing rain"),\n                    customIcon: "rain-wind-symbolic",\n                    icons: ["weather-freezing-rain", "weather-hail", "weather-severe-alert"]\n                };\n            case "snow_fzra":\n                return {\n                    main: _("Freezing rain"),\n                    description: _("Freezing rain and snow"),\n                    customIcon: "rain-wind-symbolic",\n                    icons: ["weather-freezing-rain", "weather-hail", "weather-severe-alert"]\n                };\n            case "sleet":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-severe-alert"]\n                };\n            case "rain":\n                return {\n                    main: _("Rain"),\n                    description: _("Rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-rain", "weather-freezing-rain", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "rain_showers":\n            case "rain_showers_hi":\n                return {\n                    main: _("Rain"),\n                    description: _("Rain showers"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-rain", "weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "tsra":\n            case "tsra_sct":\n            case "tsra_hi":\n                return {\n                    main: _("Thunderstorm"),\n                    description: _("Thunderstorm"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "tornado":\n                return {\n                    main: _("Tornado"),\n                    description: _("Tornado"),\n                    customIcon: "tornado-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            case "hurricane":\n                return {\n                    main: _("Hurricane"),\n                    description: _("Hurricane"),\n                    customIcon: "hurricane-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            case "tropical_storm":\n                return {\n                    main: _("Storm"),\n                    description: _("Tropical storm"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "dust":\n                return {\n                    main: _("Dust"),\n                    description: _("Dust"),\n                    customIcon: "dust-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "smoke":\n                return {\n                    main: _("Smoke"),\n                    description: _("Smoke"),\n                    customIcon: "smoke-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "haze":\n                return {\n                    main: _("Haze"),\n                    description: _("Haze"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "hot":\n                return {\n                    main: _("Hot"),\n                    description: _("Hot"),\n                    customIcon: "hot-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            case "cold":\n                return {\n                    main: _("Cold"),\n                    description: _("Cold"),\n                    customIcon: "snowflake-cold-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "blizzard":\n                return {\n                    main: _("Blizzard"),\n                    description: _("Blizzard"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "fog":\n                return {\n                    main: _("Fog"),\n                    description: _("Fog"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            default:\n                return {\n                    main: _("Unknown"),\n                    description: _("Unknown"),\n                    customIcon: "cloud-refresh-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n        }\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/weatherbit.ts\n\n\nconst weatherbit_Lang = imports.lang;\nclass Weatherbit {\n    constructor(_app) {\n        this.prettyName = _("WeatherBit");\n        this.name = "Weatherbit";\n        this.maxForecastSupport = 16;\n        this.website = "https://www.weatherbit.io/";\n        this.maxHourlyForecastSupport = 48;\n        this.needsApiKey = true;\n        this.supportedLanguages = [\n            \'ar\', \'az\', \'be\', \'bg\', \'bs\', \'ca\', \'cz\', \'da\', \'de\', \'el\', \'en\',\n            \'et\', \'fi\', \'fr\', \'hr\', \'hu\', \'id\', \'is\', \'it\',\n            \'kw\', \'lv\', \'nb\', \'nl\', \'pl\', \'pt\', \'ro\', \'ru\', \'sk\', \'sl\', \'sr\',\n            \'sv\', \'tr\', \'uk\', \'zh\', \'zh-tw\'\n        ];\n        this.current_url = "https://api.weatherbit.io/v2.0/current?";\n        this.daily_url = "https://api.weatherbit.io/v2.0/forecast/daily?";\n        this.hourly_url = "https://api.weatherbit.io/v2.0/forecast/hourly?";\n        this.hourlyAccess = true;\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        let forecastPromise = this.GetData(this.daily_url, loc, this.ParseForecast);\n        let hourlyPromise = null;\n        if (!!this.hourlyAccess)\n            hourlyPromise = this.GetHourlyData(this.hourly_url, loc);\n        let currentResult = await this.GetData(this.current_url, loc, this.ParseCurrent);\n        if (!currentResult)\n            return null;\n        let forecastResult = await forecastPromise;\n        currentResult.forecasts = (!forecastResult) ? [] : forecastResult;\n        let hourlyResult = await hourlyPromise;\n        currentResult.hourlyForecasts = (!hourlyResult) ? [] : hourlyResult;\n        return currentResult;\n    }\n    ;\n    async GetData(baseUrl, loc, ParseFunction) {\n        let query = this.ConstructQuery(baseUrl, loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, weatherbit_Lang.bind(this, this.HandleError));\n        if (json == null)\n            return null;\n        return ParseFunction(json, this);\n    }\n    async GetHourlyData(baseUrl, loc) {\n        let query = this.ConstructQuery(baseUrl, loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, weatherbit_Lang.bind(this, this.HandleHourlyError));\n        if (!!(json === null || json === void 0 ? void 0 : json.error)) {\n            return null;\n        }\n        if (json == null)\n            return null;\n        return this.ParseHourlyForecast(json, this);\n    }\n    ;\n    ParseCurrent(json, self) {\n        json = json.data[0];\n        let hourDiff = self.HourDifference(new Date(json.ts * 1000), self.ParseStringTime(json.ob_time));\n        if (hourDiff != 0)\n            logger_Log.Instance.Debug("Weatherbit reporting incorrect time, correcting with " + (0 - hourDiff).toString() + " hours");\n        try {\n            let weather = {\n                coord: {\n                    lat: json.lat,\n                    lon: json.lon\n                },\n                location: {\n                    city: json.city_name,\n                    country: json.country_code,\n                    url: null,\n                    timeZone: json.timezone\n                },\n                date: new Date(json.ts * 1000),\n                sunrise: self.TimeToDate(json.sunrise, hourDiff),\n                sunset: self.TimeToDate(json.sunset, hourDiff),\n                wind: {\n                    speed: json.wind_spd,\n                    degree: json.wind_dir\n                },\n                temperature: json.temp,\n                pressure: json.pres,\n                humidity: json.rh,\n                condition: {\n                    main: json.weather.description,\n                    description: json.weather.description,\n                    icons: self.ResolveIcon(json.weather.icon),\n                    customIcon: self.ResolveCustomIcon(json.weather.icon)\n                },\n                extra_field: {\n                    name: _("Feels Like"),\n                    value: json.app_temp,\n                    type: "temperature"\n                },\n                forecasts: []\n            };\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Weatherbit Weather Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "weatherbit", detail: "unusual payload", message: _("Failed to Process Current Weather Info") });\n            return null;\n        }\n    }\n    ;\n    ParseForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.data.length; i++) {\n                let day = json.data[i];\n                let forecast = {\n                    date: new Date(day.ts * 1000),\n                    temp_min: day.min_temp,\n                    temp_max: day.max_temp,\n                    condition: {\n                        main: day.weather.description,\n                        description: day.weather.description,\n                        icons: self.ResolveIcon(day.weather.icon),\n                        customIcon: self.ResolveCustomIcon(day.weather.icon)\n                    },\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Weatherbit Forecast Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "weatherbit", detail: "unusual payload", message: _("Failed to Process Forecast Info") });\n            return null;\n        }\n    }\n    ;\n    ParseHourlyForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.data.length; i++) {\n                let hour = json.data[i];\n                let forecast = {\n                    date: new Date(hour.ts * 1000),\n                    temp: hour.temp,\n                    condition: {\n                        main: hour.weather.description,\n                        description: hour.weather.description,\n                        icons: self.ResolveIcon(hour.weather.icon),\n                        customIcon: self.ResolveCustomIcon(hour.weather.icon)\n                    },\n                    precipitation: {\n                        type: "rain",\n                        volume: hour.precip,\n                        chance: hour.pop\n                    }\n                };\n                if (hour.snow != 0) {\n                    forecast.precipitation.type = "snow";\n                    forecast.precipitation.volume = hour.snow;\n                }\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Weatherbit Forecast Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "weatherbit", detail: "unusual payload", message: _("Failed to Process Forecast Info") });\n            return null;\n        }\n    }\n    TimeToDate(time, hourDiff) {\n        let hoursMinutes = time.split(":");\n        let date = new Date();\n        date.setHours(parseInt(hoursMinutes[0]) - hourDiff);\n        date.setMinutes(parseInt(hoursMinutes[1]));\n        return date;\n    }\n    HourDifference(correctTime, incorrectTime) {\n        return Math.round((incorrectTime.getTime() - correctTime.getTime()) / (1000 * 60 * 60));\n    }\n    ParseStringTime(last_ob_time) {\n        let split = last_ob_time.split(/[T\\-\\s:]/);\n        if (split.length != 5)\n            return null;\n        return new Date(parseInt(split[0]), parseInt(split[1]) - 1, parseInt(split[2]), parseInt(split[3]), parseInt(split[4]));\n    }\n    ConvertToAPILocale(systemLocale) {\n        if (systemLocale == "zh-tw") {\n            return systemLocale;\n        }\n        let lang = systemLocale.split("-")[0];\n        if (lang == "cs") {\n            return "cz";\n        }\n        return lang;\n    }\n    ConstructQuery(query, loc) {\n        query = query + "key=" + this.app.config.ApiKey + "&lat=" + loc.lat + "&lon=" + loc.lon + "&units=S";\n        let lang = this.ConvertToAPILocale(this.app.config.currentLocale);\n        if (IsLangSupported(lang, this.supportedLanguages) && this.app.config._translateCondition) {\n            query = query + "&lang=" + lang;\n        }\n        return query;\n    }\n    ;\n    HandleError(message) {\n        if (message.code == 403) {\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "bad key",\n                service: "weatherbit",\n                message: _("Please Make sure you\\nentered the API key correctly and your account is not locked")\n            });\n        }\n        return true;\n    }\n    HandleHourlyError(message) {\n        if (message.code == 403) {\n            this.hourlyAccess = false;\n            logger_Log.Instance.Print("Hourly forecast is inaccessible, skipping");\n            this.app.ShowError({\n                type: "silent",\n                userError: false,\n                detail: "bad key",\n                service: "weatherbit",\n                message: _("API key doesn\'t provide access to Hourly Weather, skipping")\n            });\n        }\n        return true;\n    }\n    ResolveIcon(icon) {\n        switch (icon) {\n            case "t01n":\n            case "t01d":\n            case "t02n":\n            case "t02d":\n            case "t03n":\n            case "t03d":\n            case "t04n":\n            case "t04d":\n            case "t05n":\n            case "t05d":\n                return ["weather-storm"];\n            case "d01d":\n            case "d01n":\n            case "d02d":\n            case "d02n":\n            case "d03d":\n            case "d03n":\n                return ["weather-showers-scattered", "weather-rain", "weather-freezing-rain"];\n            case "r01d":\n            case "r01n":\n            case "r02d":\n            case "r02n":\n            case "r03d":\n            case "r03n":\n            case "r04d":\n            case "r04n":\n            case "r05d":\n            case "r05n":\n            case "r06d":\n            case "r06n":\n                return ["weather-rain", "weather-freezing-rain", "weather-showers-scattered"];\n            case "s01d":\n            case "s01n":\n            case "s02d":\n            case "s02n":\n            case "s03d":\n            case "s03n":\n            case "s04d":\n            case "s04n":\n            case "s06d":\n            case "s06n":\n                return ["weather-snow"];\n            case "s05d":\n            case "s05n":\n                return ["weather-freezing-rain", "weather-rain", "weather-showers-scattered"];\n            case "a01d":\n            case "a01n":\n            case "a02d":\n            case "a02n":\n            case "a03d":\n            case "a03n":\n            case "a04d":\n            case "a04n":\n            case "a05d":\n            case "a05n":\n            case "a06d":\n            case "a06n":\n                return ["weather-fog"];\n            case "c02d":\n                return ["weather-few-clouds"];\n            case "c02n":\n                return ["weather-few-clouds-night"];\n            case "c01n":\n                return ["weather-clear-night"];\n            case "c01d":\n                return ["weather-clear"];\n            case "c03d":\n                return ["weather-clouds", "weather-few-clouds", "weather-overcast"];\n            case "c03n":\n                return ["weather-clouds-night", "weather-few-clouds-night", "weather-overcast"];\n            case "c04n":\n                return ["weather-overcast", "weather-clouds-night", "weather-few-clouds-night"];\n            case "c04d":\n                return ["weather-overcast", "weather-clouds", "weather-few-clouds"];\n            case "u00d":\n            case "u00n":\n                return ["weather-severe-alert"];\n            default:\n                return ["weather-severe-alert"];\n        }\n    }\n    ;\n    ResolveCustomIcon(icon) {\n        switch (icon) {\n            case "t01d":\n            case "t02d":\n            case "t03d":\n                return "day-thunderstorm-symbolic";\n            case "t04d":\n            case "t05d":\n                return "thunderstorm-symbolic";\n            case "t01n":\n            case "t02n":\n            case "t03n":\n                return "night-alt-thunderstorm-symbolic";\n            case "t04n":\n            case "t05n":\n                return "thunderstorm-symbolic";\n            case "d01d":\n            case "d02d":\n            case "d03d":\n            case "d01n":\n            case "d02n":\n            case "d03n":\n                return "showers-symbolic";\n            case "r01d":\n            case "r02d":\n            case "r03d":\n            case "r01n":\n            case "r02n":\n            case "r03n":\n                return "rain-symbolic";\n            case "r04d":\n            case "r05d":\n                return "day-rain-symbolic";\n            case "r06d":\n                return "rain-symbolic";\n            case "r04n":\n            case "r05n":\n                return "night-alt-rain-symbolic";\n            case "r06n":\n                return "rain-symbolic";\n            case "s01d":\n            case "s04d":\n                return "day-snow-symbolic";\n            case "s02d":\n            case "s03d":\n            case "s06d":\n                return "snow-symbolic";\n            case "s01n":\n            case "s04n":\n                return "night-alt-snow-symbolic";\n            case "s02n":\n            case "s03n":\n            case "s06n":\n                return "snow-symbolic";\n            case "s05d":\n            case "s05n":\n                return "sleet-symbolic";\n            case "a01d":\n            case "a02d":\n            case "a03d":\n            case "a04d":\n            case "a05d":\n            case "a06d":\n                return "day-fog-symbolic";\n            case "a01n":\n            case "a02n":\n            case "a03n":\n            case "a04n":\n            case "a05n":\n            case "a06n":\n                return "night-fog-symbolic";\n            case "c02d":\n                return "day-cloudy-symbolic";\n            case "c02n":\n                return "night-alt-cloudy-symbolic";\n            case "c01n":\n                return "night-clear-symbolic";\n            case "c01d":\n                return "day-sunny-symbolic";\n            case "c03d":\n                return "day-cloudy-symbolic";\n            case "c03n":\n                return "night-alt-cloudy-symbolic";\n            case "c04n":\n                return "cloudy-symbolic";\n            case "c04d":\n                return "cloudy-symbolic";\n            case "u00d":\n            case "u00n":\n                return "cloud-refresh-symbolic";\n            default:\n                return "cloud-refresh-symbolic";\n        }\n    }\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/met_norway.ts\n\n\n\nclass MetNorway {\n    constructor(app) {\n        this.prettyName = _("MET Norway");\n        this.name = "MetNorway";\n        this.maxForecastSupport = 10;\n        this.website = "https://www.met.no/en";\n        this.maxHourlyForecastSupport = 48;\n        this.needsApiKey = false;\n        this.baseUrl = "https://api.met.no/weatherapi/locationforecast/2.0/complete?";\n        this.app = app;\n        this.sunCalc = new SunCalc();\n    }\n    async GetWeather(loc) {\n        let query = this.GetUrl(loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query);\n        if (!json) {\n            logger_Log.Instance.Error("MET Norway: Empty response from API");\n            return null;\n        }\n        return this.ParseWeather(json);\n    }\n    RemoveEarlierElements(json) {\n        let now = new Date();\n        let startIndex = -1;\n        for (let i = 0; i < json.properties.timeseries.length; i++) {\n            const element = json.properties.timeseries[i];\n            let timestamp = new Date(element.time);\n            if (timestamp < now && now.getHours() != timestamp.getHours()) {\n                startIndex = i;\n            }\n            else {\n                break;\n            }\n        }\n        if (startIndex != -1) {\n            logger_Log.Instance.Debug("Removing outdated weather information...");\n            json.properties.timeseries.splice(0, startIndex + 1);\n        }\n        return json;\n    }\n    ParseWeather(json) {\n        json = this.RemoveEarlierElements(json);\n        let times = this.sunCalc.getTimes(new Date(), json.geometry.coordinates[1], json.geometry.coordinates[0], json.geometry.coordinates[2]);\n        let current = json.properties.timeseries[0];\n        let result = {\n            temperature: CelsiusToKelvin(current.data.instant.details.air_temperature),\n            coord: {\n                lat: json.geometry.coordinates[1],\n                lon: json.geometry.coordinates[0]\n            },\n            date: new Date(current.time),\n            condition: this.ResolveCondition(current.data.next_1_hours.summary.symbol_code, IsNight(times)),\n            humidity: current.data.instant.details.relative_humidity,\n            pressure: current.data.instant.details.air_pressure_at_sea_level,\n            extra_field: {\n                name: _("Cloudiness"),\n                type: "percent",\n                value: current.data.instant.details.cloud_area_fraction\n            },\n            sunrise: times.sunrise,\n            sunset: times.sunset,\n            wind: {\n                degree: current.data.instant.details.wind_from_direction,\n                speed: current.data.instant.details.wind_speed\n            },\n            location: {\n                url: null,\n            },\n            forecasts: []\n        };\n        let hourlyForecasts = [];\n        for (let i = 0; i < json.properties.timeseries.length; i++) {\n            const element = json.properties.timeseries[i];\n            if (!!element.data.next_1_hours) {\n                hourlyForecasts.push({\n                    date: new Date(element.time),\n                    temp: CelsiusToKelvin(element.data.instant.details.air_temperature),\n                    precipitation: {\n                        type: "rain",\n                        volume: element.data.next_1_hours.details.precipitation_amount\n                    },\n                    condition: this.ResolveCondition(element.data.next_1_hours.summary.symbol_code, IsNight(times, new Date(element.time)))\n                });\n            }\n        }\n        result.hourlyForecasts = hourlyForecasts;\n        result.forecasts = this.BuildForecasts(json.properties.timeseries);\n        return result;\n    }\n    BuildForecasts(forecastsData) {\n        let forecasts = [];\n        let days = this.SortDataByDay(forecastsData);\n        for (let i = 0; i < days.length; i++) {\n            let forecast = {\n                condition: {\n                    customIcon: "cloudy-symbolic",\n                    description: "",\n                    icons: [],\n                    main: ""\n                },\n                date: null,\n                temp_max: Number.NEGATIVE_INFINITY,\n                temp_min: Number.POSITIVE_INFINITY\n            };\n            let conditionCounter = {};\n            for (let j = 0; j < days[i].length; j++) {\n                const element = days[i][j];\n                if (!element.data.next_6_hours)\n                    continue;\n                forecast.date = new Date(element.time);\n                if (element.data.next_6_hours.details.air_temperature_max > forecast.temp_max)\n                    forecast.temp_max = element.data.next_6_hours.details.air_temperature_max;\n                if (element.data.next_6_hours.details.air_temperature_min < forecast.temp_min)\n                    forecast.temp_min = element.data.next_6_hours.details.air_temperature_min;\n                let [symbol] = element.data.next_6_hours.summary.symbol_code.split("_");\n                let severity = conditionSeverity[symbol];\n                if (!conditionCounter[severity])\n                    conditionCounter[severity] = { count: 0, name: symbol };\n                conditionCounter[severity].count = conditionCounter[severity].count + 1;\n            }\n            forecast.temp_max = CelsiusToKelvin(forecast.temp_max);\n            forecast.temp_min = CelsiusToKelvin(forecast.temp_min);\n            forecast.condition = this.ResolveCondition(this.GetMostSevereCondition(conditionCounter));\n            forecasts.push(forecast);\n        }\n        return forecasts;\n    }\n    GetEarliestDataForToday(events) {\n        let earliest = 0;\n        for (let i = 0; i < events.length; i++) {\n            const earliestElementTime = new Date(events[earliest].time);\n            let timestamp = new Date(events[i].time);\n            if (timestamp.toDateString() != new Date().toDateString())\n                continue;\n            if (earliestElementTime < timestamp)\n                continue;\n            earliest = i;\n        }\n        return events[earliest];\n    }\n    SortDataByDay(data) {\n        let days = [];\n        let currentDay = new Date(this.GetEarliestDataForToday(data).time);\n        let dayIndex = 0;\n        days.push([]);\n        for (let i = 0; i < data.length; i++) {\n            const element = data[i];\n            const timestamp = new Date(element.time);\n            if (timestamp.toDateString() == currentDay.toDateString()) {\n                days[dayIndex].push(element);\n            }\n            else if (timestamp.toDateString() != currentDay.toDateString()) {\n                dayIndex++;\n                currentDay = timestamp;\n                days.push([]);\n                days[dayIndex].push(element);\n            }\n        }\n        return days;\n    }\n    GetMostCommonCondition(count) {\n        let result = null;\n        for (let key in count) {\n            if (result == null)\n                result = parseInt(key);\n            if (count[result].count < count[key].count)\n                result = parseInt(key);\n        }\n        return count[result].name;\n    }\n    GetMostSevereCondition(conditions) {\n        let result = null;\n        for (let key in conditions) {\n            let conditionID = parseInt(key);\n            let resultStripped = (result > 100) ? result - 100 : result;\n            let conditionIDStripped = (conditionID > 100) ? conditionID - 100 : conditionID;\n            if (conditionIDStripped > resultStripped)\n                result = conditionID;\n        }\n        if (result <= 4) {\n            return this.GetMostCommonCondition(conditions);\n        }\n        return conditions[result].name;\n    }\n    GetUrl(loc) {\n        let url = this.baseUrl + "lat=";\n        url += (loc.lat + "&lon=" + loc.lon);\n        return url;\n    }\n    DeconstructCondition(icon) {\n        let condition = icon.split("_");\n        return {\n            timeOfDay: condition[1],\n            condition: condition[0]\n        };\n    }\n    ResolveCondition(icon, isNight = false) {\n        let weather = this.DeconstructCondition(icon);\n        switch (weather.condition) {\n            case "clearsky":\n                return {\n                    customIcon: (isNight) ? "night-clear-symbolic" : "day-sunny-symbolic",\n                    main: _("Clear sky"),\n                    description: _("Clear sky"),\n                    icons: (isNight) ? ["weather-clear-night"] : ["weather-clear"]\n                };\n            case "cloudy":\n                return {\n                    customIcon: "cloudy-symbolic",\n                    main: _("Cloudy"),\n                    description: _("Cloudy"),\n                    icons: (isNight) ? ["weather-overcast", "weather-clouds-night", "weather-few-clouds-night"] : ["weather-overcast", "weather-clouds", "weather-few-clouds"]\n                };\n            case "fair":\n                return {\n                    customIcon: (isNight) ? "night-cloudy-symbolic" : "day-cloudy-symbolic",\n                    main: _("Fair"),\n                    description: _("Fair"),\n                    icons: (isNight) ? ["weather-few-clouds-night", "weather-clouds-night", "weather-overcast"] : ["weather-few-clouds", "weather-clouds", "weather-overcast"]\n                };\n            case "fog":\n                return {\n                    customIcon: "fog-symbolic",\n                    main: _("Fog"),\n                    description: _("Fog"),\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "heavyrain":\n                return {\n                    customIcon: "rain-symbolic",\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain"),\n                    icons: ["weather-rain", "weather-freezing-rain", "weather-showers"]\n                };\n            case "heavyrainandthunder":\n                return {\n                    customIcon: "thunderstorm-symbolic",\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain and thunder"),\n                    icons: ["weather-rain", "weather-freezing-rain", "weather-showers"]\n                };\n            case "heavyrainshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-rain-symbolic" : "day-rain-symbolic",\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain showers"),\n                    icons: ["weather-showers", "weather-showers-scattered"]\n                };\n            case "heavyrainshowersandthunder":\n                return {\n                    customIcon: (IsNight) ? "night-alt-thunderstorm-symbolic" : "day-thunderstorm-symbolic",\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain showers and thunder"),\n                    icons: ["weather-showers", "weather-showers-scattered"]\n                };\n            case "heavysleet":\n                return {\n                    customIcon: "sleet-symbolic",\n                    main: _("Heavy sleet"),\n                    description: _("Heavy sleet"),\n                    icons: ["weather-showers", "weather-freezing-rain", "weather-rain"]\n                };\n            case "heavysleetandthunder":\n                return {\n                    customIcon: "sleet-storm-symbolic",\n                    main: _("Heavy sleet"),\n                    description: _("Heavy sleet and thunder"),\n                    icons: ["weather-showers", "weather-freezing-rain", "weather-rain"]\n                };\n            case "heavysleetshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-sleet-symbolic" : "day-sleet-symbolic",\n                    main: _("Heavy sleet"),\n                    description: _("Heavy sleet showers"),\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-freezing-rain"]\n                };\n            case "heavysleetshowersandthunder":\n                return {\n                    customIcon: (IsNight) ? "night-alt-sleet-storm-symbolic" : "day-sleet-storm-symbolic",\n                    main: _("Heavy sleet"),\n                    description: _("Heavy sleet showers and thunder"),\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-freezing-rain"]\n                };\n            case "heavysnow":\n                return {\n                    customIcon: "snow-symbolic",\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow"),\n                    icons: ["weather-snow"]\n                };\n            case "heavysnowandthunder":\n                return {\n                    customIcon: "snow-symbolic",\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow and thunder"),\n                    icons: ["weather-snow"]\n                };\n            case "heavysnowshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-symbolic" : "day-snow-symbolic",\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow showers"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            case "heavysnowshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-thunderstorm-symbolic" : "day-snow-thunderstorm-symbolic",\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow showers and thunder"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            case "lightrain":\n                return {\n                    customIcon: "rain-mix-symbolic",\n                    main: _("Light rain"),\n                    description: _("Light rain"),\n                    icons: ["weather-showers-scattered", "weather-rain"]\n                };\n            case "lightrainandthunder":\n                return {\n                    customIcon: "rain-mix-storm-symbolic",\n                    main: _("Light rain"),\n                    description: _("Light rain and thunder"),\n                    icons: ["weather-showers-scattered", "weather-rain"]\n                };\n            case "lightrainshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-rain-mix-symbolic" : "day-rain-mix-symbolic",\n                    main: _("Light rain"),\n                    description: _("Light rain showers"),\n                    icons: ["weather-showers-scattered", "weather-rain"]\n                };\n            case "lightrainshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-rain-mix-storm-symbolic" : "day-rain-mix-storm-symbolic",\n                    main: _("Light rain"),\n                    description: _("Light rain showers and thunder"),\n                    icons: ["weather-showers-scattered", "weather-rain"]\n                };\n            case "lightsleet":\n                return {\n                    customIcon: "sleet-symbolic",\n                    main: _("Light sleet"),\n                    description: _("Light sleet"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "lightsleetandthunder":\n                return {\n                    customIcon: "sleet-storm-symbolic",\n                    main: _("Light sleet"),\n                    description: _("Light sleet and thunder"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "lightsleetshowers":\n                return {\n                    customIcon: (IsNight) ? "night-alt-sleet-symbolic" : "day-sleet-symbolic",\n                    main: _("Light sleet"),\n                    description: _("Light sleet showers"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "lightssleetshowersandthunder":\n                return {\n                    customIcon: (IsNight) ? "night-alt-sleet-storm-symbolic" : "day-sleet-storm-symbolic",\n                    main: _("Light sleet"),\n                    description: _("Light sleet showers and thunder"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "lightsnow":\n                return {\n                    customIcon: "snow-symbolic",\n                    main: _("Light snow"),\n                    description: _("Light snow"),\n                    icons: ["weather-snow"]\n                };\n            case "lightsnowandthunder":\n                return {\n                    customIcon: "snow-storm-symbolic",\n                    main: _("Light snow"),\n                    description: _("Light snow and thunder"),\n                    icons: ["weather-snow"]\n                };\n            case "lightsnowshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-symbolic" : "day-snow-symbolic",\n                    main: _("Light snow"),\n                    description: _("Light snow showers"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            case "lightssnowshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-thunderstorm-symbolic" : "day-snow-thunderstorm-symbolic",\n                    main: _("Light snow"),\n                    description: _("Light snow showers and thunder"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            case "partlycloudy":\n                return {\n                    customIcon: (isNight) ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    icons: (isNight) ? ["weather-clouds-night", "weather-few-clouds-night", "weather-overcast"] : ["weather-clouds", "weather-few-clouds", "weather-overcast"]\n                };\n            case "rain":\n                return {\n                    customIcon: "rain-symbolic",\n                    main: _("Rain"),\n                    description: _("Rain"),\n                    icons: ["weather-rain", "weather-freezing-rain", "weather-showers-scattered"]\n                };\n            case "rainandthunder":\n                return {\n                    customIcon: "thunderstorm-symbolic",\n                    main: _("Rain"),\n                    description: _("Rain and thunder"),\n                    icons: ["weather-storm", "weather-rain", "weather-freezing-rain", "weather-showers-scattered"]\n                };\n            case "rainshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-rain-mix-symbolic" : "day-rain-mix-symbolic",\n                    main: _("Rain showers"),\n                    description: _("Rain showers"),\n                    icons: ["weather-showers-scattered", "weather-rain", "weather-freezing-rain"]\n                };\n            case "rainshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-rain-mix-storm-symbolic" : "day-rain-mix-storm-symbolic",\n                    main: _("Rain showers"),\n                    description: _("Rain showers and thunder"),\n                    icons: ["weather-showers-scattered", "weather-rain", "weather-freezing-rain"]\n                };\n            case "sleet":\n                return {\n                    customIcon: "sleet-symbolic",\n                    main: _("Sleet"),\n                    description: _("Sleet"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "sleetandthunder":\n                return {\n                    customIcon: "sleet-storm-symbolic",\n                    main: _("Sleet"),\n                    description: _("Sleet and thunder"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "sleetshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-sleet-symbolic" : "day-sleet-symbolic",\n                    main: _("Sleet"),\n                    description: _("Sleet showers"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "sleetshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-sleet-storm-symbolic" : "day-sleet-storm-symbolic",\n                    main: _("Sleet"),\n                    description: _("Sleet showers and thunder"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "snow":\n                return {\n                    customIcon: "snow-symbolic",\n                    main: _("Snow"),\n                    description: _("Snow"),\n                    icons: ["weather-snow"]\n                };\n            case "snowandthunder":\n                return {\n                    customIcon: "snow-storm-symbolic",\n                    main: _("Snow"),\n                    description: _("Snow and thunder"),\n                    icons: ["weather-snow"]\n                };\n            case "snowshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-symbolic" : "day-snow-symbolic",\n                    main: _("Snow showers"),\n                    description: _("Snow showers"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            case "snowshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-thunderstorm-symbolic" : "day-snow-thunderstorm-symbolic",\n                    main: _("Snow showers"),\n                    description: _("Snow showers and thunder"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            default:\n                logger_Log.Instance.Error("condition code not found: " + weather.condition);\n                return {\n                    customIcon: "cloud-refresh-symbolic",\n                    main: _("Unknown"),\n                    description: _("Unknown"),\n                    icons: ["weather-severe-alert"]\n                };\n        }\n    }\n}\nconst conditionSeverity = {\n    clearsky: 1,\n    cloudy: 4,\n    fair: 2,\n    fog: 15,\n    heavyrain: 10,\n    heavyrainandthunder: 11,\n    heavyrainshowers: 41,\n    heavyrainshowersandthunder: 25,\n    heavysleet: 48,\n    heavysleetandthunder: 32,\n    heavysleetshowers: 43,\n    heavysleetshowersandthunder: 27,\n    heavysnow: 50,\n    heavysnowandthunder: 34,\n    heavysnowshowers: 45,\n    heavysnowshowersandthunder: 29,\n    lightrain: 46,\n    lightrainandthunder: 30,\n    lightrainshowers: 40,\n    lightrainshowersandthunder: 24,\n    lightsleet: 47,\n    lightsleetandthunder: 31,\n    lightsleetshowers: 42,\n    lightsnow: 49,\n    lightsnowandthunder: 33,\n    lightsnowshowers: 44,\n    lightssleetshowersandthunder: 26,\n    lightssnowshowersandthunder: 28,\n    partlycloudy: 3,\n    rain: 9,\n    rainandthunder: 22,\n    rainshowers: 5,\n    rainshowersandthunder: 6,\n    sleet: 12,\n    sleetandthunder: 23,\n    sleetshowers: 7,\n    sleetshowersandthunder: 20,\n    snow: 13,\n    snowandthunder: 14,\n    snowshowers: 8,\n    snowshowersandthunder: 21\n};\n\n;// CONCATENATED MODULE: ./src/3_8/lib/httpLib.ts\n\nconst { Message, ProxyResolverDefault, SessionAsync } = imports.gi.Soup;\nclass HttpLib {\n    constructor() {\n        this._httpSession = new SessionAsync();\n        this._httpSession.user_agent = "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:37.0) Gecko/20100101 Firefox/37.0";\n        this._httpSession.timeout = 10;\n        this._httpSession.idle_timeout = 10;\n        this._httpSession.add_feature(new ProxyResolverDefault());\n    }\n    static get Instance() {\n        if (this.instance == null)\n            this.instance = new HttpLib();\n        return this.instance;\n    }\n    async LoadJsonAsync(url, params, method = "GET") {\n        let response = await this.LoadAsync(url, params, method);\n        if (!response.Success)\n            return response;\n        try {\n            let payload = JSON.parse(response.Data);\n            response.Data = payload;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Error: API response is not JSON. The response: " + response.Data);\n            response.Success = false;\n            response.ErrorData = {\n                code: -1,\n                message: "bad api response - non json",\n                reason_phrase: null,\n            };\n        }\n        finally {\n            return response;\n        }\n    }\n    async LoadAsync(url, params, method = "GET") {\n        var _a, _b, _c, _d, _e;\n        let message = await this.Send(url, params, method);\n        let error = null;\n        if (!message) {\n            error = {\n                code: 0,\n                message: "no network response",\n                reason_phrase: "no network response",\n                response: null\n            };\n        }\n        else if (message.status_code < 100 && message.status_code >= 0) {\n            error = {\n                code: message.status_code,\n                message: "no network response",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        else if (message.status_code > 300 || message.status_code < 200) {\n            error = {\n                code: message.status_code,\n                message: "bad status code",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        else if (!message.response_body) {\n            error = {\n                code: message.status_code,\n                message: "no response body",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        else if (!message.response_body.data) {\n            error = {\n                code: message.status_code,\n                message: "no response data",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        if ((message === null || message === void 0 ? void 0 : message.status_code) > 200 && (message === null || message === void 0 ? void 0 : message.status_code) < 300) {\n            logger_Log.Instance.Print("Wrning: API returned non-OK status code \'" + (message === null || message === void 0 ? void 0 : message.status_code) + "\'");\n        }\n        logger_Log.Instance.Debug2("API full response: " + ((_b = (_a = message === null || message === void 0 ? void 0 : message.response_body) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.toString()));\n        if (error != null)\n            logger_Log.Instance.Error("Error calling URL: " + error.reason_phrase + ", " + ((_d = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.response_body) === null || _d === void 0 ? void 0 : _d.data));\n        return {\n            Success: (error == null),\n            Data: (_e = message === null || message === void 0 ? void 0 : message.response_body) === null || _e === void 0 ? void 0 : _e.data,\n            ErrorData: error\n        };\n    }\n    async Send(url, params, method = "GET") {\n        if (params != null) {\n            let items = Object.keys(params);\n            for (let index = 0; index < items.length; index++) {\n                const item = items[index];\n                url += (index == 0) ? "?" : "&";\n                url += (item) + "=" + params[item];\n            }\n        }\n        let query = encodeURI(url);\n        logger_Log.Instance.Debug("URL called: " + query);\n        let data = await new Promise((resolve, reject) => {\n            let message = Message.new(method, query);\n            this._httpSession.queue_message(message, (session, message) => {\n                resolve(message);\n            });\n        });\n        return data;\n    }\n}\nHttpLib.instance = null;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/visualcrossing.ts\n\nclass VisualCrossing {\n    constructor(app) {\n        this.prettyName = _("Visual Crossing");\n        this.name = "Visual Crossing";\n        this.maxForecastSupport = 15;\n        this.maxHourlyForecastSupport = 336;\n        this.website = "https://weather.visualcrossing.com/";\n        this.needsApiKey = true;\n        this.url = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/";\n        this.params = {\n            unitGroup: "metric",\n            key: null,\n            include: "fcst,hours,current",\n            lang: "id"\n        };\n        this.supportedLangs = ["en", "de", "fr", "es"];\n        this.app = app;\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        this.params[\'key\'] = this.app.config.ApiKey;\n        let translate = true;\n        if (IsLangSupported(this.app.config.Language, this.supportedLangs)) {\n            this.params[\'lang\'] = this.app.config.Language;\n            translate = false;\n        }\n        let url = this.url + loc.lat + "," + loc.lon;\n        let json = await this.app.LoadJsonAsync(url, this.params, (e) => this.HandleHttpError(e));\n        if (!json)\n            return null;\n        return this.ParseWeather(json, translate);\n    }\n    ParseWeather(weather, translate) {\n        var _a, _b, _c, _d, _e, _f;\n        let currentHour = this.GetCurrentHour(weather.days);\n        let result = {\n            date: new Date(weather.currentConditions.datetimeEpoch * 1000),\n            location: {\n                url: encodeURI("https://www.visualcrossing.com/weather-history/" + weather.latitude + "," + weather.longitude + "/"),\n                timeZone: weather.timezone,\n                tzOffset: weather.tzoffset,\n            },\n            coord: {\n                lat: weather.latitude,\n                lon: weather.longitude,\n            },\n            humidity: (_a = weather.currentConditions.humidity) !== null && _a !== void 0 ? _a : currentHour.humidity,\n            pressure: (_b = weather.currentConditions.pressure) !== null && _b !== void 0 ? _b : currentHour.pressure,\n            wind: {\n                degree: (_c = weather.currentConditions.winddir) !== null && _c !== void 0 ? _c : currentHour.winddir,\n                speed: (_d = weather.currentConditions.windspeed) !== null && _d !== void 0 ? _d : currentHour.windspeed,\n            },\n            temperature: CelsiusToKelvin((_e = weather.currentConditions.temp) !== null && _e !== void 0 ? _e : currentHour.temp),\n            sunrise: new Date(weather.currentConditions.sunriseEpoch * 1000),\n            sunset: new Date(weather.currentConditions.sunsetEpoch * 1000),\n            condition: this.GenerateCondition(weather.currentConditions.icon, weather.currentConditions.conditions, translate),\n            extra_field: {\n                name: _("Feels Like"),\n                type: "temperature",\n                value: CelsiusToKelvin((_f = currentHour.feelslike) !== null && _f !== void 0 ? _f : weather.currentConditions.feelslike)\n            },\n            forecasts: this.ParseForecasts(weather.days, translate),\n            hourlyForecasts: this.ParseHourlyForecasts(weather.days, translate)\n        };\n        return result;\n    }\n    ParseForecasts(forecasts, translate) {\n        let result = [];\n        for (let index = 0; index < forecasts.length; index++) {\n            const element = forecasts[index];\n            result.push({\n                date: new Date(element.datetimeEpoch * 1000),\n                condition: this.GenerateCondition(element.icon, element.conditions, translate),\n                temp_max: CelsiusToKelvin(element.tempmax),\n                temp_min: CelsiusToKelvin(element.tempmin)\n            });\n        }\n        return result;\n    }\n    ParseHourlyForecasts(forecasts, translate) {\n        let currentHour = new Date();\n        currentHour.setMinutes(0, 0, 0);\n        let result = [];\n        for (let index = 0; index < forecasts.length; index++) {\n            const element = forecasts[index];\n            for (let index = 0; index < element.hours.length; index++) {\n                const hour = element.hours[index];\n                let time = new Date(hour.datetimeEpoch * 1000);\n                if (time < currentHour)\n                    continue;\n                let item = {\n                    date: time,\n                    temp: CelsiusToKelvin(hour.temp),\n                    condition: this.GenerateCondition(hour.icon, hour.conditions, translate)\n                };\n                if (hour.preciptype != null) {\n                    item.precipitation = {\n                        type: hour.preciptype[0],\n                        chance: hour.precipprob,\n                        volume: hour.precip\n                    };\n                }\n                result.push(item);\n            }\n        }\n        return result;\n    }\n    GetCurrentHour(forecasts) {\n        if ((forecasts === null || forecasts === void 0 ? void 0 : forecasts.length) < 1)\n            return null;\n        let currentHour = new Date();\n        currentHour.setMinutes(0, 0, 0);\n        const element = forecasts[0];\n        for (let index = 0; index < element.hours.length; index++) {\n            const hour = element.hours[index];\n            let time = new Date(hour.datetimeEpoch * 1000);\n            if (time < currentHour)\n                continue;\n            return hour;\n        }\n        return null;\n    }\n    GenerateCondition(icon, condition, translate) {\n        let result = {\n            main: (translate) ? this.ResolveTypeID(this.GetFirstCondition(condition)) : this.GetFirstCondition(condition),\n            description: (translate) ? this.ResolveTypeIDs(condition) : condition,\n            icons: [],\n            customIcon: "refresh-symbolic"\n        };\n        switch (icon) {\n            case "clear-day":\n                result.icons = ["weather-clear"];\n                result.customIcon = "day-sunny-symbolic";\n                break;\n            case "clear-night":\n                result.icons = ["weather-clear-night"];\n                result.customIcon = "night-clear-symbolic";\n                break;\n            case "partly-cloudy-day":\n                result.icons = ["weather-few-clouds"];\n                result.customIcon = "day-cloudy-symbolic";\n                break;\n            case "partly-cloudy-night":\n                result.icons = ["weather-few-clouds-night"];\n                result.customIcon = "night-alt-cloudy-symbolic";\n                break;\n            case "cloudy":\n                result.icons = ["weather-overcast", "weather-clouds", "weather-many-clouds"];\n                result.customIcon = "cloudy-symbolic";\n                break;\n            case "wind":\n                result.icons = ["weather-windy", "weather-breeze"];\n                result.customIcon = "windy-symbolic";\n                break;\n            case "fog":\n                result.icons = ["weather-fog"];\n                result.customIcon = "fog-symbolic";\n                break;\n            case "rain":\n                result.icons = ["weather-rain", "weather-freezing-rain", "weather-snow-rain", "weather-showers"];\n                result.customIcon = "rain-symbolic";\n                break;\n            case "snow":\n                result.icons = ["weather-snow"];\n                result.customIcon = "snow-symbolic";\n                break;\n        }\n        return result;\n    }\n    GetFirstCondition(condition) {\n        let split = condition.split(", ");\n        return split[0];\n    }\n    ResolveTypeID(condition) {\n        switch (condition.toLowerCase()) {\n            case "type_1":\n                return _("Blowing or drifting snow");\n            case "type_2":\n                return _("Drizzle");\n            case "type_3":\n                return _("Heavy drizzle");\n            case "type_4":\n                return _("Light drizzle");\n            case "type_5":\n                return _("Heavy drizzle/rain");\n            case "type_6":\n                return _("Light drizzle/rain");\n            case "type_7":\n                return _("Duststorm");\n            case "type_8":\n                return _("Fog");\n            case "type_9":\n                return _("Freezing drizzle/freezing rain");\n            case "type_10":\n                return _("Heavy freezing drizzle/freezing rain");\n            case "type_11":\n                return _("Light freezing drizzle/freezing rain");\n            case "type_12":\n                return _("Freezing fog");\n            case "type_13":\n                return _("Heavy freezing rain");\n            case "type_14":\n                return _("Light freezing rain");\n            case "type_15":\n                return _("Funnel cloud/tornado");\n            case "type_16":\n                return _("Hail showers");\n            case "type_17":\n                return _("Ice");\n            case "type_18":\n                return _("Lightning without thunder");\n            case "type_19":\n                return _("Mist");\n            case "type_20":\n                return _("Precipitation in vicinity");\n            case "type_21":\n                return _("Rain");\n            case "type_22":\n                return _("Heavy rain and snow");\n            case "type_23":\n                return _("Light rain And snow");\n            case "type_24":\n                return _("Rain showers");\n            case "type_25":\n                return _("Heavy rain");\n            case "type_26":\n                return _("Light rain");\n            case "type_27":\n                return _("Sky coverage decreasing");\n            case "type_28":\n                return _("Sky coverage increasing");\n            case "type_29":\n                return _("Sky unchanged");\n            case "type_30":\n                return _("Smoke or haze");\n            case "type_31":\n                return _("Snow");\n            case "type_32":\n                return _("Snow and rain showers");\n            case "type_33":\n                return _("Snow showers");\n            case "type_34":\n                return _("Heavy snow");\n            case "type_35":\n                return _("Light snow");\n            case "type_36":\n                return _("Squalls");\n            case "type_37":\n                return _("Thunderstorm");\n            case "type_38":\n                return _("Thunderstorm without precipitation");\n            case "type_39":\n                return _("Diamond dust");\n            case "type_40":\n                return _("Hail");\n            case "type_41":\n                return _("Overcast");\n            case "type_42":\n                return _("Partially cloudy");\n            case "type_43":\n                return _("Clear");\n        }\n        return condition;\n    }\n    ResolveTypeIDs(condition) {\n        let result = "";\n        let split = condition.split(", ");\n        for (let index = 0; index < split.length; index++) {\n            const element = split[index];\n            result += this.ResolveTypeID(element);\n            if (index < split.length - 1)\n                result += ", ";\n        }\n        return result;\n    }\n    HandleHttpError(error) {\n        if ((error === null || error === void 0 ? void 0 : error.code) == 401) {\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "bad key",\n                message: _("Please make sure you entered the API key correctly")\n            });\n            return false;\n        }\n        return true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/climacellV4.ts\n\nclass ClimacellV4 {\n    constructor(app) {\n        this.needsApiKey = true;\n        this.prettyName = _("Climacell");\n        this.name = "ClimacellV4";\n        this.maxForecastSupport = 15;\n        this.maxHourlyForecastSupport = 108;\n        this.website = "https://www.climacell.co/";\n        this.url = "https://data.climacell.co/v4/timelines";\n        this.params = {\n            apikey: null,\n            location: null,\n            timesteps: "current,1h,1d",\n            units: "metric",\n            fields: "temperature,temperatureMax,temperatureMin,pressureSurfaceLevel,weatherCode,sunsetTime,sunriseTime,precipitationType,precipitationProbability,precipitationIntensity,windDirection,windSpeed,humidity,temperatureApparent"\n        };\n        this.app = app;\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        this.params.apikey = this.app.config.ApiKey;\n        this.params.location = loc.lat + "," + loc.lon;\n        let response = await this.app.LoadJsonAsync(this.url, this.params, (m) => this.HandleHTTPError(m));\n        if (response == null)\n            return null;\n        return this.ParseWeather(loc, response);\n    }\n    HandleHTTPError(message) {\n        if (message.code == 401) {\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "no key",\n                service: "climacell",\n                message: _("Please Make sure you\\nentered the API key that you have from Climacell")\n            });\n            return false;\n        }\n        return true;\n    }\n    ParseWeather(loc, data) {\n        var _a, _b;\n        let current = (_b = (_a = data.data.timelines.find(x => x.timestep == "current")) === null || _a === void 0 ? void 0 : _a.intervals) === null || _b === void 0 ? void 0 : _b[0];\n        let hourly = data.data.timelines.find(x => x.timestep == "1h").intervals;\n        let daily = data.data.timelines.find(x => x.timestep == "1d").intervals;\n        let result = {\n            coord: {\n                lat: loc.lat,\n                lon: loc.lon\n            },\n            date: new Date(current.startTime),\n            condition: this.ResolveCondition(current.values.weatherCode),\n            humidity: current.values.humidity,\n            pressure: current.values.pressureSurfaceLevel,\n            temperature: CelsiusToKelvin(current.values.temperature),\n            wind: {\n                degree: current.values.windDirection,\n                speed: current.values.windSpeed\n            },\n            sunrise: new Date(daily === null || daily === void 0 ? void 0 : daily[0].values.sunriseTime),\n            sunset: new Date(daily === null || daily === void 0 ? void 0 : daily[0].values.sunsetTime),\n            location: {\n                url: "https://www.climacell.co/weather"\n            },\n            extra_field: {\n                name: _("Feels Like"),\n                type: "temperature",\n                value: CelsiusToKelvin(current.values.temperatureApparent)\n            },\n            forecasts: []\n        };\n        let hours = [];\n        let days = [];\n        for (let index = 0; index < daily.length; index++) {\n            const element = daily[index];\n            days.push({\n                condition: this.ResolveCondition(element.values.weatherCode),\n                date: new Date(element.startTime),\n                temp_max: CelsiusToKelvin(element.values.temperatureMax),\n                temp_min: CelsiusToKelvin(element.values.temperatureMin)\n            });\n        }\n        for (let index = 0; index < hourly.length; index++) {\n            const element = hourly[index];\n            let hour = {\n                condition: this.ResolveCondition(element.values.weatherCode),\n                date: new Date(element.startTime),\n                temp: CelsiusToKelvin(element.values.temperature)\n            };\n            hour.date.setMinutes(0, 0, 0);\n            if (element.values.precipitationProbability > 0 && element.values.precipitationIntensity > 0) {\n                hour.precipitation = {\n                    chance: element.values.precipitationProbability,\n                    volume: element.values.precipitationIntensity,\n                    type: this.PrecipTypeToAppletType(element.values.precipitationType)\n                };\n            }\n            hours.push(hour);\n        }\n        result.forecasts = days;\n        result.hourlyForecasts = hours;\n        return result;\n    }\n    ResolveCondition(weatherCode, isNight = false) {\n        let result = {\n            customIcon: "refresh-symbolic",\n            icons: ["weather-severe-alert"],\n            main: _("Unknown"),\n            description: _("Unknown")\n        };\n        switch (weatherCode) {\n            case 0:\n                return result;\n            case 1000:\n                return {\n                    main: isNight ? _("Clear") : _("Sunny"),\n                    description: isNight ? _("Clear") : _("Sunny"),\n                    customIcon: isNight ? "night-clear-symbolic" : "day-sunny-symbolic",\n                    icons: isNight ? ["weather-clear-night"] : ["weather-clear"]\n                };\n            case 1001:\n                return {\n                    main: _("Cloudy"),\n                    description: _("Cloudy"),\n                    customIcon: "cloudy-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", isNight ? "weather-clouds-night" : "weather-clouds"]\n                };\n            case 1100:\n                return {\n                    main: _("Mostly clear"),\n                    description: _("Mostly clear"),\n                    customIcon: isNight ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: isNight ? ["weather-few-clouds-night", "weather-clouds-night"] : ["weather-few-clouds", "weather-clouds"]\n                };\n            case 1101:\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    customIcon: isNight ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: isNight ? ["weather-clouds-night", "weather-few-clouds-night"] : ["weather-clouds", "weather-few-clouds"]\n                };\n            case 1102:\n                return {\n                    main: _("Mostly cloudy"),\n                    description: _("Mostly cloudy"),\n                    customIcon: "cloud-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", isNight ? "weather-clouds-night" : "weather-clouds"]\n                };\n            case 2000:\n                return {\n                    main: _("Fog"),\n                    description: _("Fog"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog"]\n                };\n            case 2100:\n                return {\n                    main: _("Fog"),\n                    description: _("Light fog"),\n                    customIcon: isNight ? "night-fog-symbolic" : "day-fog-symbolic",\n                    icons: ["weather-fog"]\n                };\n            case 3000:\n                return {\n                    main: _("Wind"),\n                    description: _("Light wind"),\n                    customIcon: isNight ? "night-alt-wind-symbolic" : "day-windy-symbolic",\n                    icons: ["weather-windy"]\n                };\n            case 3001:\n                return {\n                    main: _("Wind"),\n                    description: _("Wind"),\n                    customIcon: "windy-symbolic",\n                    icons: ["weather-windy"]\n                };\n            case 3002:\n                return {\n                    main: _("Wind"),\n                    description: _("Strong wind"),\n                    customIcon: "windy-symbolic",\n                    icons: ["weather-windy"]\n                };\n            case 4000:\n                return {\n                    main: _("Drizzle"),\n                    description: _("Drizzle"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-showers-scattered", "weather-showers", "weather-rain", "weather-freezing-rain"]\n                };\n            case 4001:\n                return {\n                    main: _("Rain"),\n                    description: _("Rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-rain", "weather-showers", "weather-freezing-rain", "weather-showers-scattered"]\n                };\n            case 4200:\n                return {\n                    main: _("Rain"),\n                    description: _("Light rain"),\n                    customIcon: isNight ? "night-alt-rain-symbolic" : "day-rain-symbolic",\n                    icons: ["weather-showers-scattered", "weather-rain", "weather-freezing-rain", "weather-showers-scattered"]\n                };\n            case 4201:\n                return {\n                    main: _("Rain"),\n                    description: _("Heavy rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-rain", "weather-showers", "weather-freezing-rain", "weather-showers-scattered"]\n                };\n            case 5000:\n                return {\n                    main: _("Snow"),\n                    description: _("Snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered", isNight ? "weather-snow-night" : "weather-snow-day"]\n                };\n            case 5001:\n                return {\n                    main: _("Flurries"),\n                    description: _("Flurries"),\n                    customIcon: "snow-wind-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered", isNight ? "weather-snow-night" : "weather-snow-day"]\n                };\n            case 5100:\n                return {\n                    main: _("Snow"),\n                    description: _("Light snow"),\n                    customIcon: isNight ? "night-alt-snow-symbolic" : "day-snow-symbolic",\n                    icons: isNight ? ["weather-snow-scattered-night", "weather-snow-night", "weather-snow"] : ["weather-snow-scattered-day", "weather-snow-day", "weather-snow"]\n                };\n            case 5101:\n                return {\n                    main: _("Snow"),\n                    description: _("Heavy snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered"]\n                };\n            case 6000:\n                return {\n                    main: _("Drizzle"),\n                    description: _("Freezing drizzle"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-freezing-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 6001:\n                return {\n                    main: _("Rain"),\n                    description: _("Freezing rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 6200:\n                return {\n                    main: _("Rain"),\n                    description: _("Light freezing rain"),\n                    customIcon: isNight ? "night-alt-rain-symbolic" : "day-rain-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 6201:\n                return {\n                    main: _("Rain"),\n                    description: _("Heavy freezing rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 7000:\n                return {\n                    main: _("Ice pellets"),\n                    description: _("Ice pellets"),\n                    customIcon: "sleet-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 7101:\n                return {\n                    main: _("Ice pellets"),\n                    description: _("Heavy ice pellets"),\n                    customIcon: "sleet-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 7102:\n                return {\n                    main: _("Ice pellets"),\n                    description: _("Light ice pellets"),\n                    customIcon: isNight ? "night-alt-sleet-symbolic" : "day-sleet-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 8000:\n                return {\n                    main: _("Thunderstorm"),\n                    description: _("Thunderstorm"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm"]\n                };\n            default:\n                return result;\n        }\n    }\n    PrecipTypeToAppletType(type) {\n        switch (type) {\n            case 0:\n                return "none";\n            case 1:\n                return "rain";\n            case 2:\n                return "snow";\n            case 3:\n                return "freezing rain";\n            case 4:\n                return "ice pellets";\n            default:\n                return "none";\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/danishMI.ts\n\nclass DanishMI {\n    constructor(app) {\n        this.needsApiKey = false;\n        this.prettyName = _("DMI Denmark");\n        this.name = "DanishMI";\n        this.maxForecastSupport = 10;\n        this.maxHourlyForecastSupport = 48;\n        this.website = "https://www.dmi.dk/";\n        this.url = "https://www.dmi.dk/NinJo2DmiDk/ninjo2dmidk";\n        this.forecastParams = {\n            cmd: "llj",\n            lon: null,\n            lat: null,\n            tz: "UTC"\n        };\n        this.observationParams = {\n            cmd: "obj",\n            east: null,\n            west: null,\n            south: null,\n            north: null\n        };\n        this.app = app;\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        this.GetLocationBoundingBox(loc);\n        let observations = this.OrderObservations(await this.app.LoadJsonAsync(this.url, this.observationParams), loc);\n        this.forecastParams.lat = loc.lat;\n        this.forecastParams.lon = loc.lon;\n        let forecasts = await this.app.LoadJsonAsync(this.url, this.forecastParams);\n        return this.ParseWeather(observations, forecasts);\n    }\n    ParseWeather(observations, forecasts) {\n        var _a, _b, _c, _d, _e;\n        let observation = this.MergeObservations(observations);\n        let result = {\n            temperature: CelsiusToKelvin(observation.Temperature2m),\n            condition: this.ResolveCondition(observation.symbol),\n            humidity: observation.RelativeHumidity,\n            pressure: (!observation.PressureMSL) ? null : observation.PressureMSL / 100,\n            wind: {\n                degree: observation.WindDirection,\n                speed: observation.WindSpeed10m\n            }\n        };\n        result.location = {\n            city: forecasts.city,\n            country: forecasts.country,\n            timeZone: null,\n            url: `https://www.dmi.dk/lokation/show/${forecasts.country}/${forecasts.id}`\n        };\n        result.coord = {\n            lon: forecasts.longitude,\n            lat: forecasts.latitude\n        };\n        result.date = this.DateStringToDate(forecasts.lastupdate);\n        result.humidity = (_a = result.humidity) !== null && _a !== void 0 ? _a : forecasts.timeserie[0].humidity;\n        result.pressure = (_b = result.pressure) !== null && _b !== void 0 ? _b : forecasts.timeserie[0].pressure;\n        result.temperature = (_c = result.temperature) !== null && _c !== void 0 ? _c : CelsiusToKelvin(forecasts.timeserie[0].temp);\n        result.wind.degree = (_d = result.wind.degree) !== null && _d !== void 0 ? _d : forecasts.timeserie[0].windDegree;\n        result.wind.speed = (_e = result.wind.speed) !== null && _e !== void 0 ? _e : forecasts.timeserie[0].windSpeed;\n        result.sunrise = this.DateStringToDate(forecasts.sunrise);\n        result.sunset = this.DateStringToDate(forecasts.sunset);\n        if (result.condition.customIcon == "alien-symbolic") {\n            result.condition = this.ResolveCondition(forecasts.timeserie[0].symbol);\n        }\n        let forecastData = [];\n        for (let index = 0; index < forecasts.aggData.length - 1; index++) {\n            const element = forecasts.aggData[index];\n            forecastData.push({\n                date: this.DateStringToDate(element.time),\n                temp_max: CelsiusToKelvin(element.maxTemp),\n                temp_min: CelsiusToKelvin(element.minTemp),\n                condition: this.ResolveDailyCondition(forecasts.timeserie, this.DateStringToDate(element.time))\n            });\n        }\n        result.forecasts = forecastData;\n        let hourlyData = [];\n        for (let index = 0; index < forecasts.timeserie.length; index++) {\n            const element = forecasts.timeserie[index];\n            if (element.time == null)\n                continue;\n            let hour = {\n                date: this.DateStringToDate(element.time),\n                temp: CelsiusToKelvin(element.temp),\n                condition: this.ResolveCondition(element.symbol)\n            };\n            if (element.precip1 > 0.01 && element.precipType != null) {\n                hour.precipitation = {\n                    type: this.DanishPrecipToType(element.precipType),\n                    volume: element.precip1\n                };\n            }\n            hourlyData.push(hour);\n        }\n        result.hourlyForecasts = hourlyData;\n        return result;\n    }\n    MergeObservations(observations) {\n        var _a, _b, _c, _d, _e, _f;\n        let result = {\n            symbol: null,\n            PressureMSL: null,\n            Temperature2m: null,\n            WindDirection: null,\n            RelativeHumidity: null,\n            WindSpeed10m: null,\n        };\n        for (let index = 0; index < observations.length; index++) {\n            const element = observations[index];\n            result.symbol = (_a = result.symbol) !== null && _a !== void 0 ? _a : element.values.symbol;\n            result.PressureMSL = (_b = result.PressureMSL) !== null && _b !== void 0 ? _b : element.values.PressureMSL;\n            result.Temperature2m = (_c = result.Temperature2m) !== null && _c !== void 0 ? _c : element.values.Temperature2m;\n            result.WindDirection = (_d = result.WindDirection) !== null && _d !== void 0 ? _d : element.values.WindDirection;\n            result.RelativeHumidity = (_e = result.RelativeHumidity) !== null && _e !== void 0 ? _e : element.values.RelativeHumidity;\n            result.WindSpeed10m = (_f = result.WindSpeed10m) !== null && _f !== void 0 ? _f : element.values.WindSpeed10m;\n        }\n        return result;\n    }\n    ResolveDailyCondition(hourlyData, date) {\n        let target = new Date(date);\n        target.setHours(target.getHours() + 6);\n        let upto = new Date(target);\n        upto.setDate(upto.getDate() + 1);\n        let relevantHours = hourlyData.filter(x => {\n            let hour = this.DateStringToDate(x.time);\n            if (hour >= target && hour < upto)\n                return hour;\n        });\n        let normalizedSymbols = relevantHours.map(x => (x.symbol > 100) ? (x.symbol - 100) : x.symbol);\n        let resultSymbol = null;\n        if (!!normalizedSymbols.find(x => x > 10 && x != 45))\n            resultSymbol = Math.max(...normalizedSymbols);\n        else\n            resultSymbol = mode(normalizedSymbols);\n        return this.ResolveCondition(resultSymbol);\n    }\n    ResolveCondition(symbol) {\n        let isNight = (symbol > 100);\n        if (isNight)\n            symbol = symbol - 100;\n        switch (symbol) {\n            case 1:\n                return {\n                    main: _("Clear"),\n                    description: _("Clear"),\n                    customIcon: isNight ? "night-clear-symbolic" : "day-sunny-symbolic",\n                    icons: isNight ? ["weather-clear-night"] : ["weather-clear"]\n                };\n            case 2:\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    customIcon: isNight ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: isNight ? ["weather-few-clouds-night", "weather-clouds-night"] : ["weather-few-clouds", "weather-clouds"]\n                };\n            case 3:\n                return {\n                    main: _("Cloudy"),\n                    description: _("Cloudy"),\n                    customIcon: "cloudy-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", "weather-clouds", "weather-few-clouds"]\n                };\n            case 38:\n                return {\n                    main: _("Snow"),\n                    description: _("Blowing snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow"]\n                };\n            case 45:\n                return {\n                    main: _("Foggy"),\n                    description: _("Foggy"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog"]\n                };\n            case 60:\n                return {\n                    main: _("Rain"),\n                    description: _("Rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-rain", "weather-freezing-rain", "weather-showers"]\n                };\n            case 63:\n                return {\n                    main: _("Moderate rain"),\n                    description: _("Moderate rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-rain", "weather-showers", "weather-freezing-rain"]\n                };\n            case 68:\n                return {\n                    main: _("Rain and snow"),\n                    description: _("Rain and snow"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-snow-rain", "weather-freezing-rain", "weather-rain"]\n                };\n            case 69:\n                return {\n                    main: _("Rain and snow"),\n                    description: _("Heavy rain and snow"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-snow-rain", "weather-freezing-rain", "weather-rain"]\n                };\n            case 70:\n                return {\n                    main: _("Slight snow"),\n                    description: _("Slight snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered"]\n                };\n            case 73:\n                return {\n                    main: _("Moderate snow"),\n                    description: _("Moderate snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered"]\n                };\n            case 80:\n                return {\n                    main: _("Rain"),\n                    description: _("Rain showers"),\n                    customIcon: "showers-symbolic",\n                    icons: ["weather-showers", "weather-freezing-rain", "weather-rain"]\n                };\n            case 81:\n                return {\n                    main: _("Rain showers"),\n                    description: _("Moderate rain showers"),\n                    customIcon: isNight ? "night-alt-showers-symbolic" : "day-showers-symbolic",\n                    icons: isNight ? ["weather-showers-night", "weather-showers-scattered-night", "weather-showers-scattered", "weather-showers"] : ["weather-showers-day", "weather-showers-scattered-day", "weather-showers"]\n                };\n            case 83:\n                return {\n                    main: _("Rain and snow"),\n                    description: _("Mixed rain and snow"),\n                    customIcon: isNight ? "night-alt-rain-mix-symbolic" : "day-rain-mix-symbolic",\n                    icons: ["weather-snow-rain", "weather-freezing-rain", "weather-snow-day", "weather-snow"]\n                };\n            case 84:\n                return {\n                    main: _("Rain and snow"),\n                    description: _("Heavy mixed rain and snow"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-snow-rain", "weather-freezing-rain", "weather-snow-day", "weather-snow"]\n                };\n            case 85:\n                return {\n                    main: _("Snow"),\n                    description: _("Snow showers"),\n                    customIcon: isNight ? "night-alt-snow-symbolic" : "day-snow-symbolic",\n                    icons: isNight ? ["weather-snow-night", "weather-snow"] : ["weather-snow-day", "weather-snow"]\n                };\n            case 86:\n                return {\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow showers"),\n                    customIcon: "day-snow-symbolic",\n                    icons: ["weather-snow-day", "weather-snow"]\n                };\n            case 95:\n                return {\n                    main: _("Thunderstorm"),\n                    description: _("Thunderstorm"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm"]\n                };\n            default: {\n                return {\n                    main: _("NOT FOUND"),\n                    description: _("NOT FOUND"),\n                    customIcon: "alien-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            }\n        }\n    }\n    DanishPrecipToType(type) {\n        switch (type) {\n            case "sne":\n                return "snow";\n            case "regn":\n                return "rain";\n            case "slud":\n                return "ice pellets";\n            default:\n                return "none";\n        }\n    }\n    GetLocationBoundingBox(loc) {\n        this.observationParams.west = loc.lon + 0.075;\n        this.observationParams.east = loc.lon - 0.075;\n        this.observationParams.north = loc.lat + 0.045;\n        this.observationParams.south = loc.lat - 0.04;\n    }\n    OrderObservations(observations, loc) {\n        let result = [];\n        for (const key in observations) {\n            const element = observations[key];\n            element.dist = GetDistance(loc.lat, loc.lon, element.latitude, element.longitude);\n            result.push(element);\n        }\n        return this.SortObservationSites(result);\n    }\n    SortObservationSites(observations) {\n        if (observations == null)\n            return null;\n        observations = observations.sort((a, b) => {\n            if (a.dist < b.dist)\n                return -1;\n            if (a.dist == b.dist)\n                return 0;\n            return 1;\n        });\n        return observations;\n    }\n    DateStringToDate(str) {\n        if (!str)\n            return null;\n        if (str.length == 14) {\n            return new Date(Date.UTC(parseInt(str.substring(0, 4)), parseInt(str.substring(4, 6)) - 1, parseInt(str.substring(6, 8)), parseInt(str.substring(8, 10)), parseInt(str.substring(10, 12)), parseInt(str.substring(12, 14))));\n        }\n        else if (str.length == 8) {\n            return new Date(Date.UTC(parseInt(str.substring(0, 4)), parseInt(str.substring(4, 6)) - 1, parseInt(str.substring(6, 8)), 0, 0, 0, 0));\n        }\n        else if (str.length == 4 || str.length == 3) {\n            if (str.length == 3) {\n                str = ("0000" + str).substr(-4, 4);\n            }\n            let today = new Date();\n            today.setUTCHours(parseInt(str.substring(0, 2)), parseInt(str.substring(2, 4)), 0, 0);\n            return today;\n        }\n        return null;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/main.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst { TextIconApplet, AllowedLayout, MenuItem } = imports.ui.applet;\nconst { spawnCommandLine } = imports.misc.util;\nconst { IconType: main_IconType, Side: main_Side } = imports.gi.St;\nclass WeatherApplet extends TextIconApplet {\n    constructor(metadata, orientation, panelHeight, instanceId) {\n        super(orientation, panelHeight, instanceId);\n        this.lock = false;\n        this.refreshTriggeredWhileLocked = false;\n        this.encounteredError = false;\n        this.errMsg = {\n            unknown: _("Error"),\n            "bad api response - non json": _("Service Error"),\n            "bad key": _("Incorrect API Key"),\n            "bad api response": _("Service Error"),\n            "bad location format": _("Incorrect Location Format"),\n            "bad status code": _("Service Error"),\n            "key blocked": _("Key Blocked"),\n            "location not found": _("Can\'t find location"),\n            "no api response": _("Service Error"),\n            "no key": _("No Api Key"),\n            "no location": _("No Location"),\n            "no network response": _("Service Error"),\n            "no response body": _("Service Error"),\n            "no response data": _("Service Error"),\n            "unusual payload": _("Service Error"),\n            "import error": _("Missing Packages"),\n            "location not covered": _("Location not covered"),\n        };\n        this.AppletDir = metadata.path;\n        logger_Log.Instance.Debug("Applet created with instanceID " + instanceId);\n        logger_Log.Instance.Debug("AppletDir is: " + this.AppletDir);\n        this.SetAppletOnPanel();\n        this.config = new Config(this, instanceId);\n        this.AddRefreshButton();\n        this.EnsureProvider();\n        this.ui = new UI(this, orientation);\n        this.ui.Rebuild(this.config);\n        this.loop = new WeatherLoop(this, instanceId);\n        this.orientation = orientation;\n        try {\n            this.setAllowedLayout(AllowedLayout.BOTH);\n        }\n        catch (e) {\n        }\n        this.loop.Start();\n    }\n    get Orientation() {\n        return this.orientation;\n    }\n    Locked() {\n        return this.lock;\n    }\n    RefreshAndRebuild(loc) {\n        this.loop.Resume();\n        if (this.Locked()) {\n            this.refreshTriggeredWhileLocked = true;\n            return;\n        }\n        this.RefreshWeather(true, loc);\n    }\n    ;\n    async RefreshWeather(rebuild, location) {\n        try {\n            if (this.lock) {\n                logger_Log.Instance.Print("Refreshing in progress, refresh skipped.");\n                return "locked";\n            }\n            this.lock = true;\n            this.encounteredError = false;\n            if (!location) {\n                location = await this.config.EnsureLocation();\n                if (!location) {\n                    this.Unlock();\n                    return "error";\n                }\n            }\n            this.EnsureProvider();\n            if (this.provider.needsApiKey && this.config.NoApiKey()) {\n                logger_Log.Instance.Error("No API Key given");\n                this.ShowError({\n                    type: "hard",\n                    userError: true,\n                    detail: "no key",\n                    message: _("This provider requires an API key to operate")\n                });\n                return null;\n            }\n            let weatherInfo = await this.provider.GetWeather(location);\n            if (weatherInfo == null) {\n                this.Unlock();\n                logger_Log.Instance.Error("Could not refresh weather, data could not be obtained.");\n                this.ShowError({\n                    type: "hard",\n                    detail: "no api response",\n                    message: "API did not return data"\n                });\n                return "fail";\n            }\n            weatherInfo = this.MergeWeatherData(weatherInfo, location);\n            this.config.Timezone = weatherInfo.location.timeZone;\n            if (rebuild)\n                this.ui.Rebuild(this.config);\n            if (!this.ui.Display(weatherInfo, this.config, this.provider) ||\n                !this.DisplayWeather(weatherInfo)) {\n                this.Unlock();\n                return "fail";\n            }\n            logger_Log.Instance.Print("Weather Information refreshed");\n            this.loop.ResetErrorCount();\n            this.Unlock();\n            return "success";\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Generic Error while refreshing Weather info: " + e + ", ", e);\n            this.ShowError({ type: "hard", detail: "unknown", message: _("Unexpected Error While Refreshing Weather, please see log in Looking Glass") });\n            this.Unlock();\n            return "fail";\n        }\n    }\n    DisplayWeather(weather) {\n        let location = GenerateLocationText(weather, this.config);\n        let lastUpdatedTime = AwareDateString(weather.date, this.config.currentLocale, this.config._show24Hours);\n        this.SetAppletTooltip(`${location} - ${_("As of {lastUpdatedTime}", { "lastUpdatedTime": lastUpdatedTime })}`);\n        this.DisplayWeatherOnLabel(weather.temperature, weather.condition.description);\n        this.SetAppletIcon(weather.condition.icons, weather.condition.customIcon);\n        return true;\n    }\n    DisplayWeatherOnLabel(temperature, mainCondition) {\n        mainCondition = CapitalizeFirstLetter(mainCondition);\n        let label = "";\n        if (this.Orientation != main_Side.LEFT && this.Orientation != main_Side.RIGHT) {\n            if (this.config._showCommentInPanel) {\n                label += mainCondition;\n            }\n            if (this.config._showTextInPanel) {\n                if (label != "") {\n                    label += " ";\n                }\n                label += TempToUserConfig(temperature, this.config);\n            }\n        }\n        else {\n            if (this.config._showTextInPanel) {\n                label = TempToUserConfig(temperature, this.config, false);\n                if (this.GetPanelHeight() >= 35) {\n                    label += UnitToUnicode(this.config.TemperatureUnit);\n                }\n            }\n        }\n        if (NotEmpty(this.config._tempTextOverride)) {\n            label = this.config._tempTextOverride\n                .replace("{t}", TempToUserConfig(temperature, this.config, false))\n                .replace("{u}", UnitToUnicode(this.config.TemperatureUnit))\n                .replace("{c}", mainCondition);\n        }\n        this.SetAppletLabel(label);\n    }\n    SetAppletTooltip(msg) {\n        this.set_applet_tooltip(msg);\n    }\n    SetAppletIcon(iconNames, customIcon) {\n        if (this.config._useCustomAppletIcons) {\n            this.SetCustomIcon(customIcon);\n        }\n        else {\n            let icon = WeatherIconSafely(iconNames, this.config.AppletIconType);\n            this.config.AppletIconType == main_IconType.SYMBOLIC ?\n                this.set_applet_icon_symbolic_name(icon) :\n                this.set_applet_icon_name(icon);\n        }\n    }\n    SetAppletLabel(label) {\n        this.set_applet_label(label);\n    }\n    GetPanelHeight() {\n        return this.panel.height;\n    }\n    GetMaxForecastDays() {\n        if (!this.provider)\n            return this.config._forecastDays;\n        return Math.min(this.config._forecastDays, this.provider.maxForecastSupport);\n    }\n    GetMaxHourlyForecasts() {\n        if (!this.provider)\n            return this.config._forecastHours;\n        return Math.min(this.config._forecastHours, this.provider.maxHourlyForecastSupport);\n    }\n    async LoadJsonAsync(url, params, HandleError, method = "GET") {\n        let response = await HttpLib.Instance.LoadJsonAsync(url, params, method);\n        if (!response.Success) {\n            if (!!HandleError && !HandleError(response.ErrorData))\n                return null;\n            else {\n                this.HandleHTTPError(response.ErrorData);\n                return null;\n            }\n        }\n        return response.Data;\n    }\n    async LoadAsync(url, params, HandleError, method = "GET") {\n        let response = await HttpLib.Instance.LoadAsync(url, params, method);\n        if (!response.Success) {\n            if (!!HandleError && !HandleError(response.ErrorData))\n                return null;\n            else {\n                this.HandleHTTPError(response.ErrorData);\n                return null;\n            }\n        }\n        return response.Data;\n    }\n    async locationLookup() {\n        let command = "xdg-open ";\n        spawnCommandLine(command + "https://cinnamon-spices.linuxmint.com/applets/view/17");\n    }\n    async submitIssue() {\n        let command = "xdg-open ";\n        spawnCommandLine(command + "https://github.com/linuxmint/cinnamon-spices-applets/issues/new");\n    }\n    async saveCurrentLocation() {\n        this.config.LocStore.SaveCurrentLocation(this.config.CurrentLocation);\n    }\n    on_orientation_changed(orientation) {\n        this.orientation = orientation;\n        this.RefreshWeather(true);\n    }\n    ;\n    on_applet_removed_from_panel(deleteConfig) {\n        logger_Log.Instance.Print("Removing applet instance...");\n        this.loop.Stop();\n    }\n    on_applet_clicked(event) {\n        this.ui.Toggle();\n    }\n    on_applet_middle_clicked(event) {\n    }\n    on_panel_height_changed() {\n    }\n    SetAppletOnPanel() {\n        this.set_applet_icon_name(APPLET_ICON);\n        this.set_applet_label(_("..."));\n        this.set_applet_tooltip(_("Click to open"));\n    }\n    Unlock() {\n        this.lock = false;\n        if (this.refreshTriggeredWhileLocked) {\n            logger_Log.Instance.Print("Refreshing triggered by config change while refreshing, starting now...");\n            this.refreshTriggeredWhileLocked = false;\n            this.RefreshAndRebuild();\n        }\n    }\n    AddRefreshButton() {\n        let itemLabel = _("Refresh");\n        let refreshMenuItem = new MenuItem(itemLabel, REFRESH_ICON, () => this.RefreshAndRebuild());\n        this._applet_context_menu.addMenuItem(refreshMenuItem);\n    }\n    HandleHTTPError(error) {\n        let appletError = {\n            detail: error.message,\n            userError: false,\n            code: error.code,\n            message: this.errMsg[error.message],\n            type: "soft"\n        };\n        switch (error.message) {\n            case "bad status code":\n            case "unknown":\n                appletError.type = "hard";\n        }\n        this.ShowError(appletError);\n    }\n    SetCustomIcon(iconName) {\n        this.set_applet_icon_symbolic_name(iconName);\n    }\n    EnsureProvider(force = false) {\n        var _a;\n        let currentName = (_a = this.provider) === null || _a === void 0 ? void 0 : _a.name;\n        switch (this.config._dataService) {\n            case "DarkSky":\n                if (currentName != "DarkSky" || force)\n                    this.provider = new DarkSky(this);\n                break;\n            case "OpenWeatherMap":\n                if (currentName != "OpenWeatherMap" || force)\n                    this.provider = new OpenWeatherMap(this);\n                break;\n            case "MetNorway":\n                if (currentName != "MetNorway" || force)\n                    this.provider = new MetNorway(this);\n                break;\n            case "Weatherbit":\n                if (currentName != "Weatherbit" || force)\n                    this.provider = new Weatherbit(this);\n                break;\n            case "ClimacellV4":\n                if (currentName != "ClimacellV4" || force)\n                    this.provider = new ClimacellV4(this);\n                break;\n            case "Met Office UK":\n                if (currentName != "Met Office UK" || force)\n                    this.provider = new MetUk(this);\n                break;\n            case "US Weather":\n                if (currentName != "US Weather" || force)\n                    this.provider = new USWeather(this);\n                break;\n            case "Visual Crossing":\n                if (currentName != "Visual Crossing" || force)\n                    this.provider = new VisualCrossing(this);\n                break;\n            case "DanishMI":\n                if (currentName != "DanishMI" || force)\n                    this.provider = new DanishMI(this);\n                break;\n            default:\n                return null;\n        }\n    }\n    MergeWeatherData(weatherInfo, locationData) {\n        if (weatherInfo.location.city == null)\n            weatherInfo.location.city = locationData.city;\n        if (weatherInfo.location.country == null)\n            weatherInfo.location.country = locationData.country;\n        if (weatherInfo.location.timeZone == null)\n            weatherInfo.location.timeZone = locationData.timeZone;\n        if (weatherInfo.coord.lat == null)\n            weatherInfo.coord.lat = locationData.lat;\n        if (weatherInfo.coord.lon == null)\n            weatherInfo.coord.lon = locationData.lon;\n        if (weatherInfo.hourlyForecasts == null)\n            weatherInfo.hourlyForecasts = [];\n        weatherInfo.condition.main = ProcessCondition(weatherInfo.condition.main, this.config._translateCondition);\n        weatherInfo.condition.description = ProcessCondition(weatherInfo.condition.description, this.config._translateCondition);\n        for (let index = 0; index < weatherInfo.forecasts.length; index++) {\n            const condition = weatherInfo.forecasts[index].condition;\n            condition.main = ProcessCondition(condition.main, this.config._translateCondition);\n            condition.description = ProcessCondition(condition.description, this.config._translateCondition);\n        }\n        for (let index = 0; index < weatherInfo.hourlyForecasts.length; index++) {\n            const condition = weatherInfo.hourlyForecasts[index].condition;\n            condition.main = ProcessCondition(condition.main, this.config._translateCondition);\n            condition.description = ProcessCondition(condition.description, this.config._translateCondition);\n        }\n        return weatherInfo;\n    }\n    DisplayHardError(title, msg) {\n        this.set_applet_label(title);\n        this.set_applet_tooltip("Click to open");\n        this.set_applet_icon_name("weather-severe-alert");\n        this.ui.DisplayErrorMessage(msg, "hard");\n    }\n    ;\n    ShowError(error) {\n        if (error == null)\n            return;\n        if (this.encounteredError == true)\n            return;\n        this.encounteredError = true;\n        logger_Log.Instance.Debug("User facing Error received, error: " + JSON.stringify(error, null, 2));\n        if (error.type == "hard") {\n            logger_Log.Instance.Debug("Displaying hard error");\n            this.ui.Rebuild(this.config);\n            this.DisplayHardError(this.errMsg[error.detail], (!error.message) ? "" : error.message);\n        }\n        if (error.type == "soft") {\n            if (this.loop.IsDataTooOld()) {\n                this.set_applet_tooltip("Click to open");\n                this.set_applet_icon_name("weather-severe-alert");\n                this.ui.DisplayErrorMessage(_("Could not update weather for a while...\\nare you connected to the internet?"), "soft");\n            }\n        }\n        if (error.userError) {\n            this.loop.Pause();\n            return;\n        }\n        let nextRefresh = this.loop.GetSecondsUntilNextRefresh();\n        logger_Log.Instance.Error("Retrying in the next " + nextRefresh.toString() + " seconds...");\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/applet.ts\n\n\n\nfunction main(metadata, orientation, panelHeight, instanceId) {\n    imports.gettext.bindtextdomain(UUID, imports.gi.GLib.get_home_dir() + "/.local/share/locale");\n    imports.gi.Gtk.IconTheme.get_default().append_search_path(metadata.path + "/../icons");\n    imports.gi.Gtk.IconTheme.get_default().append_search_path(metadata.path + "/../arrow-icons");\n    logger_Log.Instance.UpdateInstanceID(instanceId);\n    return new WeatherApplet(metadata, orientation, panelHeight, instanceId);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC9jb25zdHMudHM/MDZmMyIsIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC9saWIvbG9nZ2VyLnRzP2U2Y2UiLCJ3ZWJwYWNrOi8vd2VhdGhlckFwcGxldC8uL3NyYy8zXzgvdXRpbHMudHM/ZmQwZSIsIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC9sb2NhdGlvbl9zZXJ2aWNlcy9pcEFwaS50cz9iNTI3Iiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L2xpYi9ldmVudHMudHM/ZjA4ZCIsIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC9saWIvbm90aWZpY2F0aW9uX3NlcnZpY2UudHM/NGQ0YSIsIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC9sb2NhdGlvbl9zZXJ2aWNlcy9sb2NhdGlvbnN0b3JlLnRzPzEwMTkiLCJ3ZWJwYWNrOi8vd2VhdGhlckFwcGxldC8uL3NyYy8zXzgvbG9jYXRpb25fc2VydmljZXMvbm9taW5hdGltLnRzPzc0ZGEiLCJ3ZWJwYWNrOi8vd2VhdGhlckFwcGxldC8uL3NyYy8zXzgvY29uZmlnLnRzPzY4ZWYiLCJ3ZWJwYWNrOi8vd2VhdGhlckFwcGxldC8uL3NyYy8zXzgvbG9vcC50cz85MDYwIiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L2xpYi9zdW5DYWxjLnRzPzcwY2QiLCJ3ZWJwYWNrOi8vd2VhdGhlckFwcGxldC8uL3NyYy8zXzgvcHJvdmlkZXJzL21ldF91ay50cz8yZWQ4Iiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L2xpYi9jb21tYW5kUnVubmVyLnRzPzNhZjYiLCJ3ZWJwYWNrOi8vd2VhdGhlckFwcGxldC8uL3NyYy8zXzgvdWlfZWxlbWVudHMvd2VhdGhlcmJ1dHRvbi50cz8wZjBiIiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L3VpX2VsZW1lbnRzL3VpQ3VycmVudFdlYXRoZXIudHM/MTc0MSIsIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC91aV9lbGVtZW50cy91aUZvcmVjYXN0cy50cz9lZTc5Iiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L3VpX2VsZW1lbnRzL3VpSG91cmx5Rm9yZWNhc3RzLnRzP2Q1MDQiLCJ3ZWJwYWNrOi8vd2VhdGhlckFwcGxldC8uL3NyYy8zXzgvdWlfZWxlbWVudHMvdWlCYXIudHM/NzMwOSIsIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC91aV9lbGVtZW50cy91aVNlcGFyYXRvci50cz85NWEzIiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L3VpLnRzP2ZiMDIiLCJ3ZWJwYWNrOi8vd2VhdGhlckFwcGxldC8uL3NyYy8zXzgvcHJvdmlkZXJzL2RhcmtTa3kudHM/ZTcxMSIsIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC9wcm92aWRlcnMvb3BlbldlYXRoZXJNYXAudHM/YjI3NCIsIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC9wcm92aWRlcnMvdXNfd2VhdGhlci50cz8zNDU0Iiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L3Byb3ZpZGVycy93ZWF0aGVyYml0LnRzP2RmYTYiLCJ3ZWJwYWNrOi8vd2VhdGhlckFwcGxldC8uL3NyYy8zXzgvcHJvdmlkZXJzL21ldF9ub3J3YXkudHM/MzljYyIsIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC9saWIvaHR0cExpYi50cz83YzA0Iiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L3Byb3ZpZGVycy92aXN1YWxjcm9zc2luZy50cz8wYjk2Iiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L3Byb3ZpZGVycy9jbGltYWNlbGxWNC50cz82YmFkIiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L3Byb3ZpZGVycy9kYW5pc2hNSS50cz9lMmUzIiwid2VicGFjazovL3dlYXRoZXJBcHBsZXQvLi9zcmMvM184L21haW4udHM/MDAyMiIsIndlYnBhY2s6Ly93ZWF0aGVyQXBwbGV0Ly4vc3JjLzNfOC9hcHBsZXQudHM/MmFmYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBTyxNQUFNLElBQUksR0FBRyxtQkFBbUI7QUFHaEMsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDO0FBRW5DLE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQztBQUVqQyxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7QUFHakMsTUFBTSxXQUFXLEdBQUcsdUJBQXVCLENBQUM7QUFFNUMsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDO0FBR3BDLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQztBQUVwQixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFFdkIsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDO0FBRXpCLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQzs7O0FDckJMO0FBRTFCLE1BQU0sVUFBRztJQWdCZixZQUFvQixXQUFvQjtRQUpoQyxVQUFLLEdBQVksS0FBSyxDQUFDO1FBQ3ZCLFVBQUssR0FBRyxDQUFDLENBQUM7UUFJakIsSUFBSSxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ2hFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFmTSxNQUFNLEtBQUssUUFBUTtRQUN6QixJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSTtZQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksVUFBRyxFQUFFLENBQUM7UUFDM0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lB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QUM7QUFDOUUsU0FBUyxNQUFNLENBQUMsSUFBVSxJQUFJLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFLOUQsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQztBQUV0QixTQUFTLGNBQWMsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxJQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekcsU0FBUyxXQUFXLENBQUMsQ0FBUyxFQUFFLENBQVMsSUFBSSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXZHLFNBQVMsT0FBTyxDQUFDLENBQVMsRUFBRSxHQUFXLEVBQUUsR0FBVyxJQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkgsU0FBUyxRQUFRLENBQUMsQ0FBUyxFQUFFLEdBQVcsRUFBRSxHQUFXLElBQUksT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxD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QUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxzQkFBc0IsQ0FBQyxDQUFDO0lBRTlGLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZGLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDLENBQUM7SUFFN0Ysb0NBQTZCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFMUMsT0FBTyxJQUFJLGFBQWEsQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMxRSxDQUFDIiwiZmlsZSI6IjU5MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBVVUlEID0gXCJ3ZWF0aGVyQG1vY2t0dXJ0bFwiXG5cbi8qKiBTaWduYWwgc3RyaW5nIHRvIHByZXBlbmQga2V5cyAqL1xuZXhwb3J0IGNvbnN0IFNJR05BTF9DSEFOR0VEID0gJ2NoYW5nZWQ6Oic7XG4vKiogU2lnbmFsIHN0cmluZyB0byBwcmVwZW5kIGtleXMgKi9cbmV4cG9ydCBjb25zdCBTSUdOQUxfQ0xJQ0tFRCA9ICdjbGlja2VkJztcbi8qKiBTaWduYWwgc3RyaW5nIHRvIHByZXBlbmQga2V5cyAqL1xuZXhwb3J0IGNvbnN0IFNJR05BTF9SRVBBSU5UID0gJ3JlcGFpbnQnO1xuXG4vKiogRGVmYXVsdCBhcHBsZXQgaWNvbiAqL1xuZXhwb3J0IGNvbnN0IEFQUExFVF9JQ09OID0gXCJ2aWV3LXJlZnJlc2gtc3ltYm9saWNcIjtcbi8qKiBSZWZyZXNoIGljb24gbmFtZSAqL1xuZXhwb3J0IGNvbnN0IFJFRlJFU0hfSUNPTiA9IFwidmlldy1yZWZyZXNoXCI7XG5cbi8qKiBCbGFuayBtYWdpYyBzdHJpbmcgKi9cbmV4cG9ydCBjb25zdCBCTEFOSyA9ICcgICAnO1xuLyoqIEVsbGlwc2lzIG1hZ2ljIHN0cmluZyAqL1xuZXhwb3J0IGNvbnN0IEVMTElQU0lTID0gJy4uLic7XG4vKiogRW4gZGFzaCBtYWdpYyBzdHJpbmcgKi9cbmV4cG9ydCBjb25zdCBFTl9EQVNIID0gJ1xcdTIwMTMnO1xuLyoqIEZvcndhcmQgc2xhc2ggbWFnaWMgc3RyaW5nICovXG5leHBvcnQgY29uc3QgRk9SV0FSRF9TTEFTSCA9ICdcXHUwMDJGJzsiLCJpbXBvcnQgeyBVVUlEIH0gZnJvbSBcIi4uL2NvbnN0c1wiO1xuXG5leHBvcnQgY2xhc3MgTG9nIHtcblx0Ly8gU3RhdGljIHByb3BlcnRpZXNcblxuXHRwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogTG9nID0gbnVsbDtcblx0LyoqIFNpbmdsZSBpbnN0YW5jZSBvZiBsb2cgKi9cblx0cHVibGljIHN0YXRpYyBnZXQgSW5zdGFuY2UoKSB7XG5cdFx0aWYgKHRoaXMuaW5zdGFuY2UgPT0gbnVsbClcblx0XHRcdHRoaXMuaW5zdGFuY2UgPSBuZXcgTG9nKCk7XG5cdFx0cmV0dXJuIHRoaXMuaW5zdGFuY2U7XG5cdH1cblxuXHRwcml2YXRlIElEOiBudW1iZXI7XG5cdHByaXZhdGUgZGVidWc6IGJvb2xlYW4gPSBmYWxzZTtcblx0cHJpdmF0ZSBsZXZlbCA9IDE7XG5cdHByaXZhdGUgYXBwbGV0RGlyOiBzdHJpbmc7XG5cblx0cHJpdmF0ZSBjb25zdHJ1Y3RvcihfaW5zdGFuY2VJZD86IG51bWJlcikge1xuXHRcdHRoaXMuSUQgPSBfaW5zdGFuY2VJZDtcblx0XHR0aGlzLmFwcGxldERpciA9IGltcG9ydHMudWkuYXBwbGV0TWFuYWdlci5hcHBsZXRNZXRhW1VVSURdLnBhdGg7XG5cdFx0dGhpcy5kZWJ1ZyA9IHRoaXMuREVCVUcoKTtcblx0fVxuXG5cdHByaXZhdGUgREVCVUcoKTogYm9vbGVhbiB7XG5cdFx0bGV0IHBhdGggPSB0aGlzLmFwcGxldERpciArIFwiLy4uL0RFQlVHXCI7XG5cdFx0bGV0IF9kZWJ1ZyA9IGltcG9ydHMuZ2kuR2lvLmZpbGVfbmV3X2Zvcl9wYXRoKHBhdGgpO1xuXHRcdGxldCByZXN1bHQgPSBfZGVidWcucXVlcnlfZXhpc3RzKG51bGwpO1xuXHRcdGlmIChyZXN1bHQpIHRoaXMuUHJpbnQoXCJERUJVRyBmaWxlIGZvdW5kIGluIFwiICsgcGF0aCArIFwiLCBlbmFibGluZyBEZWJ1ZyBtb2RlXCIpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0UHJpbnQobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0bGV0IG1zZyA9IFwiW1wiICsgVVVJRCArIFwiI1wiICsgdGhpcy5JRCArIFwiXTogXCIgKyBtZXNzYWdlLnRvU3RyaW5nKCk7XG5cdFx0Z2xvYmFsLmxvZyhtc2cpO1xuXHR9XG5cblx0RXJyb3IoZXJyb3I6IHN0cmluZywgZT86IEVycm9yKTogdm9pZCB7XG5cdFx0Z2xvYmFsLmxvZ0Vycm9yKFwiW1wiICsgVVVJRCArIFwiI1wiICsgdGhpcy5JRCArIFwiXTogXCIgKyBlcnJvci50b1N0cmluZygpKTtcblx0XHRpZiAoZSAhPSBudWxsKVxuXHRcdFx0Z2xvYmFsLmxvZ0Vycm9yKGUuc3RhY2spO1xuXHR9O1xuXG5cdERlYnVnKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmRlYnVnKSB7XG5cdFx0XHR0aGlzLlByaW50KG1lc3NhZ2UpO1xuXHRcdH1cblx0fVxuXG5cdERlYnVnMihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyAmJiB0aGlzLmxldmVsID4gMSkge1xuXHRcdFx0dGhpcy5QcmludChtZXNzYWdlKTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgVXBkYXRlSW5zdGFuY2VJRChpbnN0YW5jZUlEOiBudW1iZXIpOiB2b2lkIHtcblx0XHR0aGlzLklEID0gaW5zdGFuY2VJRDtcblx0fVxufSIsImltcG9ydCB7IFdlYXRoZXJXaW5kU3BlZWRVbml0cywgV2VhdGhlclVuaXRzLCBXZWF0aGVyUHJlc3N1cmVVbml0cywgRGlzdGFuY2VVbml0cywgQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBFTExJUFNJUywgRk9SV0FSRF9TTEFTSCwgVVVJRCB9IGZyb20gXCIuL2NvbnN0c1wiO1xuaW1wb3J0IHsgU3VuVGltZXMgfSBmcm9tIFwiLi9saWIvc3VuQ2FsY1wiO1xuaW1wb3J0IHsgQXJyb3dJY29ucywgQnVpbHRpbkljb25zLCBXZWF0aGVyRGF0YSB9IGZyb20gXCIuL3R5cGVzXCI7XG5jb25zdCB7IHRpbWVvdXRfYWRkLCBzb3VyY2VfcmVtb3ZlIH0gPSBpbXBvcnRzLm1haW5sb29wO1xuY29uc3QgeyBJY29uVHlwZSB9ID0gaW1wb3J0cy5naS5TdDtcbmNvbnN0IHsgSWNvblRoZW1lIH0gPSBpbXBvcnRzLmdpLkd0aztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRleHQgR2VuZXJhdG9yc1xuXG5leHBvcnQgZnVuY3Rpb24gXyhzdHI6IHN0cmluZywgYXJncz86IEtleXNWYWx1ZVBhaXJzKTogc3RyaW5nIHtcblx0bGV0IHJlc3VsdCA9IGltcG9ydHMuZ2V0dGV4dC5kZ2V0dGV4dChVVUlELCBzdHIpO1xuXG5cdGlmIChyZXN1bHQgPT09IHN0ciAmJiByZXN1bHQgPT09IFwiXCIpXG5cdFx0cmVzdWx0ID0gaW1wb3J0cy5nZXR0ZXh0LmdldHRleHQoc3RyKTtcblxuXHRpZiAoISFhcmdzKVxuXHRcdHJlc3VsdCA9IGZvcm1hdChyZXN1bHQsIGFyZ3MpO1xuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5pbnRlcmZhY2UgS2V5c1ZhbHVlUGFpcnMge1xuXHRba2V5OiBzdHJpbmddOiBhbnlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdChzdHI6IHN0cmluZywgYXJnczogS2V5c1ZhbHVlUGFpcnMpIHtcblx0Zm9yIChsZXQga2V5IGluIGFyZ3MpIHtcblx0XHRzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXHtcIiArIGtleSArIFwiXFxcXH1cIiksIGFyZ3Nba2V5XSk7XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFVuaXRUb1VuaWNvZGUodW5pdDogV2VhdGhlclVuaXRzKTogc3RyaW5nIHtcblx0cmV0dXJuIHVuaXQgPT0gXCJmYWhyZW5oZWl0XCIgPyAnXFx1MjEwOScgOiAnXFx1MjEwMydcbn1cblxuLyoqIEdlbmVyYXRlcyB0ZXh0IGZvciB0aGUgTG9jYXRpb25CdXR0b24gb24gdG8gb2YgdGhlIHBvcHVwIG1lbnUgYW5kIHRvb2x0aXAgKi9cbmV4cG9ydCBmdW5jdGlvbiBHZW5lcmF0ZUxvY2F0aW9uVGV4dCh3ZWF0aGVyOiBXZWF0aGVyRGF0YSwgY29uZmlnOiBDb25maWcpIHtcblx0bGV0IGxvY2F0aW9uID0gXCJcIjtcblx0aWYgKHdlYXRoZXIubG9jYXRpb24uY2l0eSAhPSBudWxsICYmIHdlYXRoZXIubG9jYXRpb24uY291bnRyeSAhPSBudWxsKSB7XG5cdFx0bG9jYXRpb24gPSB3ZWF0aGVyLmxvY2F0aW9uLmNpdHkgKyBcIiwgXCIgKyB3ZWF0aGVyLmxvY2F0aW9uLmNvdW50cnk7XG5cdH0gZWxzZSB7XG5cdFx0bG9jYXRpb24gPSBNYXRoLnJvdW5kKHdlYXRoZXIuY29vcmQubGF0ICogMTAwMDApIC8gMTAwMDAgKyBcIiwgXCIgKyBNYXRoLnJvdW5kKHdlYXRoZXIuY29vcmQubG9uICogMTAwMDApIC8gMTAwMDA7XG5cdH1cblxuXHQvLyBPdmVycmlkaW5nIExvY2F0aW9uXG5cdGlmIChOb3RFbXB0eShjb25maWcuX2xvY2F0aW9uTGFiZWxPdmVycmlkZSkpIHtcblx0XHRsb2NhdGlvbiA9IGNvbmZpZy5fbG9jYXRpb25MYWJlbE92ZXJyaWRlO1xuXHR9XG5cblx0cmV0dXJuIGxvY2F0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGRlc2NyaXB0aW9uOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRpZiAoKGRlc2NyaXB0aW9uID09IHVuZGVmaW5lZCB8fCBkZXNjcmlwdGlvbiA9PSBudWxsKSkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cdHJldHVybiBkZXNjcmlwdGlvbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGRlc2NyaXB0aW9uLnNsaWNlKDEpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIENhcGl0YWxpemVFdmVyeVdvcmQoZGVzY3JpcHRpb246IHN0cmluZyk6IHN0cmluZyB7XG5cdGlmICgoZGVzY3JpcHRpb24gPT0gdW5kZWZpbmVkIHx8IGRlc2NyaXB0aW9uID09IG51bGwpKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblx0bGV0IHNwbGl0ID0gZGVzY3JpcHRpb24uc3BsaXQoXCIgXCIpO1xuXHRsZXQgcmVzdWx0ID0gXCJcIjtcblx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHNwbGl0Lmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdGNvbnN0IGVsZW1lbnQgPSBzcGxpdFtpbmRleF07XG5cdFx0cmVzdWx0ICs9IENhcGl0YWxpemVGaXJzdExldHRlcihlbGVtZW50KTtcblx0XHRpZiAoaW5kZXggIT0gc3BsaXQubGVuZ3RoIC0gMSlcblx0XHRcdHJlc3VsdCArPSBcIiBcIjtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRpbWVTdHJpbmcgZ2VuZXJhdG9yc1xuXG5mdW5jdGlvbiBOb3JtYWxpemVUaW1lem9uZSh0ejogc3RyaW5nKSB7XG5cdGlmICghdHogfHwgdHogPT0gXCJcIiB8fCB0eiA9PSBcIlVUQ1wiKVxuXHRcdHR6ID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gdHo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXREYXlOYW1lKGRhdGU6IERhdGUsIGxvY2FsZTogc3RyaW5nLCBzaG93RGF0ZTogYm9vbGVhbiA9IGZhbHNlLCB0ej86IHN0cmluZyk6IHN0cmluZyB7XG5cdGxldCBwYXJhbXM6IEludGwuRGF0ZVRpbWVGb3JtYXRPcHRpb25zID0ge1xuXHRcdHdlZWtkYXk6IFwibG9uZ1wiLFxuXHRcdHRpbWVab25lOiB0elxuXHR9XG5cblx0cGFyYW1zLnRpbWVab25lID0gTm9ybWFsaXplVGltZXpvbmUodHopO1xuXG5cdGlmIChzaG93RGF0ZSkge1xuXHRcdHBhcmFtcy5kYXkgPSAnbnVtZXJpYyc7XG5cdH1cblxuXG5cdGxldCBub3cgPSBuZXcgRGF0ZSgpO1xuXHRsZXQgdG9tb3Jyb3cgPSBuZXcgRGF0ZSgpO1xuXHR0b21vcnJvdy5zZXREYXRlKG5vdy5nZXREYXRlKCkgKyAxKTtcblx0Ly8gdG9kYXkgb3IgdG9tb3Jyb3csIG5vIG5lZWQgdG8gaW5jbHVkZSBkYXRlXG5cdGlmIChkYXRlLmdldERhdGUoKSA9PSBub3cuZ2V0RGF0ZSgpIHx8IGRhdGUuZ2V0RGF0ZSgpID09IHRvbW9ycm93LmdldERhdGUoKSlcblx0XHRkZWxldGUgcGFyYW1zLndlZWtkYXk7XG5cblx0bGV0IGRhdGVTdHJpbmcgPSBkYXRlLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwgcGFyYW1zKTtcblxuXHQvLyBNYWtlIHN1cmUgRnJlbmNoIGRheXMgYXJlIGNhYXBpdGFsaXNlZCAodGhleSBhcmUgbm90IGJ5IGRlZmF1bHQpXG5cdGlmIChsb2NhbGUuc3RhcnRzV2l0aChcImZyXCIpKVxuXHRcdGRhdGVTdHJpbmcgPSBDYXBpdGFsaXplRmlyc3RMZXR0ZXIoZGF0ZVN0cmluZyk7XG5cblx0aWYgKGRhdGUuZ2V0RGF0ZSgpID09IG5vdy5nZXREYXRlKCkpIGRhdGVTdHJpbmcgPSBfKFwiVG9kYXlcIik7XG5cdGlmIChkYXRlLmdldERhdGUoKSA9PSB0b21vcnJvdy5nZXREYXRlKCkpIGRhdGVTdHJpbmcgPSBfKFwiVG9tb3Jyb3dcIik7XG5cblx0cmV0dXJuIGRhdGVTdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXRIb3Vyc01pbnV0ZXMoZGF0ZTogRGF0ZSwgbG9jYWxlOiBzdHJpbmcsIGhvdXJzMjRGb3JtYXQ6IGJvb2xlYW4sIHR6Pzogc3RyaW5nLCBvbmx5SG91cnM6IGJvb2xlYW4gPSBmYWxzZSk6IHN0cmluZyB7XG5cdGxldCBwYXJhbXM6IEludGwuRGF0ZVRpbWVGb3JtYXRPcHRpb25zID0ge1xuXHRcdGhvdXI6IFwibnVtZXJpY1wiLFxuXHRcdGhvdXIxMjogIWhvdXJzMjRGb3JtYXQsXG5cdFx0dGltZVpvbmU6IHR6XG5cdH1cblxuXHRwYXJhbXMudGltZVpvbmUgPSBOb3JtYWxpemVUaW1lem9uZSh0eik7XG5cblx0aWYgKCFvbmx5SG91cnMpXG5cdFx0cGFyYW1zLm1pbnV0ZSA9IFwiMi1kaWdpdFwiO1xuXG5cdHJldHVybiBkYXRlLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwgcGFyYW1zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEF3YXJlRGF0ZVN0cmluZyhkYXRlOiBEYXRlLCBsb2NhbGU6IHN0cmluZywgaG91cnMyNEZvcm1hdDogYm9vbGVhbiwgdHo/OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRsZXQgbm93ID0gbmV3IERhdGUoKTtcblx0bGV0IHBhcmFtczogSW50bC5EYXRlVGltZUZvcm1hdE9wdGlvbnMgPSB7XG5cdFx0aG91cjogXCJudW1lcmljXCIsXG5cdFx0bWludXRlOiBcIjItZGlnaXRcIixcblx0XHRob3VyMTI6ICFob3VyczI0Rm9ybWF0LFxuXHRcdHRpbWVab25lOiB0elxuXHR9O1xuXG5cdGlmIChkYXRlLnRvRGF0ZVN0cmluZygpICE9IG5vdy50b0RhdGVTdHJpbmcoKSkge1xuXHRcdHBhcmFtcy5tb250aCA9IFwic2hvcnRcIjtcblx0XHRwYXJhbXMuZGF5ID0gXCJudW1lcmljXCI7XG5cdH1cblxuXHRpZiAoZGF0ZS5nZXRGdWxsWWVhcigpICE9IG5vdy5nZXRGdWxsWWVhcigpKSB7XG5cdFx0cGFyYW1zLnllYXIgPSBcIm51bWVyaWNcIjtcblx0fVxuXG5cdHBhcmFtcy50aW1lWm9uZSA9IE5vcm1hbGl6ZVRpbWV6b25lKHR6KTtcblxuXHRyZXR1cm4gZGF0ZS50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHBhcmFtcyk7XG59XG4vKipcbiAqIFxuICogQHBhcmFtIGRhdGUgXG4gKiBAcmV0dXJucyBudW1iZXIgaW4gZm9ybWF0IEhITU0sIGNhbiBiZSBjb21wYXJlZCBkaXJlY3RseVxuICovXG5leHBvcnQgZnVuY3Rpb24gTWlsaXRhcnlUaW1lKGRhdGU6IERhdGUpOiBudW1iZXIge1xuXHRyZXR1cm4gZGF0ZS5nZXRIb3VycygpICogMTAwICsgZGF0ZS5nZXRNaW51dGVzKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBZGRIb3VycyhkYXRlOiBEYXRlLCBob3VyczogbnVtYmVyKTogRGF0ZSB7XG5cdGxldCByZXN1bHQgPSBuZXcgRGF0ZShkYXRlKTtcblx0cmVzdWx0LnNldEhvdXJzKHJlc3VsdC5nZXRIb3VycygpICsgaG91cnMpO1xuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gT25TYW1lRGF5KGRhdGUxOiBEYXRlLCBkYXRlMjogRGF0ZSwgY29uZmlnOiBDb25maWcpOiBib29sZWFuIHtcblx0Ly9pZiAoIWNvbmZpZy5UaW1lem9uZSlcblx0XHRyZXR1cm4gZGF0ZTEudG9EYXRlU3RyaW5nKCkgPT0gZGF0ZTIudG9EYXRlU3RyaW5nKCk7XG5cdC8vZWxzZVxuXHRcdC8vVE9ETzogVGhpcyBicmVha3MgY2lubmFtb24gZm9yIHNvbWUgcmVhc29uLCBpbnZlc3RpZ2F0ZSB3aHkuXG5cdFx0Ly9yZXR1cm4gZGF0ZTEudG9Mb2NhbGVEYXRlU3RyaW5nKGNvbmZpZy5jdXJyZW50TG9jYWxlLCB7dGltZVpvbmU6IGNvbmZpZy5UaW1lem9uZX0pID09IGRhdGUyLnRvTG9jYWxlRGF0ZVN0cmluZyhjb25maWcuY3VycmVudExvY2FsZSwge3RpbWVab25lOiBjb25maWcuVGltZXpvbmV9KTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUbyBVc2VyQ29uZmlnIGNvbnZlcnRlcnNcblxuLyoqIENhcGl0YWxpemVzIGZpcnN0IGxldHRlciBhbmQgdHJhbnNsYXRlcyBpZiBuZWVkZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBQcm9jZXNzQ29uZGl0aW9uKGNvbmRpdGlvbjogc3RyaW5nLCBzaG91bGRUcmFuc2xhdGU6IGJvb2xlYW4pIHtcblx0aWYgKGNvbmRpdGlvbiA9PSBudWxsKSByZXR1cm4gbnVsbDtcblxuXHRjb25kaXRpb24gPSBDYXBpdGFsaXplRmlyc3RMZXR0ZXIoY29uZGl0aW9uKTtcblx0aWYgKHNob3VsZFRyYW5zbGF0ZSlcblx0XHRjb25kaXRpb24gPSBfKGNvbmRpdGlvbik7XG5cdHJldHVybiBjb25kaXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMb2NhbGl6ZWRDb2xvbihsb2NhbGU6IHN0cmluZyk6IHN0cmluZyB7XG5cdGlmIChsb2NhbGUgPT0gbnVsbClcblx0XHRyZXR1cm4gXCI6XCJcblxuXHRpZiAobG9jYWxlLnN0YXJ0c1dpdGgoXCJmclwiKSlcblx0XHRyZXR1cm4gXCIgOlwiXG5cblx0cmV0dXJuIFwiOlwiXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQcmVjZW50VG9Mb2NhbGUoaHVtaWRpdHk6IG51bWJlciwgbG9jYWxlOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRyZXR1cm4gKGh1bWlkaXR5IC8gMTAwKS50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHsgc3R5bGU6IFwicGVyY2VudFwiIH0pO1xufVxuXG4vLyBDb252ZXJzaW9uIEZhY3RvcnNcbmNvbnN0IFdFQVRIRVJfQ09OVl9NUEhfSU5fTVBTID0gMi4yMzY5MzYyOVxuY29uc3QgV0VBVEhFUl9DT05WX0tQSF9JTl9NUFMgPSAzLjZcbmNvbnN0IFdFQVRIRVJfQ09OVl9LTk9UU19JTl9NUFMgPSAxLjk0Mzg0NDQ5XG5cbmV4cG9ydCBmdW5jdGlvbiBNUFN0b1VzZXJVbml0cyhtcHM6IG51bWJlciwgdW5pdHM6IFdlYXRoZXJXaW5kU3BlZWRVbml0cyk6IHN0cmluZyB7XG5cdGlmIChtcHMgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cdC8vIE92ZXJyaWRlIHdpbmQgdW5pdHMgd2l0aCBvdXIgcHJlZmVyZW5jZSwgdGFrZXMgTWV0ZXIvU2Vjb25kIHdpbmQgc3BlZWRcblx0c3dpdGNoICh1bml0cykge1xuXHRcdGNhc2UgXCJtcGhcIjpcblx0XHRcdC8vUm91bmRpbmcgdG8gMSBkZWNpbWFsXG5cdFx0XHRyZXR1cm4gKE1hdGgucm91bmQoKG1wcyAqIFdFQVRIRVJfQ09OVl9NUEhfSU5fTVBTKSAqIDEwKSAvIDEwKS50b1N0cmluZygpO1xuXHRcdGNhc2UgXCJrcGhcIjpcblx0XHRcdC8vUm91bmRpbmcgdG8gMSBkZWNpbWFsXG5cdFx0XHRyZXR1cm4gKE1hdGgucm91bmQoKG1wcyAqIFdFQVRIRVJfQ09OVl9LUEhfSU5fTVBTKSAqIDEwKSAvIDEwKS50b1N0cmluZygpO1xuXHRcdGNhc2UgXCJtL3NcIjpcblx0XHRcdC8vIFJvdW5kaW5nIHRvIDEgZGVjaW1hbCBqdXN0IGluIGNhc2UgQVBJIGRvZXMgbm90IHJldHVybiBpdCBpbiB0aGUgc2FtZSBmb3JtYXRcblx0XHRcdHJldHVybiAoTWF0aC5yb3VuZChtcHMgKiAxMCkgLyAxMCkudG9TdHJpbmcoKTtcblx0XHRjYXNlIFwiS25vdHNcIjpcblx0XHRcdC8vUm91bmRpbmcgdG8gd2hvbGUgdW5pdHNcblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKG1wcyAqIFdFQVRIRVJfQ09OVl9LTk9UU19JTl9NUFMpLnRvU3RyaW5nKCk7XG5cdFx0Y2FzZSBcIkJlYXVmb3J0XCI6XG5cdFx0XHQvL2h0dHBzOi8vZW4ubS53aWtpcGVkaWEub3JnL3dpa2kvQmVhdWZvcnRfc2NhbGVcblx0XHRcdGlmIChtcHMgPCAwLjUpIHtcblx0XHRcdFx0cmV0dXJuIFwiMCAoXCIgKyBfKFwiQ2FsbVwiKSArIFwiKVwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1wcyA8IDEuNSkge1xuXHRcdFx0XHRyZXR1cm4gXCIxIChcIiArIF8oXCJMaWdodCBhaXJcIikgKyBcIilcIjtcblx0XHRcdH1cblx0XHRcdGlmIChtcHMgPCAzLjMpIHtcblx0XHRcdFx0cmV0dXJuIFwiMiAoXCIgKyBfKFwiTGlnaHQgYnJlZXplXCIpICsgXCIpXCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAobXBzIDwgNS41KSB7XG5cdFx0XHRcdHJldHVybiBcIjMgKFwiICsgXyhcIkdlbnRsZSBicmVlemVcIikgKyBcIilcIjtcblx0XHRcdH1cblx0XHRcdGlmIChtcHMgPCA3LjkpIHtcblx0XHRcdFx0cmV0dXJuIFwiNCAoXCIgKyBfKFwiTW9kZXJhdGUgYnJlZXplXCIpICsgXCIpXCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAobXBzIDwgMTAuNykge1xuXHRcdFx0XHRyZXR1cm4gXCI1IChcIiArIF8oXCJGcmVzaCBicmVlemVcIikgKyBcIilcIjtcblx0XHRcdH1cblx0XHRcdGlmIChtcHMgPCAxMy44KSB7XG5cdFx0XHRcdHJldHVybiBcIjYgKFwiICsgXyhcIlN0cm9uZyBicmVlemVcIikgKyBcIilcIjtcblx0XHRcdH1cblx0XHRcdGlmIChtcHMgPCAxNy4xKSB7XG5cdFx0XHRcdHJldHVybiBcIjcgKFwiICsgXyhcIk5lYXIgZ2FsZVwiKSArIFwiKVwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1wcyA8IDIwLjcpIHtcblx0XHRcdFx0cmV0dXJuIFwiOCAoXCIgKyBfKFwiR2FsZVwiKSArIFwiKVwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1wcyA8IDI0LjQpIHtcblx0XHRcdFx0cmV0dXJuIFwiOSAoXCIgKyBfKFwiU3Ryb25nIGdhbGVcIikgKyBcIilcIjtcblx0XHRcdH1cblx0XHRcdGlmIChtcHMgPCAyOC40KSB7XG5cdFx0XHRcdHJldHVybiBcIjEwIChcIiArIF8oXCJTdG9ybVwiKSArIFwiKVwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1wcyA8IDMyLjYpIHtcblx0XHRcdFx0cmV0dXJuIFwiMTEgKFwiICsgXyhcIlZpb2xlbnQgc3Rvcm1cIikgKyBcIilcIjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBcIjEyIChcIiArIF8oXCJIdXJyaWNhbmVcIikgKyBcIilcIjtcblx0fVxufVxuXG4vLyBDb252ZXJzaW9uIGZyb20gS2VsdmluXG5leHBvcnQgZnVuY3Rpb24gVGVtcFRvVXNlckNvbmZpZyhrZWx2aW46IG51bWJlciwgY29uZmlnOiBDb25maWcsIHdpdGhVbml0OiBib29sZWFuID0gdHJ1ZSk6IHN0cmluZyB7XG5cdGlmIChrZWx2aW4gPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cblx0bGV0IHRlbXA6IG51bWJlciB8IHN0cmluZyA9IChjb25maWcuVGVtcGVyYXR1cmVVbml0ID09IFwiY2Vsc2l1c1wiKSA/IEtlbHZpblRvQ2Vsc2l1cyhrZWx2aW4pIDogS2VsdmluVG9GYWhyZW5oZWl0KGtlbHZpbik7XG5cdHRlbXAgPSBSdXNzaWFuVHJhbnNmb3JtKHRlbXAsIGNvbmZpZy5fdGVtcFJ1c3NpYW5TdHlsZSk7XG5cblx0aWYgKHdpdGhVbml0KVxuXHRcdHRlbXAgPSBgJHt0ZW1wfSAke1VuaXRUb1VuaWNvZGUoY29uZmlnLlRlbXBlcmF0dXJlVW5pdCl9YDtcblxuXHRpZiAoY29uZmlnLl9zaG93Qm90aFRlbXBVbml0cykge1xuXHRcdGxldCBzZWNvbmRVbml0OiBXZWF0aGVyVW5pdHMgPSAoY29uZmlnLlRlbXBlcmF0dXJlVW5pdCA9PSBcImNlbHNpdXNcIikgPyBcImZhaHJlbmhlaXRcIiA6IFwiY2Vsc2l1c1wiO1xuXHRcdGxldCBzZWNvbmRUZW1wOiBudW1iZXIgfCBzdHJpbmcgPSAoY29uZmlnLlRlbXBlcmF0dXJlVW5pdCA9PSBcImNlbHNpdXNcIikgPyBLZWx2aW5Ub0ZhaHJlbmhlaXQoa2VsdmluKSA6IEtlbHZpblRvQ2Vsc2l1cyhrZWx2aW4pO1xuXHRcdHNlY29uZFRlbXAgPSBSdXNzaWFuVHJhbnNmb3JtKHNlY29uZFRlbXAsIGNvbmZpZy5fdGVtcFJ1c3NpYW5TdHlsZSk7XG5cdFx0aWYgKHdpdGhVbml0KVxuXHRcdFx0dGVtcCArPSBgICgke3NlY29uZFRlbXAudG9TdHJpbmcoKX0gJHtVbml0VG9Vbmljb2RlKHNlY29uZFVuaXQpfSlgO1xuXHRcdGVsc2Vcblx0XHRcdHRlbXAgKz0gYCAoJHtzZWNvbmRUZW1wLnRvU3RyaW5nKCl9KWA7XG5cdH1cblxuXHRyZXR1cm4gdGVtcC50b1N0cmluZygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUnVzc2lhblRyYW5zZm9ybSh0ZW1wOiBudW1iZXIsIHJ1c3NpYW5TdHlsZTogYm9vbGVhbik6IHN0cmluZyB7XG5cdGlmIChydXNzaWFuU3R5bGUpIHtcblx0XHRpZiAodGVtcCA8IDApIHJldHVybiBg4oiSJHtNYXRoLmFicyh0ZW1wKS50b1N0cmluZygpfWA7XG5cdFx0ZWxzZSBpZiAodGVtcCA+IDApIHJldHVybiBgKyR7dGVtcC50b1N0cmluZygpfWA7XG5cdH1cblx0ZWxzZVxuXHRcdHJldHVybiB0ZW1wLnRvU3RyaW5nKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUZW1wUmFuZ2VUb1VzZXJDb25maWcobWluOiBudW1iZXIsIG1heDogbnVtYmVyLCBjb25maWc6IENvbmZpZyk6IHN0cmluZyB7XG5cdGxldCB0X2xvdyA9IFRlbXBUb1VzZXJDb25maWcobWluLCBjb25maWcsIGZhbHNlKTtcblx0bGV0IHRfaGlnaCA9IFRlbXBUb1VzZXJDb25maWcobWF4LCBjb25maWcsIGZhbHNlKTtcblxuXHRsZXQgZmlyc3RfdGVtcGVyYXR1cmUgPSBjb25maWcuX3RlbXBlcmF0dXJlSGlnaEZpcnN0ID8gdF9oaWdoIDogdF9sb3c7XG5cdGxldCBzZWNvbmRfdGVtcGVyYXR1cmUgPSBjb25maWcuX3RlbXBlcmF0dXJlSGlnaEZpcnN0ID8gdF9sb3cgOiB0X2hpZ2g7XG5cblx0bGV0IHJlc3VsdCA9IFwiXCI7XG5cdGlmIChmaXJzdF90ZW1wZXJhdHVyZSAhPSBudWxsKVxuXHRcdHJlc3VsdCA9IGZpcnN0X3RlbXBlcmF0dXJlO1xuXHQvLyBBcyBSdXNzaWFuIFRyYWRpdGlvbiwgLXRlbXAuLi4rdGVtcFxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2xpbnV4bWludC9jaW5uYW1vbi1zcGljZXMtYXBwbGV0cy9pc3N1ZXMvNjE4XG5cdHJlc3VsdCArPSAoKGNvbmZpZy5fdGVtcFJ1c3NpYW5TdHlsZSkgPyBFTExJUFNJUyA6IGAgJHtGT1JXQVJEX1NMQVNIfSBgKTtcblx0aWYgKHNlY29uZF90ZW1wZXJhdHVyZSAhPSBudWxsKVxuXHRcdHJlc3VsdCArPSBgJHtzZWNvbmRfdGVtcGVyYXR1cmV9IGA7XG5cdHJlc3VsdCArPSBgJHtVbml0VG9Vbmljb2RlKGNvbmZpZy5UZW1wZXJhdHVyZVVuaXQpfWA7XG5cdGlmIChjb25maWcuX3Nob3dCb3RoVGVtcFVuaXRzKSB7XG5cdFx0bGV0IHNlY29uZFVuaXQ6IFdlYXRoZXJVbml0cyA9IChjb25maWcuVGVtcGVyYXR1cmVVbml0ID09IFwiY2Vsc2l1c1wiKSA/IFwiZmFocmVuaGVpdFwiIDogXCJjZWxzaXVzXCI7XG5cdFx0cmVzdWx0ICs9IGAgKCR7VW5pdFRvVW5pY29kZShzZWNvbmRVbml0KX0pYDtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBLZWx2aW5Ub0NlbHNpdXMoazogbnVtYmVyKTogbnVtYmVyIHtcblx0cmV0dXJuIE1hdGgucm91bmQoKGsgLSAyNzMuMTUpKTtcbn1cblxuZnVuY3Rpb24gS2VsdmluVG9GYWhyZW5oZWl0KGs6IG51bWJlcik6IG51bWJlciB7XG5cdHJldHVybiBNYXRoLnJvdW5kKCg5IC8gNSAqIChrIC0gMjczLjE1KSArIDMyKSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgZnJvbSBocGEgdG8gdXNlJ3MgY2hvc2UgdW5pdFxuICogQHBhcmFtIGhwYSBcbiAqIEBwYXJhbSB1bml0cyBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFByZXNzVG9Vc2VyVW5pdHMoaHBhOiBudW1iZXIsIHVuaXRzOiBXZWF0aGVyUHJlc3N1cmVVbml0cyk6IG51bWJlciB7XG5cdHN3aXRjaCAodW5pdHMpIHtcblx0XHRjYXNlIFwiaFBhXCI6XG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZChocGEgKiAxMDApIC8gMTAwO1xuXHRcdGNhc2UgXCJhdFwiOlxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoKGhwYSAqIDAuMDAxMDE5NzE2KSAqIDEwMDApIC8gMTAwMDtcblx0XHRjYXNlIFwiYXRtXCI6XG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCgoaHBhICogMC4wMDA5ODY5MjMzKSAqIDEwMDApIC8gMTAwMDtcblx0XHRjYXNlIFwiaW4gSGdcIjpcblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKChocGEgKiAwLjAyOTUyOTk4MzA3MTQ0NSkgKiAxMCkgLyAxMDtcblx0XHRjYXNlIFwibW0gSGdcIjpcblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKChocGEgKiAwLjc1MDA2MzgpKTtcblx0XHRjYXNlIFwiUGFcIjpcblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKChocGEgKiAxMDApKTtcblx0XHRjYXNlIFwicHNpXCI6XG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCgoaHBhICogMC4wMTQ1MDM3NykgKiAxMDApIC8gMTAwO1xuXHR9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gTWV0cmVUb1VzZXJVbml0cyhtOiBudW1iZXIsIGRpc3RhbmNlVW5pdDogRGlzdGFuY2VVbml0cyk6IG51bWJlciB7XG5cdGlmIChkaXN0YW5jZVVuaXQgPT0gXCJtZXRyaWNcIikgcmV0dXJuIE1hdGgucm91bmQobSAvIDEwMDAgKiAxMCkgLyAxMDtcblx0cmV0dXJuIE1hdGgucm91bmQoS21Ub00obSAvIDEwMDApICogMTApIC8gMTA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNaWxsaW1ldGVyVG9Vc2VyVW5pdHMobW06IG51bWJlciwgZGlzdGFuY2VVbml0OiBEaXN0YW5jZVVuaXRzKTogbnVtYmVyIHtcblx0aWYgKGRpc3RhbmNlVW5pdCA9PSBcIm1ldHJpY1wiKSByZXR1cm4gTWF0aC5yb3VuZChtbSAqIDEwMCkgLyAxMDA7XG5cdHJldHVybiBNYXRoLnJvdW5kKG1tICogMC4wMzkzNyAqIDEwMCkgLyAxMDA7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDb252ZXJ0ZXJzXG5cbmV4cG9ydCBmdW5jdGlvbiBLUEh0b01QUyhzcGVlZDogbnVtYmVyKTogbnVtYmVyIHtcblx0aWYgKHNwZWVkID09IG51bGwpIHJldHVybiBudWxsO1xuXHRyZXR1cm4gc3BlZWQgLyBXRUFUSEVSX0NPTlZfS1BIX0lOX01QUztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBDZWxzaXVzVG9LZWx2aW4oY2Vsc2l1czogbnVtYmVyKTogbnVtYmVyIHtcblx0aWYgKGNlbHNpdXMgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cdHJldHVybiAoY2Vsc2l1cyArIDI3My4xNSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGYWhyZW5oZWl0VG9LZWx2aW4oZmFocmVuaGVpdDogbnVtYmVyKTogbnVtYmVyIHtcblx0aWYgKGZhaHJlbmhlaXQgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cdHJldHVybiAoKGZhaHJlbmhlaXQgLSAzMikgLyAxLjggKyAyNzMuMTUpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIE1QSHRvTVBTKHNwZWVkOiBudW1iZXIpOiBudW1iZXIge1xuXHRpZiAoc3BlZWQgPT0gbnVsbCB8fCBzcGVlZCA9PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuXHRyZXR1cm4gc3BlZWQgKiAwLjQ0NzA0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gS21Ub00oa206IG51bWJlcik6IG51bWJlciB7XG5cdGlmIChrbSA9PSBudWxsKSByZXR1cm4gbnVsbDtcblx0cmV0dXJuIGttICogMC42MjEzNzEyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29tcGFzc1RvRGVnKGNvbXBhc3M6IHN0cmluZyk6IG51bWJlciB7XG5cdGlmICghY29tcGFzcykgcmV0dXJuIG51bGw7XG5cdGNvbXBhc3MgPSBjb21wYXNzLnRvVXBwZXJDYXNlKCk7XG5cdHN3aXRjaCAoY29tcGFzcykge1xuXHRcdGNhc2UgXCJOXCI6IHJldHVybiAwO1xuXHRcdGNhc2UgXCJOTkVcIjogcmV0dXJuIDIyLjU7XG5cdFx0Y2FzZSBcIk5FXCI6IHJldHVybiA0NTtcblx0XHRjYXNlIFwiRU5FXCI6IHJldHVybiA2Ny41O1xuXHRcdGNhc2UgXCJFXCI6IHJldHVybiA5MDtcblx0XHRjYXNlIFwiRVNFXCI6IHJldHVybiAxMTIuNTtcblx0XHRjYXNlIFwiU0VcIjogcmV0dXJuIDEzNTtcblx0XHRjYXNlIFwiU1NFXCI6IHJldHVybiAxNTcuNTtcblx0XHRjYXNlIFwiU1wiOiByZXR1cm4gMTgwO1xuXHRcdGNhc2UgXCJTU1dcIjogcmV0dXJuIDIwMi41O1xuXHRcdGNhc2UgXCJTV1wiOiByZXR1cm4gMjI1O1xuXHRcdGNhc2UgXCJXU1dcIjogcmV0dXJuIDI0Ny41O1xuXHRcdGNhc2UgXCJXXCI6IHJldHVybiAyNzA7XG5cdFx0Y2FzZSBcIldOV1wiOiByZXR1cm4gMjkyLjU7XG5cdFx0Y2FzZSBcIk5XXCI6IHJldHVybiAzMTU7XG5cdFx0Y2FzZSBcIk5OV1wiOiByZXR1cm4gMzM3LjU7XG5cdFx0ZGVmYXVsdDogcmV0dXJuIG51bGw7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvbXBhc3NEaXJlY3Rpb24oZGVnOiBudW1iZXIpOiBBcnJvd0ljb25zIHtcblx0bGV0IGRpcmVjdGlvbnM6IEFycm93SWNvbnNbXSA9IFtcblx0XHQnc291dGgtYXJyb3ctd2VhdGhlci1zeW1ib2xpYycsXG5cdFx0J3NvdXRoLXdlc3QtYXJyb3ctd2VhdGhlci1zeW1ib2xpYycsXG5cdFx0J3dlc3QtYXJyb3ctd2VhdGhlci1zeW1ib2xpYycsXG5cdFx0J25vcnRoLXdlc3QtYXJyb3ctd2VhdGhlci1zeW1ib2xpYycsXG5cdFx0J25vcnRoLWFycm93LXdlYXRoZXItc3ltYm9saWMnLFxuXHRcdCdub3J0aC1lYXN0LWFycm93LXdlYXRoZXItc3ltYm9saWMnLFxuXHRcdCdlYXN0LWFycm93LXdlYXRoZXItc3ltYm9saWMnLFxuXHRcdCdzb3V0aC1lYXN0LWFycm93LXdlYXRoZXItc3ltYm9saWMnXG5cdF07XG5cdHJldHVybiBkaXJlY3Rpb25zW01hdGgucm91bmQoZGVnIC8gNDUpICUgZGlyZWN0aW9ucy5sZW5ndGhdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDb21wYXNzRGlyZWN0aW9uVGV4dChkZWc6IG51bWJlcik6IHN0cmluZyB7XG5cdGlmICghZGVnKVxuXHRcdHJldHVybiBudWxsO1xuICAgIGxldCBkaXJlY3Rpb25zID0gW18oJ04nKSwgXygnTkUnKSwgXygnRScpLCBfKCdTRScpLCBfKCdTJyksIF8oJ1NXJyksIF8oJ1cnKSwgXygnTlcnKV1cbiAgICByZXR1cm4gZGlyZWN0aW9uc1tNYXRoLnJvdW5kKGRlZyAvIDQ1KSAlIGRpcmVjdGlvbnMubGVuZ3RoXVxufVxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUZXN0ZXJzXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZGF0ZSBpcyBpbnNpZGUgYmV0d2VlbiBzdW5yaXNlIGFuZCBzdW5zZXQuXG4gKiBAcGFyYW0gc3VuVGltZXMgc3VucmlzZSBhbmQgc3Vuc2V0IGlzIHVzZWRcbiAqIEBwYXJhbSBkYXRlIFxuICovXG5leHBvcnQgZnVuY3Rpb24gSXNOaWdodChzdW5UaW1lczogU3VuVGltZXMsIGRhdGU/OiBEYXRlKTogYm9vbGVhbiB7XG5cdGlmICghc3VuVGltZXMpIHJldHVybiBmYWxzZTtcblx0bGV0IHRpbWUgPSAoISFkYXRlKSA/IE1pbGl0YXJ5VGltZShkYXRlKSA6IE1pbGl0YXJ5VGltZShuZXcgRGF0ZSgpKTtcblx0bGV0IHN1bnJpc2UgPSBNaWxpdGFyeVRpbWUoc3VuVGltZXMuc3VucmlzZSk7XG5cdGxldCBzdW5zZXQgPSBNaWxpdGFyeVRpbWUoc3VuVGltZXMuc3Vuc2V0KTtcblx0aWYgKHRpbWUgPj0gc3VucmlzZSAmJiB0aW1lIDwgc3Vuc2V0KSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSXNDb29yZGluYXRlKHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHR0ZXh0ID0gdGV4dC50cmltKCk7XG5cdGlmICgvXi0/XFxkezEsM30oPzpcXC5cXGQqKT8sKFxccykqLT9cXGR7MSwzfSg/OlxcLlxcZCopPy8udGVzdCh0ZXh0KSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5vdEVtcHR5KHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG5cdHJldHVybiAoc3RyICE9IG51bGwgJiYgc3RyLmxlbmd0aCA+IDAgJiYgc3RyICE9IHVuZGVmaW5lZClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIElzTGFuZ1N1cHBvcnRlZChsYW5nOiBzdHJpbmcsIGxhbmd1YWdlczogQXJyYXk8c3RyaW5nPik6IGJvb2xlYW4ge1xuXHRyZXR1cm4gKGxhbmd1YWdlcy5pbmNsdWRlcyhsYW5nKSlcbn07XG5cbmZ1bmN0aW9uIEhhc0ljb24oaWNvbjogc3RyaW5nLCBpY29uX3R5cGU6IGltcG9ydHMuZ2kuU3QuSWNvblR5cGUpOiBib29sZWFuIHtcblx0cmV0dXJuIEljb25UaGVtZS5nZXRfZGVmYXVsdCgpLmhhc19pY29uKGljb24gKyAoaWNvbl90eXBlID09IEljb25UeXBlLlNZTUJPTElDID8gJy1zeW1ib2xpYycgOiAnJykpXG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFVENcblxuZXhwb3J0IGZ1bmN0aW9uIG1vZGU8VD4oYXJyOiBUW10pOiBUIHtcblx0cmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKGN1cnJlbnQsIGl0ZW0pIHtcblx0XHR2YXIgdmFsID0gY3VycmVudC5udW1NYXBwaW5nW2l0ZW1dID0gKGN1cnJlbnQubnVtTWFwcGluZ1tpdGVtXSB8fCAwKSArIDE7XG5cdFx0aWYgKHZhbCA+IGN1cnJlbnQuZ3JlYXRlc3RGcmVxKSB7XG5cdFx0XHRjdXJyZW50LmdyZWF0ZXN0RnJlcSA9IHZhbDtcblx0XHRcdGN1cnJlbnQubW9kZSA9IGl0ZW07XG5cdFx0fVxuXHRcdHJldHVybiBjdXJyZW50O1xuXHR9LCB7IG1vZGU6IG51bGwsIGdyZWF0ZXN0RnJlcTogLUluZmluaXR5LCBudW1NYXBwaW5nOiB7fSBhcyBhbnkgfSkubW9kZTtcbn07XG5cbi8vIFBhc3NpbmcgYXBwcm9wcmlhdGUgcmVzb2x2ZXIgZnVuY3Rpb24gZm9yIHRoZSBBUEksIGFuZCB0aGUgY29kZVxuZXhwb3J0IGZ1bmN0aW9uIFdlYXRoZXJJY29uU2FmZWx5KGNvZGU6IEJ1aWx0aW5JY29uc1tdLCBpY29uX3R5cGU6IGltcG9ydHMuZ2kuU3QuSWNvblR5cGUpOiBCdWlsdGluSWNvbnMge1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNvZGUubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAoSGFzSWNvbihjb2RlW2ldLCBpY29uX3R5cGUpKVxuXHRcdFx0cmV0dXJuIGNvZGVbaV07XG5cdH1cblx0cmV0dXJuICd3ZWF0aGVyLXNldmVyZS1hbGVydCc7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL1BpbXBUcml6a2l0L1BKcy93aWtpLzEyLi1TaGFkZSwtQmxlbmQtYW5kLUNvbnZlcnQtYS1XZWItQ29sb3ItKHBTQkMuanMpIy0tdmVyc2lvbi0yLWhleC0tXG4gKiBAcGFyYW0gY29sb3IgbGlrZSBcIiNmZmZmZmZcIlxuICogQHBhcmFtIHBlcmNlbnQgYmV0d2VlbiAtMS4wIGFuZCAxLjBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNoYWRlSGV4Q29sb3IoY29sb3I6IHN0cmluZywgcGVyY2VudDogbnVtYmVyKTogc3RyaW5nIHtcblx0dmFyIGYgPSBwYXJzZUludChjb2xvci5zbGljZSgxKSwgMTYpLCB0ID0gcGVyY2VudCA8IDAgPyAwIDogMjU1LCBwID0gcGVyY2VudCA8IDAgPyBwZXJjZW50ICogLTEgOiBwZXJjZW50LCBSID0gZiA+PiAxNiwgRyA9IGYgPj4gOCAmIDB4MDBGRiwgQiA9IGYgJiAweDAwMDBGRjtcblx0cmV0dXJuIFwiI1wiICsgKDB4MTAwMDAwMCArIChNYXRoLnJvdW5kKCh0IC0gUikgKiBwKSArIFIpICogMHgxMDAwMCArIChNYXRoLnJvdW5kKCh0IC0gRykgKiBwKSArIEcpICogMHgxMDAgKyAoTWF0aC5yb3VuZCgodCAtIEIpICogcCkgKyBCKSkudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgTGludXggbG9jYWxlIHRvIEpTIGxvY2FsZSBmb3JtYXRcbiAqIEBwYXJhbSBsb2NhbGUgTGludXggbG9jYWxlIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gQ29uc3RydWN0SnNMb2NhbGUobG9jYWxlOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRsZXQganNMb2NhbGUgPSBsb2NhbGUuc3BsaXQoXCIuXCIpWzBdO1xuXHRsZXQgdG1wOiBzdHJpbmdbXSA9IGpzTG9jYWxlLnNwbGl0KFwiX1wiKTtcblx0anNMb2NhbGUgPSBcIlwiO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRtcC5sZW5ndGg7IGkrKykge1xuXHRcdGlmIChpICE9IDApIGpzTG9jYWxlICs9IFwiLVwiO1xuXHRcdGpzTG9jYWxlICs9IHRtcFtpXS50b0xvd2VyQ2FzZSgpO1xuXHR9XG5cblx0aWYgKGxvY2FsZSA9PSBcImNcIiB8fCBsb2NhbGUgPT0gbnVsbCkganNMb2NhbGUgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBqc0xvY2FsZTtcbn1cblxuLyoqXG4gKiBodHRwczovL3d3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9sYXRsb25nLmh0bWxcbiAqIEBwYXJhbSBsYXQxIFxuICogQHBhcmFtIGxvbjEgXG4gKiBAcGFyYW0gbGF0MiBcbiAqIEBwYXJhbSBsb24yIFxuICogQHJldHVybnMgZGlzdGFuY2UgaW4gbWV0cmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBHZXREaXN0YW5jZShsYXQxOiBudW1iZXIsIGxvbjE6IG51bWJlciwgbGF0MjogbnVtYmVyLCBsb24yOiBudW1iZXIpOiBudW1iZXIge1xuXHRjb25zdCBSID0gNjM3MWUzOyAvLyBtZXRyZXNcblx0Y29uc3Qgz4YxID0gbGF0MSAqIE1hdGguUEkgLyAxODA7IC8vIM+GLCDOuyBpbiByYWRpYW5zXG5cdGNvbnN0IM+GMiA9IGxhdDIgKiBNYXRoLlBJIC8gMTgwO1xuXHRjb25zdCDOlM+GID0gKGxhdDIgLSBsYXQxKSAqIE1hdGguUEkgLyAxODA7XG5cdGNvbnN0IM6UzrsgPSAobG9uMiAtIGxvbjEpICogTWF0aC5QSSAvIDE4MDtcblxuXHRjb25zdCBhID0gTWF0aC5zaW4ozpTPhiAvIDIpICogTWF0aC5zaW4ozpTPhiAvIDIpICtcblx0XHRNYXRoLmNvcyjPhjEpICogTWF0aC5jb3Moz4YyKSAqXG5cdFx0TWF0aC5zaW4ozpTOuyAvIDIpICogTWF0aC5zaW4ozpTOuyAvIDIpO1xuXHRjb25zdCBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKTtcblxuXHRyZXR1cm4gUiAqIGM7IC8vIGluIG1ldHJlc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gR2V0RnVuY05hbWUoZnVuYzogRnVuY3Rpb24pOiBzdHJpbmcge1xuXHQvLyBFUzZcblx0aWYgKCEhZnVuYy5uYW1lKSByZXR1cm4gZnVuYy5uYW1lO1xuXHQvLyBFUzVcblx0Ly8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE3OTIzNzI3XG5cdHZhciByZXN1bHQgPSAvXmZ1bmN0aW9uXFxzKyhbXFx3XFwkXSspXFxzKlxcKC8uZXhlYyhmdW5jLnRvU3RyaW5nKCkpXG5cdHJldHVybiByZXN1bHQgPyByZXN1bHRbMV0gOiAnJyAvLyBmb3IgYW4gYW5vbnltb3VzIGZ1bmN0aW9uIHRoZXJlIHdvbid0IGJlIGEgbWF0Y2hcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEd1aWQoKSB7XG5cdHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG5cdFx0dmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuXHRcdHJldHVybiB2LnRvU3RyaW5nKDE2KTtcblx0fSk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaW1lb3V0IHBvbHlmaWxsXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUaW1lb3V0KGZ1bmM6IEZ1bmN0aW9uLCBtczogbnVtYmVyKSB7XG5cdGxldCBhcmdzOiBhbnlbXSA9IFtdO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcblx0XHRhcmdzID0gYXJncy5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG5cdH1cblxuXHRsZXQgaWQgPSB0aW1lb3V0X2FkZChtcywgKCkgPT4ge1xuXHRcdGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBTdG9wIHJlcGVhdGluZ1xuXHR9LCBudWxsKTtcblxuXHRyZXR1cm4gaWQ7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsYXkobXM6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuXHRyZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0sIG1zKTtcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhclRpbWVvdXQoaWQ6IG51bWJlcikge1xuXHRzb3VyY2VfcmVtb3ZlKGlkKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbnRlcnZhbChmdW5jOiBGdW5jdGlvbiwgbXM6IG51bWJlcikge1xuXHRsZXQgYXJnczogYW55W10gPSBbXTtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG5cdFx0YXJncyA9IGFyZ3Muc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuXHR9XG5cblx0bGV0IGlkID0gdGltZW91dF9hZGQobXMsICgpID0+IHtcblx0XHRmdW5jLmFwcGx5KG51bGwsIGFyZ3MpO1xuXHRcdHJldHVybiB0cnVlOyAvLyBSZXBlYXRcblx0fSwgbnVsbCk7XG5cblx0cmV0dXJuIGlkO1xufTsiLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgIElwQXBpICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5pbXBvcnQgeyBMb2cgfSBmcm9tIFwiLi4vbGliL2xvZ2dlclwiO1xuaW1wb3J0IHsgV2VhdGhlckFwcGxldCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBMb2NhdGlvbkRhdGEgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IF8gfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIElwQXBpIHtcblx0cXVlcnkgPSBcImh0dHA6Ly9pcC1hcGkuY29tL2pzb24vP2ZpZWxkcz1zdGF0dXMsbWVzc2FnZSxjb3VudHJ5LGNvdW50cnlDb2RlLGNpdHksbGF0LGxvbix0aW1lem9uZSxtb2JpbGUscXVlcnlcIjtcblx0YXBwOiBXZWF0aGVyQXBwbGV0O1xuXG5cdGNvbnN0cnVjdG9yKF9hcHA6IFdlYXRoZXJBcHBsZXQpIHtcblx0XHR0aGlzLmFwcCA9IF9hcHA7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgR2V0TG9jYXRpb24oKTogUHJvbWlzZTxMb2NhdGlvbkRhdGE+IHtcblx0XHRsZXQganNvbiA9IGF3YWl0IHRoaXMuYXBwLkxvYWRKc29uQXN5bmM8SXBBcGlQYXlsb2FkPih0aGlzLnF1ZXJ5KTtcblxuXHRcdGlmICghanNvbikge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0aWYgKGpzb24uc3RhdHVzICE9IFwic3VjY2Vzc1wiKSB7XG5cdFx0XHR0aGlzLkhhbmRsZUVycm9yUmVzcG9uc2UoanNvbik7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5QYXJzZUluZm9ybWF0aW9uKGpzb24pO1xuXG5cdH07XG5cblx0cHJpdmF0ZSBQYXJzZUluZm9ybWF0aW9uKGpzb246IElwQXBpUGF5bG9hZCk6IExvY2F0aW9uRGF0YSB7XG5cdFx0dHJ5IHtcblx0XHRcdGxldCByZXN1bHQ6IExvY2F0aW9uRGF0YSA9IHtcblx0XHRcdFx0bGF0OiBqc29uLmxhdCxcblx0XHRcdFx0bG9uOiBqc29uLmxvbixcblx0XHRcdFx0Y2l0eToganNvbi5jaXR5LFxuXHRcdFx0XHRjb3VudHJ5OiBqc29uLmNvdW50cnksXG5cdFx0XHRcdHRpbWVab25lOiBqc29uLnRpbWV6b25lLFxuXHRcdFx0XHRlbnRyeVRleHQ6IGpzb24ubGF0ICsgXCIsXCIgKyBqc29uLmxvbixcblx0XHRcdH1cblx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkxvY2F0aW9uIG9idGFpbmVkOlwiICsganNvbi5sYXQgKyBcIixcIiArIGpzb24ubG9uKTtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdGNhdGNoIChlKSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJpcC1hcGkgcGFyc2luZyBlcnJvcjogXCIgKyBlKTtcblx0XHRcdHRoaXMuYXBwLlNob3dFcnJvcih7IHR5cGU6IFwiaGFyZFwiLCBkZXRhaWw6IFwibm8gbG9jYXRpb25cIiwgc2VydmljZTogXCJpcGFwaVwiLCBtZXNzYWdlOiBfKFwiQ291bGQgbm90IG9idGFpbiBsb2NhdGlvblwiKSB9KTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fTtcblxuXHRIYW5kbGVFcnJvclJlc3BvbnNlKGpzb246IGFueSk6IHZvaWQge1xuXHRcdHRoaXMuYXBwLlNob3dFcnJvcih7IHR5cGU6IFwiaGFyZFwiLCBkZXRhaWw6IFwiYmFkIGFwaSByZXNwb25zZVwiLCBtZXNzYWdlOiBfKFwiTG9jYXRpb24gU2VydmljZSByZXNwb25kZWQgd2l0aCBlcnJvcnMsIHBsZWFzZSBzZWUgdGhlIGxvZ3MgaW4gTG9va2luZyBHbGFzc1wiKSwgc2VydmljZTogXCJpcGFwaVwiIH0pXG5cdFx0TG9nLkluc3RhbmNlLkVycm9yKFwiaXAtYXBpIHJlc3BvbmRzIHdpdGggRXJyb3I6IFwiICsganNvbi5yZWFzb24pO1xuXHR9O1xufTtcblxuaW50ZXJmYWNlIElwQXBpUGF5bG9hZCB7XG5cdHN0YXR1czogaXBhcGlTdGF0dXM7XG5cdGNvdW50cnk6IHN0cmluZztcblx0Y291bnRyeUNvZGU6IHN0cmluZztcblx0cmVnaW9uPzogc3RyaW5nO1xuXHRyZWdpb25OYW1lPzogc3RyaW5nO1xuXHRjaXR5OiBzdHJpbmc7XG5cdHppcD86IHN0cmluZztcblx0bGF0OiBudW1iZXI7XG5cdGxvbjogbnVtYmVyO1xuXHR0aW1lem9uZTogc3RyaW5nO1xuXHRpc3A/OiBzdHJpbmc7XG5cdG9yZz86IHN0cmluZztcblx0YXM/OiBzdHJpbmc7XG5cdHF1ZXJ5Pzogc3RyaW5nO1xuXHRtb2JpbGU6IGJvb2xlYW47XG5cdC8qKiBleGlzdHMgb24gZXJyb3IgKi9cblx0bWVzc2FnZT86IGlwYXBpTWVzc2FnZTtcbn1cblxudHlwZSBpcGFwaVN0YXR1cyA9IFwic3VjY2Vzc1wiIHwgXCJmYWlsXCI7XG50eXBlIGlwYXBpTWVzc2FnZSA9IFwicHJpdmF0ZSByYW5nZXJcIiB8IFwicmVzZXJ2ZWQgcmFuZ2VcIiB8IFwiaW52YWxpZCBxdWVyeVwiOyIsIi8qKiBNb2RlbHMgYW4gZXZlbnQgd2l0aCBhIGdlbmVyaWMgc2VuZGVyIGFuZCBnZW5lcmljIGFyZ3VtZW50cyAqL1xuaW50ZXJmYWNlIElFdmVudDxUU2VuZGVyLCBUQXJncz4ge1xuXG5cdFN1YnNjcmliZShmbjogKHNlbmRlcjogVFNlbmRlciwgYXJnczogVEFyZ3MpID0+IHZvaWQpOiB2b2lkO1xuXG5cdFVuc3Vic2NyaWJlKGZuOiAoc2VuZGVyOiBUU2VuZGVyLCBhcmdzOiBUQXJncykgPT4gdm9pZCk6IHZvaWQ7XG5cblx0SW52b2tlKHNlbmRlcjogVFNlbmRlciwgYXJnczogVEFyZ3MpOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgRXZlbnQ8VFNlbmRlciwgVEFyZ3M+IGltcGxlbWVudHMgSUV2ZW50PFRTZW5kZXIsIFRBcmdzPiB7XG5cdHByaXZhdGUgc3Vic2NyaWJlcnM6IEFycmF5PChzZW5kZXI6IFRTZW5kZXIsIGFyZ3M6IFRBcmdzKSA9PiB2b2lkPiA9IFtdO1xuXG5cdHB1YmxpYyBTdWJzY3JpYmUoZm46IChzZW5kZXI6IFRTZW5kZXIsIGFyZ3M6IFRBcmdzKSA9PiB2b2lkKTogdm9pZCB7XG5cdFx0dGhpcy5zdWJzY3JpYmVycy5wdXNoKGZuKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJZiB5b3UgdXNlIHRoaXMsIHlvdSBIQVZFIHRvIG1ha2Ugc3VyZSBpdCdzIHRoZSBzYW1lIGZ1bmN0aW9uXG5cdCAqIHdoYXQgeW91IHBhc3NlZCBpbi4gdGhpcyBtZWFucyB5b3UgaGF2ZSB0byBzYXZlIHRoZSBhcnJvdyBvciB0aGUgTGFuZy5iaW5kXG5cdCAqIGZ1bmN0aW9uIGFuZCBTdWJzY3JpYmUvVW5zdWJzY3JpYmUgdGhhdC5cblx0ICogXG5cdCAqIElmIHlvdSBjcmVhdGUgdGhlbSBvbiB0aGUgZmx5IHlvdSB3b24ndCBiZSBhYmxlIHRvIHVuc3Vic2NyaWJlIGZyb20gdGhlbS5cblx0ICovXG5cdHB1YmxpYyBVbnN1YnNjcmliZShmbjogKHNlbmRlcjogVFNlbmRlciwgYXJnczogVEFyZ3MpID0+IHZvaWQpOiB2b2lkIHtcblx0XHRmb3IgKGxldCBpbmRleCA9IHRoaXMuc3Vic2NyaWJlcnMubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IHRoaXMuc3Vic2NyaWJlcnNbaW5kZXhdO1xuXHRcdFx0aWYgKGVsZW1lbnQgPT0gZm4pIHtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIEludm9rZShzZW5kZXI6IFRTZW5kZXIsIGFyZ3M6IFRBcmdzKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuc3Vic2NyaWJlcnMubGVuZ3RoID09IDApIHJldHVybjtcblxuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN1YnNjcmliZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IHRoaXMuc3Vic2NyaWJlcnNbaW5kZXhdO1xuXHRcdFx0ZWxlbWVudChzZW5kZXIsIGFyZ3MpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBVblN1YnNjcmliZUFsbCgpOiB2b2lkIHtcblx0XHR0aGlzLnN1YnNjcmliZXJzID0gW107XG5cdH1cbn0iLCJpbXBvcnQgeyBfIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmNvbnN0IHsgbWVzc2FnZVRyYXkgfSA9IGltcG9ydHMudWkubWFpbjtcbmNvbnN0IHsgU3lzdGVtTm90aWZpY2F0aW9uU291cmNlLCBOb3RpZmljYXRpb24gfSA9IGltcG9ydHMudWkubWVzc2FnZVRyYXk7XG5cbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25TZXJ2aWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IE5vdGlmaWNhdGlvblNlcnZpY2UgPSBudWxsO1xuXHQvKiogU2luZ2xlIGluc3RhbmNlIG9mIGxvZyAqL1xuXHRwdWJsaWMgc3RhdGljIGdldCBJbnN0YW5jZSgpIHtcblx0XHRpZiAodGhpcy5pbnN0YW5jZSA9PSBudWxsKVxuXHRcdFx0dGhpcy5pbnN0YW5jZSA9IG5ldyBOb3RpZmljYXRpb25TZXJ2aWNlKCk7XG5cdFx0cmV0dXJuIHRoaXMuaW5zdGFuY2U7XG5cdH1cblxuXHRUaXRsZTogc3RyaW5nID0gXyhcIldlYXRoZXIgQXBwbGV0XCIpO1xuXHRNZXNzYWdlU291cmNlOiBpbXBvcnRzLnVpLm1lc3NhZ2VUcmF5LlN5c3RlbU5vdGlmaWNhdGlvblNvdXJjZTtcblxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuTWVzc2FnZVNvdXJjZSA9IG5ldyBTeXN0ZW1Ob3RpZmljYXRpb25Tb3VyY2UodGhpcy5UaXRsZSk7XG5cdFx0bWVzc2FnZVRyYXkuYWRkKHRoaXMuTWVzc2FnZVNvdXJjZSk7XG5cdH1cblxuXHRwdWJsaWMgU2VuZCh0aXRsZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIHRyYW5zaWVudD86IGJvb2xlYW4pIHtcblx0XHRsZXQgbm90aWZpY2F0aW9uID0gbmV3IE5vdGlmaWNhdGlvbih0aGlzLk1lc3NhZ2VTb3VyY2UsIHRoaXMuVGl0bGUgKyBcIjogXCIgKyB0aXRsZSwgbWVzc2FnZSk7XG5cdFx0aWYgKHRyYW5zaWVudCkgbm90aWZpY2F0aW9uLnNldFRyYW5zaWVudCgoIXRyYW5zaWVudCkgPyBmYWxzZSA6IHRydWUpO1xuXHRcdHRoaXMuTWVzc2FnZVNvdXJjZS5ub3RpZnkobm90aWZpY2F0aW9uKTtcblx0fVxufSIsImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9jb25maWdcIjtcbmltcG9ydCB7IEV2ZW50IH0gZnJvbSBcIi4uL2xpYi9ldmVudHNcIjtcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuLi9saWIvbG9nZ2VyXCI7XG5pbXBvcnQgeyBXZWF0aGVyQXBwbGV0IH0gZnJvbSBcIi4uL21haW5cIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tIFwiLi4vbGliL25vdGlmaWNhdGlvbl9zZXJ2aWNlXCI7XG5pbXBvcnQgeyBMb2NhdGlvbkRhdGEgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IF8gfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmV4cG9ydCBjbGFzcyBMb2NhdGlvblN0b3JlIHtcblx0cHJpdmF0ZSBsb2NhdGlvbnM6IExvY2F0aW9uRGF0YVtdID0gW107XG5cdHByaXZhdGUgYXBwOiBXZWF0aGVyQXBwbGV0ID0gbnVsbDtcblx0cHJpdmF0ZSBjb25maWc6IENvbmZpZyA9IG51bGw7XG5cblx0LyoqXG5cdCAqIEN1cnJlbnQgaGVhZCBvbiBsb2NhdGlvblN0b3JlIGFycmF5LlxuXHQgKiBSZXRhaW5zIHBvc2l0aW9uIGV2ZW4gaWYgdXNlciBjaGFuZ2VzIHRvIGxvY2F0aW9uXG5cdCAqIG5vdCBpbiB0aGUgc3RvcmUuIEl0IGdldHMgbW92ZWQgdG8gdGhlIGVuZCBvZiBhcnJheSBpZiB1c2VyXG5cdCAqIHNhdmVzIGEgbmV3IGxvY2F0aW9uLiBPbiBkZWxldGlvbiBpdCBtb3ZlcyB0byB0aGUgbmV4dCBpbmRleFxuXHQgKi9cblx0cHJpdmF0ZSBjdXJyZW50SW5kZXggPSAwO1xuXG5cdC8qKlxuXHQgKiBldmVudCBjYWxsYmFjayBmb3IgYXBwbGV0IHdoZW4gbG9jYXRpb24gc3RvcmFnZSBpcyBtb2RpZmllZFxuXHQgKi9cblx0cHVibGljIHJlYWRvbmx5IFN0b3JlQ2hhbmdlZCA9IG5ldyBFdmVudDxMb2NhdGlvblN0b3JlLCBudW1iZXI+KCk7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBXZWF0aGVyQXBwbGV0LCBjb25maWc6IENvbmZpZykge1xuXHRcdHRoaXMuYXBwID0gYXBwO1xuXHRcdHRoaXMuY29uZmlnID0gY29uZmlnO1xuXHRcdHRoaXMubG9jYXRpb25zID0gY29uZmlnLl9sb2NhdGlvbkxpc3Q7XG5cdH1cblxuXHRwdWJsaWMgT25Mb2NhdGlvbkNoYW5nZWQobG9jczogTG9jYXRpb25EYXRhW10pIHtcblx0XHQvLyB0aGlzIGlzIGNhbGxlZCA0IHRpbWVzIGluIGEgcm93LCB0cnkgdG8gcHJldmVudCB0aGF0XG5cdFx0aWYgKHRoaXMuYXBwLkxvY2tlZCgpKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0Ly8gRW5zdXJlIEVudHJ5IHRleHQgaXMgbm90IGVtcHR5XG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxvY3MubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRjb25zdCBlbGVtZW50ID0gbG9jc1tpbmRleF07XG5cdFx0XHRpZiAoIWVsZW1lbnQuZW50cnlUZXh0KSB7XG5cdFx0XHRcdGxvY3NbaW5kZXhdID0gdGhpcy5FbnN1cmVTZWFyY2hFbnRyeShlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRsZXQgY3VycmVudEluZGV4ID0gdGhpcy5GaW5kSW5kZXgodGhpcy5jb25maWcuQ3VycmVudExvY2F0aW9uKTtcblx0XHRsZXQgbmV3SW5kZXggPSB0aGlzLkZpbmRJbmRleCh0aGlzLmNvbmZpZy5DdXJyZW50TG9jYXRpb24sIGxvY3MpO1xuXHRcdGxldCBjdXJyZW50bHlEaXNwbGF5ZWRDaGFuZ2VkID0gZmFsc2U7XG5cdFx0bGV0IGN1cnJlbnRseURpc3BsYXllZERlbGV0ZWQgPSBmYWxzZTtcblx0XHQvLyBubyBuZWVkIHRvIGRvIGFueXRoaW5nLCBub3QgdXNpbmcgbG9jYXRpb25zdG9yZSBhdG1cblx0XHRpZiAobmV3SW5kZXggPT0gLTEgJiYgY3VycmVudEluZGV4ID09IC0xKSB7XG5cdFx0XHRsZXQgdG1wOiBMb2NhdGlvbkRhdGFbXSA9IFtdO1xuXHRcdFx0dGhpcy5sb2NhdGlvbnMgPSBsb2NzLmNvbmNhdCh0bXApO1xuXHRcdFx0dGhpcy5JbnZva2VTdG9yYWdlQ2hhbmdlZCgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRlbHNlIGlmIChuZXdJbmRleCA9PSBjdXJyZW50SW5kZXgpXG5cdFx0XHRjdXJyZW50bHlEaXNwbGF5ZWRDaGFuZ2VkID0gIXRoaXMuSXNFcXVhbCh0aGlzLmxvY2F0aW9ucz8uW2N1cnJlbnRJbmRleF0sIGxvY3M/LltjdXJyZW50SW5kZXhdKVxuXHRcdGVsc2UgaWYgKG5ld0luZGV4ID09IC0xKVxuXHRcdFx0Y3VycmVudGx5RGlzcGxheWVkRGVsZXRlZCA9IHRydWU7XG5cdFx0Ly8gY3VycmVubHR5IGRpc3BsYXllZCBwb3NpdGlvbidzIGNoYW5nZWRcblx0XHQvLyBldmVuIHRobyB0aGlzIHNlZW1zIHRvIGhhcHBlbiBhdXRvbWF0aWNhbGx5LCBcblx0XHQvLyBwcm9iYWJseSBiZWFjYXVzZSBJJ20gdXNpbmcgb2JqZWN0IHJlZmVyZW5jZXMgc29tZXdoZXJlXG5cdFx0ZWxzZSBpZiAobmV3SW5kZXggIT0gY3VycmVudEluZGV4KVxuXHRcdFx0dGhpcy5jdXJyZW50SW5kZXggPSBuZXdJbmRleFxuXG5cdFx0bGV0IHRtcDogTG9jYXRpb25EYXRhW10gPSBbXTtcblx0XHR0aGlzLmxvY2F0aW9ucyA9IGxvY3MuY29uY2F0KHRtcCk7XG5cblx0XHRpZiAoY3VycmVudGx5RGlzcGxheWVkQ2hhbmdlZCB8fCBjdXJyZW50bHlEaXNwbGF5ZWREZWxldGVkKSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJDdXJyZW50bHkgdXNlZCBsb2NhdGlvbiB3YXMgY2hhbmdlZCBvciBkZWxldGVkIGZyb20gbG9jYXRpb25zdG9yZSwgdHJpZ2dlcmluZyByZWZyZXNoLlwiKVxuXHRcdFx0dGhpcy5hcHAuUmVmcmVzaEFuZFJlYnVpbGQoKVxuXHRcdH1cblx0XHR0aGlzLkludm9rZVN0b3JhZ2VDaGFuZ2VkKCk7XG5cdH1cblxuXHQvKipcblx0ICogU3dpdGNoIHRvIGEgbG9jYXRpb24gaWYgaXQncyBpbiBzdG9yYWdlLiBET0VTIE5PVFxuXHQgKiBVUERBVEUgVEhFIENPTkZJRywgTkVWRVIgVVNFIElUIERJUkVDVExZLlxuXHQgKiBVc2UgQ29uZmlnLlN3aXRjaFRvTmV4dExvY2F0aW9uIG9yIENvbmZpZy5Td2l0Y2hUb1ByZXZpb3VzTG9jYXRpb24uXG5cdCAqIEBwYXJhbSBsb2MgcHJlZmVyYWJseSBvYnRhaW5lZCBmcm9tIHN0b3JhZ2Vcblx0ICovXG5cdHB1YmxpYyBTd2l0Y2hUb0xvY2F0aW9uKGxvYzogTG9jYXRpb25EYXRhKTogYm9vbGVhbiB7XG5cdFx0bGV0IGluZGV4ID0gdGhpcy5GaW5kSW5kZXgobG9jKTtcblx0XHRpZiAoaW5kZXggPT0gLTEpIHJldHVybiBmYWxzZTtcblxuXHRcdHRoaXMuY3VycmVudEluZGV4ID0gaW5kZXg7XG5cdH1cblxuXHQvKipcblx0ICogVHJpZXMgdG8gZmluZCBhIGxvY2F0aW9uIGluIHN0b3JhZ2UgYmFzZWQgb24gdGhlIGVudHJ5VGV4dFxuXHQgKiBAcGFyYW0gZW50cnlUZXh0IFxuXHQgKi9cblx0cHVibGljIEZpbmRMb2NhdGlvbihlbnRyeVRleHQ6IHN0cmluZyk6IExvY2F0aW9uRGF0YSB7XG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubG9jYXRpb25zLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IHRoaXMubG9jYXRpb25zW2luZGV4XTtcblx0XHRcdGlmIChlbGVtZW50LmVudHJ5VGV4dCA9PSBlbnRyeVRleHQpXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y291bnRyeTogZWxlbWVudC5jb3VudHJ5LFxuXHRcdFx0XHRcdGNpdHk6IGVsZW1lbnQuY2l0eSxcblx0XHRcdFx0XHRlbnRyeVRleHQ6IGVsZW1lbnQuZW50cnlUZXh0LFxuXHRcdFx0XHRcdGxhdDogZWxlbWVudC5sYXQsXG5cdFx0XHRcdFx0bG9uOiBlbGVtZW50Lmxvbixcblx0XHRcdFx0XHR0aW1lWm9uZTogZWxlbWVudC50aW1lWm9uZSxcblx0XHRcdFx0fTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRwcml2YXRlIEVuc3VyZVNlYXJjaEVudHJ5KGxvYzogTG9jYXRpb25EYXRhKTogTG9jYXRpb25EYXRhIHtcblx0XHRpZiAoIWxvYy5lbnRyeVRleHQpXG5cdFx0XHRsb2MuZW50cnlUZXh0ID0gYCR7bG9jLmxhdH0sJHtsb2MubG9ufWA7XG5cblx0XHRyZXR1cm4gbG9jO1xuXHR9XG5cblx0LyoqIE9ubHkgZ2V0cyB0aGUgbG9jYXRpb24sIGlmIHlvdSB3YW50IHRvIHN3aXRjaCBiZXR3ZWVuIGxvY2F0aW9ucywgdXNlIFxuXHQgKiBDb25maWcuU3dpdGNoVG9OZXh0TG9jYXRpb24gZnVuY3Rpb25cblx0ICovXG5cdHB1YmxpYyBHZXROZXh0TG9jYXRpb24oY3VycmVudExvYzogTG9jYXRpb25EYXRhKTogTG9jYXRpb25EYXRhIHtcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJDdXJyZW50IGxvY2F0aW9uOiBcIiArIEpTT04uc3RyaW5naWZ5KGN1cnJlbnRMb2MsIG51bGwsIDIpKTtcblx0XHRpZiAodGhpcy5sb2NhdGlvbnMubGVuZ3RoID09IDApIHJldHVybiBjdXJyZW50TG9jOyAvLyB0aGlzIHNob3VsZCBub3QgaGFwcGVuLCBhcyBidXR0b25zIGFyZSB1c2VsZXNzIGluIHRoaXMgY2FzZVxuXHRcdGxldCBuZXh0SW5kZXggPSBudWxsO1xuXHRcdGlmICh0aGlzLkluU3RvcmFnZShjdXJyZW50TG9jKSkgeyAvLyBpZiBsb2NhdGlvbiBpcyBzdG9yZWQgbW92ZSB0byB0aGUgb25lIG5leHQgdG8gaXRcblx0XHRcdG5leHRJbmRleCA9IHRoaXMuRmluZEluZGV4KGN1cnJlbnRMb2MpICsgMTtcblx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkN1cnJlbnQgbG9jYXRpb24gZm91bmQgaW4gc3RvcmFnZSBhdCBpbmRleCBcIiArIChuZXh0SW5kZXggLSAxKS50b1N0cmluZygpICsgXCIsIG1vdmluZyB0byB0aGUgbmV4dCBpbmRleFwiKVxuXHRcdH1cblx0XHRlbHNlIHsgLy8gbW92ZSB0byB0aGUgbG9jYXRpb24gbmV4dCB0byB0aGUgbGFzdCB1c2VkIGxvY2F0aW9uXG5cdFx0XHRuZXh0SW5kZXggPSB0aGlzLmN1cnJlbnRJbmRleCsrO1xuXHRcdH1cblxuXHRcdC8vIFJvdGF0ZSBpZiByZWFjaGVkIGVuZCBvZiBhcnJheVxuXHRcdGlmIChuZXh0SW5kZXggPiB0aGlzLmxvY2F0aW9ucy5sZW5ndGggLSAxKSB7XG5cdFx0XHRuZXh0SW5kZXggPSAwO1xuXHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiUmVhY2hlZCBlbmQgb2Ygc3RvcmFnZSwgbW92ZSB0byB0aGUgYmVnaW5uaW5nXCIpXG5cdFx0fVxuXG5cdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiU3dpdGNoaW5nIHRvIGluZGV4IFwiICsgbmV4dEluZGV4LnRvU3RyaW5nKCkgKyBcIi4uLlwiKTtcblx0XHR0aGlzLmN1cnJlbnRJbmRleCA9IG5leHRJbmRleDtcblx0XHQvLyBSZXR1cm4gY29weSwgbm90IG9yaWdpbmFsIHNvIG5vdGhpbmcgaW50ZXJmZXJlcyB3aXRoIGZpbGVTdG9yZVxuXHRcdHJldHVybiB7XG5cdFx0XHRjb3VudHJ5OiB0aGlzLmxvY2F0aW9uc1tuZXh0SW5kZXhdLmNvdW50cnksXG5cdFx0XHRjaXR5OiB0aGlzLmxvY2F0aW9uc1tuZXh0SW5kZXhdLmNpdHksXG5cdFx0XHRlbnRyeVRleHQ6IHRoaXMubG9jYXRpb25zW25leHRJbmRleF0uZW50cnlUZXh0LFxuXHRcdFx0bGF0OiB0aGlzLmxvY2F0aW9uc1tuZXh0SW5kZXhdLmxhdCxcblx0XHRcdGxvbjogdGhpcy5sb2NhdGlvbnNbbmV4dEluZGV4XS5sb24sXG5cdFx0XHR0aW1lWm9uZTogdGhpcy5sb2NhdGlvbnNbbmV4dEluZGV4XS50aW1lWm9uZSxcblx0XHR9XG5cdH1cblxuXHQvKiogT25seSBnZXRzIHRoZSBsb2NhdGlvbiwgaWYgeW91IHdhbnQgdG8gc3dpdGNoIGJldHdlZW4gbG9jYXRpb25zLCB1c2UgXG5cdCAqIENvbmZpZy5Td2l0Y2hUb1ByZXZpb3VzTG9jYXRpb24gZnVuY3Rpb25cblx0ICovXG5cdHB1YmxpYyBHZXRQcmV2aW91c0xvY2F0aW9uKGN1cnJlbnRMb2M6IExvY2F0aW9uRGF0YSk6IExvY2F0aW9uRGF0YSB7XG5cdFx0aWYgKHRoaXMubG9jYXRpb25zLmxlbmd0aCA9PSAwKSByZXR1cm4gY3VycmVudExvYzsgLy8gdGhpcyBzaG91bGQgbm90IGhhcHBlbiwgYXMgYnV0dG9ucyBhcmUgdXNlbGVzcyBpbiB0aGlzIGNhc2Vcblx0XHRsZXQgcHJldmlvdXNJbmRleCA9IG51bGw7XG5cdFx0aWYgKHRoaXMuSW5TdG9yYWdlKGN1cnJlbnRMb2MpKSB7IC8vIGlmIGxvY2F0aW9uIGlzIHN0b3JlZCBtb3ZlIHRvIHRoZSBwcmV2aW91cyBvbmVcblx0XHRcdHByZXZpb3VzSW5kZXggPSB0aGlzLkZpbmRJbmRleChjdXJyZW50TG9jKSAtIDE7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJDdXJyZW50IGxvY2F0aW9uIGZvdW5kIGluIHN0b3JhZ2UgYXQgaW5kZXggXCIgKyAocHJldmlvdXNJbmRleCArIDEpLnRvU3RyaW5nKCkgKyBcIiwgbW92aW5nIHRvIHRoZSBuZXh0IGluZGV4XCIpXG5cdFx0fVxuXHRcdGVsc2UgeyAvLyBtb3ZlIHRvIHRoZSBsb2NhdGlvbiBwcmV2aW91cyB0byB0aGUgbGFzdCB1c2VkIGxvY2F0aW9uXG5cdFx0XHRwcmV2aW91c0luZGV4ID0gdGhpcy5jdXJyZW50SW5kZXgtLTtcblx0XHR9XG5cblx0XHQvLyBSb3RhdGUgaWYgcmVhY2hlZCBlbmQgb2YgYXJyYXlcblx0XHRpZiAocHJldmlvdXNJbmRleCA8IDApIHtcblx0XHRcdHByZXZpb3VzSW5kZXggPSB0aGlzLmxvY2F0aW9ucy5sZW5ndGggLSAxO1xuXHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiUmVhY2hlZCBzdGFydCBvZiBzdG9yYWdlLCBtb3ZlIHRvIHRoZSBlbmRcIilcblx0XHR9XG5cblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJTd2l0Y2hpbmcgdG8gaW5kZXggXCIgKyBwcmV2aW91c0luZGV4LnRvU3RyaW5nKCkgKyBcIi4uLlwiKTtcblx0XHR0aGlzLmN1cnJlbnRJbmRleCA9IHByZXZpb3VzSW5kZXg7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvdW50cnk6IHRoaXMubG9jYXRpb25zW3ByZXZpb3VzSW5kZXhdLmNvdW50cnksXG5cdFx0XHRjaXR5OiB0aGlzLmxvY2F0aW9uc1twcmV2aW91c0luZGV4XS5jaXR5LFxuXHRcdFx0ZW50cnlUZXh0OiB0aGlzLmxvY2F0aW9uc1twcmV2aW91c0luZGV4XS5lbnRyeVRleHQsXG5cdFx0XHRsYXQ6IHRoaXMubG9jYXRpb25zW3ByZXZpb3VzSW5kZXhdLmxhdCxcblx0XHRcdGxvbjogdGhpcy5sb2NhdGlvbnNbcHJldmlvdXNJbmRleF0ubG9uLFxuXHRcdFx0dGltZVpvbmU6IHRoaXMubG9jYXRpb25zW3ByZXZpb3VzSW5kZXhdLnRpbWVab25lLFxuXHRcdH07XG5cdH1cblxuXHRwdWJsaWMgU2hvdWxkU2hvd0xvY2F0aW9uU2VsZWN0b3JzKGN1cnJlbnRMb2M6IExvY2F0aW9uRGF0YSk6IGJvb2xlYW4ge1xuXHRcdGxldCB0aHJlc2hvbGQgPSB0aGlzLkluU3RvcmFnZShjdXJyZW50TG9jKSA/IDIgOiAxO1xuXHRcdGlmICh0aGlzLmxvY2F0aW9ucy5sZW5ndGggPj0gdGhyZXNob2xkKVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIFNhdmVDdXJyZW50TG9jYXRpb24obG9jOiBMb2NhdGlvbkRhdGEpIHtcblx0XHRpZiAodGhpcy5hcHAuTG9ja2VkKCkpIHtcblx0XHRcdE5vdGlmaWNhdGlvblNlcnZpY2UuSW5zdGFuY2UuU2VuZChfKFwiV2FybmluZ1wiKSArIFwiIC0gXCIgKyBfKFwiTG9jYXRpb24gU3RvcmVcIiksIF8oXCJZb3UgY2FuIG9ubHkgc2F2ZSBjb3JyZWN0IGxvY2F0aW9ucyB3aGVuIHRoZSBhcHBsZXQgaXMgbm90IHJlZnJlc2hpbmdcIiksIHRydWUpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAobG9jID09IG51bGwpIHtcblx0XHRcdE5vdGlmaWNhdGlvblNlcnZpY2UuSW5zdGFuY2UuU2VuZChfKFwiV2FybmluZ1wiKSArIFwiIC0gXCIgKyBfKFwiTG9jYXRpb24gU3RvcmVcIiksIF8oXCJZb3UgY2FuJ3Qgc2F2ZSBhbiBpbmNvcnJlY3QgbG9jYXRpb25cIiksIHRydWUpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy5JblN0b3JhZ2UobG9jKSkge1xuXHRcdFx0Tm90aWZpY2F0aW9uU2VydmljZS5JbnN0YW5jZS5TZW5kKF8oXCJJbmZvXCIpICsgXCIgLSBcIiArIF8oXCJMb2NhdGlvbiBTdG9yZVwiKSwgXyhcIkxvY2F0aW9uIGlzIGFscmVhZHkgc2F2ZWRcIiksIHRydWUpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRsb2MudGltZVpvbmUgPSB0aGlzLmFwcC5jb25maWcuVGltZXpvbmU7XG5cdFx0dGhpcy5sb2NhdGlvbnMucHVzaChsb2MpO1xuXHRcdHRoaXMuY3VycmVudEluZGV4ID0gdGhpcy5sb2NhdGlvbnMubGVuZ3RoIC0gMTsgLy8gaGVhZCB0byBzYXZlZCBsb2NhdGlvblxuXHRcdHRoaXMuSW52b2tlU3RvcmFnZUNoYW5nZWQoKTtcblx0XHR0aGlzLlNhdmVCYWNrTG9jYXRpb25zKCk7XG5cdH1cblxuXHRwcml2YXRlIEludm9rZVN0b3JhZ2VDaGFuZ2VkKCkge1xuXHRcdHRoaXMuU3RvcmVDaGFuZ2VkLkludm9rZSh0aGlzLCB0aGlzLmxvY2F0aW9ucy5sZW5ndGgpO1xuXHR9XG5cblx0cHJpdmF0ZSBTYXZlQmFja0xvY2F0aW9ucygpIHtcblx0XHR0aGlzLmNvbmZpZy5TZXRMb2NhdGlvbkxpc3QodGhpcy5sb2NhdGlvbnMpO1xuXHR9XG5cblx0cHJpdmF0ZSBJblN0b3JhZ2UobG9jOiBMb2NhdGlvbkRhdGEpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5GaW5kSW5kZXgobG9jKSAhPSAtMTtcblx0fVxuXG5cdHByaXZhdGUgRmluZEluZGV4KGxvYzogTG9jYXRpb25EYXRhLCBsb2NhdGlvbnM6IExvY2F0aW9uRGF0YVtdID0gbnVsbCk6IG51bWJlciB7XG5cdFx0aWYgKGxvYyA9PSBudWxsKSByZXR1cm4gLTE7XG5cdFx0aWYgKGxvY2F0aW9ucyA9PSBudWxsKSBsb2NhdGlvbnMgPSB0aGlzLmxvY2F0aW9uc1xuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsb2NhdGlvbnMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRjb25zdCBlbGVtZW50ID0gbG9jYXRpb25zW2luZGV4XTtcblx0XHRcdGlmIChlbGVtZW50LmVudHJ5VGV4dCA9PSBsb2MuZW50cnlUZXh0KSByZXR1cm4gaW5kZXg7XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgMiBsb2NhdGlvbnMgYXJlIGNvbXBsZXRlbHkgZXF1YWxcblx0ICogQHBhcmFtIG9sZExvYyBcblx0ICogQHBhcmFtIG5ld0xvYyBcblx0ICovXG5cdHByaXZhdGUgSXNFcXVhbChvbGRMb2M6IExvY2F0aW9uRGF0YSwgbmV3TG9jOiBMb2NhdGlvbkRhdGEpOiBib29sZWFuIHtcblx0XHRpZiAob2xkTG9jID09IG51bGwpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0aWYgKG5ld0xvYyA9PSBudWxsKVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdGZvciAobGV0IGtleSBpbiBuZXdMb2MpIHtcblx0XHRcdGlmICgob2xkTG9jIGFzIGFueSlba2V5XSAhPSAobmV3TG9jIGFzIGFueSlba2V5XSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn0iLCJpbXBvcnQgeyBMb2cgfSBmcm9tIFwiLi4vbGliL2xvZ2dlclwiO1xuaW1wb3J0IHsgV2VhdGhlckFwcGxldCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBMb2NhdGlvbkRhdGEgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IF8gfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuLyoqXG4gKiBOb21pbmF0aW0gY29tbXVuaWNhdGlvbiBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0IGNsYXNzIEdlb0xvY2F0aW9uIHtcblx0cHJpdmF0ZSB1cmwgPSBcImh0dHBzOi8vbm9taW5hdGltLm9wZW5zdHJlZXRtYXAub3JnL3NlYXJjaC9cIjtcblx0cHJpdmF0ZSBwYXJhbXMgPSBcIj9mb3JtYXQ9anNvbiZhZGRyZXNzZGV0YWlscz0xJmxpbWl0PTFcIjtcblx0cHJpdmF0ZSBBcHA6IFdlYXRoZXJBcHBsZXQgPSBudWxsO1xuXHRwcml2YXRlIGNhY2hlOiBMb2NhdGlvbkNhY2hlID0ge307XG5cblx0Y29uc3RydWN0b3IoYXBwOiBXZWF0aGVyQXBwbGV0KSB7XG5cdFx0dGhpcy5BcHAgPSBhcHA7XG5cdH1cblxuXHQvKipcblx0ICogRmluZHMgbG9jYXRpb24gYW5kIHJlYnVpbGRzIGVudHJ5VGV4dCBzbyBpdCBjYW4gYmUgbG9va2VkIHVwIGFnYWluXG5cdCAqIEBwYXJhbSBzZWFyY2hUZXh0IFxuXHQgKi9cblx0cHVibGljIGFzeW5jIEdldExvY2F0aW9uKHNlYXJjaFRleHQ6IHN0cmluZyk6IFByb21pc2U8TG9jYXRpb25EYXRhPiB7XG5cdFx0dHJ5IHtcblx0XHRcdHNlYXJjaFRleHQgPSBzZWFyY2hUZXh0LnRyaW0oKTtcblx0XHRcdGxldCBjYWNoZWQgPSB0aGlzLmNhY2hlPy5zZWFyY2hUZXh0O1xuXHRcdFx0aWYgKGNhY2hlZCAhPSBudWxsKSB7XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIlJldHVybmluZyBjYWNoZWQgZ2VvbG9jYXRpb24gaW5mbyBmb3IgJ1wiICsgc2VhcmNoVGV4dCArIFwiJy5cIik7XG5cdFx0XHRcdHJldHVybiBjYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBsb2NhdGlvbkRhdGEgPSBhd2FpdCB0aGlzLkFwcC5Mb2FkSnNvbkFzeW5jPGFueT4odGhpcy51cmwgKyBlbmNvZGVVUklDb21wb25lbnQoc2VhcmNoVGV4dCkgKyB0aGlzLnBhcmFtcyk7XG5cdFx0XHRpZiAobG9jYXRpb25EYXRhID09IG51bGwpXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRpZiAobG9jYXRpb25EYXRhLmxlbmd0aCA9PSAwKSB7XG5cdFx0XHRcdHRoaXMuQXBwLlNob3dFcnJvcih7XG5cdFx0XHRcdFx0dHlwZTogXCJoYXJkXCIsXG5cdFx0XHRcdFx0ZGV0YWlsOiBcImJhZCBsb2NhdGlvbiBmb3JtYXRcIixcblx0XHRcdFx0XHRtZXNzYWdlOiBfKFwiQ291bGQgbm90IGZpbmQgbG9jYXRpb24gYmFzZWQgb24gYWRkcmVzcywgcGxlYXNlIGNoZWNrIGlmIGl0J3MgcmlnaHRcIilcblx0XHRcdFx0fSlcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJMb2NhdGlvbiBpcyBmb3VuZCwgcGF5bG9hZDogXCIgKyBKU09OLnN0cmluZ2lmeShsb2NhdGlvbkRhdGEsIG51bGwsIDIpKTtcblx0XHRcdGxldCByZXN1bHQ6IExvY2F0aW9uRGF0YSA9IHtcblx0XHRcdFx0bGF0OiBwYXJzZUZsb2F0KGxvY2F0aW9uRGF0YVswXS5sYXQpLFxuXHRcdFx0XHRsb246IHBhcnNlRmxvYXQobG9jYXRpb25EYXRhWzBdLmxvbiksXG5cdFx0XHRcdGNpdHk6IGxvY2F0aW9uRGF0YVswXS5hZGRyZXNzLmNpdHkgfHwgbG9jYXRpb25EYXRhWzBdLmFkZHJlc3MudG93biB8fCBsb2NhdGlvbkRhdGFbMF0uYWRkcmVzcy52aWxsYWdlLFxuXHRcdFx0XHRjb3VudHJ5OiBsb2NhdGlvbkRhdGFbMF0uYWRkcmVzcy5jb3VudHJ5LFxuXHRcdFx0XHR0aW1lWm9uZTogbnVsbCxcblx0XHRcdFx0ZW50cnlUZXh0OiB0aGlzLkJ1aWxkRW50cnlUZXh0KGxvY2F0aW9uRGF0YVswXSksXG5cdFx0XHR9XG5cdFx0XHR0aGlzLmNhY2hlW3NlYXJjaFRleHRdID0gcmVzdWx0O1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIkNvdWxkIG5vdCBnZW8gbG9jYXRlLCBlcnJvcjogXCIgKyBKU09OLnN0cmluZ2lmeShlLCBudWxsLCAyKSk7XG5cdFx0XHR0aGlzLkFwcC5TaG93RXJyb3Ioe1xuXHRcdFx0XHR0eXBlOiBcInNvZnRcIixcblx0XHRcdFx0ZGV0YWlsOiBcImJhZCBhcGkgcmVzcG9uc2VcIixcblx0XHRcdFx0bWVzc2FnZTogXyhcIkZhaWxlZCB0byBjYWxsIEdlb2xvY2F0aW9uIEFQSSwgc2VlIExvb2tpbmcgR2xhc3MgZm9yIGVycm9ycy5cIilcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTm9taW5hdGltIGRvZXNuJ3QgcmV0dXJuIGFueSByZXN1bHQgaWYgdGhlIFN0YXRlIGRpc3RyaWN0IGlzIGluY2x1ZGVkIGluIHRoZSBzZWFyY2ggXG5cdCAqIGluIHNwZWNpZmljIGNhc2UsIHdlIGhhdmUgdG8gYnVpbGQgaXQgZnJvbSB0aGUgYWRkcmVzcyBkZXRhaWxzIG9taXR0aW5nIHNwZWNpZmljXG5cdCAqIGtleXNcblx0ICogQHBhcmFtIGxvY2F0aW9uRGF0YSBcblx0ICovXG5cdHByaXZhdGUgQnVpbGRFbnRyeVRleHQobG9jYXRpb25EYXRhOiBhbnkpOiBzdHJpbmcge1xuXHRcdGlmIChsb2NhdGlvbkRhdGEuYWRkcmVzcyA9PSBudWxsKSByZXR1cm4gbG9jYXRpb25EYXRhLmRpc3BsYXlfbmFtZTtcblx0XHRsZXQgZW50cnlUZXh0OiBzdHJpbmdbXSA9IFtdO1xuXHRcdGZvciAobGV0IGtleSBpbiBsb2NhdGlvbkRhdGEuYWRkcmVzcykge1xuXHRcdFx0aWYgKGtleSA9PSBcInN0YXRlX2Rpc3RyaWN0XCIpIGNvbnRpbnVlO1xuXHRcdFx0aWYgKGtleSA9PSBcImNvdW50eVwiKSBjb250aW51ZTtcblx0XHRcdGlmIChrZXkgPT0gXCJjb3VudHJ5X2NvZGVcIikgY29udGludWU7XG5cdFx0XHRlbnRyeVRleHQucHVzaChsb2NhdGlvbkRhdGEuYWRkcmVzc1trZXldKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVudHJ5VGV4dC5qb2luKFwiLCBcIik7XG5cdH1cbn1cblxudHlwZSBMb2NhdGlvbkNhY2hlID0ge1xuXHRba2V5OiBzdHJpbmddOiBMb2NhdGlvbkRhdGFcbn0iLCJpbXBvcnQgeyBXZWF0aGVyQXBwbGV0IH0gZnJvbSBcIi4vbWFpblwiO1xuaW1wb3J0IHsgSXBBcGkgfSBmcm9tIFwiLi9sb2NhdGlvbl9zZXJ2aWNlcy9pcEFwaVwiO1xuaW1wb3J0IHsgTG9jYXRpb25EYXRhIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IGNsZWFyVGltZW91dCwgc2V0VGltZW91dCwgXywgSXNDb29yZGluYXRlLCBDb25zdHJ1Y3RKc0xvY2FsZSB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBMb2cgfSBmcm9tIFwiLi9saWIvbG9nZ2VyXCI7XG5pbXBvcnQgeyBVVUlEIH0gZnJvbSBcIi4vY29uc3RzXCI7XG5pbXBvcnQgeyBMb2NhdGlvblN0b3JlIH0gZnJvbSBcIi4vbG9jYXRpb25fc2VydmljZXMvbG9jYXRpb25zdG9yZVwiO1xuaW1wb3J0IHsgR2VvTG9jYXRpb24gfSBmcm9tIFwiLi9sb2NhdGlvbl9zZXJ2aWNlcy9ub21pbmF0aW1cIjtcblxuY29uc3QgeyBBcHBsZXRTZXR0aW5ncywgQmluZGluZ0RpcmVjdGlvbiB9ID0gaW1wb3J0cy51aS5zZXR0aW5ncztcbmNvbnN0IExhbmc6IHR5cGVvZiBpbXBvcnRzLmxhbmcgPSBpbXBvcnRzLmxhbmc7XG5jb25zdCBrZXliaW5kaW5nTWFuYWdlciA9IGltcG9ydHMudWkubWFpbi5rZXliaW5kaW5nTWFuYWdlcjtcbmNvbnN0IHsgSWNvblR5cGUgfSA9IGltcG9ydHMuZ2kuU3Q7XG5jb25zdCB7IGdldF9sYW5ndWFnZV9uYW1lcyB9ID0gaW1wb3J0cy5naS5HTGliO1xuY29uc3QgeyBTZXR0aW5ncyB9ID0gaW1wb3J0cy5naS5HaW87XG5cbi8qKiBVbml0cyBVc2VkIGluIE9wdGlvbnMuIENoYW5nZSBPcHRpb25zIGxpc3QgaWYgWW91IGNoYW5nZSB0aGlzISAqL1xuZXhwb3J0IHR5cGUgV2VhdGhlclVuaXRzID0gJ2F1dG9tYXRpYycgfCAnY2Vsc2l1cycgfCAnZmFocmVuaGVpdCc7XG4vKiogVW5pdHMgVXNlZCBpbiBPcHRpb25zLiBDaGFuZ2UgT3B0aW9ucyBsaXN0IGlmIFlvdSBjaGFuZ2UgdGhpcyEgKi9cbmV4cG9ydCB0eXBlIFdlYXRoZXJXaW5kU3BlZWRVbml0cyA9ICdhdXRvbWF0aWMnIHwgJ2twaCcgfCAnbXBoJyB8ICdtL3MnIHwgJ0tub3RzJyB8ICdCZWF1Zm9ydCc7XG4vKiogVW5pdHMgdXNlZCBpbiBPcHRpb25zLiBDaGFuZ2UgT3B0aW9ucyBsaXN0IGlmIFlvdSBjaGFuZ2UgdGhpcyEgKi9cbmV4cG9ydCB0eXBlIFdlYXRoZXJQcmVzc3VyZVVuaXRzID0gJ2hQYScgfCAnbW0gSGcnIHwgJ2luIEhnJyB8ICdQYScgfCAncHNpJyB8ICdhdG0nIHwgJ2F0Jztcbi8qKiBDaGFuZ2Ugc2V0dGluZ3Mtc2NoZW1hIGlmIHlvdSBjaGFuZ2UgdGhpcyEgKi9cbmV4cG9ydCB0eXBlIERpc3RhbmNlVW5pdHMgPSAnYXV0b21hdGljJyB8ICdtZXRyaWMnIHwgJ2ltcGVyaWFsJztcblxuLyoqIENoYW5nZSBzZXR0aW5ncy1zY2hlbWEgaWYgeW91IGNoYW5nZSB0aGlzICovXG5leHBvcnQgdHlwZSBTZXJ2aWNlcyA9XG5cdFwiT3BlbldlYXRoZXJNYXBcIiB8XG5cdFwiRGFya1NreVwiIHxcblx0XCJNZXROb3J3YXlcIiB8XG5cdFwiV2VhdGhlcmJpdFwiIHxcblx0XCJDbGltYWNlbGxWNFwiIHxcblx0XCJNZXQgT2ZmaWNlIFVLXCIgfFxuXHRcIlVTIFdlYXRoZXJcIiB8XG5cdFwiVmlzdWFsIENyb3NzaW5nXCIgfFxuXHRcIkRhbmlzaE1JXCI7XG5cbi8qKlxuICogS2V5cyBtYXRjaGluZyB0aGUgb25lcyBpbiBzZXR0aW5ncy1zY2hlbWEuanNvblxuICovXG5jb25zdCBLZXlzID0ge1xuXHREQVRBX1NFUlZJQ0U6IFwiZGF0YVNlcnZpY2VcIixcblx0QVBJX0tFWTogXCJhcGlLZXlcIixcblx0VEVNUEVSQVRVUkVfVU5JVF9LRVk6IFwidGVtcGVyYXR1cmVVbml0XCIsXG5cdFRFTVBFUkFUVVJFX0hJR0hfRklSU1Q6IFwidGVtcGVyYXR1cmVIaWdoRmlyc3RcIixcblx0V0lORF9TUEVFRF9VTklUOiBcIndpbmRTcGVlZFVuaXRcIixcblx0RElTVEFOQ0VfVU5JVDogXCJkaXN0YW5jZVVuaXRcIixcblx0Q0lUWTogXCJsb2NhdGlvbkxhYmVsT3ZlcnJpZGVcIixcblx0VFJBTlNMQVRFX0NPTkRJVElPTjogXCJ0cmFuc2xhdGVDb25kaXRpb25cIixcblx0VkVSVElDQUxfT1JJRU5UQVRJT046IFwidmVydGljYWxPcmllbnRhdGlvblwiLFxuXHRTSE9XX1RFWFRfSU5fUEFORUw6IFwic2hvd1RleHRJblBhbmVsXCIsXG5cdFRFTVBfVEVYVF9PVkVSUklERTogXCJ0ZW1wVGV4dE92ZXJyaWRlXCIsXG5cdFNIT1dfQ09NTUVOVF9JTl9QQU5FTDogXCJzaG93Q29tbWVudEluUGFuZWxcIixcblx0U0hPV19TVU5SSVNFOiBcInNob3dTdW5yaXNlXCIsXG5cdFNIT1dfMjRIT1VSUzogXCJzaG93MjRIb3Vyc1wiLFxuXHRGT1JFQ0FTVF9EQVlTOiBcImZvcmVjYXN0RGF5c1wiLFxuXHRGT1JFQ0FTVF9IT1VSUzogXCJmb3JlY2FzdEhvdXJzXCIsXG5cdEZPUkVDQVNUX0NPTFM6IFwiZm9yZWNhc3RDb2x1bW5zXCIsXG5cdEZPUkVDQVNUX1JPV1M6IFwiZm9yZWNhc3RSb3dzXCIsXG5cdFJFRlJFU0hfSU5URVJWQUw6IFwicmVmcmVzaEludGVydmFsXCIsXG5cdFBSRVNTVVJFX1VOSVQ6IFwicHJlc3N1cmVVbml0XCIsXG5cdFNIT1JUX0NPTkRJVElPTlM6IFwic2hvcnRDb25kaXRpb25zXCIsXG5cdE1BTlVBTF9MT0NBVElPTjogXCJtYW51YWxMb2NhdGlvblwiLFxuXHRVU0VfQ1VTVE9NX0FQUExFVElDT05TOiAndXNlQ3VzdG9tQXBwbGV0SWNvbnMnLFxuXHRVU0VfQ1VTVE9NX01FTlVJQ09OUzogXCJ1c2VDdXN0b21NZW51SWNvbnNcIixcblx0UlVTU0lBTl9TVFlMRTogXCJ0ZW1wUnVzc2lhblN0eWxlXCIsXG5cdFNIT1JUX0hPVVJMWV9USU1FOiBcInNob3J0SG91cmx5VGltZVwiLFxuXHRTSE9XX0ZPUkVDQVNUX0RBVEVTOiBcInNob3dGb3JlY2FzdERhdGVzXCIsXG5cdFdFQVRIRVJfVVNFX1NZTUJPTElDX0lDT05TX0tFWTogJ3VzZVN5bWJvbGljSWNvbnMnLFxuXHRJTU1FRElBVEVfUFJFQ0lQOiBcImltbWVkaWF0ZVByZWNpcFwiLFxuXHRTSE9XX0JPVEhfVEVNUDogXCJzaG93Qm90aFRlbXBVbml0c1wiLFxuXHRESVNQTEFZX1dJTkRfRElSX0FTX1RFWFQ6IFwiZGlzcGxheVdpbmRBc1RleHRcIlxufVxuXG5leHBvcnQgY2xhc3MgQ29uZmlnIHtcblx0Ly8gSW5mbyBwYXJ0aWFsbHkgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdW5pY29kZS1vcmcvY2xkci9ibG9iL3JlbGVhc2UtMzgtMS9jb21tb24vc3VwcGxlbWVudGFsL3VuaXRzLnhtbFxuXHQvKiogRGVmYXVsdCBpcyBjZWxzaXVzICovXG5cdHByaXZhdGUgcmVhZG9ubHkgZmFocmVuaGVpdENvdW50cmllcyA9IFtcImJzXCIsIFwiYnpcIiwgXCJreVwiLCBcInByXCIsIFwicHdcIiwgXCJ1c1wiXTtcblx0LyoqIERlZmF1bHQga3BoLCBnYiBhZGRlZCB0byBtcGgga2V5cyAgKi9cblx0cHJpdmF0ZSByZWFkb25seSB3aW5kU3BlZWRVbml0TG9jYWxlczogV2luZFNwZWVkTG9jYWxlUHJlZnMgPSB7XG5cdFx0XCJmaSBrciBubyBwbCBydSBzZVwiOiBcIm0vc1wiLFxuXHRcdFwidXMgZ2JcIjogXCJtcGhcIlxuXHR9XG5cdC8qKiBEZWZhdWx0IG1ldHJpYyAqL1xuXHRwcml2YXRlIHJlYWRvbmx5IGRpc3RhbmNlVW5pdExvY2FsZXM6IERpc3RhbmNlVW5pdExvY2FsZVByZWZzID0ge1xuXHRcdFwidXMgZ2JcIjogXCJpbXBlcmlhbFwiXG5cdH1cblxuXHRwcml2YXRlIHJlYWRvbmx5IFdFQVRIRVJfTE9DQVRJT04gPSBcImxvY2F0aW9uXCI7XG5cdHByaXZhdGUgcmVhZG9ubHkgV0VBVEhFUl9MT0NBVElPTl9MSVNUID0gXCJsb2NhdGlvbkxpc3RcIjtcblx0Ly8gU2V0dGluZ3MgdmFyaWFibGVzIHRvIGJpbmQgdG9cblx0Ly8gY29tcGxleCB2YXJpYWJsZXMsIHVzaW5nIGdldHRlcnMgaW5zdGVhZCB0byBhY2Nlc3Ncblx0cHJpdmF0ZSByZWFkb25seSBfbG9jYXRpb246IHN0cmluZztcblx0cHJpdmF0ZSByZWFkb25seSBfdGVtcGVyYXR1cmVVbml0OiBXZWF0aGVyVW5pdHM7XG5cdHByaXZhdGUgcmVhZG9ubHkgX3dpbmRTcGVlZFVuaXQ6IFdlYXRoZXJXaW5kU3BlZWRVbml0cztcblx0cHJpdmF0ZSByZWFkb25seSBfZGlzdGFuY2VVbml0OiBEaXN0YW5jZVVuaXRzO1xuXHRwcml2YXRlIHJlYWRvbmx5IF9hcGlLZXk6IHN0cmluZztcblx0cHJpdmF0ZSByZWFkb25seSBfdXNlU3ltYm9saWNJY29uczogYm9vbGVhbjtcblx0Ly8gTm8gbmVlZCB0byBhY2Nlc3MgdGhpcyBmcm9tIHRoZSBvdXRzaWRlXG5cdHByaXZhdGUgcmVhZG9ubHkga2V5YmluZGluZzogc3RyaW5nO1xuXG5cdC8vIHNpbXBsZSB2YXJpYWJsZXNcblx0cHVibGljIHJlYWRvbmx5IF9yZWZyZXNoSW50ZXJ2YWw6IG51bWJlcjtcblx0cHVibGljIHJlYWRvbmx5IF9tYW51YWxMb2NhdGlvbjogYm9vbGVhbjtcblx0cHVibGljIHJlYWRvbmx5IF9kYXRhU2VydmljZTogU2VydmljZXM7XG5cdHB1YmxpYyByZWFkb25seSBfdHJhbnNsYXRlQ29uZGl0aW9uOiBib29sZWFuO1xuXHRwdWJsaWMgcmVhZG9ubHkgX3ByZXNzdXJlVW5pdDogV2VhdGhlclByZXNzdXJlVW5pdHM7XG5cdHB1YmxpYyByZWFkb25seSBfc2hvdzI0SG91cnM6IGJvb2xlYW47XG5cdHB1YmxpYyByZWFkb25seSBfZm9yZWNhc3REYXlzOiBudW1iZXI7XG5cdHB1YmxpYyByZWFkb25seSBfZm9yZWNhc3RIb3VyczogbnVtYmVyO1xuXHRwdWJsaWMgcmVhZG9ubHkgX2ZvcmVjYXN0Q29sdW1uczogbnVtYmVyO1xuXHRwdWJsaWMgcmVhZG9ubHkgX2ZvcmVjYXN0Um93czogbnVtYmVyO1xuXHRwdWJsaWMgcmVhZG9ubHkgX3ZlcnRpY2FsT3JpZW50YXRpb246IGJvb2xlYW47XG5cdHB1YmxpYyByZWFkb25seSBfdGVtcGVyYXR1cmVIaWdoRmlyc3Q6IGJvb2xlYW47XG5cdHB1YmxpYyByZWFkb25seSBfc2hvcnRDb25kaXRpb25zOiBib29sZWFuO1xuXHRwdWJsaWMgcmVhZG9ubHkgX3Nob3dTdW5yaXNlOiBib29sZWFuO1xuXHRwdWJsaWMgcmVhZG9ubHkgX3Nob3dDb21tZW50SW5QYW5lbDogYm9vbGVhbjtcblx0cHVibGljIHJlYWRvbmx5IF9zaG93VGV4dEluUGFuZWw6IGJvb2xlYW47XG5cdHB1YmxpYyByZWFkb25seSBfbG9jYXRpb25MYWJlbE92ZXJyaWRlOiBzdHJpbmc7XG5cdHB1YmxpYyByZWFkb25seSBfdXNlQ3VzdG9tQXBwbGV0SWNvbnM6IGJvb2xlYW47XG5cdHB1YmxpYyByZWFkb25seSBfdXNlQ3VzdG9tTWVudUljb25zOiBib29sZWFuO1xuXHRwdWJsaWMgcmVhZG9ubHkgX3RlbXBUZXh0T3ZlcnJpZGU6IHN0cmluZztcblx0cHVibGljIHJlYWRvbmx5IF90ZW1wUnVzc2lhblN0eWxlOiBib29sZWFuO1xuXHRwdWJsaWMgcmVhZG9ubHkgX3Nob3J0SG91cmx5VGltZTogYm9vbGVhbjtcblx0cHVibGljIHJlYWRvbmx5IF9zaG93Rm9yZWNhc3REYXRlczogYm9vbGVhbjtcblx0cHVibGljIHJlYWRvbmx5IF9sb2NhdGlvbkxpc3Q6IExvY2F0aW9uRGF0YVtdO1xuXHRwdWJsaWMgcmVhZG9ubHkgX2ltbWVkaWF0ZVByZWNpcDogYm9vbGVhbjtcblx0cHVibGljIHJlYWRvbmx5IF9zaG93Qm90aFRlbXBVbml0czogYm9vbGVhbjtcblx0cHVibGljIHJlYWRvbmx5IF9kaXNwbGF5V2luZEFzVGV4dDogYm9vbGVhbjtcblxuXHQvKiogVGltZW91dCAqL1xuXHRwcml2YXRlIGRvbmVUeXBpbmdMb2NhdGlvbjogbnVtYmVyID0gbnVsbDtcblx0cHJpdmF0ZSBjdXJyZW50TG9jYXRpb246IExvY2F0aW9uRGF0YSA9IG51bGw7XG5cblx0cHJpdmF0ZSBzZXR0aW5nczogaW1wb3J0cy51aS5zZXR0aW5ncy5BcHBsZXRTZXR0aW5ncztcblx0cHJpdmF0ZSBhcHA6IFdlYXRoZXJBcHBsZXQ7XG5cdHByaXZhdGUgY291bnRyeUNvZGU6IHN0cmluZztcblxuXHRwcml2YXRlIHRpbWV6b25lOiBzdHJpbmcgPSBudWxsO1xuXG5cdHB1YmxpYyBnZXQgVGltZXpvbmUoKSB7XG5cdFx0cmV0dXJuIHRoaXMudGltZXpvbmU7XG5cdH1cblxuXHRwdWJsaWMgc2V0IFRpbWV6b25lKHZhbHVlOiBzdHJpbmcpIHtcblx0XHRpZiAoIXZhbHVlIHx8IHZhbHVlID09IFwiXCIpXG5cdFx0XHR2YWx1ZSA9IG51bGw7XG5cdFx0dGhpcy50aW1lem9uZSA9IHZhbHVlO1xuXHR9XG5cblx0cHJpdmF0ZSByZWFkb25seSBhdXRvTG9jUHJvdmlkZXI6IElwQXBpXG5cdHByaXZhdGUgcmVhZG9ubHkgZ2VvTG9jYXRpb25TZXJ2aWNlOiBHZW9Mb2NhdGlvbjtcblxuXHQvKiogU3RvcmVzIGFuZCByZXRyaWV2ZXMgbWFudWFsIGxvY2F0aW9ucyAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgTG9jU3RvcmU6IExvY2F0aW9uU3RvcmU7XG5cdHB1YmxpYyBjdXJyZW50TG9jYWxlOiBzdHJpbmc7XG5cblx0cHJpdmF0ZSByZWFkb25seSBJbnRlcmZhY2VTZXR0aW5nczogaW1wb3J0cy5naS5HaW8uU2V0dGluZ3M7XG5cdHByaXZhdGUgY3VycmVudEZvbnRTaXplOiBudW1iZXI7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBXZWF0aGVyQXBwbGV0LCBpbnN0YW5jZUlEOiBudW1iZXIpIHtcblx0XHR0aGlzLmFwcCA9IGFwcDtcblx0XHR0aGlzLmN1cnJlbnRMb2NhbGUgPSBDb25zdHJ1Y3RKc0xvY2FsZShnZXRfbGFuZ3VhZ2VfbmFtZXMoKVswXSk7XG5cdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiU3lzdGVtIGxvY2FsZSBpcyBcIiArIHRoaXMuY3VycmVudExvY2FsZSk7XG5cblx0XHR0aGlzLmF1dG9Mb2NQcm92aWRlciA9IG5ldyBJcEFwaShhcHApOyAvLyBJUCBsb2NhdGlvbiBsb29rdXBcblx0XHR0aGlzLmdlb0xvY2F0aW9uU2VydmljZSA9IG5ldyBHZW9Mb2NhdGlvbihhcHApO1xuXHRcdHRoaXMuY291bnRyeUNvZGUgPSB0aGlzLkdldENvdW50cnlDb2RlKHRoaXMuY3VycmVudExvY2FsZSk7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IG5ldyBBcHBsZXRTZXR0aW5ncyh0aGlzLCBVVUlELCBpbnN0YW5jZUlEKTtcblx0XHR0aGlzLkludGVyZmFjZVNldHRpbmdzID0gbmV3IFNldHRpbmdzKHsgc2NoZW1hOiBcIm9yZy5jaW5uYW1vbi5kZXNrdG9wLmludGVyZmFjZVwiIH0pO1xuXHRcdHRoaXMuSW50ZXJmYWNlU2V0dGluZ3MuY29ubmVjdCgnY2hhbmdlZDo6Zm9udC1uYW1lJywgKCkgPT4gdGhpcy5PbkZvbnRDaGFuZ2VkKCkpO1xuXHRcdHRoaXMuY3VycmVudEZvbnRTaXplID0gdGhpcy5HZXRDdXJyZW50Rm9udFNpemUoKTtcblx0XHR0aGlzLkJpbmRTZXR0aW5ncygpO1xuXHRcdHRoaXMuTG9jU3RvcmUgPSBuZXcgTG9jYXRpb25TdG9yZSh0aGlzLmFwcCwgdGhpcyk7XG5cdH1cblxuXHQvKiogQXR0YWNoZXMgc2V0dGluZ3MgdG8gZnVuY3Rpb25zICovXG5cdHByaXZhdGUgQmluZFNldHRpbmdzKCkge1xuXHRcdGxldCBrOiBrZXlvZiB0eXBlb2YgS2V5cztcblx0XHRmb3IgKGsgaW4gS2V5cykge1xuXHRcdFx0bGV0IGtleSA9IEtleXNba107XG5cdFx0XHRsZXQga2V5UHJvcCA9IFwiX1wiICsga2V5O1xuXHRcdFx0dGhpcy5zZXR0aW5ncy5iaW5kUHJvcGVydHkoQmluZGluZ0RpcmVjdGlvbi5JTixcblx0XHRcdFx0a2V5LCBrZXlQcm9wLCBMYW5nLmJpbmQodGhpcywgdGhpcy5PblNldHRpbmdDaGFuZ2VkKSwgbnVsbCk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0dGluZ3Mgd2hhdCBuZWVkIHNwZWNpYWwgY2FyZVxuXHRcdHRoaXMuc2V0dGluZ3MuYmluZFByb3BlcnR5KEJpbmRpbmdEaXJlY3Rpb24uQklESVJFQ1RJT05BTCxcblx0XHRcdHRoaXMuV0VBVEhFUl9MT0NBVElPTiwgKFwiX1wiICsgdGhpcy5XRUFUSEVSX0xPQ0FUSU9OKSwgTGFuZy5iaW5kKHRoaXMsIHRoaXMuT25Mb2NhdGlvbkNoYW5nZWQpLCBudWxsKTtcblxuXHRcdHRoaXMuc2V0dGluZ3MuYmluZFByb3BlcnR5KEJpbmRpbmdEaXJlY3Rpb24uQklESVJFQ1RJT05BTCxcblx0XHRcdHRoaXMuV0VBVEhFUl9MT0NBVElPTl9MSVNULCAoXCJfXCIgKyB0aGlzLldFQVRIRVJfTE9DQVRJT05fTElTVCksIExhbmcuYmluZCh0aGlzLCB0aGlzLk9uTG9jYXRpb25TdG9yZUNoYW5nZWQpLCBudWxsKTtcblxuXHRcdHRoaXMuc2V0dGluZ3MuYmluZFByb3BlcnR5KEJpbmRpbmdEaXJlY3Rpb24uSU4sIFwia2V5YmluZGluZ1wiLFxuXHRcdFx0XCJrZXliaW5kaW5nXCIsIExhbmcuYmluZCh0aGlzLCB0aGlzLk9uS2V5U2V0dGluZ3NVcGRhdGVkKSwgbnVsbCk7XG5cblx0XHRrZXliaW5kaW5nTWFuYWdlci5hZGRIb3RLZXkoXG5cdFx0XHRVVUlELCB0aGlzLmtleWJpbmRpbmcsIExhbmcuYmluZCh0aGlzLmFwcCwgdGhpcy5hcHAub25fYXBwbGV0X2NsaWNrZWQpKTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgQ3VycmVudEZvbnRTaXplKCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudEZvbnRTaXplO1xuXHR9XG5cblx0cHVibGljIGdldCBDdXJyZW50TG9jYXRpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudExvY2F0aW9uO1xuXHR9XG5cblx0cHVibGljIGdldCBBcGlLZXkoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2FwaUtleS5yZXBsYWNlKFwiIFwiLCBcIlwiKTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgTGFuZ3VhZ2UoKSB7XG5cdFx0cmV0dXJuIHRoaXMuR2V0TGFuZ3VhZ2UodGhpcy5jdXJyZW50TG9jYWxlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyBVbml0cywgYXV0b21hdGljIGlzIGFscmVhZHkgcmVzb2x2ZWQgaGVyZVxuXHQgKi9cblx0cHVibGljIGdldCBUZW1wZXJhdHVyZVVuaXQoKTogV2VhdGhlclVuaXRzIHtcblx0XHRpZiAodGhpcy5fdGVtcGVyYXR1cmVVbml0ID09IFwiYXV0b21hdGljXCIpXG5cdFx0XHRyZXR1cm4gdGhpcy5HZXRMb2NhbGVUZW1wZXJhdGVVbml0KHRoaXMuY291bnRyeUNvZGUpO1xuXHRcdHJldHVybiB0aGlzLl90ZW1wZXJhdHVyZVVuaXQ7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybnMgVW5pdHMsIGF1dG9tYXRpYyBpcyBhbHJlYWR5IHJlc29sdmVkIGhlcmVcblx0ICovXG5cdHB1YmxpYyBnZXQgV2luZFNwZWVkVW5pdCgpOiBXZWF0aGVyV2luZFNwZWVkVW5pdHMge1xuXHRcdGlmICh0aGlzLl93aW5kU3BlZWRVbml0ID09IFwiYXV0b21hdGljXCIpXG5cdFx0XHRyZXR1cm4gdGhpcy5HZXRMb2NhbGVXaW5kU3BlZWRVbml0KHRoaXMuY291bnRyeUNvZGUpO1xuXHRcdHJldHVybiB0aGlzLl93aW5kU3BlZWRVbml0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIFVuaXRzLCBhdXRvbWF0aWMgaXMgYWxyZWFkeSByZXNvbHZlZCBoZXJlXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IERpc3RhbmNlVW5pdCgpOiBEaXN0YW5jZVVuaXRzIHtcblx0XHRpZiAodGhpcy5fZGlzdGFuY2VVbml0ID09IFwiYXV0b21hdGljXCIpIHJldHVybiB0aGlzLkdldExvY2FsZURpc3RhbmNlVW5pdCh0aGlzLmNvdW50cnlDb2RlKTtcblx0XHRyZXR1cm4gdGhpcy5fZGlzdGFuY2VVbml0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgSWNvbiB0eXBlIGJhc2VkIG9uIHVzZXIgY29uZmlnXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IEljb25UeXBlKCk6IGltcG9ydHMuZ2kuU3QuSWNvblR5cGUge1xuXHRcdGlmICh0aGlzLl91c2VDdXN0b21NZW51SWNvbnMpXG5cdFx0XHRyZXR1cm4gSWNvblR5cGUuU1lNQk9MSUM7XG5cblx0XHRyZXR1cm4gdGhpcy5fdXNlU3ltYm9saWNJY29ucyA/XG5cdFx0XHRJY29uVHlwZS5TWU1CT0xJQyA6XG5cdFx0XHRJY29uVHlwZS5GVUxMQ09MT1I7XG5cdH07XG5cblx0cHVibGljIGdldCBBcHBsZXRJY29uVHlwZSgpOiBpbXBvcnRzLmdpLlN0Lkljb25UeXBlIHtcblx0XHRpZiAodGhpcy5fdXNlQ3VzdG9tQXBwbGV0SWNvbnMpXG5cdFx0XHRyZXR1cm4gSWNvblR5cGUuU1lNQk9MSUM7XG5cblx0XHRyZXR1cm4gdGhpcy5fdXNlU3ltYm9saWNJY29ucyA/XG5cdFx0XHRJY29uVHlwZS5TWU1CT0xJQyA6XG5cdFx0XHRJY29uVHlwZS5GVUxMQ09MT1I7XG5cdH1cblxuXHQvKiogQ2FsbGVkIHdoZW4gdXNlciBjaGFuZ2VkIG1hbnVhbCBsb2NhdGlvbnMsIGF1dG9tYXRpY2FsbHkgc3dpdGNoZXMgdG8gbWFudWFsIGxvY2F0aW9uIG1vZGUuICovXG5cdHB1YmxpYyBTd2l0Y2hUb05leHRMb2NhdGlvbigpOiBMb2NhdGlvbkRhdGEge1xuXHRcdGxldCBuZXh0TG9jID0gdGhpcy5Mb2NTdG9yZS5HZXROZXh0TG9jYXRpb24odGhpcy5DdXJyZW50TG9jYXRpb24pO1xuXHRcdGlmIChuZXh0TG9jID09IG51bGwpIHJldHVybiBudWxsO1xuXHRcdHRoaXMuSW5qZWN0TG9jYXRpb25Ub0NvbmZpZyhuZXh0TG9jLCB0cnVlKTtcblx0XHRyZXR1cm4gbmV4dExvYztcblx0fVxuXG5cdC8qKiBDYWxsZWQgd2hlbiB1c2VyIGNoYW5nZWQgbWFudWFsIGxvY2F0aW9ucywgYXV0b21hdGljYWxseSBzd2l0Y2hlcyB0byBtYW51YWwgbG9jYXRpb24gbW9kZS4gKi9cblx0cHVibGljIFN3aXRjaFRvUHJldmlvdXNMb2NhdGlvbigpOiBMb2NhdGlvbkRhdGEge1xuXHRcdGxldCBwcmV2aW91c0xvYyA9IHRoaXMuTG9jU3RvcmUuR2V0UHJldmlvdXNMb2NhdGlvbih0aGlzLkN1cnJlbnRMb2NhdGlvbik7XG5cdFx0aWYgKHByZXZpb3VzTG9jID09IG51bGwpIHJldHVybiBudWxsO1xuXHRcdHRoaXMuSW5qZWN0TG9jYXRpb25Ub0NvbmZpZyhwcmV2aW91c0xvYywgdHJ1ZSk7XG5cdFx0cmV0dXJuIHByZXZpb3VzTG9jO1xuXHR9XG5cblx0cHVibGljIE5vQXBpS2V5KCk6IGJvb2xlYW4ge1xuXHRcdGxldCBrZXkgPSB0aGlzLl9hcGlLZXk/LnJlcGxhY2UoXCIgXCIsIFwiXCIpO1xuXHRcdHJldHVybiAoIWtleSB8fCBrZXkgPT0gXCJcIik7XG5cdH07XG5cblx0LyoqIFxuXHQgKiBAcmV0dXJucyBMb2NhdGlvbkRhdGEgbnVsbCBpZiBmYWlsZWQgdG8gb2J0YWluXG5cdCAqIGNvb3JkaW5hdGVzLiBBdXRvbWF0aWMgbW9kZSBsb29rcyB1cCBkYXRhIHRocm91Z2ggaXAtYXBpLCBcblx0ICogZWxzZSBpdCByZXR1cm5zIGNvb3JkaW5hdGVzIGlmIGl0IHdhcyBlbnRlcmVkLiBJZiB0ZXh0IHdhcyBlbnRlcmVkLFxuXHQgKiBpdCBsb29rcyB1cCBjb29yZGluYXRlcyB2aWEgZ2VvbG9jYXRpb24gYXBpXG5cdCAqL1xuXHRwdWJsaWMgYXN5bmMgRW5zdXJlTG9jYXRpb24oKTogUHJvbWlzZTxMb2NhdGlvbkRhdGE+IHtcblx0XHR0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IG51bGw7XG5cblx0XHQvLyBBdXRvbWF0aWMgbG9jYXRpb25cblx0XHRpZiAoIXRoaXMuX21hbnVhbExvY2F0aW9uKSB7XG5cdFx0XHRsZXQgbG9jYXRpb24gPSBhd2FpdCB0aGlzLmF1dG9Mb2NQcm92aWRlci5HZXRMb2NhdGlvbigpO1xuXHRcdFx0Ly8gVXNlciBmYWNpbmcgZXJyb3JzIGhhbmRsZWQgYnkgcHJvdmlkZXJcblx0XHRcdGlmICghbG9jYXRpb24pIHJldHVybiBudWxsO1xuXG5cdFx0XHR0aGlzLkluamVjdExvY2F0aW9uVG9Db25maWcobG9jYXRpb24pO1xuXHRcdFx0cmV0dXJuIGxvY2F0aW9uO1xuXHRcdH1cblxuXHRcdC8vIE1hbnVhbCBMb2NhdGlvblxuXG5cdFx0bGV0IGxvYyA9IHRoaXMuX2xvY2F0aW9uO1xuXHRcdGlmIChsb2MgPT0gdW5kZWZpbmVkIHx8IGxvYy50cmltKCkgPT0gXCJcIikgeyAgLy8gTm8gbG9jYXRpb25cblx0XHRcdHRoaXMuYXBwLlNob3dFcnJvcih7XG5cdFx0XHRcdHR5cGU6IFwiaGFyZFwiLFxuXHRcdFx0XHRkZXRhaWw6IFwibm8gbG9jYXRpb25cIixcblx0XHRcdFx0dXNlckVycm9yOiB0cnVlLFxuXHRcdFx0XHRtZXNzYWdlOiBfKFwiTWFrZSBzdXJlIHlvdSBlbnRlcmVkIGEgbG9jYXRpb24gb3IgdXNlIEF1dG9tYXRpYyBsb2NhdGlvbiBpbnN0ZWFkXCIpXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdC8vIEZpbmQgbG9jYXRpb24gaW4gc3RvcmFnZVxuXHRcdGxldCBsb2NhdGlvbiA9IHRoaXMuTG9jU3RvcmUuRmluZExvY2F0aW9uKHRoaXMuX2xvY2F0aW9uKTtcblx0XHRpZiAobG9jYXRpb24gIT0gbnVsbCkge1xuXHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwibG9jYXRpb24gZXhpc3QgaW4gbG9jYXRpb25zdG9yZSwgcmV0cmlldmVcIik7XG5cdFx0XHR0aGlzLkxvY1N0b3JlLlN3aXRjaFRvTG9jYXRpb24obG9jYXRpb24pO1xuXHRcdFx0dGhpcy5JbmplY3RMb2NhdGlvblRvQ29uZmlnKGxvY2F0aW9uLCB0cnVlKTtcblx0XHRcdHJldHVybiBsb2NhdGlvbjtcblx0XHR9XG5cdFx0Ly8gbG9jYXRpb24gbm90IGluIHN0b3JhZ2Vcblx0XHRlbHNlIGlmIChJc0Nvb3JkaW5hdGUobG9jKSkge1xuXHRcdFx0Ly8gR2V0IExvY2F0aW9uXG5cdFx0XHRsb2MgPSBsb2MucmVwbGFjZShcIiBcIiwgXCJcIik7XG5cdFx0XHRsZXQgbGF0TG9uZyA9IGxvYy5zcGxpdChcIixcIik7XG5cdFx0XHRsZXQgbG9jYXRpb246IExvY2F0aW9uRGF0YSA9IHtcblx0XHRcdFx0bGF0OiBwYXJzZUZsb2F0KGxhdExvbmdbMF0pLFxuXHRcdFx0XHRsb246IHBhcnNlRmxvYXQobGF0TG9uZ1sxXSksXG5cdFx0XHRcdGNpdHk6IG51bGwsXG5cdFx0XHRcdGNvdW50cnk6IG51bGwsXG5cdFx0XHRcdHRpbWVab25lOiBudWxsLFxuXHRcdFx0XHRlbnRyeVRleHQ6IGxvYyxcblx0XHRcdH1cblx0XHRcdHRoaXMuSW5qZWN0TG9jYXRpb25Ub0NvbmZpZyhsb2NhdGlvbik7XG5cdFx0XHRyZXR1cm4gbG9jYXRpb247XG5cdFx0fVxuXG5cdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiTG9jYXRpb24gaXMgdGV4dCwgZ2VvbG9jYXRpbmcuLi5cIilcblx0XHRsZXQgbG9jYXRpb25EYXRhID0gYXdhaXQgdGhpcy5nZW9Mb2NhdGlvblNlcnZpY2UuR2V0TG9jYXRpb24obG9jKTtcblx0XHQvLyBVc2VyIGZhY2luZyBlcnJvcnMgYXJlIGhhbmRsZWQgYnkgc2VydmljZVxuXHRcdGlmIChsb2NhdGlvbkRhdGEgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cdFx0aWYgKCEhbG9jYXRpb25EYXRhPy5lbnRyeVRleHQpIHtcblx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkFkZHJlc3MgZm91bmQgdmlhIGFkZHJlc3Mgc2VhcmNoXCIpO1xuXHRcdH1cblxuXHRcdC8vIE1heWJlIGxvY2F0aW9uIGlzIGluIGxvY2F0aW9uU3RvcmUsIGZpcnN0IHNlYXJjaFxuXHRcdGxvY2F0aW9uID0gdGhpcy5Mb2NTdG9yZS5GaW5kTG9jYXRpb24obG9jYXRpb25EYXRhLmVudHJ5VGV4dCk7XG5cdFx0aWYgKGxvY2F0aW9uICE9IG51bGwpIHtcblx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkZvdW5kIGxvY2F0aW9uIHdhcyBmb3VuZCBpbiBsb2NhdGlvblN0b3JlLCByZXR1cm4gdGhhdCBpbnN0ZWFkXCIpO1xuXHRcdFx0dGhpcy5JbmplY3RMb2NhdGlvblRvQ29uZmlnKGxvY2F0aW9uKTtcblx0XHRcdHRoaXMuTG9jU3RvcmUuU3dpdGNoVG9Mb2NhdGlvbihsb2NhdGlvbik7XG5cdFx0XHRyZXR1cm4gbG9jYXRpb247XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dGhpcy5JbmplY3RMb2NhdGlvblRvQ29uZmlnKGxvY2F0aW9uRGF0YSk7XG5cdFx0XHRyZXR1cm4gbG9jYXRpb25EYXRhO1xuXHRcdH1cblx0fVxuXG5cdC8vIFVUSUxTXG5cblx0cHJpdmF0ZSBJbmplY3RMb2NhdGlvblRvQ29uZmlnKGxvYzogTG9jYXRpb25EYXRhLCBzd2l0Y2hUb01hbnVhbDogYm9vbGVhbiA9IGZhbHNlKSB7XG5cdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiTG9jYXRpb24gc2V0dGluZyBpcyBub3c6IFwiICsgbG9jLmVudHJ5VGV4dCk7XG5cdFx0bGV0IHRleHQgPSAobG9jLmVudHJ5VGV4dCArIFwiXCIpOyAvLyBPbmx5IHZhbHVlcyBjYW4gYmUgaW5qZWN0ZWQgaW50byBzZXR0aW5ncyBhbmQgbm90IHJlZmVyZW5jZXMsIHNvIHdlIGFkZCBlbXB0eSBzdHJpbmcgdG8gaXQuXG5cdFx0dGhpcy5TZXRMb2NhdGlvbih0ZXh0KTtcblx0XHR0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGxvYztcblx0XHRpZiAoc3dpdGNoVG9NYW51YWwgPT0gdHJ1ZSkgdGhpcy5zZXR0aW5ncy5zZXRWYWx1ZShLZXlzLk1BTlVBTF9MT0NBVElPTiwgdHJ1ZSk7XG5cdH1cblxuXHRwcml2YXRlIE9uS2V5U2V0dGluZ3NVcGRhdGVkKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmtleWJpbmRpbmcgIT0gbnVsbCkge1xuXHRcdFx0a2V5YmluZGluZ01hbmFnZXIuYWRkSG90S2V5KFxuXHRcdFx0XHRVVUlELFxuXHRcdFx0XHR0aGlzLmtleWJpbmRpbmcsXG5cdFx0XHRcdExhbmcuYmluZCh0aGlzLmFwcCwgdGhpcy5hcHAub25fYXBwbGV0X2NsaWNrZWQpXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdC8qKiBJdCB3YXMgc3BhbW1pbmcgcmVmcmVzaCBiZWZvcmUsIGNoYW5nZWQgdG8gd2FpdCB1bnRpbCB1c2VyIHN0b3BwZWQgdHlwaW5nIGZybyAzIHNlY29uZHMgKi9cblx0cHJpdmF0ZSBPbkxvY2F0aW9uQ2hhbmdlZCgpIHtcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJVc2VyIGNoYW5nZWQgbG9jYXRpb24sIHdhaXRpbmcgMyBzZWNvbmRzLi4uXCIpO1xuXHRcdGlmICh0aGlzLmRvbmVUeXBpbmdMb2NhdGlvbiAhPSBudWxsKSBjbGVhclRpbWVvdXQodGhpcy5kb25lVHlwaW5nTG9jYXRpb24pO1xuXHRcdHRoaXMuZG9uZVR5cGluZ0xvY2F0aW9uID0gc2V0VGltZW91dChMYW5nLmJpbmQodGhpcywgdGhpcy5Eb25lVHlwaW5nTG9jYXRpb24pLCAzMDAwKTtcblx0fVxuXG5cdHByaXZhdGUgT25Mb2NhdGlvblN0b3JlQ2hhbmdlZCgpIHtcblx0XHR0aGlzLkxvY1N0b3JlLk9uTG9jYXRpb25DaGFuZ2VkKHRoaXMuX2xvY2F0aW9uTGlzdClcblx0fVxuXG5cdHByaXZhdGUgT25Gb250Q2hhbmdlZCgpIHtcblx0XHR0aGlzLmN1cnJlbnRGb250U2l6ZSA9IHRoaXMuR2V0Q3VycmVudEZvbnRTaXplKCk7XG5cdFx0dGhpcy5hcHAuUmVmcmVzaEFuZFJlYnVpbGQoKTtcblx0fVxuXG5cdC8qKiBDYWxsZWQgd2hlbiAzIHNlY29uZHMgaXMgdXAgd2l0aCBubyBjaGFuZ2UgaW4gbG9jYXRpb24gKi9cblx0cHJpdmF0ZSBEb25lVHlwaW5nTG9jYXRpb24oKSB7XG5cdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiVXNlciBoYXMgZmluaXNoZWQgdHlwaW5nLCBiZWdpbm5pbmcgcmVmcmVzaFwiKTtcblx0XHR0aGlzLmRvbmVUeXBpbmdMb2NhdGlvbiA9IG51bGw7XG5cdFx0dGhpcy5hcHAuUmVmcmVzaEFuZFJlYnVpbGQoKTtcblx0fVxuXG5cdHByaXZhdGUgT25TZXR0aW5nQ2hhbmdlZCgpIHtcblx0XHR0aGlzLmFwcC5SZWZyZXNoQW5kUmVidWlsZCgpO1xuXHR9XG5cblx0cHJpdmF0ZSBTZXRMb2NhdGlvbih2YWx1ZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5zZXR0aW5ncy5zZXRWYWx1ZSh0aGlzLldFQVRIRVJfTE9DQVRJT04sIHZhbHVlKTtcblx0fVxuXG5cdHB1YmxpYyBTZXRMb2NhdGlvbkxpc3QobGlzdDogTG9jYXRpb25EYXRhW10pIHtcblx0XHR0aGlzLnNldHRpbmdzLnNldFZhbHVlKHRoaXMuV0VBVEhFUl9MT0NBVElPTl9MSVNULCBsaXN0KTtcblx0fVxuXG5cdHByaXZhdGUgR2V0TG9jYWxlVGVtcGVyYXRlVW5pdChjb2RlOiBzdHJpbmcpOiBXZWF0aGVyVW5pdHMge1xuXHRcdGlmIChjb2RlID09IG51bGwgfHwgIXRoaXMuZmFocmVuaGVpdENvdW50cmllcy5pbmNsdWRlcyhjb2RlKSkgcmV0dXJuIFwiY2Vsc2l1c1wiO1xuXHRcdHJldHVybiBcImZhaHJlbmhlaXRcIjtcblx0fVxuXG5cdHByaXZhdGUgR2V0TG9jYWxlV2luZFNwZWVkVW5pdChjb2RlOiBzdHJpbmcpOiBXZWF0aGVyV2luZFNwZWVkVW5pdHMge1xuXHRcdGlmIChjb2RlID09IG51bGwpIHJldHVybiBcImtwaFwiO1xuXG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gdGhpcy53aW5kU3BlZWRVbml0TG9jYWxlcykge1xuXHRcdFx0aWYgKGtleS5pbmNsdWRlcyhjb2RlKSkgcmV0dXJuIHRoaXMud2luZFNwZWVkVW5pdExvY2FsZXNba2V5XTtcblx0XHR9XG5cdFx0cmV0dXJuIFwia3BoXCI7XG5cdH1cblxuXHRwcml2YXRlIEdldExvY2FsZURpc3RhbmNlVW5pdChjb2RlOiBzdHJpbmcpOiBEaXN0YW5jZVVuaXRzIHtcblx0XHRpZiAoY29kZSA9PSBudWxsKSByZXR1cm4gXCJtZXRyaWNcIjtcblxuXHRcdGZvciAoY29uc3Qga2V5IGluIHRoaXMuZGlzdGFuY2VVbml0TG9jYWxlcykge1xuXHRcdFx0aWYgKGtleS5pbmNsdWRlcyhjb2RlKSkgcmV0dXJuIHRoaXMuZGlzdGFuY2VVbml0TG9jYWxlc1trZXldO1xuXHRcdH1cblx0XHRyZXR1cm4gXCJtZXRyaWNcIjtcblx0fVxuXG5cdHByaXZhdGUgR2V0Q291bnRyeUNvZGUobG9jYWxlOiBzdHJpbmcpIHtcblx0XHRsZXQgc3BsaXQgPSBsb2NhbGUuc3BsaXQoXCItXCIpO1xuXHRcdC8vIFRoZXJlIGlzIG5vIGNvdW50cnkgY29kZVxuXHRcdGlmIChzcGxpdC5sZW5ndGggPCAyKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiBzcGxpdFsxXTtcblx0fVxuXG5cdHByaXZhdGUgR2V0TGFuZ3VhZ2UobG9jYWxlOiBzdHJpbmcpIHtcblx0XHRsZXQgc3BsaXQgPSBsb2NhbGUuc3BsaXQoXCItXCIpO1xuXHRcdGlmIChzcGxpdC5sZW5ndGggPCAxKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiBzcGxpdFswXTtcblx0fVxuXG5cdHByaXZhdGUgR2V0Q3VycmVudEZvbnRTaXplKCkge1xuXHRcdGxldCBuYW1lU3RyaW5nID0gdGhpcy5JbnRlcmZhY2VTZXR0aW5ncy5nZXRfc3RyaW5nKFwiZm9udC1uYW1lXCIpO1xuXHRcdGxldCBlbGVtZW50cyA9IG5hbWVTdHJpbmcuc3BsaXQoXCIgXCIpO1xuXHRcdGxldCBzaXplID0gcGFyc2VGbG9hdChlbGVtZW50c1tlbGVtZW50cy5sZW5ndGggLSAxXSk7XG5cdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiRm9udCBzaXplIGNoYW5nZWQgdG8gXCIgKyBzaXplLnRvU3RyaW5nKCkpO1xuXHRcdHJldHVybiBzaXplO1xuXHR9XG59XG5cbmludGVyZmFjZSBXaW5kU3BlZWRMb2NhbGVQcmVmcyB7XG5cdFtrZXk6IHN0cmluZ106IFdlYXRoZXJXaW5kU3BlZWRVbml0cztcbn1cbmludGVyZmFjZSBEaXN0YW5jZVVuaXRMb2NhbGVQcmVmcyB7XG5cdFtrZXk6IHN0cmluZ106IERpc3RhbmNlVW5pdHM7XG59IiwiaW1wb3J0IHsgTG9nIH0gZnJvbSBcIi4vbGliL2xvZ2dlclwiO1xuaW1wb3J0IHsgV2VhdGhlckFwcGxldCB9IGZyb20gXCIuL21haW5cIjtcbmltcG9ydCB7IFJlZnJlc2hTdGF0ZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBkZWxheSwgR3VpZCB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbi8qKiBTdG9yZXMgYXBwbGV0IGluc3RhbmNlJ3MgSUQncyBnbG9iYWxseSxcbiAqIENoZWNrZWQgdG8gbWFrZSBzdXJlIHRoYXQgaW5zdGFuY2UgaXMgXG4gKiBydW5uaW5nIGZvciBvbmUgYXBwbGV0IElEXG4gKi9cbnZhciB3ZWF0aGVyQXBwbGV0R1VJRHM6IEdVSURTdG9yZSA9IHt9O1xuXG5leHBvcnQgY2xhc3MgV2VhdGhlckxvb3Age1xuXHQvKiogVG8gY2hlY2sgaWYgZGF0YSBpcyB1cC10by1kYXRlIGJhc2VkIG9uIHVzZXItc2V0IHJlZnJlc2ggc2V0dGluZ3MgKi9cblx0cHJpdmF0ZSBsYXN0VXBkYXRlZDogRGF0ZSA9IG5ldyBEYXRlKDApO1xuXG5cdC8qKiB0cnVlIG9uIGVycm9ycyB3aGVuIHVzZXIgaW50ZXJhY3Rpb24gaXMgcmVxdWlyZWQuXG5cdCAqICh1c3VhbGx5IG9uIHNldHRpbmdzIG1pc2NvbmZpZ3VyYXRpb24pLCBldmVyeSBzZXR0aW5ncyBjaGFuZ2UgY2xlYXJzIGl0LlxuXHQgKi9cblx0cHJpdmF0ZSBwYXVzZVJlZnJlc2g6IGJvb2xlYW4gPSBmYWxzZTtcblxuXHQvKiogaW4gc2Vjb25kcyAqL1xuXHRwcml2YXRlIHJlYWRvbmx5IExPT1BfSU5URVJWQUw6IG51bWJlciA9IDE1O1xuXHRwcml2YXRlIGFwcDogV2VhdGhlckFwcGxldDtcblx0cHJpdmF0ZSBhcHBsZXRSZW1vdmVkID0gZmFsc2U7XG5cdHByaXZhdGUgR1VJRDogc3RyaW5nO1xuXHRwcml2YXRlIGluc3RhbmNlSUQ6IG51bWJlcjtcblx0LyoqIFNsb3dzIG1haW4gbG9vcCBkb3duIG9uIGNvbnNlY3V0aXZlIGVycm9ycy5cblx0ICogbG9vcCBzZWNvbmRzIGFyZSBtdWx0aXBsaWVkIGJ5IHRoaXMgdmFsdWUgb24gZXJyb3JzLlxuXHQgKi9cblx0cHJpdmF0ZSBlcnJvckNvdW50OiBudW1iZXIgPSAwO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogV2VhdGhlckFwcGxldCwgaW5zdGFuY2VJRDogbnVtYmVyKSB7XG5cdFx0dGhpcy5hcHAgPSBhcHA7XG5cdFx0dGhpcy5pbnN0YW5jZUlEID0gaW5zdGFuY2VJRDtcblx0XHR0aGlzLkdVSUQgPSBHdWlkKCk7XG5cdFx0d2VhdGhlckFwcGxldEdVSURzW2luc3RhbmNlSURdID0gdGhpcy5HVUlEO1xuXHR9XG5cblx0cHVibGljIElzRGF0YVRvb09sZCgpOiBib29sZWFuIHtcblx0XHRpZiAoIXRoaXMubGFzdFVwZGF0ZWQpIHJldHVybiB0cnVlO1xuXHRcdGxldCBvbGREYXRlID0gdGhpcy5sYXN0VXBkYXRlZDtcblx0XHQvLyBJZiBkYXRhIGlzIGF0IGxlYXN0IHR3aWNlIGFzIG9sZCBhcyByZWZyZXNoSW50ZXJ2YWwsIHJldHVybiB0cnVlXG5cdFx0b2xkRGF0ZS5zZXRNaW51dGVzKG9sZERhdGUuZ2V0TWludXRlcygpICsgKHRoaXMuYXBwLmNvbmZpZy5fcmVmcmVzaEludGVydmFsICogMikpO1xuXHRcdHJldHVybiAodGhpcy5sYXN0VXBkYXRlZCA+IG9sZERhdGUpO1xuXHR9XG5cblx0LyoqIE1haW4gbG9vcCAqL1xuXHRwdWJsaWMgYXN5bmMgU3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0d2hpbGUgKHRydWUpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICh0aGlzLklzU3RyYXkoKSkgcmV0dXJuO1xuXHRcdFx0XHRpZiAodGhpcy5hcHAuZW5jb3VudGVyZWRFcnJvciA9PSB0cnVlKSB0aGlzLkluY3JlbWVudEVycm9yQ291bnQoKTtcblx0XHRcdFx0dGhpcy5WYWxpZGF0ZUxhc3RVcGRhdGUoKTtcblxuXHRcdFx0XHRpZiAodGhpcy5wYXVzZVJlZnJlc2gpIHtcblx0XHRcdFx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJDb25maWd1cmF0aW9uIGVycm9yLCB1cGRhdGluZyBwYXVzZWRcIilcblx0XHRcdFx0XHRhd2FpdCBkZWxheSh0aGlzLkxvb3BJbnRlcnZhbCgpKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0aGlzLmVycm9yQ291bnQgPiAwIHx8IHRoaXMuTmV4dFVwZGF0ZSgpIDwgbmV3IERhdGUoKSkge1xuXHRcdFx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIlJlZnJlc2ggdHJpZ2dlcmVkIGluIG1haW4gbG9vcCB3aXRoIHRoZXNlIHZhbHVlczogbGFzdFVwZGF0ZWQgXCIgKyAoKCF0aGlzLmxhc3RVcGRhdGVkKSA/IFwibnVsbFwiIDogdGhpcy5sYXN0VXBkYXRlZC50b0xvY2FsZVN0cmluZygpKVxuXHRcdFx0XHRcdFx0KyBcIiwgZXJyb3JDb3VudCBcIiArIHRoaXMuZXJyb3JDb3VudC50b1N0cmluZygpICsgXCIgLCBsb29wSW50ZXJ2YWwgXCIgKyAodGhpcy5Mb29wSW50ZXJ2YWwoKSAvIDEwMDApLnRvU3RyaW5nKClcblx0XHRcdFx0XHRcdCsgXCIgc2Vjb25kcywgcmVmcmVzaEludGVydmFsIFwiICsgdGhpcy5hcHAuY29uZmlnLl9yZWZyZXNoSW50ZXJ2YWwgKyBcIiBtaW51dGVzXCIpO1xuXHRcdFx0XHRcdC8vIGxvb3AgY2FuIHNraXAgMSBjeWNsZSBpZiBuZWVkZWQgXG5cdFx0XHRcdFx0bGV0IHN0YXRlID0gYXdhaXQgdGhpcy5hcHAuUmVmcmVzaFdlYXRoZXIoZmFsc2UpO1xuXHRcdFx0XHRcdGlmIChzdGF0ZSA9PSBSZWZyZXNoU3RhdGUuRXJyb3IpIExvZy5JbnN0YW5jZS5QcmludChcIkFwcCBpcyBjdXJyZW50bHkgcmVmcmVzaGluZywgcmVmcmVzaCBza2lwcGVkIGluIG1haW4gbG9vcFwiKTtcblx0XHRcdFx0XHRpZiAoc3RhdGUgPT0gUmVmcmVzaFN0YXRlLlN1Y2Nlc3MgfHwgUmVmcmVzaFN0YXRlLkxvY2tlZCkgdGhpcy5sYXN0VXBkYXRlZCA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiTm8gbmVlZCB0byB1cGRhdGUgeWV0LCBza2lwcGluZ1wiKVxuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIkVycm9yIGluIE1haW4gbG9vcDogXCIgKyBlKTtcblx0XHRcdFx0dGhpcy5hcHAuZW5jb3VudGVyZWRFcnJvciA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGF3YWl0IGRlbGF5KHRoaXMuTG9vcEludGVydmFsKCkpO1xuXHRcdH1cblx0fTtcblxuXHQvKiogU3RvcHMgbG9vcC4gSWYgY2FsbGVkLCB0aGUgbG9vcCBjYW5ub3QgYmUgc3RhcnRlZCBhZ2Fpbi4gKi9cblx0cHVibGljIFN0b3AoKTogdm9pZCB7XG5cdFx0dGhpcy5hcHBsZXRSZW1vdmVkID0gdHJ1ZTtcblx0fVxuXG5cdC8qKiBQYXVzZXMgcGVyaW9kaWMgcmVmcmVzaGluZyBvZiB3ZWF0aGVyIGRhdGEuICovXG5cdHB1YmxpYyBQYXVzZSgpOiB2b2lkIHtcblx0XHR0aGlzLnBhdXNlUmVmcmVzaCA9IHRydWU7XG5cdH1cblxuXHQvKiogUmVzdW1lcyBwZXJpb2RpYyByZWZyZXNoaW5nLCBjYWxsIGFmdGVyIFBhdXNlLiAqL1xuXHRwdWJsaWMgUmVzdW1lKCk6IHZvaWQge1xuXHRcdHRoaXMucGF1c2VSZWZyZXNoID0gZmFsc2U7XG5cdH1cblxuXHQvKiogVXNlZCBhZnRlciBhIHN1Y2Nlc3NmdWwgd2VhdGhlciByZWZyZXNoLiAqL1xuXHRwdWJsaWMgUmVzZXRFcnJvckNvdW50KCk6IHZvaWQge1xuXHRcdHRoaXMuZXJyb3JDb3VudCA9IDA7XG5cdH1cblxuXHQvKiogR2V0cyBob3cgbWFueSBzZWNvbmRzIGFyZSBiZXR3ZWVuIHRoZSBsYXN0IGFuZCBuZXh0IHJlZnJlc2guICovXG5cdHB1YmxpYyBHZXRTZWNvbmRzVW50aWxOZXh0UmVmcmVzaCgpOiBudW1iZXIge1xuXHRcdHJldHVybiAodGhpcy5lcnJvckNvdW50ID4gMCkgPyAodGhpcy5lcnJvckNvdW50KSAqIHRoaXMuTE9PUF9JTlRFUlZBTCA6IHRoaXMuTE9PUF9JTlRFUlZBTDtcblx0fVxuXG5cdHByaXZhdGUgSXNTdHJheSgpOiBib29sZWFuIHtcblx0XHRpZiAodGhpcy5hcHBsZXRSZW1vdmVkID09IHRydWUpIHJldHVybiB0cnVlO1xuXHRcdGlmICh0aGlzLkdVSUQgIT0gd2VhdGhlckFwcGxldEdVSURzW3RoaXMuaW5zdGFuY2VJRF0pIHtcblx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkFwcGxldCBHVUlEOiBcIiArIHRoaXMuR1VJRCk7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJHVUlEIHN0b3JlZCBnbG9iYWxseTogXCIgKyB3ZWF0aGVyQXBwbGV0R1VJRHNbdGhpcy5pbnN0YW5jZUlEXSk7XG5cdFx0XHRMb2cuSW5zdGFuY2UuUHJpbnQoXCJHVUlEIG1pc21hdGNoLCB0ZXJtaW5hdGluZyBhcHBsZXRcIilcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRwcml2YXRlIEluY3JlbWVudEVycm9yQ291bnQoKTogdm9pZCB7XG5cdFx0dGhpcy5hcHAuZW5jb3VudGVyZWRFcnJvciA9IGZhbHNlO1xuXHRcdHRoaXMuZXJyb3JDb3VudCsrO1xuXHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkVuY291bnRlcmVkIGVycm9yIGluIHByZXZpb3VzIGxvb3BcIik7XG5cdFx0Ly8gTGltaXRpbmcgY291bnQgc28gdGltZW91dCBkb2VzIG5vdCBleHBhbmQgZm9yZXZlclxuXHRcdGlmICh0aGlzLmVycm9yQ291bnQgPiA2MCkgdGhpcy5lcnJvckNvdW50ID0gNjA7XG5cdH1cblxuXHRwcml2YXRlIE5leHRVcGRhdGUoKTogRGF0ZSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHRoaXMubGFzdFVwZGF0ZWQuZ2V0VGltZSgpICsgdGhpcy5hcHAuY29uZmlnLl9yZWZyZXNoSW50ZXJ2YWwgKiA2MDAwMCk7XG5cdH1cblxuXHRwcml2YXRlIFZhbGlkYXRlTGFzdFVwZGF0ZSgpOiB2b2lkIHtcblx0XHQvLyBTeXN0ZW0gdGltZSB3YXMgcHJvYmFibHkgY2hhbmdlZCBiYWNrLCByZXNldCBsYXN0VXBkYXRlZCB2YWx1ZVxuXHRcdGlmICh0aGlzLmxhc3RVcGRhdGVkID4gbmV3IERhdGUoKSkgdGhpcy5sYXN0VXBkYXRlZCA9IG5ldyBEYXRlKDApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIG1pbGxpc2Vjb25kc1xuXHQgKi9cblx0cHJpdmF0ZSBMb29wSW50ZXJ2YWwoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gKHRoaXMuZXJyb3JDb3VudCA+IDApID8gdGhpcy5MT09QX0lOVEVSVkFMICogdGhpcy5lcnJvckNvdW50ICogMTAwMCA6IHRoaXMuTE9PUF9JTlRFUlZBTCAqIDEwMDA7IC8vIEluY3JlYXNlIGxvb3AgdGltZW91dCBsaW5lYXJseSB3aXRoIHRoZSBudW1iZXIgb2YgZXJyb3JzXG5cdH1cbn1cblxudHlwZSBHVUlEU3RvcmUgPSB7XG5cdFtrZXk6IG51bWJlcl06IHN0cmluZ1xufSIsIi8qXG4gKGMpIDIwMTEtMjAxNSwgVmxhZGltaXIgQWdhZm9ua2luXG4gU3VuQ2FsYyBpcyBhIEphdmFTY3JpcHQgbGlicmFyeSBmb3IgY2FsY3VsYXRpbmcgc3VuL21vb24gcG9zaXRpb24gYW5kIGxpZ2h0IHBoYXNlcy5cbiBodHRwczovL2dpdGh1Yi5jb20vbW91cm5lci9zdW5jYWxjXG5cbiBUeXBlc2NyaXB0IGFkYXB0YXRpb24gaXMgbWFkZSBieSBBdHRpbGEgR3JlZ3Vzc1xuKi9cblxuLy8gc2hvcnRjdXRzIGZvciBlYXNpZXIgdG8gcmVhZCBmb3JtdWxhc1xuXG5jb25zdCBQSSA9IE1hdGguUEksXG5cdHNpbiA9IE1hdGguc2luLFxuXHRjb3MgPSBNYXRoLmNvcyxcblx0dGFuID0gTWF0aC50YW4sXG5cdGFzaW4gPSBNYXRoLmFzaW4sXG5cdGF0YW4gPSBNYXRoLmF0YW4yLFxuXHRhY29zID0gTWF0aC5hY29zLFxuXHRyYWQgPSBQSSAvIDE4MDtcblxuLy8gc3VuIGNhbGN1bGF0aW9ucyBhcmUgYmFzZWQgb24gaHR0cDovL2FhLnF1YWUubmwvZW4vcmVrZW4vem9ucG9zaXRpZS5odG1sIGZvcm11bGFzXG5cblxuLy8gZGF0ZS90aW1lIGNvbnN0YW50cyBhbmQgY29udmVyc2lvbnNcblxuY29uc3QgZGF5TXMgPSAxMDAwICogNjAgKiA2MCAqIDI0LFxuXHRKMTk3MCA9IDI0NDA1ODgsXG5cdEoyMDAwID0gMjQ1MTU0NTtcblxuZnVuY3Rpb24gdG9KdWxpYW4oZGF0ZTogRGF0ZSkgeyByZXR1cm4gZGF0ZS52YWx1ZU9mKCkgLyBkYXlNcyAtIDAuNSArIEoxOTcwOyB9XG5mdW5jdGlvbiBmcm9tSnVsaWFuKGo6IG51bWJlcikgeyByZXR1cm4gbmV3IERhdGUoKGogKyAwLjUgLSBKMTk3MCkgKiBkYXlNcyk7IH1cbmZ1bmN0aW9uIHRvRGF5cyhkYXRlOiBEYXRlKSB7IHJldHVybiB0b0p1bGlhbihkYXRlKSAtIEoyMDAwOyB9XG5cblxuLy8gZ2VuZXJhbCBjYWxjdWxhdGlvbnMgZm9yIHBvc2l0aW9uXG5cbnZhciBlID0gcmFkICogMjMuNDM5NzsgLy8gb2JsaXF1aXR5IG9mIHRoZSBFYXJ0aFxuXG5mdW5jdGlvbiByaWdodEFzY2Vuc2lvbihsOiBudW1iZXIsIGI6IG51bWJlcikgeyByZXR1cm4gYXRhbihzaW4obCkgKiBjb3MoZSkgLSB0YW4oYikgKiBzaW4oZSksIGNvcyhsKSk7IH1cbmZ1bmN0aW9uIGRlY2xpbmF0aW9uKGw6IG51bWJlciwgYjogbnVtYmVyKSB7IHJldHVybiBhc2luKHNpbihiKSAqIGNvcyhlKSArIGNvcyhiKSAqIHNpbihlKSAqIHNpbihsKSk7IH1cblxuZnVuY3Rpb24gYXppbXV0aChIOiBudW1iZXIsIHBoaTogbnVtYmVyLCBkZWM6IG51bWJlcikgeyByZXR1cm4gYXRhbihzaW4oSCksIGNvcyhIKSAqIHNpbihwaGkpIC0gdGFuKGRlYykgKiBjb3MocGhpKSk7IH1cbmZ1bmN0aW9uIGFsdGl0dWRlKEg6IG51bWJlciwgcGhpOiBudW1iZXIsIGRlYzogbnVtYmVyKSB7IHJldHVybiBhc2luKHNpbihwaGkpICogc2luKGRlYykgKyBjb3MocGhpKSAqIGNvcyhkZWMpICogY29zKEgpKTsgfVxuXG5mdW5jdGlvbiBzaWRlcmVhbFRpbWUoZDogbnVtYmVyLCBsdzogbnVtYmVyKSB7IHJldHVybiByYWQgKiAoMjgwLjE2ICsgMzYwLjk4NTYyMzUgKiBkKSAtIGx3OyB9XG5cbmZ1bmN0aW9uIGFzdHJvUmVmcmFjdGlvbihoOiBudW1iZXIpIHtcblx0aWYgKGggPCAwKSAvLyB0aGUgZm9sbG93aW5nIGZvcm11bGEgd29ya3MgZm9yIHBvc2l0aXZlIGFsdGl0dWRlcyBvbmx5LlxuXHRcdGggPSAwOyAvLyBpZiBoID0gLTAuMDg5MDExNzkgYSBkaXYvMCB3b3VsZCBvY2N1ci5cblxuXHQvLyBmb3JtdWxhIDE2LjQgb2YgXCJBc3Ryb25vbWljYWwgQWxnb3JpdGhtc1wiIDJuZCBlZGl0aW9uIGJ5IEplYW4gTWVldXMgKFdpbGxtYW5uLUJlbGwsIFJpY2htb25kKSAxOTk4LlxuXHQvLyAxLjAyIC8gdGFuKGggKyAxMC4yNiAvIChoICsgNS4xMCkpIGggaW4gZGVncmVlcywgcmVzdWx0IGluIGFyYyBtaW51dGVzIC0+IGNvbnZlcnRlZCB0byByYWQ6XG5cdHJldHVybiAwLjAwMDI5NjcgLyBNYXRoLnRhbihoICsgMC4wMDMxMjUzNiAvIChoICsgMC4wODkwMTE3OSkpO1xufVxuXG4vLyBnZW5lcmFsIHN1biBjYWxjdWxhdGlvbnNcblxuZnVuY3Rpb24gc29sYXJNZWFuQW5vbWFseShkOiBudW1iZXIpIHsgcmV0dXJuIHJhZCAqICgzNTcuNTI5MSArIDAuOTg1NjAwMjggKiBkKTsgfVxuXG5mdW5jdGlvbiBlY2xpcHRpY0xvbmdpdHVkZShNOiBudW1iZXIpIHtcblxuXHR2YXIgQyA9IHJhZCAqICgxLjkxNDggKiBzaW4oTSkgKyAwLjAyICogc2luKDIgKiBNKSArIDAuMDAwMyAqIHNpbigzICogTSkpLCAvLyBlcXVhdGlvbiBvZiBjZW50ZXJcblx0XHRQID0gcmFkICogMTAyLjkzNzI7IC8vIHBlcmloZWxpb24gb2YgdGhlIEVhcnRoXG5cblx0cmV0dXJuIE0gKyBDICsgUCArIFBJO1xufVxuXG5mdW5jdGlvbiBzdW5Db29yZHMoZDogbnVtYmVyKSB7XG5cblx0dmFyIE0gPSBzb2xhck1lYW5Bbm9tYWx5KGQpLFxuXHRcdEwgPSBlY2xpcHRpY0xvbmdpdHVkZShNKTtcblxuXHRyZXR1cm4ge1xuXHRcdGRlYzogZGVjbGluYXRpb24oTCwgMCksXG5cdFx0cmE6IHJpZ2h0QXNjZW5zaW9uKEwsIDApXG5cdH07XG59XG5cbi8vIHN1biB0aW1lcyBjb25maWd1cmF0aW9uIChhbmdsZSwgbW9ybmluZyBuYW1lLCBldmVuaW5nIG5hbWVcblxuLy8gY2FsY3VsYXRpb25zIGZvciBzdW4gdGltZXNcblxudmFyIEowID0gMC4wMDA5O1xuXG5mdW5jdGlvbiBqdWxpYW5DeWNsZShkOiBudW1iZXIsIGx3OiBudW1iZXIpIHsgcmV0dXJuIE1hdGgucm91bmQoZCAtIEowIC0gbHcgLyAoMiAqIFBJKSk7IH1cblxuZnVuY3Rpb24gYXBwcm94VHJhbnNpdChIdDogbnVtYmVyLCBsdzogbnVtYmVyLCBuOiBudW1iZXIpIHsgcmV0dXJuIEowICsgKEh0ICsgbHcpIC8gKDIgKiBQSSkgKyBuOyB9XG5mdW5jdGlvbiBzb2xhclRyYW5zaXRKKGRzOiBudW1iZXIsIE06IG51bWJlciwgTDogbnVtYmVyKSB7IHJldHVybiBKMjAwMCArIGRzICsgMC4wMDUzICogc2luKE0pIC0gMC4wMDY5ICogc2luKDIgKiBMKTsgfVxuXG5mdW5jdGlvbiBob3VyQW5nbGUoaDogbnVtYmVyLCBwaGk6IG51bWJlciwgZDogbnVtYmVyKSB7IHJldHVybiBhY29zKChzaW4oaCkgLSBzaW4ocGhpKSAqIHNpbihkKSkgLyAoY29zKHBoaSkgKiBjb3MoZCkpKTsgfVxuZnVuY3Rpb24gb2JzZXJ2ZXJBbmdsZShoZWlnaHQ6IG51bWJlcikgeyByZXR1cm4gLTIuMDc2ICogTWF0aC5zcXJ0KGhlaWdodCkgLyA2MDsgfVxuXG4vKipcbiAqIFJldHVybnMgc2V0IHRpbWUgZm9yIHRoZSBnaXZlbiBzdW4gYWx0aXR1ZGVcbiAqIEBwYXJhbSBoIFxuICogQHBhcmFtIGx3IFxuICogQHBhcmFtIHBoaSBcbiAqIEBwYXJhbSBkZWMgXG4gKiBAcGFyYW0gbiBcbiAqIEBwYXJhbSBNIFxuICogQHBhcmFtIEwgXG4gKi9cbmZ1bmN0aW9uIGdldFNldEooaDogbnVtYmVyLCBsdzogbnVtYmVyLCBwaGk6IG51bWJlciwgZGVjOiBudW1iZXIsIG46IG51bWJlciwgTTogbnVtYmVyLCBMOiBudW1iZXIpIHtcblxuXHR2YXIgdyA9IGhvdXJBbmdsZShoLCBwaGksIGRlYyksXG5cdFx0YSA9IGFwcHJveFRyYW5zaXQodywgbHcsIG4pO1xuXHRyZXR1cm4gc29sYXJUcmFuc2l0SihhLCBNLCBMKTtcbn1cblxuLyoqXG4gKiBNb29uIGNhbGN1bGF0aW9ucywgYmFzZWQgb24gaHR0cDovL2FhLnF1YWUubmwvZW4vcmVrZW4vaGVtZWxwb3NpdGllLmh0bWwgZm9ybXVsYXNcbiAqIEBwYXJhbSBkIFxuICovXG5mdW5jdGlvbiBtb29uQ29vcmRzKGQ6IG51bWJlcikgeyAvLyBnZW9jZW50cmljIGVjbGlwdGljIGNvb3JkaW5hdGVzIG9mIHRoZSBtb29uXG5cblx0dmFyIEwgPSByYWQgKiAoMjE4LjMxNiArIDEzLjE3NjM5NiAqIGQpLCAvLyBlY2xpcHRpYyBsb25naXR1ZGVcblx0XHRNID0gcmFkICogKDEzNC45NjMgKyAxMy4wNjQ5OTMgKiBkKSwgLy8gbWVhbiBhbm9tYWx5XG5cdFx0RiA9IHJhZCAqICg5My4yNzIgKyAxMy4yMjkzNTAgKiBkKSwgIC8vIG1lYW4gZGlzdGFuY2VcblxuXHRcdGwgPSBMICsgcmFkICogNi4yODkgKiBzaW4oTSksIC8vIGxvbmdpdHVkZVxuXHRcdGIgPSByYWQgKiA1LjEyOCAqIHNpbihGKSwgICAgIC8vIGxhdGl0dWRlXG5cdFx0ZHQgPSAzODUwMDEgLSAyMDkwNSAqIGNvcyhNKTsgIC8vIGRpc3RhbmNlIHRvIHRoZSBtb29uIGluIGttXG5cblx0cmV0dXJuIHtcblx0XHRyYTogcmlnaHRBc2NlbnNpb24obCwgYiksXG5cdFx0ZGVjOiBkZWNsaW5hdGlvbihsLCBiKSxcblx0XHRkaXN0OiBkdFxuXHR9O1xufVxuXG5mdW5jdGlvbiBob3Vyc0xhdGVyKGRhdGU6IERhdGUsIGg6IG51bWJlcikge1xuXHRyZXR1cm4gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkgKyBoICogZGF5TXMgLyAyNCk7XG59XG5cbmV4cG9ydCBjbGFzcyBTdW5DYWxjIHtcblx0cHJpdmF0ZSB0aW1lczogYW55W11bXSA9IFtcblx0XHRbLTAuODMzLCAnc3VucmlzZScsICdzdW5zZXQnXSxcblx0XHRbLTAuMywgJ3N1bnJpc2VFbmQnLCAnc3Vuc2V0U3RhcnQnXSxcblx0XHRbLTYsICdkYXduJywgJ2R1c2snXSxcblx0XHRbLTEyLCAnbmF1dGljYWxEYXduJywgJ25hdXRpY2FsRHVzayddLFxuXHRcdFstMTgsICduaWdodEVuZCcsICduaWdodCddLFxuXHRcdFs2LCAnZ29sZGVuSG91ckVuZCcsICdnb2xkZW5Ib3VyJ11cblx0XTtcblxuXHQvKipcblx0ICogY2FsY3VsYXRlcyBzdW4gcG9zaXRpb24gZm9yIGEgZ2l2ZW4gZGF0ZSBhbmQgbGF0aXR1ZGUvbG9uZ2l0dWRlXG5cdCAqIEBwYXJhbSBkYXRlIFxuXHQgKiBAcGFyYW0gbGF0IFxuXHQgKiBAcGFyYW0gbG5nIFxuXHQgKi9cblx0cHVibGljIGdldFBvc2l0aW9uKGRhdGU6IERhdGUsIGxhdDogbnVtYmVyLCBsbmc6IG51bWJlcikge1xuXHRcdHZhciBsdyA9IHJhZCAqIC1sbmcsXG5cdFx0XHRwaGkgPSByYWQgKiBsYXQsXG5cdFx0XHRkID0gdG9EYXlzKGRhdGUpLFxuXG5cdFx0XHRjID0gc3VuQ29vcmRzKGQpLFxuXHRcdFx0SCA9IHNpZGVyZWFsVGltZShkLCBsdykgLSBjLnJhO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGF6aW11dGg6IGF6aW11dGgoSCwgcGhpLCBjLmRlYyksXG5cdFx0XHRhbHRpdHVkZTogYWx0aXR1ZGUoSCwgcGhpLCBjLmRlYylcblx0XHR9O1xuXHR9XG5cblx0cHJpdmF0ZSBhZGRUaW1lKGFuZ2xlOiBudW1iZXIsIHJpc2VOYW1lOiBudW1iZXIsIHNldE5hbWU6IG51bWJlcikge1xuXHRcdHRoaXMudGltZXMucHVzaChbYW5nbGUsIHJpc2VOYW1lLCBzZXROYW1lXSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgc3VuIHRpbWVzIGZvciBhIGdpdmVuIGRhdGUsIGxhdGl0dWRlL2xvbmdpdHVkZSwgYW5kLCBvcHRpb25hbGx5LFxuXHQgKiB0aGUgb2JzZXJ2ZXIgaGVpZ2h0IChpbiBtZXRlcnMpIHJlbGF0aXZlIHRvIHRoZSBob3Jpem9uXG5cdCAqIEBwYXJhbSBkYXRlIFxuXHQgKiBAcGFyYW0gbGF0IFxuXHQgKiBAcGFyYW0gbG5nIFxuXHQgKiBAcGFyYW0gaGVpZ2h0IFxuXHQgKi9cblx0cHVibGljIGdldFRpbWVzKGRhdGU6IERhdGUsIGxhdDogbnVtYmVyLCBsbmc6IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyKTogU3VuVGltZXMge1xuXG5cdFx0aGVpZ2h0ID0gaGVpZ2h0IHx8IDA7XG5cblx0XHR2YXIgbHcgPSByYWQgKiAtbG5nLFxuXHRcdFx0cGhpID0gcmFkICogbGF0LFxuXG5cdFx0XHRkaCA9IG9ic2VydmVyQW5nbGUoaGVpZ2h0KSxcblxuXHRcdFx0ZCA9IHRvRGF5cyhkYXRlKSxcblx0XHRcdG4gPSBqdWxpYW5DeWNsZShkLCBsdyksXG5cdFx0XHRkcyA9IGFwcHJveFRyYW5zaXQoMCwgbHcsIG4pLFxuXG5cdFx0XHRNID0gc29sYXJNZWFuQW5vbWFseShkcyksXG5cdFx0XHRMID0gZWNsaXB0aWNMb25naXR1ZGUoTSksXG5cdFx0XHRkZWMgPSBkZWNsaW5hdGlvbihMLCAwKSxcblxuXHRcdFx0Sm5vb24gPSBzb2xhclRyYW5zaXRKKGRzLCBNLCBMKSxcblxuXHRcdFx0aSwgbGVuLCB0aW1lLCBoMCwgSnNldCwgSnJpc2U7XG5cblxuXHRcdHZhciByZXN1bHQ6IFN1blRpbWVzID0ge1xuXHRcdFx0c29sYXJOb29uOiBmcm9tSnVsaWFuKEpub29uKSxcblx0XHRcdG5hZGlyOiBmcm9tSnVsaWFuKEpub29uIC0gMC41KVxuXHRcdH07XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSB0aGlzLnRpbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG5cdFx0XHR0aW1lID0gdGhpcy50aW1lc1tpXTtcblx0XHRcdGgwID0gKHRpbWVbMF0gYXMgbnVtYmVyICsgZGgpICogcmFkO1xuXG5cdFx0XHRKc2V0ID0gZ2V0U2V0SihoMCwgbHcsIHBoaSwgZGVjLCBuLCBNLCBMKTtcblx0XHRcdEpyaXNlID0gSm5vb24gLSAoSnNldCAtIEpub29uKTtcblxuXHRcdFx0cmVzdWx0W3RpbWVbMV0gYXMgU3VuVGltZVByb3BlcnR5XSA9IGZyb21KdWxpYW4oSnJpc2UpO1xuXHRcdFx0cmVzdWx0W3RpbWVbMl0gYXMgU3VuVGltZVByb3BlcnR5XSA9IGZyb21KdWxpYW4oSnNldCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRwdWJsaWMgZ2V0TW9vblBvc2l0aW9uKGRhdGU6IERhdGUsIGxhdDogbnVtYmVyLCBsbmc6IG51bWJlcik6IE1vb25Qb3NpdGlvbiB7XG5cblx0XHR2YXIgbHcgPSByYWQgKiAtbG5nLFxuXHRcdFx0cGhpID0gcmFkICogbGF0LFxuXHRcdFx0ZCA9IHRvRGF5cyhkYXRlKSxcblxuXHRcdFx0YyA9IG1vb25Db29yZHMoZCksXG5cdFx0XHRIID0gc2lkZXJlYWxUaW1lKGQsIGx3KSAtIGMucmEsXG5cdFx0XHRoID0gYWx0aXR1ZGUoSCwgcGhpLCBjLmRlYyksXG5cdFx0XHQvLyBmb3JtdWxhIDE0LjEgb2YgXCJBc3Ryb25vbWljYWwgQWxnb3JpdGhtc1wiIDJuZCBlZGl0aW9uIGJ5IEplYW4gTWVldXMgKFdpbGxtYW5uLUJlbGwsIFJpY2htb25kKSAxOTk4LlxuXHRcdFx0cGEgPSBhdGFuKHNpbihIKSwgdGFuKHBoaSkgKiBjb3MoYy5kZWMpIC0gc2luKGMuZGVjKSAqIGNvcyhIKSk7XG5cblx0XHRoID0gaCArIGFzdHJvUmVmcmFjdGlvbihoKTsgLy8gYWx0aXR1ZGUgY29ycmVjdGlvbiBmb3IgcmVmcmFjdGlvblxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGF6aW11dGg6IGF6aW11dGgoSCwgcGhpLCBjLmRlYyksXG5cdFx0XHRhbHRpdHVkZTogaCxcblx0XHRcdGRpc3RhbmNlOiBjLmRpc3QsXG5cdFx0XHRwYXJhbGxhY3RpY0FuZ2xlOiBwYVxuXHRcdH07XG5cdH07XG5cblx0LyoqXG5cdCAqIGNhbGN1bGF0aW9ucyBmb3IgaWxsdW1pbmF0aW9uIHBhcmFtZXRlcnMgb2YgdGhlIG1vb24sXG5cdCAqIGJhc2VkIG9uIGh0dHA6Ly9pZGxhc3Ryby5nc2ZjLm5hc2EuZ292L2Z0cC9wcm8vYXN0cm8vbXBoYXNlLnBybyBmb3JtdWxhcyBhbmRcblx0ICogQ2hhcHRlciA0OCBvZiBcIkFzdHJvbm9taWNhbCBBbGdvcml0aG1zXCIgMm5kIGVkaXRpb24gYnkgSmVhbiBNZWV1cyAoV2lsbG1hbm4tQmVsbCwgUmljaG1vbmQpIDE5OTguXG5cdCAqIEBwYXJhbSBkYXRlIFxuXHQgKi9cblx0cHVibGljIGdldE1vb25JbGx1bWluYXRpb24oZGF0ZTogRGF0ZSkge1xuXG5cdFx0dmFyIGQgPSB0b0RheXMoZGF0ZSB8fCBuZXcgRGF0ZSgpKSxcblx0XHRcdHMgPSBzdW5Db29yZHMoZCksXG5cdFx0XHRtID0gbW9vbkNvb3JkcyhkKSxcblxuXHRcdFx0c3VuRGlzdCA9IDE0OTU5ODAwMCwgLy8gZGlzdGFuY2UgZnJvbSBFYXJ0aCB0byBTdW4gaW4ga21cblxuXHRcdFx0cGhpID0gYWNvcyhzaW4ocy5kZWMpICogc2luKG0uZGVjKSArIGNvcyhzLmRlYykgKiBjb3MobS5kZWMpICogY29zKHMucmEgLSBtLnJhKSksXG5cdFx0XHRpbmMgPSBhdGFuKHN1bkRpc3QgKiBzaW4ocGhpKSwgbS5kaXN0IC0gc3VuRGlzdCAqIGNvcyhwaGkpKSxcblx0XHRcdGFuZ2xlID0gYXRhbihjb3Mocy5kZWMpICogc2luKHMucmEgLSBtLnJhKSwgc2luKHMuZGVjKSAqIGNvcyhtLmRlYykgLVxuXHRcdFx0XHRjb3Mocy5kZWMpICogc2luKG0uZGVjKSAqIGNvcyhzLnJhIC0gbS5yYSkpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGZyYWN0aW9uOiAoMSArIGNvcyhpbmMpKSAvIDIsXG5cdFx0XHRwaGFzZTogMC41ICsgMC41ICogaW5jICogKGFuZ2xlIDwgMCA/IC0xIDogMSkgLyBNYXRoLlBJLFxuXHRcdFx0YW5nbGU6IGFuZ2xlXG5cdFx0fTtcblx0fTtcblxuXHQvKipcblx0ICogQ2FsY3VsYXRpb25zIGZvciBtb29uIHJpc2Uvc2V0IHRpbWVzIGFyZSBiYXNlZCBvbiBodHRwOi8vd3d3LnN0YXJnYXppbmcubmV0L2tlcGxlci9tb29ucmlzZS5odG1sIGFydGljbGVcblx0ICogQHBhcmFtIGRhdGUgXG5cdCAqIEBwYXJhbSBsYXQgXG5cdCAqIEBwYXJhbSBsbmcgXG5cdCAqIEBwYXJhbSBpblVUQyBcblx0ICovXG5cdHB1YmxpYyBnZXRNb29uVGltZXMoZGF0ZTogRGF0ZSwgbGF0OiBudW1iZXIsIGxuZzogbnVtYmVyLCBpblVUQzogYm9vbGVhbik6IE1vb25UaW1lcyB7XG5cdFx0dmFyIHQgPSBuZXcgRGF0ZShkYXRlKTtcblx0XHRpZiAoaW5VVEMpIHQuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG5cdFx0ZWxzZSB0LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuXG5cdFx0dmFyIGhjID0gMC4xMzMgKiByYWQsXG5cdFx0XHRoMCA9IHRoaXMuZ2V0TW9vblBvc2l0aW9uKHQsIGxhdCwgbG5nKS5hbHRpdHVkZSAtIGhjLFxuXHRcdFx0aDEsIGgyLCByaXNlLCBzZXQsIGEsIGIsIHhlLCB5ZSwgZCwgcm9vdHMsIHgxLCB4MiwgZHg7XG5cblx0XHQvLyBnbyBpbiAyLWhvdXIgY2h1bmtzLCBlYWNoIHRpbWUgc2VlaW5nIGlmIGEgMy1wb2ludCBxdWFkcmF0aWMgY3VydmUgY3Jvc3NlcyB6ZXJvICh3aGljaCBtZWFucyByaXNlIG9yIHNldClcblx0XHRmb3IgKHZhciBpID0gMTsgaSA8PSAyNDsgaSArPSAyKSB7XG5cdFx0XHRoMSA9IHRoaXMuZ2V0TW9vblBvc2l0aW9uKGhvdXJzTGF0ZXIodCwgaSksIGxhdCwgbG5nKS5hbHRpdHVkZSAtIGhjO1xuXHRcdFx0aDIgPSB0aGlzLmdldE1vb25Qb3NpdGlvbihob3Vyc0xhdGVyKHQsIGkgKyAxKSwgbGF0LCBsbmcpLmFsdGl0dWRlIC0gaGM7XG5cblx0XHRcdGEgPSAoaDAgKyBoMikgLyAyIC0gaDE7XG5cdFx0XHRiID0gKGgyIC0gaDApIC8gMjtcblx0XHRcdHhlID0gLWIgLyAoMiAqIGEpO1xuXHRcdFx0eWUgPSAoYSAqIHhlICsgYikgKiB4ZSArIGgxO1xuXHRcdFx0ZCA9IGIgKiBiIC0gNCAqIGEgKiBoMTtcblx0XHRcdHJvb3RzID0gMDtcblxuXHRcdFx0aWYgKGQgPj0gMCkge1xuXHRcdFx0XHRkeCA9IE1hdGguc3FydChkKSAvIChNYXRoLmFicyhhKSAqIDIpO1xuXHRcdFx0XHR4MSA9IHhlIC0gZHg7XG5cdFx0XHRcdHgyID0geGUgKyBkeDtcblx0XHRcdFx0aWYgKE1hdGguYWJzKHgxKSA8PSAxKSByb290cysrO1xuXHRcdFx0XHRpZiAoTWF0aC5hYnMoeDIpIDw9IDEpIHJvb3RzKys7XG5cdFx0XHRcdGlmICh4MSA8IC0xKSB4MSA9IHgyO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocm9vdHMgPT09IDEpIHtcblx0XHRcdFx0aWYgKGgwIDwgMCkgcmlzZSA9IGkgKyB4MTtcblx0XHRcdFx0ZWxzZSBzZXQgPSBpICsgeDE7XG5cblx0XHRcdH0gZWxzZSBpZiAocm9vdHMgPT09IDIpIHtcblx0XHRcdFx0cmlzZSA9IGkgKyAoeWUgPCAwID8geDIgOiB4MSk7XG5cdFx0XHRcdHNldCA9IGkgKyAoeWUgPCAwID8geDEgOiB4Mik7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChyaXNlICYmIHNldCkgYnJlYWs7XG5cblx0XHRcdGgwID0gaDI7XG5cdFx0fVxuXG5cdFx0dmFyIHJlc3VsdDogTW9vblRpbWVzID0ge307XG5cblx0XHRpZiAocmlzZSkgcmVzdWx0LnJpc2UgPSBob3Vyc0xhdGVyKHQsIHJpc2UpO1xuXHRcdGlmIChzZXQpIHJlc3VsdC5zZXQgPSBob3Vyc0xhdGVyKHQsIHNldCk7XG5cblx0XHRpZiAoIXJpc2UgJiYgIXNldCkgcmVzdWx0W3llID4gMCA/ICdhbHdheXNVcCcgOiAnYWx3YXlzRG93biddID0gdHJ1ZTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG59XG5cbmludGVyZmFjZSBNb29uVGltZXMge1xuXHRyaXNlPzogRGF0ZTtcblx0c2V0PzogRGF0ZTtcblx0YWx3YXlzVXA/OiBib29sZWFuO1xuXHRhbHdheXNEb3duPzogYm9vbGVhbjtcbn1cbmludGVyZmFjZSBNb29uUG9zaXRpb24ge1xuXHRhemltdXRoOiBudW1iZXI7XG5cdGFsdGl0dWRlOiBudW1iZXI7XG5cdGRpc3RhbmNlOiBudW1iZXI7XG5cdHBhcmFsbGFjdGljQW5nbGU6IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgU3VuVGltZXMgPSB7XG5cdFtrZXkgaW4gU3VuVGltZVByb3BlcnR5XT86IERhdGVcbn1cblxudHlwZSBTdW5UaW1lUHJvcGVydHkgPSAnc3VucmlzZScgfCAnc3Vuc2V0JyB8ICdzdW5yaXNlRW5kJyB8ICdzdW5zZXRTdGFydCcgfCAnZGF3bicgfCAnZHVzaycgfCAnbmF1dGljYWxEYXduJ1xuXHR8ICduYXV0aWNhbER1c2snIHwgJ25pZ2h0RW5kJyB8ICduaWdodCcgfCAnZ29sZGVuSG91ckVuZCcgfCAnZ29sZGVuSG91cicgfCAnc29sYXJOb29uJyB8ICduYWRpcic7IiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8gICAgICAgICAgICAgICAgTWV0IFVLICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuaW1wb3J0IHsgRGlzdGFuY2VVbml0cyB9IGZyb20gXCIuLi9jb25maWdcIjtcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuLi9saWIvbG9nZ2VyXCI7XG5pbXBvcnQgeyBXZWF0aGVyQXBwbGV0IH0gZnJvbSBcIi4uL21haW5cIjtcbmltcG9ydCB7IFN1bkNhbGMgfSBmcm9tIFwiLi4vbGliL3N1bkNhbGNcIjtcbmltcG9ydCB7IFdlYXRoZXJQcm92aWRlciwgV2VhdGhlckRhdGEsIEZvcmVjYXN0RGF0YSwgSG91cmx5Rm9yZWNhc3REYXRhLCBDb25kaXRpb24sIExvY2F0aW9uRGF0YSB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgXywgR2V0RGlzdGFuY2UsIE1QSHRvTVBTLCBDb21wYXNzVG9EZWcsIENlbHNpdXNUb0tlbHZpbiwgTWV0cmVUb1VzZXJVbml0cyB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgTWV0VWsgaW1wbGVtZW50cyBXZWF0aGVyUHJvdmlkZXIge1xuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gIFByb3BlcnRpZXNcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRwdWJsaWMgcmVhZG9ubHkgcHJldHR5TmFtZSA9IF8oXCJNZXQgT2ZmaWNlIFVLXCIpO1xuXHRwdWJsaWMgcmVhZG9ubHkgbmFtZSA9IFwiTWV0IE9mZmljZSBVS1wiO1xuXHRwdWJsaWMgcmVhZG9ubHkgbWF4Rm9yZWNhc3RTdXBwb3J0ID0gNTtcblx0cHVibGljIHJlYWRvbmx5IHdlYnNpdGUgPSBcImh0dHBzOi8vd3d3Lm1ldG9mZmljZS5nb3YudWsvXCI7XG5cdHB1YmxpYyByZWFkb25seSBtYXhIb3VybHlGb3JlY2FzdFN1cHBvcnQgPSAzNjtcblx0cHVibGljIHJlYWRvbmx5IG5lZWRzQXBpS2V5ID0gZmFsc2U7XG5cblx0cHJpdmF0ZSBzdW5DYWxjOiBTdW5DYWxjO1xuXG5cdHByaXZhdGUgYmFzZVVybCA9IFwiaHR0cDovL2RhdGFwb2ludC5tZXRvZmZpY2UuZ292LnVrL3B1YmxpYy9kYXRhL3ZhbC9cIjtcblxuXHRwcml2YXRlIGZvcmVjYXN0UHJlZml4ID0gXCJ3eGZjcy9hbGwvanNvbi9cIjtcblx0cHJpdmF0ZSB0aHJlZUhvdXJseVVybCA9IFwiP3Jlcz0zaG91cmx5XCI7XG5cdHByaXZhdGUgZGFpbHlVcmwgPSBcIj9yZXM9ZGFpbHlcIjtcblxuXHRwcml2YXRlIGN1cnJlbnRQcmVmaXggPSBcInd4b2JzL2FsbC9qc29uL1wiO1xuXHRwcml2YXRlIHNpdGVzVXJsID0gXCJzaXRlbGlzdFwiO1xuXHRwcml2YXRlIGtleSA9IFwia2V5PTA1ZGUxZWU4LWRlNzAtNDZhYS05YjQxLTI5OWQ0Y2M2MDIxOVwiO1xuXG5cdHByaXZhdGUgYXBwOiBXZWF0aGVyQXBwbGV0O1xuXHRwcml2YXRlIGZvcmVjYXN0U2l0ZTogV2VhdGhlclNpdGUgPSBudWxsO1xuXHRwcml2YXRlIG9ic2VydmF0aW9uU2l0ZXM6IFdlYXRoZXJTaXRlW10gPSBudWxsO1xuXHRwcml2YXRlIGN1cnJlbnRMb2M6IExvY2F0aW9uRGF0YSA9IG51bGw7XG5cdHByaXZhdGUgY3VycmVudExvY0lEOiBzdHJpbmcgPSBudWxsO1xuXHQvKiogSW4gbWV0cmVzICovXG5cdHByaXZhdGUgcmVhZG9ubHkgTUFYX1NUQVRJT05fRElTVCA9IDUwMDAwO1xuXG5cdGNvbnN0cnVjdG9yKF9hcHA6IFdlYXRoZXJBcHBsZXQpIHtcblx0XHR0aGlzLmFwcCA9IF9hcHA7XG5cdFx0dGhpcy5zdW5DYWxjID0gbmV3IFN1bkNhbGMoKTtcblx0fVxuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gIEZ1bmN0aW9uc1xuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdHB1YmxpYyBhc3luYyBHZXRXZWF0aGVyKG5ld0xvYzogTG9jYXRpb25EYXRhKTogUHJvbWlzZTxXZWF0aGVyRGF0YT4ge1xuXHRcdGlmIChuZXdMb2MgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cblx0XHRsZXQgbG9jID0gbmV3TG9jLmxhdC50b1N0cmluZygpICsgXCIsXCIgKyBuZXdMb2MubG9uLnRvU3RyaW5nKCk7XG5cdFx0Ly8gR2V0IGNsb3Nlc3Qgc2l0ZXNcblx0XHRpZiAodGhpcy5jdXJyZW50TG9jSUQgPT0gbnVsbCB8fCB0aGlzLmN1cnJlbnRMb2NJRCAhPSBsb2MgfHwgdGhpcy5mb3JlY2FzdFNpdGUgPT0gbnVsbCB8fCB0aGlzLm9ic2VydmF0aW9uU2l0ZXMgPT0gbnVsbCB8fCB0aGlzLm9ic2VydmF0aW9uU2l0ZXMubGVuZ3RoID09IDApIHtcblx0XHRcdExvZy5JbnN0YW5jZS5QcmludChcIkRvd25sb2FkaW5nIG5ldyBzaXRlIGRhdGFcIik7XG5cdFx0XHR0aGlzLmN1cnJlbnRMb2MgPSBuZXdMb2M7XG5cdFx0XHR0aGlzLmN1cnJlbnRMb2NJRCA9IGxvYztcblxuXHRcdFx0bGV0IGZvcmVjYXN0U2l0ZSA9IGF3YWl0IHRoaXMuR2V0Q2xvc2VzdEZvcmVjYXN0U2l0ZShuZXdMb2MpO1xuXHRcdFx0aWYgKGZvcmVjYXN0U2l0ZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcblxuXHRcdFx0bGV0IG9ic2VydmF0aW9uU2l0ZXMgPSBhd2FpdCB0aGlzLkdldE9ic2VydmF0aW9uU2l0ZXNJblJhbmdlKG5ld0xvYywgdGhpcy5NQVhfU1RBVElPTl9ESVNUKTtcblx0XHRcdGlmIChvYnNlcnZhdGlvblNpdGVzID09IG51bGwpIHJldHVybiBudWxsO1xuXG5cdFx0XHR0aGlzLmZvcmVjYXN0U2l0ZSA9IGZvcmVjYXN0U2l0ZTtcblx0XHRcdHRoaXMub2JzZXJ2YXRpb25TaXRlcyA9IG9ic2VydmF0aW9uU2l0ZXM7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiU2l0ZSBkYXRhIGRvd25sb2FkaW5nIHNraXBwZWRcIik7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgaW4gY291bnRyeVxuXHRcdGlmICh0aGlzLm9ic2VydmF0aW9uU2l0ZXMubGVuZ3RoID09IDAgfHwgdGhpcy5mb3JlY2FzdFNpdGUuZGlzdCA+IDEwMDAwMCkge1xuXHRcdFx0Ly8gVE9ETzogVmFsaWRhdGUgdGhhdCB0aGlzIGRvZXMgbm90IGhhcHBlbiB3aXRoIHVrIGxvY2F0aW9uc1xuXHRcdFx0TG9nLkluc3RhbmNlLkVycm9yKFwiVXNlciBpcyBwcm9iYWJseSBub3QgaW4gVUssIGFib3J0aW5nXCIpO1xuXHRcdFx0dGhpcy5hcHAuU2hvd0Vycm9yKHtcblx0XHRcdFx0dHlwZTogXCJoYXJkXCIsXG5cdFx0XHRcdHVzZXJFcnJvcjogdHJ1ZSxcblx0XHRcdFx0ZGV0YWlsOiBcImxvY2F0aW9uIG5vdCBjb3ZlcmVkXCIsXG5cdFx0XHRcdG1lc3NhZ2U6IFwiTUVUIE9mZmljZSBVSyBvbmx5IGNvdmVycyB0aGUgVUssIHBsZWFzZSBtYWtlIHN1cmUgeW91ciBsb2NhdGlvbiBpcyBpbiB0aGUgY291bnRyeVwiLFxuXHRcdFx0XHRzZXJ2aWNlOiBcIm1ldC11a1wiXG5cdFx0XHR9KVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0Ly8gU3RhcnQgZ2V0dGluZyBmb3JlY2FzdCBkYXRhXG5cdFx0bGV0IGZvcmVjYXN0UHJvbWlzZSA9IHRoaXMuR2V0RGF0YSh0aGlzLmJhc2VVcmwgKyB0aGlzLmZvcmVjYXN0UHJlZml4ICsgdGhpcy5mb3JlY2FzdFNpdGUuaWQgKyB0aGlzLmRhaWx5VXJsICsgXCImXCIgKyB0aGlzLmtleSwgdGhpcy5QYXJzZUZvcmVjYXN0KSBhcyBQcm9taXNlPEZvcmVjYXN0RGF0YVtdPjtcblx0XHRsZXQgaG91cmx5UGF5bG9hZCA9IHRoaXMuR2V0RGF0YSh0aGlzLmJhc2VVcmwgKyB0aGlzLmZvcmVjYXN0UHJlZml4ICsgdGhpcy5mb3JlY2FzdFNpdGUuaWQgKyB0aGlzLnRocmVlSG91cmx5VXJsICsgXCImXCIgKyB0aGlzLmtleSwgdGhpcy5QYXJzZUhvdXJseUZvcmVjYXN0KSBhcyBQcm9taXNlPEhvdXJseUZvcmVjYXN0RGF0YVtdPjtcblxuXHRcdC8vIEdldCBhbmQgUGFyc2UgT2JzZXJ2YXRpb24gZGF0YVxuXHRcdGxldCBvYnNlcnZhdGlvbnMgPSBhd2FpdCB0aGlzLkdldE9ic2VydmF0aW9uRGF0YSh0aGlzLm9ic2VydmF0aW9uU2l0ZXMpO1xuXHRcdGxldCBjdXJyZW50UmVzdWx0ID0gdGhpcy5QYXJzZUN1cnJlbnQob2JzZXJ2YXRpb25zKTtcblx0XHRpZiAoIWN1cnJlbnRSZXN1bHQpIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gYXdhaXQgZm9yIGZvcmVjYXN0cyBpZiBub3QgZmluaXNoZWRcblx0XHRsZXQgZm9yZWNhc3RSZXN1bHQgPSBhd2FpdCBmb3JlY2FzdFByb21pc2U7XG5cdFx0Y3VycmVudFJlc3VsdC5mb3JlY2FzdHMgPSAoIWZvcmVjYXN0UmVzdWx0KSA/IFtdIDogZm9yZWNhc3RSZXN1bHQ7XG5cdFx0bGV0IHRocmVlSG91cmx5Rm9yZWNhc3QgPSBhd2FpdCBob3VybHlQYXlsb2FkO1xuXHRcdGN1cnJlbnRSZXN1bHQuaG91cmx5Rm9yZWNhc3RzID0gKCF0aHJlZUhvdXJseUZvcmVjYXN0KSA/IFtdIDogdGhyZWVIb3VybHlGb3JlY2FzdCBhcyBIb3VybHlGb3JlY2FzdERhdGFbXTtcblx0XHRyZXR1cm4gY3VycmVudFJlc3VsdDtcblx0fTtcblxuXHRwcml2YXRlIGFzeW5jIEdldENsb3Nlc3RGb3JlY2FzdFNpdGUobG9jOiBMb2NhdGlvbkRhdGEpOiBQcm9taXNlPFdlYXRoZXJTaXRlPiB7XG5cdFx0bGV0IGZvcmVjYXN0U2l0ZWxpc3QgPSBhd2FpdCB0aGlzLmFwcC5Mb2FkSnNvbkFzeW5jKHRoaXMuYmFzZVVybCArIHRoaXMuZm9yZWNhc3RQcmVmaXggKyB0aGlzLnNpdGVzVXJsICsgXCI/XCIgKyB0aGlzLmtleSk7XG5cdFx0aWYgKGZvcmVjYXN0U2l0ZWxpc3QgPT0gbnVsbClcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIHRoaXMuR2V0Q2xvc2VzdFNpdGUoZm9yZWNhc3RTaXRlbGlzdCwgbG9jKTtcblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgR2V0T2JzZXJ2YXRpb25TaXRlc0luUmFuZ2UobG9jOiBMb2NhdGlvbkRhdGEsIHJhbmdlOiBudW1iZXIpOiBQcm9taXNlPFdlYXRoZXJTaXRlW10+IHtcblx0XHRsZXQgb2JzZXJ2YXRpb25TaXRlTGlzdCA9IGF3YWl0IHRoaXMuYXBwLkxvYWRKc29uQXN5bmM8YW55Pih0aGlzLmJhc2VVcmwgKyB0aGlzLmN1cnJlbnRQcmVmaXggKyB0aGlzLnNpdGVzVXJsICsgXCI/XCIgKyB0aGlzLmtleSk7XG5cdFx0aWYgKG9ic2VydmF0aW9uU2l0ZUxpc3QgPT0gbnVsbClcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0Ly8gU29ydCBvdXQgY2xvc2Ugb2JzZXJ2YXRpb24gc2l0ZXNcblx0XHRsZXQgb2JzZXJ2YXRpb25TaXRlcyA9IFtdO1xuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBvYnNlcnZhdGlvblNpdGVMaXN0LkxvY2F0aW9ucy5Mb2NhdGlvbi5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdGNvbnN0IGVsZW1lbnQgPSBvYnNlcnZhdGlvblNpdGVMaXN0LkxvY2F0aW9ucy5Mb2NhdGlvbltpbmRleF07XG5cdFx0XHRlbGVtZW50LmRpc3QgPSBHZXREaXN0YW5jZShwYXJzZUZsb2F0KGVsZW1lbnQubGF0aXR1ZGUpLCBwYXJzZUZsb2F0KGVsZW1lbnQubG9uZ2l0dWRlKSwgbG9jLmxhdCwgbG9jLmxvbik7XG5cdFx0XHRpZiAoZWxlbWVudC5kaXN0ID4gcmFuZ2UpIGNvbnRpbnVlOyAvLyBkbyBub3QgaW5jbHVkZSBzdGF0aW9ucyBvdXRzaWRlIGFyZWFcblx0XHRcdG9ic2VydmF0aW9uU2l0ZXMucHVzaChlbGVtZW50KTtcblx0XHR9XG5cblx0XHQvLyBhc2NlbmRpbmcgYnkgZGlzdGFuY2Vcblx0XHRvYnNlcnZhdGlvblNpdGVzID0gdGhpcy5Tb3J0T2JzZXJ2YXRpb25TaXRlcyhvYnNlcnZhdGlvblNpdGVzKTtcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJPYnNlcnZhdGlvbiBzaXRlcyBmb3VuZDogXCIgKyBKU09OLnN0cmluZ2lmeShvYnNlcnZhdGlvblNpdGVzLCBudWxsLCAyKSk7XG5cdFx0cmV0dXJuIG9ic2VydmF0aW9uU2l0ZXM7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIEdldE9ic2VydmF0aW9uRGF0YShvYnNlcnZhdGlvblNpdGVzOiBXZWF0aGVyU2l0ZVtdKSB7XG5cdFx0bGV0IG9ic2VydmF0aW9uczogTUVUUGF5bG9hZFtdID0gW107XG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG9ic2VydmF0aW9uU2l0ZXMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRjb25zdCBlbGVtZW50ID0gb2JzZXJ2YXRpb25TaXRlc1tpbmRleF07XG5cdFx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJHZXR0aW5nIG9ic2VydmF0aW9uIGRhdGEgZnJvbSBzdGF0aW9uOiBcIiArIGVsZW1lbnQuaWQpO1xuXHRcdFx0bGV0IHBheWxvYWQgPSBhd2FpdCB0aGlzLmFwcC5Mb2FkSnNvbkFzeW5jPE1FVFBheWxvYWQ+KHRoaXMuYmFzZVVybCArIHRoaXMuY3VycmVudFByZWZpeCArIGVsZW1lbnQuaWQgKyBcIj9yZXM9aG91cmx5JlwiICsgdGhpcy5rZXkpO1xuXHRcdFx0aWYgKCEhcGF5bG9hZClcblx0XHRcdFx0b2JzZXJ2YXRpb25zLnB1c2gocGF5bG9hZCk7XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiRmFpbGVkIHRvIGdldCBvYnNlcnZhdGlvbnMgZnJvbSBcIiArIGVsZW1lbnQuaWQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb2JzZXJ2YXRpb25zO1xuXHR9XG5cblx0Ly8gQSBmdW5jdGlvbiBhcyBhIGZ1bmN0aW9uIHBhcmFtZXRlciAyIGxldmVscyBkZWVwIGRvZXMgbm90IGtub3dcblx0Ly8gYWJvdXQgdGhlIHRvcCBsZXZlbCBvYmplY3QgaW5mb3JtYXRpb24sIGhhcyB0byBwYXNzIGl0IGluIGFzIGEgcGFyYW1ldGVyXG5cdC8qKlxuXHQgKiBcblx0ICogQHBhcmFtIGJhc2VVcmwgXG5cdCAqIEBwYXJhbSBQYXJzZUZ1bmN0aW9uIHJldHVybnMgV2VhdGhlckRhdGEgb3IgRm9yZWNhc3REYXRhIE9iamVjdFxuXHQgKi9cblx0cHJpdmF0ZSBhc3luYyBHZXREYXRhKHF1ZXJ5OiBzdHJpbmcsIFBhcnNlRnVuY3Rpb246IChqc29uOiBhbnksIGNvbnRleHQ6IGFueSkgPT4gV2VhdGhlckRhdGEgfCBGb3JlY2FzdERhdGFbXSB8IEhvdXJseUZvcmVjYXN0RGF0YVtdKSB7XG5cdFx0aWYgKHF1ZXJ5ID09IG51bGwpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIlF1ZXJ5OiBcIiArIHF1ZXJ5KTtcblx0XHRsZXQganNvbiA9IGF3YWl0IHRoaXMuYXBwLkxvYWRKc29uQXN5bmMocXVlcnkpO1xuXG5cdFx0aWYgKGpzb24gPT0gbnVsbClcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIFBhcnNlRnVuY3Rpb24oanNvbiwgdGhpcyk7XG5cdH07XG5cblx0cHJpdmF0ZSBQYXJzZUN1cnJlbnQoanNvbjogTUVUUGF5bG9hZFtdKTogV2VhdGhlckRhdGEge1xuXHRcdGxldCBvYnNlcnZhdGlvbiA9IHRoaXMuTWVzaE9ic2VydmF0aW9ucyhqc29uKTtcblx0XHRpZiAoIW9ic2VydmF0aW9uKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0bGV0IGRhdGFJbmRleDogbnVtYmVyO1xuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBqc29uLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGpzb25baW5kZXhdO1xuXHRcdFx0aWYgKGVsZW1lbnQuU2l0ZVJlcC5EVi5Mb2NhdGlvbiA9PSBudWxsKSBjb250aW51ZTtcblx0XHRcdGRhdGFJbmRleCA9IGluZGV4O1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGlmIChkYXRhSW5kZXggPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5hcHAuU2hvd0Vycm9yKHtcblx0XHRcdFx0ZGV0YWlsOiBcIm5vIGFwaSByZXNwb25zZVwiLFxuXHRcdFx0XHR0eXBlOiBcImhhcmRcIixcblx0XHRcdFx0bWVzc2FnZTogXyhcIkRhdGEgd2FzIG5vdCBmb3VuZCBmb3IgbG9jYXRpb25cIiksXG5cdFx0XHRcdHNlcnZpY2U6IFwibWV0LXVrXCIsXG5cdFx0XHR9KVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0bGV0IHRpbWVzID0gdGhpcy5zdW5DYWxjLmdldFRpbWVzKG5ldyBEYXRlKCksIHBhcnNlRmxvYXQoanNvbltkYXRhSW5kZXhdLlNpdGVSZXAuRFYuTG9jYXRpb24ubGF0KSwgcGFyc2VGbG9hdChqc29uW2RhdGFJbmRleF0uU2l0ZVJlcC5EVi5Mb2NhdGlvbi5sb24pLCBwYXJzZUZsb2F0KGpzb25bZGF0YUluZGV4XS5TaXRlUmVwLkRWLkxvY2F0aW9uLmVsZXZhdGlvbikpO1xuXHRcdHRyeSB7XG5cdFx0XHRsZXQgd2VhdGhlcjogV2VhdGhlckRhdGEgPSB7XG5cdFx0XHRcdGNvb3JkOiB7XG5cdFx0XHRcdFx0bGF0OiBwYXJzZUZsb2F0KGpzb25bZGF0YUluZGV4XS5TaXRlUmVwLkRWLkxvY2F0aW9uLmxhdCksXG5cdFx0XHRcdFx0bG9uOiBwYXJzZUZsb2F0KGpzb25bZGF0YUluZGV4XS5TaXRlUmVwLkRWLkxvY2F0aW9uLmxvbilcblx0XHRcdFx0fSxcblx0XHRcdFx0bG9jYXRpb246IHtcblx0XHRcdFx0XHRjaXR5OiBudWxsLFxuXHRcdFx0XHRcdGNvdW50cnk6IG51bGwsXG5cdFx0XHRcdFx0dXJsOiBudWxsLFxuXHRcdFx0XHRcdHRpbWVab25lOiBudWxsLFxuXHRcdFx0XHRcdGRpc3RhbmNlRnJvbTogdGhpcy5vYnNlcnZhdGlvblNpdGVzW2RhdGFJbmRleF0uZGlzdFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkYXRlOiBuZXcgRGF0ZShqc29uW2RhdGFJbmRleF0uU2l0ZVJlcC5EVi5kYXRhRGF0ZSksXG5cdFx0XHRcdHN1bnJpc2U6IHRpbWVzLnN1bnJpc2UsXG5cdFx0XHRcdHN1bnNldDogdGltZXMuc3Vuc2V0LFxuXHRcdFx0XHR3aW5kOiB7XG5cdFx0XHRcdFx0c3BlZWQ6IG51bGwsXG5cdFx0XHRcdFx0ZGVncmVlOiBudWxsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRlbXBlcmF0dXJlOiBudWxsLFxuXHRcdFx0XHRwcmVzc3VyZTogbnVsbCxcblx0XHRcdFx0aHVtaWRpdHk6IG51bGwsXG5cdFx0XHRcdGNvbmRpdGlvbjogdGhpcy5SZXNvbHZlQ29uZGl0aW9uKG9ic2VydmF0aW9uPy5XKSxcblx0XHRcdFx0Zm9yZWNhc3RzOiBbXVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKG9ic2VydmF0aW9uPy5WICE9IG51bGwpIHtcblx0XHRcdFx0d2VhdGhlci5leHRyYV9maWVsZCA9IHtcblx0XHRcdFx0XHRuYW1lOiBfKFwiVmlzaWJpbGl0eVwiKSxcblx0XHRcdFx0XHR2YWx1ZTogdGhpcy5WaXNpYmlsaXR5VG9UZXh0KG9ic2VydmF0aW9uLlYpLFxuXHRcdFx0XHRcdHR5cGU6IFwic3RyaW5nXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAob2JzZXJ2YXRpb24/LlMgIT0gbnVsbCkge1xuXHRcdFx0XHR3ZWF0aGVyLndpbmQuc3BlZWQgPSBNUEh0b01QUyhwYXJzZUZsb2F0KG9ic2VydmF0aW9uLlMpKTtcblx0XHRcdH1cblx0XHRcdGlmIChvYnNlcnZhdGlvbj8uRCAhPSBudWxsKSB7XG5cdFx0XHRcdHdlYXRoZXIud2luZC5kZWdyZWUgPSBDb21wYXNzVG9EZWcob2JzZXJ2YXRpb24uRCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAob2JzZXJ2YXRpb24/LlQgIT0gbnVsbCkge1xuXHRcdFx0XHR3ZWF0aGVyLnRlbXBlcmF0dXJlID0gQ2Vsc2l1c1RvS2VsdmluKHBhcnNlRmxvYXQob2JzZXJ2YXRpb24uVCkpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9ic2VydmF0aW9uPy5QICE9IG51bGwpIHtcblx0XHRcdFx0d2VhdGhlci5wcmVzc3VyZSA9IHBhcnNlRmxvYXQob2JzZXJ2YXRpb24uUCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAob2JzZXJ2YXRpb24/LkggIT0gbnVsbCkge1xuXHRcdFx0XHR3ZWF0aGVyLmh1bWlkaXR5ID0gcGFyc2VGbG9hdChvYnNlcnZhdGlvbi5IKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHdlYXRoZXI7XG5cdFx0fVxuXHRcdGNhdGNoIChlKSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJNZXQgVUsgV2VhdGhlciBQYXJzaW5nIGVycm9yOiBcIiArIGUpO1xuXHRcdFx0dGhpcy5hcHAuU2hvd0Vycm9yKHsgdHlwZTogXCJzb2Z0XCIsIHNlcnZpY2U6IFwibWV0LXVrXCIsIGRldGFpbDogXCJ1bnVzdWFsIHBheWxvYWRcIiwgbWVzc2FnZTogXyhcIkZhaWxlZCB0byBQcm9jZXNzIEN1cnJlbnQgV2VhdGhlciBJbmZvXCIpIH0pXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH07XG5cblx0cHJpdmF0ZSBQYXJzZUZvcmVjYXN0KGpzb246IE1FVFBheWxvYWQsIHNlbGY6IE1ldFVrKTogRm9yZWNhc3REYXRhW10ge1xuXHRcdGxldCBmb3JlY2FzdHM6IEZvcmVjYXN0RGF0YVtdID0gW107XG5cdFx0dHJ5IHtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwganNvbi5TaXRlUmVwLkRWLkxvY2F0aW9uLlBlcmlvZC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRsZXQgZWxlbWVudCA9IGpzb24uU2l0ZVJlcC5EVi5Mb2NhdGlvbi5QZXJpb2RbaV07XG5cdFx0XHRcdGlmICghQXJyYXkuaXNBcnJheShlbGVtZW50LlJlcCkpXG5cdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0bGV0IGRheSA9IGVsZW1lbnQuUmVwWzBdIGFzIEZvcmVjYXN0UGF5bG9hZDtcblx0XHRcdFx0bGV0IG5pZ2h0ID0gZWxlbWVudC5SZXBbMV0gYXMgRm9yZWNhc3RQYXlsb2FkO1xuXG5cdFx0XHRcdGxldCBmb3JlY2FzdDogRm9yZWNhc3REYXRhID0ge1xuXHRcdFx0XHRcdGRhdGU6IG5ldyBEYXRlKHNlbGYuUGFydGlhbFRvSVNPU3RyaW5nKGVsZW1lbnQudmFsdWUpKSxcblx0XHRcdFx0XHR0ZW1wX21pbjogQ2Vsc2l1c1RvS2VsdmluKHBhcnNlRmxvYXQobmlnaHQuTm0pKSxcblx0XHRcdFx0XHR0ZW1wX21heDogQ2Vsc2l1c1RvS2VsdmluKHBhcnNlRmxvYXQoZGF5LkRtKSksXG5cdFx0XHRcdFx0Y29uZGl0aW9uOiBzZWxmLlJlc29sdmVDb25kaXRpb24oZGF5LlcpLFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRmb3JlY2FzdHMucHVzaChmb3JlY2FzdCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZm9yZWNhc3RzO1xuXHRcdH1cblx0XHRjYXRjaCAoZSkge1xuXHRcdFx0TG9nLkluc3RhbmNlLkVycm9yKFwiTUVUIFVLIEZvcmVjYXN0IFBhcnNpbmcgZXJyb3I6IFwiICsgZSk7XG5cdFx0XHRzZWxmLmFwcC5TaG93RXJyb3IoeyB0eXBlOiBcInNvZnRcIiwgc2VydmljZTogXCJtZXQtdWtcIiwgZGV0YWlsOiBcInVudXN1YWwgcGF5bG9hZFwiLCBtZXNzYWdlOiBfKFwiRmFpbGVkIHRvIFByb2Nlc3MgRm9yZWNhc3QgSW5mb1wiKSB9KVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cdHByaXZhdGUgUGFyc2VIb3VybHlGb3JlY2FzdChqc29uOiBNRVRQYXlsb2FkLCBzZWxmOiBNZXRVayk6IEhvdXJseUZvcmVjYXN0RGF0YVtdIHtcblx0XHRsZXQgZm9yZWNhc3RzOiBIb3VybHlGb3JlY2FzdERhdGFbXSA9IFtdO1xuXHRcdHRyeSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGpzb24uU2l0ZVJlcC5EVi5Mb2NhdGlvbi5QZXJpb2QubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0bGV0IGRheSA9IGpzb24uU2l0ZVJlcC5EVi5Mb2NhdGlvbi5QZXJpb2RbaV07XG5cdFx0XHRcdGxldCBkYXRlID0gbmV3IERhdGUoc2VsZi5QYXJ0aWFsVG9JU09TdHJpbmcoZGF5LnZhbHVlKSk7XG5cdFx0XHRcdGlmICghQXJyYXkuaXNBcnJheShkYXkuUmVwKSlcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcblx0XHRcdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGRheS5SZXAubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRcdFx0Y29uc3QgaG91ciA9IGRheS5SZXBbaW5kZXhdIGFzIFRocmVlSG91clBheWxvYWQ7XG5cdFx0XHRcdFx0bGV0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcblx0XHRcdFx0XHR0aW1lc3RhbXAuc2V0SG91cnModGltZXN0YW1wLmdldEhvdXJzKCkgKyAocGFyc2VJbnQoaG91ci4kKSAvIDYwKSk7XG5cdFx0XHRcdFx0bGV0IHRocmVzaG9sZCA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdFx0Ly8gU2hvdyB0aGUgcHJldmlvdXMgMy1ob3VyIGZvcmVjYXN0IHVudGlsIGl0IHJlYWNoZXMgdGhlIG5leHQgb25lXG5cdFx0XHRcdFx0dGhyZXNob2xkLnNldEhvdXJzKHRocmVzaG9sZC5nZXRIb3VycygpIC0gMyk7XG5cdFx0XHRcdFx0aWYgKHRpbWVzdGFtcCA8IHRocmVzaG9sZCkgY29udGludWU7XG5cblx0XHRcdFx0XHRsZXQgZm9yZWNhc3Q6IEhvdXJseUZvcmVjYXN0RGF0YSA9IHtcblx0XHRcdFx0XHRcdGRhdGU6IHRpbWVzdGFtcCxcblx0XHRcdFx0XHRcdHRlbXA6IENlbHNpdXNUb0tlbHZpbihwYXJzZUZsb2F0KGhvdXIuVCkpLFxuXHRcdFx0XHRcdFx0Y29uZGl0aW9uOiBzZWxmLlJlc29sdmVDb25kaXRpb24oaG91ci5XKSxcblx0XHRcdFx0XHRcdHByZWNpcGl0YXRpb246IHtcblx0XHRcdFx0XHRcdFx0dHlwZTogXCJyYWluXCIsXG5cdFx0XHRcdFx0XHRcdHZvbHVtZTogbnVsbCxcblx0XHRcdFx0XHRcdFx0Y2hhbmNlOiBwYXJzZUZsb2F0KGhvdXIuUHApXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRmb3JlY2FzdHMucHVzaChmb3JlY2FzdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmb3JlY2FzdHM7XG5cdFx0fVxuXHRcdGNhdGNoIChlKSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJNRVQgVUsgRm9yZWNhc3QgUGFyc2luZyBlcnJvcjogXCIgKyBlKTtcblx0XHRcdHNlbGYuYXBwLlNob3dFcnJvcih7IHR5cGU6IFwic29mdFwiLCBzZXJ2aWNlOiBcIm1ldC11a1wiLCBkZXRhaWw6IFwidW51c3VhbCBwYXlsb2FkXCIsIG1lc3NhZ2U6IF8oXCJGYWlsZWQgdG8gUHJvY2VzcyBGb3JlY2FzdCBJbmZvXCIpIH0pXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblxuXHQvKiogaHR0cHM6Ly93d3cubWV0b2ZmaWNlLmdvdi51ay9zZXJ2aWNlcy9kYXRhL2RhdGFwb2ludC9jb2RlLWRlZmluaXRpb25zICovXG5cdHByaXZhdGUgVmlzaWJpbGl0eVRvVGV4dChkaXN0OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdGxldCBkaXN0YW5jZSA9IHBhcnNlSW50KGRpc3QpO1xuXHRcdGxldCB1bml0ID0gdGhpcy5hcHAuY29uZmlnLkRpc3RhbmNlVW5pdDtcblx0XHRsZXQgc3RyaW5nRm9ybWF0OiBhbnkgPSB7XG5cdFx0XHRkaXN0YW5jZVVuaXQ6IHRoaXMuRGlzdGFuY2VVbml0Rm9yKHVuaXQpXG5cdFx0fTtcblxuXHRcdGlmIChkaXN0YW5jZSA8IDEwMDApIHtcblx0XHRcdHN0cmluZ0Zvcm1hdC5kaXN0YW5jZSA9IE1ldHJlVG9Vc2VyVW5pdHMoMTAwMCwgdW5pdCkudG9TdHJpbmcoKTtcblx0XHRcdHJldHVybiBgJHtfKFwiVmVyeSBwb29yXCIpfSAtICR7XyhcIkxlc3MgdGhhbiB7ZGlzdGFuY2V9IHtkaXN0YW5jZVVuaXR9XCIsIHN0cmluZ0Zvcm1hdCl9YDtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoZGlzdGFuY2UgPj0gNDAwMDApIHtcblx0XHRcdHN0cmluZ0Zvcm1hdC5kaXN0YW5jZSA9IE1ldHJlVG9Vc2VyVW5pdHMoNDAwMDAsIHVuaXQpLnRvU3RyaW5nKCk7XG5cdFx0XHRyZXR1cm4gYCR7XyhcIkV4Y2VsbGVudFwiKX0gLSAke18oXCJNb3JlIHRoYW4ge2Rpc3RhbmNlfSB7ZGlzdGFuY2VVbml0fVwiLCBzdHJpbmdGb3JtYXQpfWA7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGRpc3RhbmNlIDwgNDAwMCkge1xuXHRcdFx0c3RyaW5nRm9ybWF0LnNtYWxsZXJEaXN0YW5jZSA9IE1ldHJlVG9Vc2VyVW5pdHMoMTAwMCwgdW5pdCkudG9TdHJpbmcoKTtcblx0XHRcdHN0cmluZ0Zvcm1hdC5iaWdnZXJEaXN0YW5jZSA9IE1ldHJlVG9Vc2VyVW5pdHMoNDAwMCwgdW5pdCkudG9TdHJpbmcoKTtcblx0XHRcdHJldHVybiBgJHtfKFwiUG9vclwiKX0gLSAke18oXCJCZXR3ZWVuIHtzbWFsbGVyRGlzdGFuY2V9LXtiaWdnZXJEaXN0YW5jZX0ge2Rpc3RhbmNlVW5pdH1cIiwgc3RyaW5nRm9ybWF0KX1gO1xuXHRcdH1cblxuXHRcdGVsc2UgaWYgKGRpc3RhbmNlIDwgMTAwMDApIHtcblx0XHRcdHN0cmluZ0Zvcm1hdC5zbWFsbGVyRGlzdGFuY2UgPSBNZXRyZVRvVXNlclVuaXRzKDQwMDAsIHVuaXQpLnRvU3RyaW5nKCk7XG5cdFx0XHRzdHJpbmdGb3JtYXQuYmlnZ2VyRGlzdGFuY2UgPSBNZXRyZVRvVXNlclVuaXRzKDEwMDAwLCB1bml0KS50b1N0cmluZygpO1xuXHRcdFx0cmV0dXJuIGAke18oXCJNb2RlcmF0ZVwiKX0gLSAke18oXCJCZXR3ZWVuIHtzbWFsbGVyRGlzdGFuY2V9LXtiaWdnZXJEaXN0YW5jZX0ge2Rpc3RhbmNlVW5pdH1cIiwgc3RyaW5nRm9ybWF0KX1gO1xuXHRcdH1cblxuXHRcdGVsc2UgaWYgKGRpc3RhbmNlIDwgMjAwMDApIHtcblx0XHRcdHN0cmluZ0Zvcm1hdC5zbWFsbGVyRGlzdGFuY2UgPSBNZXRyZVRvVXNlclVuaXRzKDEwMDAwLCB1bml0KS50b1N0cmluZygpO1xuXHRcdFx0c3RyaW5nRm9ybWF0LmJpZ2dlckRpc3RhbmNlID0gTWV0cmVUb1VzZXJVbml0cygyMDAwMCwgdW5pdCkudG9TdHJpbmcoKTtcblx0XHRcdHJldHVybiBgJHtfKFwiR29vZFwiKX0gLSAke18oXCJCZXR3ZWVuIHtzbWFsbGVyRGlzdGFuY2V9LXtiaWdnZXJEaXN0YW5jZX0ge2Rpc3RhbmNlVW5pdH1cIiwgc3RyaW5nRm9ybWF0KX1gO1xuXHRcdH1cblxuXHRcdGVsc2UgaWYgKGRpc3RhbmNlIDwgNDAwMDApIHtcblx0XHRcdHN0cmluZ0Zvcm1hdC5zbWFsbGVyRGlzdGFuY2UgPSBNZXRyZVRvVXNlclVuaXRzKDIwMDAwLCB1bml0KS50b1N0cmluZygpO1xuXHRcdFx0c3RyaW5nRm9ybWF0LmJpZ2dlckRpc3RhbmNlID0gTWV0cmVUb1VzZXJVbml0cyg0MDAwMCwgdW5pdCkudG9TdHJpbmcoKTtcblx0XHRcdHJldHVybiBgJHtfKFwiVmVyeSBnb29kXCIpfSAke18oXCJCZXR3ZWVuIHtzbWFsbGVyRGlzdGFuY2V9LXtiaWdnZXJEaXN0YW5jZX0ge2Rpc3RhbmNlVW5pdH1cIiwgc3RyaW5nRm9ybWF0KX1gO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgRGlzdGFuY2VVbml0Rm9yKHVuaXQ6IERpc3RhbmNlVW5pdHMpIHtcblx0XHRpZiAodW5pdCA9PSBcImltcGVyaWFsXCIpIHJldHVybiBfKFwibWlcIik7XG5cdFx0cmV0dXJuIF8oXCJrbVwiKTtcblx0fVxuXG5cdHByaXZhdGUgU29ydE9ic2VydmF0aW9uU2l0ZXMob2JzZXJ2YXRpb25zOiBXZWF0aGVyU2l0ZVtdKTogV2VhdGhlclNpdGVbXSB7XG5cdFx0aWYgKG9ic2VydmF0aW9ucyA9PSBudWxsKSByZXR1cm4gbnVsbDtcblx0XHRvYnNlcnZhdGlvbnMgPSBvYnNlcnZhdGlvbnMuc29ydCgoYSwgYikgPT4ge1xuXHRcdFx0aWYgKGEuZGlzdCA8IGIuZGlzdCkgcmV0dXJuIC0xO1xuXHRcdFx0aWYgKGEuZGlzdCA9PSBiLmRpc3QpIHJldHVybiAwO1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fSlcblx0XHRyZXR1cm4gb2JzZXJ2YXRpb25zO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1lc2ggb2JzZXJ2YXRpb24gZGF0YSBpZiBzb21lIHZhbHVlcyBhcmUgbWlzc2luZ1xuXHQgKiBAcGFyYW0gb2JzZXJ2YXRpb25zIHNvcnRlZCBieSBkaXN0YW5jZSBvZiBsb2NhdGlvbiwgYXNjZW5kaW5nXG5cdCAqL1xuXHRwcml2YXRlIE1lc2hPYnNlcnZhdGlvbnMob2JzZXJ2YXRpb25zOiBNRVRQYXlsb2FkW10pOiBPYnNlcnZhdGlvblBheWxvYWQge1xuXHRcdGlmICghb2JzZXJ2YXRpb25zKSByZXR1cm4gbnVsbDtcblx0XHRpZiAob2JzZXJ2YXRpb25zLmxlbmd0aCA9PSAwKSByZXR1cm4gbnVsbDtcblx0XHQvLyBTb21ldGltZXMgTG9jYXRpb24gcHJvcGVydHkgaXMgbWlzc2luZ1xuXHRcdGxldCByZXN1bHQ6IE9ic2VydmF0aW9uUGF5bG9hZCA9IHRoaXMuR2V0TGF0ZXN0T2JzZXJ2YXRpb24ob2JzZXJ2YXRpb25zWzBdPy5TaXRlUmVwPy5EVj8uTG9jYXRpb24/LlBlcmlvZCwgbmV3IERhdGUoKSk7XG5cdFx0aWYgKG9ic2VydmF0aW9ucy5sZW5ndGggPT0gMSkgcmV0dXJuIHJlc3VsdDtcblx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgb2JzZXJ2YXRpb25zLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0aWYgKG9ic2VydmF0aW9uc1tpbmRleF0/LlNpdGVSZXA/LkRWPy5Mb2NhdGlvbj8uUGVyaW9kID09IG51bGwpIGNvbnRpbnVlO1xuXHRcdFx0bGV0IG5leHRPYnNlcnZhdGlvbiA9IHRoaXMuR2V0TGF0ZXN0T2JzZXJ2YXRpb24ob2JzZXJ2YXRpb25zW2luZGV4XS5TaXRlUmVwLkRWLkxvY2F0aW9uLlBlcmlvZCwgbmV3IERhdGUoKSk7XG5cdFx0XHRpZiAocmVzdWx0ID09IG51bGwpIHJlc3VsdCA9IG5leHRPYnNlcnZhdGlvbjtcblx0XHRcdGxldCBkZWJ1Z1RleHQgPVxuXHRcdFx0XHRcIiBPYnNlcnZhdGlvbiBkYXRhIG1pc3NpbmcsIHBsdWdnZWQgaW4gZnJvbSBJRCBcIiArXG5cdFx0XHRcdG9ic2VydmF0aW9uc1tpbmRleF0uU2l0ZVJlcC5EVi5Mb2NhdGlvbi5pICsgXCIsIGluZGV4IFwiICsgaW5kZXggK1xuXHRcdFx0XHRcIiwgZGlzdGFuY2UgXCJcblx0XHRcdFx0KyBNYXRoLnJvdW5kKEdldERpc3RhbmNlKFxuXHRcdFx0XHRcdHBhcnNlRmxvYXQob2JzZXJ2YXRpb25zW2luZGV4XS5TaXRlUmVwLkRWLkxvY2F0aW9uLmxhdCksXG5cdFx0XHRcdFx0cGFyc2VGbG9hdChvYnNlcnZhdGlvbnNbaW5kZXhdLlNpdGVSZXAuRFYuTG9jYXRpb24ubG9uKSxcblx0XHRcdFx0XHR0aGlzLmN1cnJlbnRMb2MubGF0LFxuXHRcdFx0XHRcdHRoaXMuY3VycmVudExvYy5sb25cblx0XHRcdFx0KSlcblx0XHRcdFx0KyBcIiBtZXRyZXNcIjtcblx0XHRcdGlmIChyZXN1bHQ/LlYgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXN1bHQuViA9IG5leHRPYnNlcnZhdGlvbj8uVjtcblx0XHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiVmlzaWJpbGl0eVwiICsgZGVidWdUZXh0KTtcblx0XHRcdH1cblx0XHRcdGlmIChyZXN1bHQ/LlcgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXN1bHQuVyA9IG5leHRPYnNlcnZhdGlvbj8uVztcblx0XHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiV2VhdGhlciBjb25kaXRpb25cIiArIGRlYnVnVGV4dCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmVzdWx0Py5TID09IG51bGwpIHtcblx0XHRcdFx0cmVzdWx0LlMgPSBuZXh0T2JzZXJ2YXRpb24/LlM7XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIldpbmQgU3BlZWRcIiArIGRlYnVnVGV4dCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmVzdWx0Py5EID09IG51bGwpIHtcblx0XHRcdFx0cmVzdWx0LkQgPSBuZXh0T2JzZXJ2YXRpb24/LkQ7XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIldpbmQgZGVncmVlXCIgKyBkZWJ1Z1RleHQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlc3VsdD8uVCA9PSBudWxsKSB7XG5cdFx0XHRcdHJlc3VsdC5UID0gbmV4dE9ic2VydmF0aW9uPy5UO1xuXHRcdFx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJUZW1wZXJhdHVyZVwiICsgZGVidWdUZXh0KTtcblx0XHRcdH1cblx0XHRcdGlmIChyZXN1bHQ/LlAgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXN1bHQuUCA9IG5leHRPYnNlcnZhdGlvbj8uUDtcblx0XHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiUHJlc3N1cmVcIiArIGRlYnVnVGV4dCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmVzdWx0Py5IID09IG51bGwpIHtcblx0XHRcdFx0cmVzdWx0LkggPSBuZXh0T2JzZXJ2YXRpb24/Lkg7XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkh1bWlkaXR5XCIgKyBkZWJ1Z1RleHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyoqXG5cdCAqIE9idGFpbnMgdGhlIGxhdGVzdCBvYnNlcnZhdGlvbiBmcm9tIHRoZSBkYXRhIG9mIHBhc3QgMjQtaG91ciBvYnNlcnZhdGlvbiBwZXJpb2RzXG5cdCAqIEBwYXJhbSBvYnNlcnZhdGlvbnMgXG5cdCAqIEBwYXJhbSBkYXkgXG5cdCAqL1xuXHRwcml2YXRlIEdldExhdGVzdE9ic2VydmF0aW9uKG9ic2VydmF0aW9uczogUGVyaW9kW10sIGRheTogRGF0ZSk6IE9ic2VydmF0aW9uUGF5bG9hZCB7XG5cdFx0aWYgKG9ic2VydmF0aW9ucyA9PSBudWxsKSByZXR1cm4gbnVsbDtcblx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgb2JzZXJ2YXRpb25zLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IG9ic2VydmF0aW9uc1tpbmRleF07XG5cdFx0XHRsZXQgZGF0ZSA9IG5ldyBEYXRlKHRoaXMuUGFydGlhbFRvSVNPU3RyaW5nKGVsZW1lbnQudmFsdWUpKTtcblx0XHRcdGlmIChkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpICE9IGRheS50b0xvY2FsZURhdGVTdHJpbmcoKSkgY29udGludWU7XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShlbGVtZW50LlJlcCkpXG5cdFx0XHRcdHJldHVybiBlbGVtZW50LlJlcFtlbGVtZW50LlJlcC5sZW5ndGggLSAxXSBhcyBPYnNlcnZhdGlvblBheWxvYWQ7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBlbGVtZW50LlJlcDtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XHRcdFxuXHR9XG5cblx0LyoqXG5cdCAqIFxuXHQgKiBAcGFyYW0gZGF0ZSBFeGFtcGxlIFwiMjAyMC0wNi0yMlpcIlxuXHQgKi9cblx0cHJpdmF0ZSBQYXJ0aWFsVG9JU09TdHJpbmcoZGF0ZTogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gKGRhdGUucmVwbGFjZShcIlpcIiwgXCJcIikpICsgXCJUMDA6MDA6MDBaXCI7XG5cdH1cblxuXHRwcml2YXRlIEdldENsb3Nlc3RTaXRlKHNpdGVMaXN0OiBhbnksIGxvYzogTG9jYXRpb25EYXRhKTogV2VhdGhlclNpdGUge1xuXHRcdGxldCBzaXRlcyA9IHNpdGVMaXN0LkxvY2F0aW9ucy5Mb2NhdGlvbiBhcyBXZWF0aGVyU2l0ZVtdO1xuXHRcdGxldCBjbG9zZXN0ID0gc2l0ZXNbMF07XG5cdFx0Y2xvc2VzdC5kaXN0ID0gR2V0RGlzdGFuY2UocGFyc2VGbG9hdChjbG9zZXN0LmxhdGl0dWRlKSwgcGFyc2VGbG9hdChjbG9zZXN0LmxvbmdpdHVkZSksIGxvYy5sYXQsIGxvYy5sb24pO1xuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzaXRlcy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdGNvbnN0IGVsZW1lbnQgPSBzaXRlc1tpbmRleF07XG5cdFx0XHRlbGVtZW50LmRpc3QgPSBHZXREaXN0YW5jZShwYXJzZUZsb2F0KGVsZW1lbnQubGF0aXR1ZGUpLCBwYXJzZUZsb2F0KGVsZW1lbnQubG9uZ2l0dWRlKSwgbG9jLmxhdCwgbG9jLmxvbik7XG5cdFx0XHRpZiAoZWxlbWVudC5kaXN0IDwgY2xvc2VzdC5kaXN0KSB7XG5cdFx0XHRcdGNsb3Nlc3QgPSBlbGVtZW50O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2xvc2VzdDtcblx0fVxuXG5cdHByaXZhdGUgUmVzb2x2ZUNvbmRpdGlvbihpY29uOiBzdHJpbmcpOiBDb25kaXRpb24ge1xuXHRcdHN3aXRjaCAoaWNvbikge1xuXHRcdFx0Y2FzZSBcIk5BXCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlVua25vd25cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJVbmtub3duXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiY2xvdWQtcmVmcmVzaC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiMFwiOiAvLyBDbGVhciBuaWdodFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJDbGVhclwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkNsZWFyXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwibmlnaHQtY2xlYXItc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1jbGVhci1uaWdodFwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIxXCI6IC8vIFN1bm55IGRheVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJTdW5ueVwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlN1bm55XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiZGF5LXN1bm55LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItY2xlYXJcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiMlwiOiAvLyBQYXJ0bHkgY2xvdWR5IChuaWdodClcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiUGFydGx5IGNsb3VkeVwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlBhcnRseSBjbG91ZHlcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJuaWdodC1hbHQtY2xvdWR5LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItY2xvdWRzLW5pZ2h0XCIsIFwid2VhdGhlci1vdmVyY2FzdFwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIzXCI6IC8vIFBhcnRseSBjbG91ZHkgKGRheSlcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiUGFydGx5IGNsb3VkeVwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlBhcnRseSBjbG91ZHlcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJkYXktY2xvdWR5LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItY2xvdWRzXCIsIFwid2VhdGhlci1vdmVyY2FzdFwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCI0XCI6IC8vIE5vdCB1c2VkIC0gcmVhbGx5P1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJVbmtub3duXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiVW5rbm93blwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImNsb3VkLXJlZnJlc2gtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcIjVcIjogLy8gTWlzdFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJNaXN0XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiTWlzdFwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImZvZy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZvZ1wiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCI2XCI6IC8vIEZvZ1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJGb2dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJGb2dcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJmb2ctc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1mb2dcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiN1wiOiAvLyBDbG91ZHlcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiQ2xvdWR5XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiQ2xvdWR5XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiY2xvdWQtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1vdmVyY2FzdFwiLCBcIndlYXRoZXItbWFueS1jbG91ZHNcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiOFwiOlxuXHRcdFx0XHRyZXR1cm4geyAvLyBPdmVyY2FzdFxuXHRcdFx0XHRcdG1haW46IF8oXCJPdmVyY2FzdFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIk92ZXJjYXN0XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiY2xvdWR5LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItb3ZlcmNhc3RcIiwgXCJ3ZWF0aGVyLW1hbnktY2xvdWRzXCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcIjlcIjogLy8gTGlnaHQgcmFpbiBzaG93ZXIgKG5pZ2h0KVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJMaWdodCByYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiTGlnaHQgcmFpbiBzaG93ZXJcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJuaWdodC1hbHQtc2hvd2Vycy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkLW5pZ2h0XCIsIFwid2VhdGhlci1zaG93ZXJzLW5pZ2h0XCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIxMFwiOiAvLyBMaWdodCByYWluIHNob3dlciAoZGF5KVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJMaWdodCByYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiTGlnaHQgcmFpbiBzaG93ZXJcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJkYXktc2hvd2Vycy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkLWRheVwiLCBcIndlYXRoZXItc2hvd2Vycy1kYXlcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCIsIFwid2VhdGhlci1zaG93ZXJzXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcIjExXCI6IC8vIERyaXp6bGVcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiRHJpenpsZVwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkRyaXp6bGVcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzaG93ZXJzLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiMTJcIjogLy8gTGlnaHQgcmFpblxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJMaWdodCByYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiTGlnaHQgcmFpblwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNob3dlcnMtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItcmFpblwiLCBcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIxM1wiOiAvLyBIZWF2eSByYWluIHNob3dlciAobmlnaHQpXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkhlYXZ5IHJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSByYWluIHNob3dlclwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcIm5pZ2h0LWFsdC1yYWluLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc2hvd2Vycy1uaWdodFwiLCBcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiMTRcIjogLy8gSGVhdnkgcmFpbiBzaG93ZXIgKGRheSlcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiSGVhdnkgcmFpblwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkhlYXZ5IHJhaW4gc2hvd2VyXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiZGF5LXJhaW4tc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zaG93ZXJzLWRheVwiLCBcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiMTVcIjogLy8gSGVhdnkgcmFpblxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJIZWF2eSByYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSGVhdnkgcmFpblwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInJhaW4tc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zaG93ZXJzXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIxNlwiOiAvLyBTbGVldCBzaG93ZXIgKG5pZ2h0KVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJTbGVldFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNsZWV0IHNob3dlclwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcIm5pZ2h0LWFsdC1yYWluLW1peC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnMtbmlnaHRcIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcIjE3XCI6IC8vIFNsZWV0IHNob3dlciAoZGF5KVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJTbGVldFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNsZWV0IHNob3dlclwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImRheS1yYWluLW1peC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnMtZGF5XCIsIFwid2VhdGhlci1zaG93ZXJzXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIxOFwiOiAvLyBTbGVldFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJTbGVldFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNsZWV0XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwicmFpbi1taXgtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zaG93ZXJzXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIxOVwiOiAvLyBIYWlsIHNob3dlciAobmlnaHQpXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkhhaWxcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIYWlsIHNob3dlclwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcIm5pZ2h0LWFsdC1oYWlsLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc2hvd2Vycy1uaWdodFwiLCBcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiMjBcIjogLy8gSGFpbCBzaG93ZXIgKGRheSlcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiSGFpbFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkhhaWwgc2hvd2VyXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiZGF5LWhhaWwtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zaG93ZXJzLWRheVwiLCBcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiMjFcIjogLy8gSGFpbFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJIYWlsXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSGFpbFwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImhhaWwtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zaG93ZXJzXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIyMlwiOiAvLyBMaWdodCBzbm93IHNob3dlciAobmlnaHQpXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkxpZ2h0IHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJMaWdodCBzbm93IHNob3dlclwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcIm5pZ2h0LWFsdC1zbm93LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc25vdy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXNub3dcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiMjNcIjogLy8gTGlnaHQgc25vdyBzaG93ZXIgKGRheSlcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiTGlnaHQgc25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IHNub3cgc2hvd2VyXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiZGF5LXNub3ctc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93LXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc25vd1wiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIyNFwiOiAvLyBMaWdodCBzbm93XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkxpZ2h0IHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJMaWdodCBzbm93XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwic25vdy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNub3ctc2NhdHRlcmVkXCIsIFwid2VhdGhlci1zbm93XCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcIjI1XCI6IC8vIEhlYXZ5IHNub3cgc2hvd2VyIChuaWdodClcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiSGVhdnkgc25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkhlYXZ5IHNub3cgc2hvd2VyXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwibmlnaHQtYWx0LXNub3ctc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93XCIsIFwid2VhdGhlci1zbm93LXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIyNlwiOiAvLyBcdEhlYXZ5IHNub3cgc2hvd2VyIChkYXkpXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkhlYXZ5IHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSBzbm93IHNob3dlclwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImRheS1zbm93LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc25vd1wiLCBcIndlYXRoZXItc25vdy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiMjdcIjogLy8gSGVhdnkgc25vd1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJIZWF2eSBzbm93XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSGVhdnkgc25vd1wiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNub3ctc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93XCIsIFwid2VhdGhlci1zbm93LXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIyOFwiOiAvLyBUaHVuZGVyIHNob3dlciAobmlnaHQpXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlRodW5kZXJcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJUaHVuZGVyIHNob3dlclwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImRheS1zdG9ybS1zaG93ZXJzLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc3Rvcm1cIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiMjlcIjogLy8gVGh1bmRlciBzaG93ZXIgKGRheSlcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiVGh1bmRlclwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlRodW5kZXIgc2hvd2VyXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwibmlnaHQtYWx0LXN0b3JtLXNob3dlcnMtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zdG9ybVwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCIzMFwiOiAvLyBUaHVuZGVyXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlRodW5kZXJcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJUaHVuZGVyXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwidGh1bmRlcnN0b3JtLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc3Rvcm1cIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJVbmtub3duXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiVW5rbm93blwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImNsb3VkLXJlZnJlc2gtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmludGVyZmFjZSBXZWF0aGVyU2l0ZSB7XG5cdGVsZXZhdGlvbjogc3RyaW5nO1xuXHRpZDogc3RyaW5nO1xuXHRsYXRpdHVkZTogc3RyaW5nO1xuXHRsb25naXR1ZGU6IHN0cmluZztcblx0b2JzU291cmNlPzogc3RyaW5nO1xuXHRuYW1lOiBzdHJpbmc7XG5cdHJlZ2lvbjogc3RyaW5nO1xuXHR1bml0YXJ5QXV0aEFyZWE6IHN0cmluZztcblx0LyoqIG1ldHJlcyAqL1xuXHRkaXN0OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBNRVRQYXlsb2FkIHtcblx0U2l0ZVJlcDoge1xuXHRcdFd4OiB7XG5cdFx0XHRQYXJhbTogYW55W107XG5cdFx0fSxcblx0XHREVjoge1xuXHRcdFx0ZGF0YURhdGU6IHN0cmluZztcblx0XHRcdHR5cGU6IHN0cmluZztcblx0XHRcdExvY2F0aW9uOiB7XG5cdFx0XHRcdGk6IHN0cmluZztcblx0XHRcdFx0bGF0OiBzdHJpbmc7XG5cdFx0XHRcdGxvbjogc3RyaW5nO1xuXHRcdFx0XHRuYW1lOiBzdHJpbmc7XG5cdFx0XHRcdGNvdW50cnk6IHN0cmluZztcblx0XHRcdFx0Y29udGluZW50OiBzdHJpbmc7XG5cdFx0XHRcdGVsZXZhdGlvbjogc3RyaW5nO1xuXHRcdFx0XHRQZXJpb2Q6IFBlcmlvZFtdXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmludGVyZmFjZSBQZXJpb2Qge1xuXHR0eXBlOiBzdHJpbmc7XG5cdC8qKiBEYXRlIGFzIElTTyBzdHJpbmcgKi9cblx0dmFsdWU6IHN0cmluZztcblx0UmVwOiBPYnNlcnZhdGlvblBheWxvYWRbXSB8IE9ic2VydmF0aW9uUGF5bG9hZCB8IEZvcmVjYXN0UGF5bG9hZFtdIHwgVGhyZWVIb3VyUGF5bG9hZFtdXG59XG5cbmludGVyZmFjZSBPYnNlcnZhdGlvblBheWxvYWQge1xuXHQvKiogV2luZCBHdXN0LCBtcGg/ICovXG5cdEc/OiBzdHJpbmc7XG5cdC8qKiBXaW5kIGRpcmVjdGlvbiwgQ29tcGFzcz8gZS5nLiBOVyAqL1xuXHREOiBzdHJpbmc7XG5cdC8qKiBIdW1pZGl0eSwgJT8gKi9cblx0SDogc3RyaW5nO1xuXHQvKiogUHJlc3N1cmUsIGhwYT8gKi9cblx0UD86IHN0cmluZztcblx0LyoqIFdpbmQgc3BlZWQsIG1waD8gKi9cblx0Uzogc3RyaW5nO1xuXHQvKiogVGVtcGVyYXR1cmUsIEM/ICovXG5cdFQ6IHN0cmluZztcblx0LyoqIFZpc2liaWxpdHksIG0/ICovXG5cdFY/OiBzdHJpbmc7XG5cdC8qKiBXZWF0aGVyIHR5cGUsIGh0dHBzOi8vd3d3Lm1ldG9mZmljZS5nb3YudWsvc2VydmljZXMvZGF0YS9kYXRhcG9pbnQvY29kZS1kZWZpbml0aW9ucyAqL1xuXHRXPzogc3RyaW5nO1xuXHQvKiogUHJlc3N1cmUgdGVuZGVuY3ksIFBhL3M/ICovXG5cdFB0Pzogc3RyaW5nO1xuXHQvKiogRGV3IFBvaW50LCBDPyAqL1xuXHREcDogc3RyaW5nO1xuXHQvKiogTWludXRlcyBhZnRlciBtaWRuaWdodCBvbiB0aGUgZGF5ICovXG5cdCQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFRocmVlSG91clBheWxvYWQge1xuXHQvKiogV2luZCBHdXN0LCBtcGg/ICovXG5cdEc6IHN0cmluZztcblx0LyoqIFdpbmQgZGlyZWN0aW9uLCBDb21wYXNzPyBlLmcuIE5XICovXG5cdEQ6IHN0cmluZztcblx0LyoqIFdpbmQgc3BlZWQsIG1waD8gKi9cblx0Uzogc3RyaW5nO1xuXHQvKiogRmVlbHMgbGlrZSB0ZW1wZXJhdHVyZSwgQz8gKi9cblx0Rjogc3RyaW5nO1xuXHQvKiogU2NyZWVuIFJlbGF0aXZlIEh1bWlkaXR5LCAlICovXG5cdEg/OiBzdHJpbmc7XG5cdC8qKiBUZW1wZXJhdHVyZSwgQz8gKi9cblx0VDogc3RyaW5nO1xuXHQvKiogVmlzaWJpbGl0eSB0eXBlLCBodHRwczovL3d3dy5tZXRvZmZpY2UuZ292LnVrL3NlcnZpY2VzL2RhdGEvZGF0YXBvaW50L2NvZGUtZGVmaW5pdGlvbnMgKi9cblx0Vjogc3RyaW5nO1xuXHQvKiogV2VhdGhlciB0eXBlLCBodHRwczovL3d3dy5tZXRvZmZpY2UuZ292LnVrL3NlcnZpY2VzL2RhdGEvZGF0YXBvaW50L2NvZGUtZGVmaW5pdGlvbnMgKi9cblx0Vzogc3RyaW5nO1xuXHQvKiogUHJlY2lwaXRhdGlvbiBQcm9iYWJpbGl0eSwgJSAqL1xuXHRQcDogc3RyaW5nO1xuXHQvKiogVVYgcmFkaWF0aW9uLCBTb2xhciBVViBJbmRleCAqL1xuXHRVOiBzdHJpbmc7XG5cdC8qKiBNaW51dGVzIGFmdGVyIG1pZG5pZ2h0IG9uIHRoZSBkYXkgKi9cblx0JDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgRm9yZWNhc3RQYXlsb2FkIHtcblx0LyoqIFVWIHJhZGlhdGlvbiwgU29sYXIgVVYgSW5kZXggKi9cblx0VTogc3RyaW5nO1xuXHQvKiogV2luZCBzcGVlZCwgbXBoPyAqL1xuXHRTOiBzdHJpbmc7XG5cdC8qKiBXaW5kIGRpcmVjdGlvbiwgQ29tcGFzcz8gZS5nLiBOVyAqL1xuXHREOiBzdHJpbmc7XG5cdC8qKiBWaXNpYmlsaXR5LCBtPyAqL1xuXHRWOiBzdHJpbmc7XG5cdC8qKiBXZWF0aGVyIHR5cGUsIGh0dHBzOi8vd3d3Lm1ldG9mZmljZS5nb3YudWsvc2VydmljZXMvZGF0YS9kYXRhcG9pbnQvY29kZS1kZWZpbml0aW9ucyAqL1xuXHRXOiBzdHJpbmc7XG5cdC8qKiBGZWVscyBMaWtlIERheSBNYXhpbXVtIFRlbXBlcmF0dXJlLCBDICovXG5cdEZEbT86IHN0cmluZztcblx0LyoqIEZlZWxzIExpa2UgTmlnaHQgTWluaW11bSBUZW1wZXJhdHVyZSwgQyAqL1xuXHRGTm0/OiBzdHJpbmc7XG5cdC8qKiBEYXkgTWF4aW11bSBUZW1wZXJhdHVyZSwgQyAqL1xuXHREbT86IHN0cmluZztcblx0LyoqIE5pZ2h0IE1pbmltdW0gVGVtcGVyYXR1cmUsIEMgKi9cblx0Tm0/OiBzdHJpbmc7XG5cdC8qKiBXaW5kIEd1c3QgTm9vbiwgbXBoICovXG5cdEduPzogc3RyaW5nO1xuXHQvKiogV2luZCBHdXN0IE1pZG5pZ2h0LCBtcGggKi9cblx0R20/OiBzdHJpbmc7XG5cdC8qKiBQcmVjaXBpdGF0aW9uIFByb2JhYmlsaXR5IERheSwgJSAqL1xuXHRQUG4/OiBzdHJpbmc7XG5cdC8qKiBQcmVjaXBpdGF0aW9uIFByb2JhYmlsaXR5IE5pZ2h0LCAlICovXG5cdFBQZD86IHN0cmluZztcblx0LyoqIFNjcmVlbiBSZWxhdGl2ZSBIdW1pZGl0eSBOb29uLCAlICovXG5cdEhuPzogc3RyaW5nO1xuXHQvKiogU2NyZWVuIFJlbGF0aXZlIEh1bWlkaXR5IE1pZG5pZ2h0LCAlICovXG5cdEhtPzogc3RyaW5nO1xuXHQvKiogRGF5L05pZ2h0ICovXG5cdCQ6IHN0cmluZztcbn1cbiIsImltcG9ydCB7IExvZyB9IGZyb20gXCIuL2xvZ2dlclwiO1xuaW1wb3J0IHsgV2VhdGhlckJ1dHRvbiB9IGZyb20gXCIuLi91aV9lbGVtZW50cy93ZWF0aGVyYnV0dG9uXCI7XG5cbmNvbnN0IHsgc3Bhd25Db21tYW5kTGluZUFzeW5jSU8gfSA9IGltcG9ydHMubWlzYy51dGlsO1xuXG4vKipcbiAqIERvZXNuJ3QgZG8gSlNPTiB0eXBlY2hlY2tpbmcsIHlvdSBoYXZlIHRvIGRvIHRoYXQgbWFudWFsbHlcbiAqIEBwYXJhbSBjb21tYW5kIFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gU3Bhd25Qcm9jZXNzSnNvbjxURGF0YT4oY29tbWFuZDogc3RyaW5nW10pOiBQcm9taXNlPFR5cGVkUmVzcG9uc2U8VERhdGE+PiB7XG5cdGxldCByZXNwb25zZSA9IGF3YWl0IFNwYXduUHJvY2Vzcyhjb21tYW5kKTtcblx0aWYgKCFyZXNwb25zZS5TdWNjZXNzKSByZXR1cm4gcmVzcG9uc2U7XG5cblx0dHJ5IHtcblx0XHRyZXNwb25zZS5EYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZS5EYXRhKTtcblx0fVxuXHRjYXRjaCAoZSkge1xuXHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIkVycm9yOiBDb21tYW5kIHJlc3BvbnNlIGlzIG5vdCBKU09OLiBUaGUgcmVzcG9uc2U6IFwiICsgcmVzcG9uc2UuRGF0YSk7XG5cdFx0cmVzcG9uc2UuU3VjY2VzcyA9IGZhbHNlO1xuXHRcdHJlc3BvbnNlLkVycm9yRGF0YSA9IHtcblx0XHRcdENvZGU6IC0xLFxuXHRcdFx0TWVzc2FnZTogbnVsbCxcblx0XHRcdFR5cGU6IFwianNvblBhcnNlXCIsXG5cdFx0fVxuXHR9XG5cdGZpbmFsbHkge1xuXHRcdHJldHVybiByZXNwb25zZTtcblx0fVxufVxuXG5cbi8qKiBTcGF3bnMgYSBjb21tYW5kIGFuZCBhd2FpdCBmb3IgdGhlIG91dHB1dCBpdCBnaXZlcyAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFNwYXduUHJvY2Vzcyhjb21tYW5kOiBzdHJpbmdbXSk6IFByb21pc2U8R2VuZXJpY1Jlc3BvbnNlPiB7XG5cdC8vIHByZXBhcmUgY29tbWFuZFxuXHRsZXQgY21kID0gXCJcIjtcblx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNvbW1hbmQubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0Y29uc3QgZWxlbWVudCA9IGNvbW1hbmRbaW5kZXhdO1xuXHRcdGNtZCArPSBcIidcIiArIGVsZW1lbnQgKyBcIicgXCI7XG5cdH1cblxuXHRsZXQgcmVzcG9uc2UgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0c3Bhd25Db21tYW5kTGluZUFzeW5jSU8oY21kLCAoYVN0ZG91dDogc3RyaW5nLCBlcnI6IHN0cmluZywgZXhpdENvZGU6IG51bWJlcikgPT4ge1xuXHRcdFx0bGV0IHJlc3VsdDogR2VuZXJpY1Jlc3BvbnNlID0ge1xuXHRcdFx0XHRTdWNjZXNzOiBleGl0Q29kZSA9PSAwLFxuXHRcdFx0XHRFcnJvckRhdGE6IG51bGwsXG5cdFx0XHRcdERhdGE6IGFTdGRvdXQgPz8gbnVsbFxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZXhpdENvZGUgIT0gMCkge1xuXHRcdFx0XHRyZXN1bHQuRXJyb3JEYXRhID0ge1xuXHRcdFx0XHRcdENvZGU6IGV4aXRDb2RlLFxuXHRcdFx0XHRcdE1lc3NhZ2U6IGVyciA/PyBudWxsLFxuXHRcdFx0XHRcdFR5cGU6IFwidW5rbm93blwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJlc29sdmUocmVzdWx0KTtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSk7XG5cdH0pO1xuXHRyZXR1cm4gcmVzcG9uc2UgYXMgR2VuZXJpY1Jlc3BvbnNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gT3BlblVybChlbGVtZW50OiBXZWF0aGVyQnV0dG9uKSB7XG5cdGlmICghZWxlbWVudC51cmwpIHJldHVybjtcblx0aW1wb3J0cy5naS5HaW8uYXBwX2luZm9fbGF1bmNoX2RlZmF1bHRfZm9yX3VyaShcblx0XHRlbGVtZW50LnVybCxcblx0XHRnbG9iYWwuY3JlYXRlX2FwcF9sYXVuY2hfY29udGV4dCgpXG5cdClcbn1cblxuaW50ZXJmYWNlIEdlbmVyaWNSZXNwb25zZSB7XG5cdFN1Y2Nlc3M6IGJvb2xlYW47XG5cdERhdGE6IGFueTtcblx0RXJyb3JEYXRhOiBFcnJvckRhdGE7XG59XG5cbmludGVyZmFjZSBUeXBlZFJlc3BvbnNlPFREYXRhPiBleHRlbmRzIEdlbmVyaWNSZXNwb25zZSB7XG5cdERhdGE6IFREYXRhO1xufVxuXG5pbnRlcmZhY2UgRXJyb3JEYXRhIHtcblx0Q29kZTogbnVtYmVyO1xuXHRUeXBlOiBFcnJvclR5cGU7XG5cdE1lc3NhZ2U6IHN0cmluZztcbn1cblxudHlwZSBFcnJvclR5cGUgPSBcImpzb25QYXJzZVwiIHwgXCJ1bmtub3duXCIiLCJpbXBvcnQgeyBFdmVudCB9IGZyb20gXCIuLi9saWIvZXZlbnRzXCI7XG5cbmNvbnN0IHsgQnV0dG9uIH0gPSBpbXBvcnRzLmdpLlN0O1xuY29uc3QgeyBTaWduYWxNYW5hZ2VyIH0gPSBpbXBvcnRzLm1pc2Muc2lnbmFsTWFuYWdlcjtcblxuZXhwb3J0IGNsYXNzIFdlYXRoZXJCdXR0b24ge1xuXHRwdWJsaWMgYWN0b3I6IGltcG9ydHMuZ2kuU3QuQnV0dG9uO1xuXHRwcml2YXRlIHNpZ25hbHMgPSBuZXcgU2lnbmFsTWFuYWdlcigpO1xuXHRwcml2YXRlIGRpc2FibGVkID0gZmFsc2U7XG5cblx0cHVibGljIElEOiBhbnk7XG5cdHB1YmxpYyB1cmw6IHN0cmluZztcblxuXHRwdWJsaWMgSG92ZXJlZDogRXZlbnQ8V2VhdGhlckJ1dHRvbiwgaW1wb3J0cy5naS5DbHV0dGVyLkV2ZW50PiA9IG5ldyBFdmVudCgpO1xuXHRwdWJsaWMgQ2xpY2tlZDogRXZlbnQ8V2VhdGhlckJ1dHRvbiwgaW1wb3J0cy5naS5DbHV0dGVyLkV2ZW50PiA9IG5ldyBFdmVudCgpO1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM6IFBhcnRpYWw8aW1wb3J0cy5naS5TdC5CdXR0b25PcHRpb25zPiwgZG9Ob3RBZGRQYWRkaW5nOiBib29sZWFuID0gZmFsc2UpIHtcblx0XHR0aGlzLmFjdG9yID0gbmV3IEJ1dHRvbihvcHRpb25zKTtcblx0XHR0aGlzLmFjdG9yLmFkZF9zdHlsZV9jbGFzc19uYW1lKFwicG9wdXAtbWVudS1pdGVtXCIpO1xuXG5cdFx0aWYgKGRvTm90QWRkUGFkZGluZylcblx0XHRcdHRoaXMuYWN0b3Iuc2V0X3N0eWxlKCdwYWRkaW5nOiAwcHg7IGJvcmRlci1yYWRpdXM6IDJweDsnKTtcblx0XHRlbHNlXG5cdFx0XHR0aGlzLmFjdG9yLnNldF9zdHlsZSgncGFkZGluZy10b3A6IDBweDtwYWRkaW5nLWJvdHRvbTogMHB4OyBwYWRkaW5nLXJpZ2h0OiAycHg7IHBhZGRpbmctbGVmdDogMnB4OyBib3JkZXItcmFkaXVzOiAycHg7Jyk7XG5cblx0XHR0aGlzLnNpZ25hbHMuY29ubmVjdCh0aGlzLmFjdG9yLCAnZW50ZXItZXZlbnQnLCB0aGlzLmhhbmRsZUVudGVyLCB0aGlzKTtcblx0XHR0aGlzLnNpZ25hbHMuY29ubmVjdCh0aGlzLmFjdG9yLCAnbGVhdmUtZXZlbnQnLCB0aGlzLmhhbmRsZUxlYXZlLCB0aGlzKTtcblx0XHR0aGlzLmFjdG9yLmNvbm5lY3QoXCJjbGlja2VkXCIsICgpID0+IHRoaXMuY2xpY2tlZCgpKTtcblx0XHR0aGlzLmFjdG9yLmNvbm5lY3QoXCJlbnRlci1ldmVudFwiLCAoYWN0b3IsIGV2ZW50KSA9PiB0aGlzLmhvdmVyZWQoZXZlbnQpKTtcblx0fVxuXG5cdGhhbmRsZUVudGVyKGFjdG9yPzogV2VhdGhlckJ1dHRvbikge1xuXHRcdGlmICghdGhpcy5kaXNhYmxlZCkgdGhpcy5hY3Rvci5hZGRfc3R5bGVfcHNldWRvX2NsYXNzKCdhY3RpdmUnKTtcblx0XHQvL2dsb2JhbC5zZXRfY3Vyc29yKGltcG9ydHMuZ2kuQ2lubmFtb24uQ3Vyc29yLlBPSU5USU5HX0hBTkQpO1xuXHR9XG5cblx0aGFuZGxlTGVhdmUoKSB7XG5cdFx0dGhpcy5hY3Rvci5yZW1vdmVfc3R5bGVfcHNldWRvX2NsYXNzKCdhY3RpdmUnKTtcblx0XHQvL2dsb2JhbC51bnNldF9jdXJzb3IoKVxuXHR9XG5cblx0ZGlzYWJsZSgpIHtcblx0XHR0aGlzLmRpc2FibGVkID0gdHJ1ZTtcblx0XHR0aGlzLmFjdG9yLnJlYWN0aXZlID0gZmFsc2U7XG5cdH1cblxuXHRlbmFibGUoKSB7XG5cdFx0dGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdHRoaXMuYWN0b3IucmVhY3RpdmUgPSB0cnVlO1xuXHR9XG5cblx0cHJpdmF0ZSBjbGlja2VkKCkge1xuXHRcdC8vIHdoZW4gY2xpY2tlZCB0aGUgYnV0dG9uIGxvc2VzIGFjdGl2ZSBzdHlsaW5nLCBzbyB3ZSByZWFkZFxuXHRcdGlmICghdGhpcy5kaXNhYmxlZCkge1xuXHRcdFx0dGhpcy5hY3Rvci5hZGRfc3R5bGVfcHNldWRvX2NsYXNzKCdhY3RpdmUnKTtcblx0XHRcdHRoaXMuQ2xpY2tlZC5JbnZva2UodGhpcywgbnVsbCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBob3ZlcmVkKGV2ZW50OiBpbXBvcnRzLmdpLkNsdXR0ZXIuRXZlbnQpIHtcblx0XHR0aGlzLkhvdmVyZWQuSW52b2tlKHRoaXMsIGV2ZW50KTtcblx0fVxufSIsImltcG9ydCB7IE9wZW5VcmwgfSBmcm9tIFwiLi4vbGliL2NvbW1hbmRSdW5uZXJcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9jb25maWdcIjtcbmltcG9ydCB7IEVMTElQU0lTLCBBUFBMRVRfSUNPTiwgU0lHTkFMX0NMSUNLRUQsIEJMQU5LIH0gZnJvbSBcIi4uL2NvbnN0c1wiO1xuaW1wb3J0IHsgTG9jYXRpb25TdG9yZSB9IGZyb20gXCIuLi9sb2NhdGlvbl9zZXJ2aWNlcy9sb2NhdGlvbnN0b3JlXCI7XG5pbXBvcnQgeyBMb2cgfSBmcm9tIFwiLi4vbGliL2xvZ2dlclwiO1xuaW1wb3J0IHsgV2VhdGhlckFwcGxldCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBXZWF0aGVyRGF0YSwgQVBJVW5pcXVlRmllbGQsIEJ1aWx0aW5JY29ucywgSW1tZWRpYXRlUHJlY2lwaXRhdGlvbiB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgXywgR2V0SG91cnNNaW51dGVzLCBUZW1wVG9Vc2VyQ29uZmlnLCBDb21wYXNzRGlyZWN0aW9uLCBNUFN0b1VzZXJVbml0cywgUHJlc3NUb1VzZXJVbml0cywgR2VuZXJhdGVMb2NhdGlvblRleHQsIGRlbGF5LCBXZWF0aGVySWNvblNhZmVseSwgTG9jYWxpemVkQ29sb24sIFByZWNlbnRUb0xvY2FsZSwgQ29tcGFzc0RpcmVjdGlvblRleHQgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IFdlYXRoZXJCdXR0b24gfSBmcm9tIFwiLi4vdWlfZWxlbWVudHMvd2VhdGhlcmJ1dHRvblwiO1xuXG5jb25zdCB7IEJpbiwgQm94TGF5b3V0LCBJY29uVHlwZSwgTGFiZWwsIEljb24sIEFsaWduIH0gPSBpbXBvcnRzLmdpLlN0O1xuY29uc3QgTGFuZzogdHlwZW9mIGltcG9ydHMubGFuZyA9IGltcG9ydHMubGFuZztcblxuLy8gc3R5bGVzaGVldC5jc3NcbmNvbnN0IFNUWUxFX1NVTU1BUllCT1ggPSAnd2VhdGhlci1jdXJyZW50LXN1bW1hcnlib3gnXG5jb25zdCBTVFlMRV9TVU1NQVJZID0gJ3dlYXRoZXItY3VycmVudC1zdW1tYXJ5J1xuY29uc3QgU1RZTEVfREFUQUJPWCA9ICd3ZWF0aGVyLWN1cnJlbnQtZGF0YWJveCdcbmNvbnN0IFNUWUxFX0lDT04gPSAnd2VhdGhlci1jdXJyZW50LWljb24nXG5jb25zdCBTVFlMRV9JQ09OQk9YID0gJ3dlYXRoZXItY3VycmVudC1pY29uYm94J1xuY29uc3QgU1RZTEVfREFUQUJPWF9DQVBUSU9OUyA9ICd3ZWF0aGVyLWN1cnJlbnQtZGF0YWJveC1jYXB0aW9ucydcbmNvbnN0IFNUWUxFX0FTVFJPTk9NWSA9ICd3ZWF0aGVyLWN1cnJlbnQtYXN0cm9ub215J1xuY29uc3QgU1RZTEVfREFUQUJPWF9WQUxVRVMgPSAnd2VhdGhlci1jdXJyZW50LWRhdGFib3gtdmFsdWVzJ1xuY29uc3QgU1RZTEVfQ1VSUkVOVCA9ICdjdXJyZW50J1xuY29uc3QgU1RZTEVfTE9DQVRJT05fU0VMRUNUT1IgPSAnbG9jYXRpb24tc2VsZWN0b3InXG5cbmV4cG9ydCBjbGFzcyBDdXJyZW50V2VhdGhlciB7XG5cdHB1YmxpYyByZWFkb25seSBhY3RvcjogaW1wb3J0cy5naS5TdC5CaW47XG5cblxuXHRwcml2YXRlIHdlYXRoZXJJY29uOiBpbXBvcnRzLmdpLlN0Lkljb247XG5cdHByaXZhdGUgd2VhdGhlclN1bW1hcnk6IGltcG9ydHMuZ2kuU3QuTGFiZWw7XG5cblx0cHJpdmF0ZSBsb2NhdGlvbkJ1dHRvbjogV2VhdGhlckJ1dHRvbjtcblx0LyoqIEFjdG9yIGluc2lkZSBsb2NhdGlvbkJ1dHRvbiAqL1xuXHRwcml2YXRlIGxvY2F0aW9uOiBpbXBvcnRzLmdpLlN0LkJ1dHRvbjtcblxuXHRwcml2YXRlIHByZXZpb3VzTG9jYXRpb25CdXR0b246IFdlYXRoZXJCdXR0b247XG5cdHByaXZhdGUgbmV4dExvY2F0aW9uQnV0dG9uOiBXZWF0aGVyQnV0dG9uO1xuXG5cdC8qKiBJZiBjb25maWcuX3Nob3dTdW5yaXNlIGlzIG5vdCB0cnVlIHRoaXMgY2FuIGJlIG51bGx8ZGVhbGxvY2F0ZWQgKi9cblx0cHJpdmF0ZSBzdW5yaXNlTGFiZWw6IGltcG9ydHMuZ2kuU3QuTGFiZWw7XG5cdC8qKiBJZiBjb25maWcuX3Nob3dTdW5yaXNlIGlzIG5vdCB0cnVlIHRoaXMgY2FuIGJlIG51bGx8ZGVhbGxvY2F0ZWQgKi9cblx0cHJpdmF0ZSBzdW5zZXRMYWJlbDogaW1wb3J0cy5naS5TdC5MYWJlbDtcblx0cHJpdmF0ZSB0ZW1wZXJhdHVyZUxhYmVsOiBpbXBvcnRzLmdpLlN0LkxhYmVsO1xuXHRwcml2YXRlIGh1bWlkaXR5TGFiZWw6IGltcG9ydHMuZ2kuU3QuTGFiZWw7XG5cdHByaXZhdGUgcHJlc3N1cmVMYWJlbDogaW1wb3J0cy5naS5TdC5MYWJlbDtcblx0cHJpdmF0ZSB3aW5kTGFiZWw6IGltcG9ydHMuZ2kuU3QuTGFiZWw7XG5cdHByaXZhdGUgd2luZERpcmVjdGlvbkljb246IGltcG9ydHMuZ2kuU3QuSWNvbjtcblx0cHJpdmF0ZSBhcGlVbmlxdWVMYWJlbDogaW1wb3J0cy5naS5TdC5MYWJlbDtcblx0cHJpdmF0ZSBhcGlVbmlxdWVDYXB0aW9uTGFiZWw6IGltcG9ydHMuZ2kuU3QuTGFiZWw7XG5cblx0cHJpdmF0ZSBpbW1lZGlhdGVQcmVjaXBpdGF0aW9uQm94OiBpbXBvcnRzLmdpLlN0LkJpbjtcblx0cHJpdmF0ZSBpbW1lZGlhdGVQcmVjaXBpdGF0aW9uTGFiZWw6IGltcG9ydHMuZ2kuU3QuTGFiZWw7XG5cblx0cHJpdmF0ZSBhcHA6IFdlYXRoZXJBcHBsZXQ7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBXZWF0aGVyQXBwbGV0KSB7XG5cdFx0dGhpcy5hcHAgPSBhcHA7XG5cdFx0dGhpcy5hY3RvciA9IG5ldyBCaW4oKTtcblx0XHR0aGlzLmFjdG9yLnN0eWxlX2NsYXNzID0gU1RZTEVfQ1VSUkVOVDtcblx0XHR0aGlzLmFwcC5jb25maWcuTG9jU3RvcmUuU3RvcmVDaGFuZ2VkLlN1YnNjcmliZSgocywgYSkgPT4gdGhpcy5vbkxvY2F0aW9uU3RvcmFnZUNoYW5nZWQocywgYSkpOyAvL29uIGxvY2F0aW9uIHN0b3JlIGNoYW5nZVxuXHR9XG5cblx0LyoqIEluamVjdHMgZGF0YSBmcm9tIHdlYXRoZXIgb2JqZWN0IGludG8gdGhlIHBvcHVwTWVudSAqL1xuXHRwdWJsaWMgRGlzcGxheSh3ZWF0aGVyOiBXZWF0aGVyRGF0YSwgY29uZmlnOiBDb25maWcpOiBib29sZWFuIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gSGlkZS9zaG93IGxvY2F0aW9uIHNlbGVjdG9ycyBiYXNlZCBvbiBob3cgbWFueSBpdGVtcyBhcmUgaW4gc3RvcmFnZVxuXHRcdFx0aWYgKHRoaXMuYXBwLmNvbmZpZy5Mb2NTdG9yZS5TaG91bGRTaG93TG9jYXRpb25TZWxlY3RvcnMoY29uZmlnLkN1cnJlbnRMb2NhdGlvbikpIHRoaXMuU2hvd0xvY2F0aW9uU2VsZWN0b3JzKCk7XG5cdFx0XHRlbHNlIHRoaXMuSGlkZUxvY2F0aW9uU2VsZWN0b3JzKCk7XG5cblx0XHRcdGxldCBsb2NhdGlvbiA9IEdlbmVyYXRlTG9jYXRpb25UZXh0KHdlYXRoZXIsIGNvbmZpZyk7XG5cdFx0XHR0aGlzLlNldExvY2F0aW9uKGxvY2F0aW9uLCB3ZWF0aGVyLmxvY2F0aW9uLnVybCk7XG5cdFx0XHR0aGlzLlNldENvbmRpdGlvblRleHQod2VhdGhlci5jb25kaXRpb24uZGVzY3JpcHRpb24pO1xuXHRcdFx0dGhpcy5TZXRXZWF0aGVySWNvbih3ZWF0aGVyLmNvbmRpdGlvbi5pY29ucywgd2VhdGhlci5jb25kaXRpb24uY3VzdG9tSWNvbik7XG5cdFx0XHR0aGlzLlNldFRlbXBlcmF0dXJlKHdlYXRoZXIudGVtcGVyYXR1cmUpO1xuXHRcdFx0dGhpcy5TZXRIdW1pZGl0eSh3ZWF0aGVyLmh1bWlkaXR5KTtcblx0XHRcdHRoaXMuU2V0V2luZCh3ZWF0aGVyLndpbmQuc3BlZWQsIHdlYXRoZXIud2luZC5kZWdyZWUpO1xuXHRcdFx0dGhpcy5TZXRQcmVzc3VyZSh3ZWF0aGVyLnByZXNzdXJlKTtcblx0XHRcdHRoaXMuU2V0QVBJVW5pcXVlRmllbGQod2VhdGhlci5leHRyYV9maWVsZCk7XG5cdFx0XHRpZiAoY29uZmlnLl9zaG93U3VucmlzZSlcblx0XHRcdFx0dGhpcy5TZXRTdW5yaXNlQW5kU3Vuc2V0KHdlYXRoZXIuc3VucmlzZSwgd2VhdGhlci5zdW5zZXQsIHdlYXRoZXIubG9jYXRpb24udGltZVpvbmUpO1xuXG5cdFx0XHR0aGlzLlNldEltbWVkaWF0ZVByZWNpcGl0YXRpb24od2VhdGhlci5pbW1lZGlhdGVQcmVjaXBpdGF0aW9uLCBjb25maWcpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0TG9nLkluc3RhbmNlLkVycm9yKFwiRGlzcGxheVdlYXRoZXJFcnJvcjogXCIgKyBlKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0cHVibGljIFVwZGF0ZUljb25UeXBlKGljb25UeXBlOiBpbXBvcnRzLmdpLlN0Lkljb25UeXBlKSB7XG5cdFx0dGhpcy53ZWF0aGVySWNvbi5pY29uX3R5cGUgPSBpY29uVHlwZTtcblx0fVxuXG5cdC8qKiBEZXN0cm95cyBjdXJyZW50IHdlYXRoZXIgVUkgYm94ICovXG5cdHB1YmxpYyBEZXN0cm95KCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmFjdG9yLmdldF9jaGlsZCgpICE9IG51bGwpXG5cdFx0XHR0aGlzLmFjdG9yLmdldF9jaGlsZCgpLmRlc3Ryb3koKVxuXHR9XG5cblx0cHVibGljIFJlYnVpbGQoY29uZmlnOiBDb25maWcsIHRleHRDb2xvclN0eWxlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHR0aGlzLkRlc3Ryb3koKVxuXG5cdFx0Ly8gVGhpcyB3aWxsIGhvbGQgdGhlIGljb24gZm9yIHRoZSBjdXJyZW50IHdlYXRoZXJcblx0XHR0aGlzLndlYXRoZXJJY29uID0gbmV3IEljb24oe1xuXHRcdFx0aWNvbl90eXBlOiBjb25maWcuSWNvblR5cGUsXG5cdFx0XHRpY29uX3NpemU6IDY0LFxuXHRcdFx0aWNvbl9uYW1lOiBBUFBMRVRfSUNPTixcblx0XHRcdHN0eWxlX2NsYXNzOiBTVFlMRV9JQ09OXG5cdFx0fSlcblxuXHRcdC8vIE1haW4gYm94XG5cdFx0bGV0IGJveCA9IG5ldyBCb3hMYXlvdXQoeyBzdHlsZV9jbGFzczogU1RZTEVfSUNPTkJPWCB9KVxuXHRcdGJveC5hZGRfYWN0b3IodGhpcy53ZWF0aGVySWNvbilcblx0XHRib3guYWRkX2FjdG9yKHRoaXMuQnVpbGRNaWRkbGVDb2x1bW4oY29uZmlnLCB0ZXh0Q29sb3JTdHlsZSkpO1xuXHRcdGJveC5hZGRfYWN0b3IodGhpcy5CdWlsZFJpZ2h0Q29sdW1uKHRleHRDb2xvclN0eWxlLCBjb25maWcpKVxuXHRcdHRoaXMuYWN0b3Iuc2V0X2NoaWxkKGJveClcblx0fTtcblxuXHQvLyBCdWlsZCBoZWxwZXJzXG5cblx0cHJpdmF0ZSBCdWlsZE1pZGRsZUNvbHVtbihjb25maWc6IENvbmZpZywgdGV4dENvbG9yU3R5bGU6IHN0cmluZykge1xuXHRcdHRoaXMud2VhdGhlclN1bW1hcnkgPSBuZXcgTGFiZWwoeyB0ZXh0OiBfKCdMb2FkaW5nIC4uLicpLCBzdHlsZV9jbGFzczogU1RZTEVfU1VNTUFSWSB9KVxuXG5cdFx0bGV0IG1pZGRsZUNvbHVtbiA9IG5ldyBCb3hMYXlvdXQoeyB2ZXJ0aWNhbDogdHJ1ZSwgc3R5bGVfY2xhc3M6IFNUWUxFX1NVTU1BUllCT1ggfSlcblx0XHRtaWRkbGVDb2x1bW4uYWRkX2FjdG9yKHRoaXMuQnVpbGRMb2NhdGlvblNlY3Rpb24oKSlcblx0XHRtaWRkbGVDb2x1bW4uYWRkKHRoaXMud2VhdGhlclN1bW1hcnksIHsgZXhwYW5kOiB0cnVlLCB4X2FsaWduOiBBbGlnbi5NSURETEUsIHlfYWxpZ246IEFsaWduLk1JRERMRSwgeF9maWxsOiBmYWxzZSwgeV9maWxsOiBmYWxzZSB9KVxuXG5cdFx0dGhpcy5pbW1lZGlhdGVQcmVjaXBpdGF0aW9uTGFiZWwgPSBuZXcgTGFiZWwoeyBzdHlsZV9jbGFzczogXCJ3ZWF0aGVyLWltbWVkaWF0ZS1wcmVjaXBpdGF0aW9uXCIgfSk7XG5cdFx0dGhpcy5pbW1lZGlhdGVQcmVjaXBpdGF0aW9uQm94ID0gbmV3IEJpbigpO1xuXHRcdHRoaXMuaW1tZWRpYXRlUHJlY2lwaXRhdGlvbkJveC5hZGRfYWN0b3IodGhpcy5pbW1lZGlhdGVQcmVjaXBpdGF0aW9uTGFiZWwpXG5cdFx0dGhpcy5pbW1lZGlhdGVQcmVjaXBpdGF0aW9uQm94LmhpZGUoKTtcblx0XHRtaWRkbGVDb2x1bW4uYWRkX2FjdG9yKHRoaXMuaW1tZWRpYXRlUHJlY2lwaXRhdGlvbkJveCk7XG5cblx0XHRpZiAoY29uZmlnLl9zaG93U3VucmlzZSlcblx0XHRcdG1pZGRsZUNvbHVtbi5hZGRfYWN0b3IodGhpcy5CdWlsZFN1bkJveChjb25maWcsIHRleHRDb2xvclN0eWxlKSk7XG5cblx0XHRyZXR1cm4gbWlkZGxlQ29sdW1uO1xuXHR9XG5cblx0LyoqIEJ1aWxkcyBXZWF0aGVyIEluZm9ybWF0aW9uIG9uIHRoZSByaWdodCBzaWRlICovXG5cdHByaXZhdGUgQnVpbGRSaWdodENvbHVtbih0ZXh0Q29sb3JTdHlsZTogc3RyaW5nLCBjb25maWc6IENvbmZpZykge1xuXHRcdGxldCB0ZXh0T2IgPSB7XG5cdFx0XHR0ZXh0OiBFTExJUFNJU1xuXHRcdH1cblx0XHQvLyBDdXJyZW50IFdlYXRoZXIgUmlnaHQgQ29sdW1uXG5cdFx0dGhpcy50ZW1wZXJhdHVyZUxhYmVsID0gbmV3IExhYmVsKHRleHRPYilcblx0XHR0aGlzLmh1bWlkaXR5TGFiZWwgPSBuZXcgTGFiZWwodGV4dE9iKVxuXHRcdHRoaXMucHJlc3N1cmVMYWJlbCA9IG5ldyBMYWJlbCh0ZXh0T2IpXG5cblx0XHR0aGlzLmFwaVVuaXF1ZUxhYmVsID0gbmV3IExhYmVsKHsgdGV4dDogJycgfSlcblx0XHQvLyBBUGkgVW5pcXVlIENhcHRpb25cblx0XHR0aGlzLmFwaVVuaXF1ZUNhcHRpb25MYWJlbCA9IG5ldyBMYWJlbCh7IHRleHQ6ICcnLCBzdHlsZTogdGV4dENvbG9yU3R5bGUgfSk7XG5cblx0XHRsZXQgcmJfY2FwdGlvbnMgPSBuZXcgQm94TGF5b3V0KHsgdmVydGljYWw6IHRydWUsIHN0eWxlX2NsYXNzOiBTVFlMRV9EQVRBQk9YX0NBUFRJT05TIH0pXG5cdFx0bGV0IHJiX3ZhbHVlcyA9IG5ldyBCb3hMYXlvdXQoeyB2ZXJ0aWNhbDogdHJ1ZSwgc3R5bGVfY2xhc3M6IFNUWUxFX0RBVEFCT1hfVkFMVUVTIH0pXG5cdFx0cmJfY2FwdGlvbnMuYWRkX2FjdG9yKG5ldyBMYWJlbCh7IHRleHQ6IF8oJ1RlbXBlcmF0dXJlJykgKyBMb2NhbGl6ZWRDb2xvbihjb25maWcuY3VycmVudExvY2FsZSksIHN0eWxlOiB0ZXh0Q29sb3JTdHlsZSB9KSk7XG5cdFx0cmJfY2FwdGlvbnMuYWRkX2FjdG9yKG5ldyBMYWJlbCh7IHRleHQ6IF8oJ0h1bWlkaXR5JykgKyBMb2NhbGl6ZWRDb2xvbihjb25maWcuY3VycmVudExvY2FsZSksIHN0eWxlOiB0ZXh0Q29sb3JTdHlsZSB9KSk7XG5cdFx0cmJfY2FwdGlvbnMuYWRkX2FjdG9yKG5ldyBMYWJlbCh7IHRleHQ6IF8oJ1ByZXNzdXJlJykgKyBMb2NhbGl6ZWRDb2xvbihjb25maWcuY3VycmVudExvY2FsZSksIHN0eWxlOiB0ZXh0Q29sb3JTdHlsZSB9KSk7XG5cdFx0cmJfY2FwdGlvbnMuYWRkX2FjdG9yKG5ldyBMYWJlbCh7IHRleHQ6IF8oJ1dpbmQnKSArIExvY2FsaXplZENvbG9uKGNvbmZpZy5jdXJyZW50TG9jYWxlKSwgc3R5bGU6IHRleHRDb2xvclN0eWxlIH0pKTtcblx0XHRyYl9jYXB0aW9ucy5hZGRfYWN0b3IodGhpcy5hcGlVbmlxdWVDYXB0aW9uTGFiZWwpO1xuXHRcdHJiX3ZhbHVlcy5hZGRfYWN0b3IodGhpcy50ZW1wZXJhdHVyZUxhYmVsKTtcblx0XHRyYl92YWx1ZXMuYWRkX2FjdG9yKHRoaXMuaHVtaWRpdHlMYWJlbCk7XG5cdFx0cmJfdmFsdWVzLmFkZF9hY3Rvcih0aGlzLnByZXNzdXJlTGFiZWwpO1xuXHRcdHJiX3ZhbHVlcy5hZGRfYWN0b3IodGhpcy5CdWlsZFdpbmQoY29uZmlnKSk7XG5cdFx0Ly9yYl92YWx1ZXMuYWRkX2FjdG9yKHRoaXMud2luZExhYmVsKTtcblx0XHRyYl92YWx1ZXMuYWRkX2FjdG9yKHRoaXMuYXBpVW5pcXVlTGFiZWwpO1xuXG5cdFx0bGV0IHJpZ2h0Q29sdW1uID0gbmV3IEJveExheW91dCh7IHN0eWxlX2NsYXNzOiBTVFlMRV9EQVRBQk9YIH0pO1xuXHRcdHJpZ2h0Q29sdW1uLmFkZF9hY3RvcihyYl9jYXB0aW9ucyk7XG5cdFx0cmlnaHRDb2x1bW4uYWRkX2FjdG9yKHJiX3ZhbHVlcyk7XG5cdFx0cmV0dXJuIHJpZ2h0Q29sdW1uO1xuXHR9XG5cblx0cHJpdmF0ZSBCdWlsZFdpbmQoY29uZmlnOiBDb25maWcpIHtcblx0XHRsZXQgd2luZEJveCA9IG5ldyBCb3hMYXlvdXQoeyB2ZXJ0aWNhbDogZmFsc2UgfSk7XG5cblx0XHQvLyBXZSB0cnkgdG8gbWFrZSBzdXJlIHRoYXQgaWNvbiBkb2Vzbid0IHRha2UgdXAgbW9yZSB2ZXJ0aWNhbCBzcGFjZSB0aGFuIHRleHRcblx0XHQvLyBBbHNvIHdlIHBvc2l0aW9uIGl0IGNsb3NlIHRvIHRoZSBib3R0b20gdG8gYmUgcGVyY2VpdmVkIHZlcnRpY2FsbHkgY2VudGVyZWRcblx0XHRsZXQgaWNvblBhZGRpbmdCb3R0b20gPSBNYXRoLnJvdW5kKGNvbmZpZy5DdXJyZW50Rm9udFNpemUgKiAwLjA1KTtcblx0XHRsZXQgaWNvblBhZGRpbmdUb3AgPSBNYXRoLnJvdW5kKGNvbmZpZy5DdXJyZW50Rm9udFNpemUgKiAwLjE1KTtcblx0XHRsZXQgaWNvblNpemUgPSBNYXRoLnJvdW5kKGNvbmZpZy5DdXJyZW50Rm9udFNpemUgKiAwLjgpO1xuXG5cdFx0dGhpcy53aW5kTGFiZWwgPSBuZXcgTGFiZWwoeyB0ZXh0OiBFTExJUFNJUyB9KTtcblx0XHR0aGlzLndpbmREaXJlY3Rpb25JY29uID0gbmV3IEljb24oe1xuXHRcdFx0aWNvbl90eXBlOiBJY29uVHlwZS5TWU1CT0xJQyxcblx0XHRcdGljb25fbmFtZTogQVBQTEVUX0lDT04sXG5cdFx0XHRpY29uX3NpemU6IGljb25TaXplLFxuXHRcdFx0c3R5bGU6IFwicGFkZGluZy1yaWdodDogNXB4OyBwYWRkaW5nLXRvcDogXCIgKyBpY29uUGFkZGluZ1RvcCArIFwicHg7IHBhZGRpbmctYm90dG9tOiBcIiArIGljb25QYWRkaW5nQm90dG9tICsgXCJweDtcIlxuXHRcdH0pO1xuXHRcdGlmICghY29uZmlnLl9kaXNwbGF5V2luZEFzVGV4dClcblx0XHRcdHdpbmRCb3guYWRkKHRoaXMud2luZERpcmVjdGlvbkljb24sIHsgeF9maWxsOiBmYWxzZSwgeV9maWxsOiB0cnVlLCB4X2FsaWduOiBBbGlnbi5NSURETEUsIHlfYWxpZ246IEFsaWduLk1JRERMRSwgZXhwYW5kOiBmYWxzZSB9KTtcblx0XHR3aW5kQm94LmFkZCh0aGlzLndpbmRMYWJlbCk7XG5cblx0XHRyZXR1cm4gd2luZEJveDtcblx0fVxuXG5cdHByaXZhdGUgQnVpbGRMb2NhdGlvblNlY3Rpb24oKSB7XG5cdFx0dGhpcy5sb2NhdGlvbkJ1dHRvbiA9IG5ldyBXZWF0aGVyQnV0dG9uKHsgcmVhY3RpdmU6IHRydWUsIGxhYmVsOiBfKCdSZWZyZXNoJyksIH0pO1xuXHRcdHRoaXMubG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uQnV0dG9uLmFjdG9yO1xuXHRcdHRoaXMubG9jYXRpb24uY29ubmVjdChTSUdOQUxfQ0xJQ0tFRCwgKCkgPT4ge1xuXHRcdFx0aWYgKHRoaXMuYXBwLmVuY291bnRlcmVkRXJyb3IpIHRoaXMuYXBwLlJlZnJlc2hXZWF0aGVyKHRydWUpO1xuXHRcdFx0ZWxzZSBpZiAodGhpcy5sb2NhdGlvbkJ1dHRvbi51cmwgPT0gbnVsbCkgcmV0dXJuO1xuXHRcdFx0ZWxzZSBPcGVuVXJsKHRoaXMubG9jYXRpb25CdXR0b24pO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5uZXh0TG9jYXRpb25CdXR0b24gPSBuZXcgV2VhdGhlckJ1dHRvbih7XG5cdFx0XHRyZWFjdGl2ZTogdHJ1ZSxcblx0XHRcdGNhbl9mb2N1czogdHJ1ZSxcblx0XHRcdGNoaWxkOiBuZXcgSWNvbih7XG5cdFx0XHRcdGljb25fdHlwZTogSWNvblR5cGUuU1lNQk9MSUMsXG5cdFx0XHRcdGljb25fc2l6ZTogdGhpcy5hcHAuY29uZmlnLkN1cnJlbnRGb250U2l6ZSxcblx0XHRcdFx0aWNvbl9uYW1lOiBcImN1c3RvbS1yaWdodC1hcnJvdy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRzdHlsZV9jbGFzczogU1RZTEVfTE9DQVRJT05fU0VMRUNUT1Jcblx0XHRcdH0pLFxuXHRcdH0pO1xuXHRcdHRoaXMubmV4dExvY2F0aW9uQnV0dG9uLmFjdG9yLmNvbm5lY3QoU0lHTkFMX0NMSUNLRUQsIExhbmcuYmluZCh0aGlzLCB0aGlzLk5leHRMb2NhdGlvbkNsaWNrZWQpKTtcblxuXHRcdHRoaXMucHJldmlvdXNMb2NhdGlvbkJ1dHRvbiA9IG5ldyBXZWF0aGVyQnV0dG9uKHtcblx0XHRcdHJlYWN0aXZlOiB0cnVlLFxuXHRcdFx0Y2FuX2ZvY3VzOiB0cnVlLFxuXHRcdFx0Y2hpbGQ6IG5ldyBJY29uKHtcblx0XHRcdFx0aWNvbl90eXBlOiBJY29uVHlwZS5TWU1CT0xJQyxcblx0XHRcdFx0aWNvbl9zaXplOiB0aGlzLmFwcC5jb25maWcuQ3VycmVudEZvbnRTaXplLFxuXHRcdFx0XHRpY29uX25hbWU6IFwiY3VzdG9tLWxlZnQtYXJyb3ctc3ltYm9saWNcIixcblx0XHRcdFx0c3R5bGVfY2xhc3M6IFNUWUxFX0xPQ0FUSU9OX1NFTEVDVE9SXG5cdFx0XHR9KSxcblx0XHR9KTtcblx0XHR0aGlzLnByZXZpb3VzTG9jYXRpb25CdXR0b24uYWN0b3IuY29ubmVjdChTSUdOQUxfQ0xJQ0tFRCwgTGFuZy5iaW5kKHRoaXMsIHRoaXMuUHJldmlvdXNMb2NhdGlvbkNsaWNrZWQpKTtcblxuXHRcdGxldCBib3ggPSBuZXcgQm94TGF5b3V0KCk7XG5cdFx0Ym94LmFkZCh0aGlzLnByZXZpb3VzTG9jYXRpb25CdXR0b24uYWN0b3IsIHsgeF9maWxsOiBmYWxzZSwgeF9hbGlnbjogQWxpZ24uU1RBUlQsIHlfYWxpZ246IEFsaWduLk1JRERMRSwgZXhwYW5kOiBmYWxzZSB9KTtcblx0XHRib3guYWRkKHRoaXMubG9jYXRpb24sIHsgeF9maWxsOiB0cnVlLCB4X2FsaWduOiBBbGlnbi5NSURETEUsIHlfYWxpZ246IEFsaWduLk1JRERMRSwgZXhwYW5kOiB0cnVlIH0pO1xuXHRcdGJveC5hZGQodGhpcy5uZXh0TG9jYXRpb25CdXR0b24uYWN0b3IsIHsgeF9maWxsOiBmYWxzZSwgeF9hbGlnbjogQWxpZ24uRU5ELCB5X2FsaWduOiBBbGlnbi5NSURETEUsIGV4cGFuZDogZmFsc2UgfSk7XG5cdFx0cmV0dXJuIGJveDtcblx0fVxuXG5cdHByaXZhdGUgQnVpbGRTdW5Cb3goY29uZmlnOiBDb25maWcsIHRleHRDb2xvclN0eWxlOiBzdHJpbmcpIHtcblx0XHQvLyBCaW4gaXMgdXNlZCBoZXJlIHRvIGhvcml6b250YWxseSBjZW50ZXIgQm94TGF5b3V0IGluc2lkZSBCb3hMYXlvdXQsIG5vcm1hbCBhZGQoKSBmdW5jdGlvbiBkb2VzIG5vdCB3b3JrIGhlcmUgXG5cdFx0bGV0IHN1bkJpbiA9IG5ldyBCaW4oKTtcblx0XHR0aGlzLnN1bnJpc2VMYWJlbCA9IG5ldyBMYWJlbCh7IHRleHQ6IEVMTElQU0lTLCBzdHlsZTogdGV4dENvbG9yU3R5bGUgfSlcblx0XHR0aGlzLnN1bnNldExhYmVsID0gbmV3IExhYmVsKHsgdGV4dDogRUxMSVBTSVMsIHN0eWxlOiB0ZXh0Q29sb3JTdHlsZSB9KVxuXG5cdFx0bGV0IHN1bnJpc2VCb3ggPSBuZXcgQm94TGF5b3V0KCk7XG5cdFx0bGV0IHN1bnNldEJveCA9IG5ldyBCb3hMYXlvdXQoKTtcblx0XHRpZiAoY29uZmlnLl9zaG93U3VucmlzZSkge1xuXHRcdFx0bGV0IHN1bnNldEljb24gPSBuZXcgSWNvbih7XG5cdFx0XHRcdGljb25fbmFtZTogXCJzdW5zZXQtc3ltYm9saWNcIixcblx0XHRcdFx0aWNvbl90eXBlOiBJY29uVHlwZS5TWU1CT0xJQyxcblx0XHRcdFx0aWNvbl9zaXplOiAyNSxcblx0XHRcdFx0c3R5bGU6IHRleHRDb2xvclN0eWxlXG5cdFx0XHR9KTtcblxuXHRcdFx0bGV0IHN1bnJpc2VJY29uID0gbmV3IEljb24oe1xuXHRcdFx0XHRpY29uX25hbWU6IFwic3VucmlzZS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRpY29uX3R5cGU6IEljb25UeXBlLlNZTUJPTElDLFxuXHRcdFx0XHRpY29uX3NpemU6IDI1LFxuXHRcdFx0XHRzdHlsZTogdGV4dENvbG9yU3R5bGVcblx0XHRcdH0pO1xuXG5cdFx0XHRzdW5yaXNlQm94LmFkZF9hY3RvcihzdW5yaXNlSWNvbik7XG5cdFx0XHRzdW5zZXRCb3guYWRkX2FjdG9yKHN1bnNldEljb24pO1xuXHRcdH1cblxuXHRcdGxldCB0ZXh0T3B0aW9uczogaW1wb3J0cy5naS5TdC5BZGRPcHRpb25zID0ge1xuXHRcdFx0eF9maWxsOiBmYWxzZSxcblx0XHRcdHhfYWxpZ246IEFsaWduLlNUQVJULFxuXHRcdFx0eV9hbGlnbjogQWxpZ24uTUlERExFLFxuXHRcdFx0eV9maWxsOiBmYWxzZSxcblx0XHRcdGV4cGFuZDogdHJ1ZVxuXHRcdH1cblxuXHRcdHN1bnJpc2VCb3guYWRkKHRoaXMuc3VucmlzZUxhYmVsLCB0ZXh0T3B0aW9ucyk7XG5cdFx0c3Vuc2V0Qm94LmFkZCh0aGlzLnN1bnNldExhYmVsLCB0ZXh0T3B0aW9ucyk7XG5cblx0XHRsZXQgYWJfc3BhY2VyTGFiZWwgPSBuZXcgTGFiZWwoeyB0ZXh0OiBCTEFOSyB9KVxuXG5cdFx0bGV0IHN1bkJveCA9IG5ldyBCb3hMYXlvdXQoeyBzdHlsZV9jbGFzczogU1RZTEVfQVNUUk9OT01ZIH0pXG5cdFx0c3VuQm94LmFkZF9hY3RvcihzdW5yaXNlQm94KVxuXHRcdHN1bkJveC5hZGRfYWN0b3IoYWJfc3BhY2VyTGFiZWwpXG5cdFx0c3VuQm94LmFkZF9hY3RvcihzdW5zZXRCb3gpO1xuXG5cdFx0c3VuQmluLnNldF9jaGlsZChzdW5Cb3gpO1xuXHRcdHJldHVybiBzdW5CaW47XG5cdH1cblxuXHQvLyBEYXRhIGRpc3BsYXkgaGVscGVyc1xuXG5cdHByaXZhdGUgU2V0SW1tZWRpYXRlUHJlY2lwaXRhdGlvbihwcmVjaXA6IEltbWVkaWF0ZVByZWNpcGl0YXRpb24sIGNvbmZpZzogQ29uZmlnKTogdm9pZCB7XG5cdFx0aWYgKCFjb25maWcuX2ltbWVkaWF0ZVByZWNpcCB8fCAhcHJlY2lwIHx8IHByZWNpcC5lbmQgPT0gbnVsbCB8fCBwcmVjaXAuc3RhcnQgPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5pbW1lZGlhdGVQcmVjaXBpdGF0aW9uQm94LmhpZGUoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmltbWVkaWF0ZVByZWNpcGl0YXRpb25Cb3guc2hvdygpXG5cdFx0aWYgKHByZWNpcC5zdGFydCA9PSAtMSkge1xuXHRcdFx0dGhpcy5pbW1lZGlhdGVQcmVjaXBpdGF0aW9uQm94LmhpZGUoKVxuXHRcdH1cblx0XHRlbHNlIGlmIChwcmVjaXAuc3RhcnQgPT0gMCkge1xuXHRcdFx0aWYgKHByZWNpcC5lbmQgIT0gLTEpXG5cdFx0XHRcdHRoaXMuaW1tZWRpYXRlUHJlY2lwaXRhdGlvbkxhYmVsLnRleHQgPSBfKFwiUHJlY2lwaXRhdGlvbiB3aWxsIGVuZCBpbiB7cHJlY2lwRW5kfSBtaW51dGVzXCIsIHsgcHJlY2lwRW5kOiBwcmVjaXAuZW5kIH0pO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0aGlzLmltbWVkaWF0ZVByZWNpcGl0YXRpb25MYWJlbC50ZXh0ID0gXyhcIlByZWNpcGl0YXRpb24gd29uJ3QgZW5kIGluIHdpdGhpbiBhbiBob3VyXCIpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMuaW1tZWRpYXRlUHJlY2lwaXRhdGlvbkxhYmVsLnRleHQgPSBfKFwiUHJlY2lwaXRhdGlvbiB3aWxsIHN0YXJ0IHdpdGhpbiB7cHJlY2lwU3RhcnR9IG1pbnV0ZXNcIiwgeyBwcmVjaXBTdGFydDogcHJlY2lwLnN0YXJ0IH0pO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgU2V0U3VucmlzZUFuZFN1bnNldChzdW5yaXNlOiBEYXRlLCBzdW5zZXQ6IERhdGUsIHR6OiBzdHJpbmcpOiB2b2lkIHtcblx0XHRsZXQgc3VucmlzZVRleHQgPSBcIlwiO1xuXHRcdGxldCBzdW5zZXRUZXh0ID0gXCJcIjtcblx0XHRpZiAoc3VucmlzZSAhPSBudWxsICYmIHN1bnNldCAhPSBudWxsICYmIHRoaXMuYXBwLmNvbmZpZy5fc2hvd1N1bnJpc2UpIHtcblx0XHRcdHN1bnJpc2VUZXh0ID0gKEdldEhvdXJzTWludXRlcyhzdW5yaXNlLCB0aGlzLmFwcC5jb25maWcuY3VycmVudExvY2FsZSwgdGhpcy5hcHAuY29uZmlnLl9zaG93MjRIb3VycywgdHopKTtcblx0XHRcdHN1bnNldFRleHQgPSAoR2V0SG91cnNNaW51dGVzKHN1bnNldCwgdGhpcy5hcHAuY29uZmlnLmN1cnJlbnRMb2NhbGUsIHRoaXMuYXBwLmNvbmZpZy5fc2hvdzI0SG91cnMsIHR6KSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdW5yaXNlTGFiZWwudGV4dCA9IHN1bnJpc2VUZXh0O1xuXHRcdHRoaXMuc3Vuc2V0TGFiZWwudGV4dCA9IHN1bnNldFRleHQ7XG5cdH1cblxuXHRwcml2YXRlIFNldEFQSVVuaXF1ZUZpZWxkKGV4dHJhX2ZpZWxkOiBBUElVbmlxdWVGaWVsZCkge1xuXHRcdC8vIEFQSSBVbmlxdWUgZGlzcGxheVxuXHRcdHRoaXMuYXBpVW5pcXVlTGFiZWwudGV4dCA9IFwiXCI7XG5cdFx0dGhpcy5hcGlVbmlxdWVDYXB0aW9uTGFiZWwudGV4dCA9IFwiXCI7XG5cdFx0aWYgKCEhZXh0cmFfZmllbGQpIHtcblx0XHRcdHRoaXMuYXBpVW5pcXVlQ2FwdGlvbkxhYmVsLnRleHQgPSBfKGV4dHJhX2ZpZWxkLm5hbWUpICsgTG9jYWxpemVkQ29sb24odGhpcy5hcHAuY29uZmlnLmN1cnJlbnRMb2NhbGUpO1xuXHRcdFx0bGV0IHZhbHVlO1xuXHRcdFx0c3dpdGNoIChleHRyYV9maWVsZC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgXCJwZXJjZW50XCI6XG5cdFx0XHRcdFx0dmFsdWUgPSBQcmVjZW50VG9Mb2NhbGUoZXh0cmFfZmllbGQudmFsdWUsIHRoaXMuYXBwLmNvbmZpZy5jdXJyZW50TG9jYWxlKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInRlbXBlcmF0dXJlXCI6XG5cdFx0XHRcdFx0dmFsdWUgPSBUZW1wVG9Vc2VyQ29uZmlnKGV4dHJhX2ZpZWxkLnZhbHVlLCB0aGlzLmFwcC5jb25maWcpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHZhbHVlID0gXyhleHRyYV9maWVsZC52YWx1ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmFwaVVuaXF1ZUxhYmVsLnRleHQgPSB2YWx1ZTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIFNldFdlYXRoZXJJY29uKGljb25OYW1lczogQnVpbHRpbkljb25zW10sIGN1c3RvbUljb25OYW1lOiBzdHJpbmcpIHtcblx0XHRpZiAodGhpcy5hcHAuY29uZmlnLl91c2VDdXN0b21NZW51SWNvbnMpIHtcblx0XHRcdHRoaXMud2VhdGhlckljb24uaWNvbl9uYW1lID0gY3VzdG9tSWNvbk5hbWU7XG5cdFx0XHR0aGlzLlVwZGF0ZUljb25UeXBlKEljb25UeXBlLlNZTUJPTElDKTsgLy8gSGFyZCBzZXQgdG8gc3ltYm9saWMgYXMgaWNvbnNldCBpcyBzeW1ib2xpY1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGxldCBpY29uID0gV2VhdGhlckljb25TYWZlbHkoaWNvbk5hbWVzLCB0aGlzLmFwcC5jb25maWcuSWNvblR5cGUpO1xuXHRcdFx0dGhpcy53ZWF0aGVySWNvbi5pY29uX25hbWUgPSBpY29uO1xuXHRcdFx0dGhpcy5VcGRhdGVJY29uVHlwZSh0aGlzLmFwcC5jb25maWcuSWNvblR5cGUpOyAvLyBSZXZlcnQgdG8gdXNlciBzZXR0aW5nXG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBTZXRDb25kaXRpb25UZXh0KGNvbmRpdGlvbjogc3RyaW5nKSB7XG5cdFx0dGhpcy53ZWF0aGVyU3VtbWFyeS50ZXh0ID0gY29uZGl0aW9uO1xuXHR9XG5cblx0cHJpdmF0ZSBTZXRUZW1wZXJhdHVyZSh0ZW1wZXJhdHVyZTogbnVtYmVyKSB7XG5cdFx0bGV0IHRlbXAgPSBUZW1wVG9Vc2VyQ29uZmlnKHRlbXBlcmF0dXJlLCB0aGlzLmFwcC5jb25maWcpO1xuXHRcdGlmICh0ZW1wID09IG51bGwpIHJldHVybjtcblx0XHR0aGlzLnRlbXBlcmF0dXJlTGFiZWwudGV4dCA9IHRlbXA7XG5cdH1cblxuXHRwcml2YXRlIFNldEh1bWlkaXR5KGh1bWlkaXR5OiBudW1iZXIpIHtcblx0XHRpZiAoaHVtaWRpdHkgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy5odW1pZGl0eUxhYmVsLnRleHQgPSBQcmVjZW50VG9Mb2NhbGUoaHVtaWRpdHksIHRoaXMuYXBwLmNvbmZpZy5jdXJyZW50TG9jYWxlKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIFNldFdpbmQod2luZFNwZWVkOiBudW1iZXIsIHdpbmREZWdyZWU6IG51bWJlcikge1xuXHRcdGxldCB3aW5kX2RpcmVjdGlvbiA9IENvbXBhc3NEaXJlY3Rpb24od2luZERlZ3JlZSk7XG5cdFx0dGhpcy53aW5kRGlyZWN0aW9uSWNvbi5pY29uX25hbWUgPSB3aW5kX2RpcmVjdGlvbjtcblx0XHRpZiAodGhpcy5hcHAuY29uZmlnLl9kaXNwbGF5V2luZEFzVGV4dCkge1xuXHRcdFx0bGV0IGRpclRleHQgPSBDb21wYXNzRGlyZWN0aW9uVGV4dCh3aW5kRGVncmVlKTtcblx0XHRcdHRoaXMud2luZExhYmVsLnRleHQgPSBgJHsoZGlyVGV4dCAhPSBudWxsID8gXyhkaXJUZXh0KSArIFwiIFwiIDogXCJcIil9JHtNUFN0b1VzZXJVbml0cyh3aW5kU3BlZWQsIHRoaXMuYXBwLmNvbmZpZy5XaW5kU3BlZWRVbml0KX1gO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMud2luZExhYmVsLnRleHQgPSBNUFN0b1VzZXJVbml0cyh3aW5kU3BlZWQsIHRoaXMuYXBwLmNvbmZpZy5XaW5kU3BlZWRVbml0KTtcblx0XHR9XG5cblx0XHQvLyBObyBuZWVkIHRvIGRpc3BsYXkgdW5pdCB0byBCZWF1Zm9ydCBzY2FsZVxuXHRcdGlmICh0aGlzLmFwcC5jb25maWcuV2luZFNwZWVkVW5pdCAhPSBcIkJlYXVmb3J0XCIpIHRoaXMud2luZExhYmVsLnRleHQgKz0gXCIgXCIgKyBfKHRoaXMuYXBwLmNvbmZpZy5XaW5kU3BlZWRVbml0KTtcblx0fVxuXG5cdHByaXZhdGUgU2V0UHJlc3N1cmUocHJlc3N1cmU6IG51bWJlcikge1xuXHRcdGlmIChwcmVzc3VyZSAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLnByZXNzdXJlTGFiZWwudGV4dCA9IFByZXNzVG9Vc2VyVW5pdHMocHJlc3N1cmUsIHRoaXMuYXBwLmNvbmZpZy5fcHJlc3N1cmVVbml0KSArICcgJyArIF8odGhpcy5hcHAuY29uZmlnLl9wcmVzc3VyZVVuaXQpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgU2V0TG9jYXRpb24obG9jYXRpb25TdHJpbmc6IHN0cmluZywgdXJsOiBzdHJpbmcpIHtcblx0XHR0aGlzLmxvY2F0aW9uLmxhYmVsID0gbG9jYXRpb25TdHJpbmc7XG5cdFx0dGhpcy5sb2NhdGlvbkJ1dHRvbi51cmwgPSB1cmw7XG5cdFx0aWYgKCF1cmwpIHRoaXMubG9jYXRpb25CdXR0b24uZGlzYWJsZSgpO1xuXHR9XG5cblx0Ly8gQ2FsbGJhY2tzXG5cblx0cHJpdmF0ZSBOZXh0TG9jYXRpb25DbGlja2VkKCkge1xuXHRcdGxldCBsb2MgPSB0aGlzLmFwcC5jb25maWcuU3dpdGNoVG9OZXh0TG9jYXRpb24oKTtcblx0XHR0aGlzLmFwcC5SZWZyZXNoQW5kUmVidWlsZChsb2MpO1xuXHR9XG5cblx0cHJpdmF0ZSBQcmV2aW91c0xvY2F0aW9uQ2xpY2tlZCgpIHtcblx0XHRsZXQgbG9jID0gdGhpcy5hcHAuY29uZmlnLlN3aXRjaFRvUHJldmlvdXNMb2NhdGlvbigpO1xuXHRcdHRoaXMuYXBwLlJlZnJlc2hBbmRSZWJ1aWxkKGxvYyk7XG5cdH1cblxuXHRwcml2YXRlIG9uTG9jYXRpb25TdG9yYWdlQ2hhbmdlZChzZW5kZXI6IExvY2F0aW9uU3RvcmUsIGl0ZW1Db3VudDogbnVtYmVyKTogdm9pZCB7XG5cdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiT24gbG9jYXRpb24gc3RvcmFnZSBjYWxsYmFjayBjYWxsZWQsIG51bWJlciBvZiBsb2NhdGlvbnMgbm93IFwiICsgaXRlbUNvdW50LnRvU3RyaW5nKCkpO1xuXHRcdC8vIEhpZGUvc2hvdyBsb2NhdGlvbiBzZWxlY3RvcnMgYmFzZWQgb24gaG93IG1hbnkgaXRlbXMgYXJlIGluIHN0b3JhZ2Vcblx0XHRpZiAodGhpcy5hcHAuY29uZmlnLkxvY1N0b3JlLlNob3VsZFNob3dMb2NhdGlvblNlbGVjdG9ycyh0aGlzLmFwcC5jb25maWcuQ3VycmVudExvY2F0aW9uKSlcblx0XHRcdHRoaXMuU2hvd0xvY2F0aW9uU2VsZWN0b3JzKCk7XG5cdFx0ZWxzZVxuXHRcdFx0dGhpcy5IaWRlTG9jYXRpb25TZWxlY3RvcnMoKTtcblx0fVxuXG5cdC8vIFV0aWxzXG5cblx0cHJpdmF0ZSBTaG93TG9jYXRpb25TZWxlY3RvcnMoKSB7XG5cdFx0dGhpcy5uZXh0TG9jYXRpb25CdXR0b24/LmFjdG9yPy5zaG93KCk7XG5cdFx0dGhpcy5wcmV2aW91c0xvY2F0aW9uQnV0dG9uPy5hY3Rvcj8uc2hvdygpO1xuXHR9XG5cblx0cHJpdmF0ZSBIaWRlTG9jYXRpb25TZWxlY3RvcnMoKSB7XG5cdFx0dGhpcy5uZXh0TG9jYXRpb25CdXR0b24/LmFjdG9yPy5oaWRlKCk7XG5cdFx0dGhpcy5wcmV2aW91c0xvY2F0aW9uQnV0dG9uPy5hY3Rvcj8uaGlkZSgpO1xuXHR9XG59IiwiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuaW1wb3J0IHsgQVBQTEVUX0lDT04gfSBmcm9tIFwiLi4vY29uc3RzXCI7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gXCIuLi9saWIvZXZlbnRzXCI7XG5pbXBvcnQgeyBMb2cgfSBmcm9tIFwiLi4vbGliL2xvZ2dlclwiO1xuaW1wb3J0IHsgV2VhdGhlckFwcGxldCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBXZWF0aGVyRGF0YSB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgXywgR2V0RGF5TmFtZSwgV2VhdGhlckljb25TYWZlbHksIE9uU2FtZURheSwgVGVtcFJhbmdlVG9Vc2VyQ29uZmlnIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBXZWF0aGVyQnV0dG9uIH0gZnJvbSBcIi4uL3VpX2VsZW1lbnRzL3dlYXRoZXJidXR0b25cIjtcblxuY29uc3QgeyBCaW4sIEJveExheW91dCwgTGFiZWwsIEljb24sIFdpZGdldCB9ID0gaW1wb3J0cy5naS5TdDtcbmNvbnN0IHsgR3JpZExheW91dCB9ID0gaW1wb3J0cy5naS5DbHV0dGVyO1xuXG4vLyBzdHlsZXNoZWV0LmNzc1xuY29uc3QgU1RZTEVfRk9SRUNBU1RfSUNPTiA9ICd3ZWF0aGVyLWZvcmVjYXN0LWljb24nXG5jb25zdCBTVFlMRV9GT1JFQ0FTVF9EQVRBQk9YID0gJ3dlYXRoZXItZm9yZWNhc3QtZGF0YWJveCdcbmNvbnN0IFNUWUxFX0ZPUkVDQVNUX0RBWSA9ICd3ZWF0aGVyLWZvcmVjYXN0LWRheSdcbmNvbnN0IFNUWUxFX0ZPUkVDQVNUX1NVTU1BUlkgPSAnd2VhdGhlci1mb3JlY2FzdC1zdW1tYXJ5J1xuY29uc3QgU1RZTEVfRk9SRUNBU1RfVEVNUEVSQVRVUkUgPSAnd2VhdGhlci1mb3JlY2FzdC10ZW1wZXJhdHVyZSdcbmNvbnN0IFNUWUxFX0ZPUkVDQVNUX0JPWCA9ICd3ZWF0aGVyLWZvcmVjYXN0LWJveCdcbmNvbnN0IFNUWUxFX0ZPUkVDQVNUX0NPTlRBSU5FUiA9ICd3ZWF0aGVyLWZvcmVjYXN0LWNvbnRhaW5lcidcbmNvbnN0IFNUWUxFX0ZPUkVDQVNUID0gJ2ZvcmVjYXN0J1xuXG5leHBvcnQgY2xhc3MgVUlGb3JlY2FzdHMge1xuXHRwdWJsaWMgYWN0b3I6IGltcG9ydHMuZ2kuU3QuQmluO1xuXHRwcml2YXRlIGZvcmVjYXN0czogRm9yZWNhc3RVSVtdO1xuXHRwcml2YXRlIGdyaWQ6IGltcG9ydHMuZ2kuQ2x1dHRlci5HcmlkTGF5b3V0O1xuXG5cdHByaXZhdGUgYXBwOiBXZWF0aGVyQXBwbGV0O1xuXG5cdHB1YmxpYyBEYXlDbGlja2VkOiBFdmVudDxXZWF0aGVyQnV0dG9uLCBEYXRlPiA9IG5ldyBFdmVudCgpO1xuXHRwdWJsaWMgRGF5SG92ZXJlZDogRXZlbnQ8V2VhdGhlckJ1dHRvbiwgRGF0ZT4gPSBuZXcgRXZlbnQoKTtcblxuXHQvLyBDYWxsYmFja3Mgd2l0aCBib3VuZCBjb250ZXh0LCB3aGljaCBoYXMgY29uc3RhbnQgc2lnbmF0dXJlIGZvciBldmVudCBzdWJzY2lwdGlvbi91bnN1YnNjcmlwdGlvblxuXHRwdWJsaWMgRGF5Q2xpY2tlZENhbGxiYWNrOiAoc2VuZGVyOiBXZWF0aGVyQnV0dG9uLCBldmVudDogaW1wb3J0cy5naS5DbHV0dGVyLkV2ZW50KSA9PiB2b2lkO1xuXHRwdWJsaWMgRGF5SG92ZXJlZENhbGxiYWNrOiAoc2VuZGVyOiBXZWF0aGVyQnV0dG9uLCBldmVudDogaW1wb3J0cy5naS5DbHV0dGVyLkV2ZW50KSA9PiB2b2lkO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogV2VhdGhlckFwcGxldCkge1xuXHRcdHRoaXMuYXBwID0gYXBwO1xuXHRcdHRoaXMuYWN0b3IgPSBuZXcgQmluKHsgc3R5bGVfY2xhc3M6IFNUWUxFX0ZPUkVDQVNUIH0pO1xuXG5cdFx0dGhpcy5EYXlDbGlja2VkQ2FsbGJhY2sgPSAocywgZSkgPT4gdGhpcy5PbkRheUNsaWNrZWQocywgZSk7XG5cdFx0dGhpcy5EYXlIb3ZlcmVkQ2FsbGJhY2sgPSAocywgZSkgPT4gdGhpcy5PbkRheUhvdmVyZWQocywgZSk7XG5cdH1cblxuXHRwdWJsaWMgVXBkYXRlSWNvblR5cGUoaWNvblR5cGU6IGltcG9ydHMuZ2kuU3QuSWNvblR5cGUpOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMuZm9yZWNhc3RzKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZvcmVjYXN0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKCF0aGlzLmZvcmVjYXN0c1tpXT8uSWNvbilcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdHRoaXMuZm9yZWNhc3RzW2ldLkljb24uaWNvbl90eXBlID0gaWNvblR5cGU7XG5cdFx0fVxuXHR9XG5cblx0LyoqIEluamVjdHMgZGF0YSBmcm9tIGZvcmVjYXN0cyBhcnJheSBpbnRvIHBvcHVwTWVudSAqL1xuXHRwdWJsaWMgRGlzcGxheSh3ZWF0aGVyOiBXZWF0aGVyRGF0YSwgY29uZmlnOiBDb25maWcpOiBib29sZWFuIHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKCF3ZWF0aGVyLmZvcmVjYXN0cykgcmV0dXJuIGZhbHNlO1xuXHRcdFx0bGV0IGxlbiA9IE1hdGgubWluKHRoaXMuZm9yZWNhc3RzLmxlbmd0aCwgd2VhdGhlci5mb3JlY2FzdHMubGVuZ3RoKTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0bGV0IGZvcmVjYXN0RGF0YSA9IHdlYXRoZXIuZm9yZWNhc3RzW2ldO1xuXHRcdFx0XHRsZXQgZm9yZWNhc3RVaSA9IHRoaXMuZm9yZWNhc3RzW2ldO1xuXG5cdFx0XHRcdC8vIFdlYXRoZXIgQ29uZGl0aW9uXG5cdFx0XHRcdGxldCBjb21tZW50ID0gKGNvbmZpZy5fc2hvcnRDb25kaXRpb25zKSA/IGZvcmVjYXN0RGF0YS5jb25kaXRpb24ubWFpbiA6IGZvcmVjYXN0RGF0YS5jb25kaXRpb24uZGVzY3JpcHRpb247XG5cblx0XHRcdFx0Ly8gRGF5IE5hbWVzXG5cdFx0XHRcdGxldCBkYXlOYW1lOiBzdHJpbmcgPSBHZXREYXlOYW1lKGZvcmVjYXN0RGF0YS5kYXRlLCBjb25maWcuY3VycmVudExvY2FsZSwgY29uZmlnLl9zaG93Rm9yZWNhc3REYXRlcywgd2VhdGhlci5sb2NhdGlvbi50aW1lWm9uZSk7XG5cdFx0XHRcdGZvcmVjYXN0VWkuRGF5LmFjdG9yLmxhYmVsID0gZGF5TmFtZTtcblxuXHRcdFx0XHRmb3JlY2FzdFVpLkRheS5Ib3ZlcmVkLlVuc3Vic2NyaWJlKHRoaXMuRGF5SG92ZXJlZENhbGxiYWNrKTtcblx0XHRcdFx0Zm9yZWNhc3RVaS5EYXkuQ2xpY2tlZC5VbnN1YnNjcmliZSh0aGlzLkRheUNsaWNrZWRDYWxsYmFjayk7XG5cblx0XHRcdFx0Ly8gRW5hYmxlIGFuZCBzdWJzY3JpYmUgdG8gYnV0dG9ucyB3aGF0IGhhcyBob3VybHkgd2VhdGhlcnNcblx0XHRcdFx0bGV0IGhhc0hvdXJseVdlYXRoZXI6IGJvb2xlYW4gPSBmYWxzZTtcblx0XHRcdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuYXBwLkdldE1heEhvdXJseUZvcmVjYXN0cygpOyBpbmRleCsrKSB7XG5cdFx0XHRcdFx0Y29uc3QgZWxlbWVudCA9IHdlYXRoZXIuaG91cmx5Rm9yZWNhc3RzW2luZGV4XTtcblx0XHRcdFx0XHRpZiAoIWVsZW1lbnQpXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRpZiAoT25TYW1lRGF5KGVsZW1lbnQuZGF0ZSwgZm9yZWNhc3REYXRhLmRhdGUsIGNvbmZpZykpIHtcblx0XHRcdFx0XHRcdGhhc0hvdXJseVdlYXRoZXIgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2Ugc2V0IElEIHRvIHRoZSBidXR0b25zIGFzIGRhdGUgc28gd2UgY2FuIHVzZSB0aGVtIGxhdGVyIG9uXG5cdFx0XHRcdGZvcmVjYXN0VWkuRGF5LklEID0gZm9yZWNhc3REYXRhLmRhdGU7XG5cblx0XHRcdFx0aWYgKGhhc0hvdXJseVdlYXRoZXIpIHtcblx0XHRcdFx0XHRmb3JlY2FzdFVpLkRheS5lbmFibGUoKTtcblx0XHRcdFx0XHRmb3JlY2FzdFVpLkRheS5Ib3ZlcmVkLlN1YnNjcmliZSh0aGlzLkRheUhvdmVyZWRDYWxsYmFjayk7XG5cdFx0XHRcdFx0Zm9yZWNhc3RVaS5EYXkuQ2xpY2tlZC5TdWJzY3JpYmUodGhpcy5EYXlDbGlja2VkQ2FsbGJhY2spO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdGZvcmVjYXN0VWkuRGF5LmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvcmVjYXN0VWkuVGVtcGVyYXR1cmUudGV4dCA9IFRlbXBSYW5nZVRvVXNlckNvbmZpZyhmb3JlY2FzdERhdGEudGVtcF9taW4sIGZvcmVjYXN0RGF0YS50ZW1wX21heCwgY29uZmlnKTtcblx0XHRcdFx0Zm9yZWNhc3RVaS5TdW1tYXJ5LnRleHQgPSBjb21tZW50O1xuXHRcdFx0XHRmb3JlY2FzdFVpLkljb24uaWNvbl9uYW1lID0gKGNvbmZpZy5fdXNlQ3VzdG9tTWVudUljb25zKSA/IGZvcmVjYXN0RGF0YS5jb25kaXRpb24uY3VzdG9tSWNvbiA6IFdlYXRoZXJJY29uU2FmZWx5KGZvcmVjYXN0RGF0YS5jb25kaXRpb24uaWNvbnMsIGNvbmZpZy5JY29uVHlwZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHR0aGlzLmFwcC5TaG93RXJyb3Ioe1xuXHRcdFx0XHR0eXBlOiBcImhhcmRcIixcblx0XHRcdFx0ZGV0YWlsOiBcInVua25vd25cIixcblx0XHRcdFx0bWVzc2FnZTogXCJGb3JlY2FzdCBwYXJzaW5nIGZhaWxlZDogXCIgKyBlLnRvU3RyaW5nKCksXG5cdFx0XHRcdHVzZXJFcnJvcjogZmFsc2Vcblx0XHRcdH0pXG5cdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJEaXNwbGF5Rm9yZWNhc3RFcnJvciBcIiArIGUpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHRwdWJsaWMgUmVidWlsZChjb25maWc6IENvbmZpZywgdGV4dENvbG9yU3R5bGU6IHN0cmluZyk6IHZvaWQge1xuXHRcdHRoaXMuRGVzdHJveSgpO1xuXG5cdFx0dGhpcy5mb3JlY2FzdHMgPSBbXTtcblx0XHR0aGlzLmdyaWQgPSBuZXcgR3JpZExheW91dCh7XG5cdFx0XHRvcmllbnRhdGlvbjogY29uZmlnLl92ZXJ0aWNhbE9yaWVudGF0aW9uXG5cdFx0fSk7XG5cdFx0dGhpcy5ncmlkLnNldF9jb2x1bW5faG9tb2dlbmVvdXModHJ1ZSk7XG5cblx0XHRsZXQgdGFibGUgPSBuZXcgV2lkZ2V0KHtcblx0XHRcdGxheW91dF9tYW5hZ2VyOiB0aGlzLmdyaWQsXG5cdFx0XHRzdHlsZV9jbGFzczogU1RZTEVfRk9SRUNBU1RfQ09OVEFJTkVSXG5cdFx0fSk7XG5cblx0XHR0aGlzLmFjdG9yLnNldF9jaGlsZCh0YWJsZSk7XG5cblx0XHRsZXQgbWF4RGF5cyA9IHRoaXMuYXBwLkdldE1heEZvcmVjYXN0RGF5cygpO1xuXHRcdC8vIFVzZXIgc2V0dGluZ3Ncblx0XHRsZXQgbWF4Um93ID0gY29uZmlnLl9mb3JlY2FzdFJvd3M7XG5cdFx0bGV0IG1heENvbCA9IGNvbmZpZy5fZm9yZWNhc3RDb2x1bW5zO1xuXG5cdFx0Ly8gRmlsbCB2ZXJ0aWNhbGx5IGZpcnN0IGJ5IHN3YXBwaW5nIG1heCByb3dzIGFuZCBtYXggY29sdW1ucyxcblx0XHQvLyBjYWxjdWxhdGluZyBjb3JyZWN0bHkgd2l0aCB0aGUgc2FtZSBjb2RlIGJlbG93XG5cdFx0aWYgKGNvbmZpZy5fdmVydGljYWxPcmllbnRhdGlvbikge1xuXHRcdFx0W21heFJvdywgbWF4Q29sXSA9IFttYXhDb2wsIG1heFJvd107XG5cdFx0fVxuXHRcdGxldCBjdXJSb3cgPSAwO1xuXHRcdGxldCBjdXJDb2wgPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBtYXhEYXlzOyBpKyspIHtcblx0XHRcdGxldCBmb3JlY2FzdFdlYXRoZXI6IEZvcmVjYXN0VUkgPSB7fSBhcyBGb3JlY2FzdFVJO1xuXG5cdFx0XHQvLyBwcm9jZWVkIHRvIG5leHQgcm93XG5cdFx0XHRpZiAoY3VyQ29sID49IG1heENvbCkge1xuXHRcdFx0XHRjdXJSb3crKztcblx0XHRcdFx0Y3VyQ29sID0gMDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVhY2hlZCB0aGUgbWF4aW11bSBudW1iZXIgb2Ygcm93c1xuXHRcdFx0aWYgKGN1clJvdyA+PSBtYXhSb3cpIGJyZWFrO1xuXG5cdFx0XHRmb3JlY2FzdFdlYXRoZXIuSWNvbiA9IG5ldyBJY29uKHtcblx0XHRcdFx0aWNvbl90eXBlOiBjb25maWcuSWNvblR5cGUsXG5cdFx0XHRcdGljb25fc2l6ZTogNDgsXG5cdFx0XHRcdGljb25fbmFtZTogQVBQTEVUX0lDT04sXG5cdFx0XHRcdHN0eWxlX2NsYXNzOiBTVFlMRV9GT1JFQ0FTVF9JQ09OXG5cdFx0XHR9KTtcblxuXHRcdFx0Zm9yZWNhc3RXZWF0aGVyLkRheSA9IG5ldyBXZWF0aGVyQnV0dG9uKHtcblx0XHRcdFx0c3R5bGVfY2xhc3M6IFNUWUxFX0ZPUkVDQVNUX0RBWSxcblx0XHRcdFx0cmVhY3RpdmU6IHRydWUsXG5cdFx0XHRcdHN0eWxlOiB0ZXh0Q29sb3JTdHlsZSxcblx0XHRcdFx0LyoqIE5lZWQgdGhlIGVtcHR5IHN0cmluZyBoZXJlIGJlY2F1c2Ugd2hlbiB3ZSBjaGFuZ2UgaXQgbGF0ZXIgZnJvbSBudWxsIGl0IGNhbiBsb3NlIGl0J3MgY29sb3IgKi9cblx0XHRcdFx0bGFiZWw6IFwiXCJcblx0XHRcdH0sIHRydWUpO1xuXG5cdFx0XHRmb3JlY2FzdFdlYXRoZXIuRGF5LmRpc2FibGUoKTtcblxuXHRcdFx0Zm9yZWNhc3RXZWF0aGVyLlN1bW1hcnkgPSBuZXcgTGFiZWwoe1xuXHRcdFx0XHQvKnRleHQ6IFBsYWNlaG9sZGVycy5MT0FESU5HLCovXG5cdFx0XHRcdHN0eWxlX2NsYXNzOiBTVFlMRV9GT1JFQ0FTVF9TVU1NQVJZLFxuXHRcdFx0XHRyZWFjdGl2ZTogdHJ1ZVxuXHRcdFx0fSk7XG5cblx0XHRcdGZvcmVjYXN0V2VhdGhlci5UZW1wZXJhdHVyZSA9IG5ldyBMYWJlbCh7XG5cdFx0XHRcdC8qdGV4dDogUGxhY2Vob2xkZXJzLkxPQURJTkcsKi9cblx0XHRcdFx0c3R5bGVfY2xhc3M6IFNUWUxFX0ZPUkVDQVNUX1RFTVBFUkFUVVJFXG5cdFx0XHR9KTtcblxuXHRcdFx0bGV0IGJ5ID0gbmV3IEJveExheW91dCh7XG5cdFx0XHRcdHZlcnRpY2FsOiB0cnVlLFxuXHRcdFx0XHRzdHlsZV9jbGFzczogU1RZTEVfRk9SRUNBU1RfREFUQUJPWFxuXHRcdFx0fSk7XG5cdFx0XHRieS5hZGQoZm9yZWNhc3RXZWF0aGVyLkRheS5hY3RvciwgeyB4X2FsaWduOiBpbXBvcnRzLmdpLlN0LkFsaWduLlNUQVJULCBleHBhbmQ6IGZhbHNlLCB4X2ZpbGw6IGZhbHNlIH0pO1xuXHRcdFx0YnkuYWRkX2FjdG9yKGZvcmVjYXN0V2VhdGhlci5TdW1tYXJ5KTtcblx0XHRcdGJ5LmFkZF9hY3Rvcihmb3JlY2FzdFdlYXRoZXIuVGVtcGVyYXR1cmUpO1xuXG5cdFx0XHRsZXQgYmIgPSBuZXcgQm94TGF5b3V0KHtcblx0XHRcdFx0c3R5bGVfY2xhc3M6IFNUWUxFX0ZPUkVDQVNUX0JPWFxuXHRcdFx0fSk7XG5cblx0XHRcdGJiLmFkZF9hY3Rvcihmb3JlY2FzdFdlYXRoZXIuSWNvbik7XG5cdFx0XHRiYi5hZGRfYWN0b3IoYnkpO1xuXG5cdFx0XHR0aGlzLmZvcmVjYXN0c1tpXSA9IGZvcmVjYXN0V2VhdGhlcjtcblx0XHRcdGlmICghY29uZmlnLl92ZXJ0aWNhbE9yaWVudGF0aW9uKSB7XG5cdFx0XHRcdHRoaXMuZ3JpZC5hdHRhY2goYmIsIGN1ckNvbCwgY3VyUm93LCAxLCAxKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHQvLyBmbGlwIGJhY2sgY29sdW1uIGFuZCByb3cgdmFyaWFibGVzIGZvciBjb3JyZWN0IGRpc3BsYXlcblx0XHRcdFx0dGhpcy5ncmlkLmF0dGFjaChiYiwgY3VyUm93LCBjdXJDb2wsIDEsIDEpO1xuXHRcdFx0fVxuXG5cdFx0XHRjdXJDb2wrKztcblx0XHR9XG5cdH1cblxuXHQvKiogRGVzdHJveXMgZm9yZWNhc3QgVUkgYm94ICovXG5cdHB1YmxpYyBEZXN0cm95KCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmFjdG9yLmdldF9jaGlsZCgpICE9IG51bGwpXG5cdFx0XHR0aGlzLmFjdG9yLmdldF9jaGlsZCgpLmRlc3Ryb3koKVxuXHR9XG5cblx0cHJpdmF0ZSBPbkRheUhvdmVyZWQoc2VuZGVyOiBXZWF0aGVyQnV0dG9uLCBldmVudDogaW1wb3J0cy5naS5DbHV0dGVyLkV2ZW50KTogdm9pZCB7XG5cdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiRGF5IEhvdmVyZWQ6IFwiICsgKHNlbmRlci5JRCBhcyBEYXRlKS50b0RhdGVTdHJpbmcoKSk7XG5cdFx0dGhpcy5EYXlIb3ZlcmVkLkludm9rZShzZW5kZXIsIHNlbmRlci5JRCBhcyBEYXRlKTtcblx0fVxuXG5cdHByaXZhdGUgT25EYXlDbGlja2VkKHNlbmRlcjogV2VhdGhlckJ1dHRvbiwgZXZlbnQ6IGltcG9ydHMuZ2kuQ2x1dHRlci5FdmVudCk6IHZvaWQge1xuXHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkRheSBDbGlja2VkOiBcIiArIChzZW5kZXIuSUQgYXMgRGF0ZSkudG9EYXRlU3RyaW5nKCkpO1xuXHRcdHRoaXMuRGF5Q2xpY2tlZC5JbnZva2Uoc2VuZGVyLCBzZW5kZXIuSUQgYXMgRGF0ZSk7XG5cdH1cbn1cblxuaW50ZXJmYWNlIEZvcmVjYXN0VUkge1xuXHRJY29uOiBpbXBvcnRzLmdpLlN0Lkljb24sXG5cdERheTogV2VhdGhlckJ1dHRvbixcblx0U3VtbWFyeTogaW1wb3J0cy5naS5TdC5MYWJlbCxcblx0VGVtcGVyYXR1cmU6IGltcG9ydHMuZ2kuU3QuTGFiZWwsXG59IiwiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuaW1wb3J0IHsgQVBQTEVUX0lDT04sIEVMTElQU0lTIH0gZnJvbSBcIi4uL2NvbnN0c1wiO1xuaW1wb3J0IHsgTG9nIH0gZnJvbSBcIi4uL2xpYi9sb2dnZXJcIjtcbmltcG9ydCB7IFdlYXRoZXJBcHBsZXQgfSBmcm9tIFwiLi4vbWFpblwiO1xuaW1wb3J0IHsgSG91cmx5Rm9yZWNhc3REYXRhLCBQcmVjaXBpdGF0aW9uIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBHZXRIb3Vyc01pbnV0ZXMsIFRlbXBUb1VzZXJDb25maWcsIF8sIE1pbGxpbWV0ZXJUb1VzZXJVbml0cywgTm90RW1wdHksIFdlYXRoZXJJY29uU2FmZWx5LCBBZGRIb3VycywgT25TYW1lRGF5IH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmNvbnN0IHsgUG9saWN5VHlwZSB9ID0gaW1wb3J0cy5naS5HdGs7XG5jb25zdCB7IGFkZFR3ZWVuIH0gPSBpbXBvcnRzLnVpLnR3ZWVuZXI7XG5jb25zdCB7IEJveExheW91dCwgU2lkZSwgTGFiZWwsIFNjcm9sbFZpZXcsIEljb24sIEFsaWduIH0gPSBpbXBvcnRzLmdpLlN0O1xuXG5leHBvcnQgY2xhc3MgVUlIb3VybHlGb3JlY2FzdHMge1xuXHRwcml2YXRlIGFwcDogV2VhdGhlckFwcGxldDtcblx0Ly8gSG91cmx5IFdlYXRoZXJcblx0cHVibGljIGFjdG9yOiBpbXBvcnRzLmdpLlN0LlNjcm9sbFZpZXc7XG5cdHByaXZhdGUgY29udGFpbmVyOiBpbXBvcnRzLmdpLlN0LkJveExheW91dDtcblx0cHJpdmF0ZSBob3VybHlGb3JlY2FzdHM6IEhvdXJseUZvcmVjYXN0VUlbXTtcblx0cHJpdmF0ZSBob3VybHlDb250YWluZXJzOiBpbXBvcnRzLmdpLlN0LkJveExheW91dFtdO1xuXG5cdC8qKiBcblx0ICogU3RvcmVzIHRoZSBkYXRlcyBmb3IgZWFjaCBkaXNwbGF5ZWQgaG91ciwgc28gd2UgY2FuIHNjcm9sbCB0byB0aGVtIGxhdGVyLlxuXHQgKiBQb3B1bGF0ZWQgaW4gdGhlIERpc3BsYXkgZnVuY3Rpb24uXG5cdCAqL1xuXHRwcml2YXRlIGhvdXJseUZvcmVjYXN0RGF0ZXM6IERhdGVbXTtcblxuXHRwcml2YXRlIGhvdXJseVRvZ2dsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuXHRwdWJsaWMgZ2V0IFRvZ2dsZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaG91cmx5VG9nZ2xlZDtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKGFwcDogV2VhdGhlckFwcGxldCwgbWVudTogaW1wb3J0cy51aS5hcHBsZXQuQXBwbGV0UG9wdXBNZW51KSB7XG5cdFx0dGhpcy5hcHAgPSBhcHA7XG5cdFx0Ly8gSG91cmx5IFdlYXRoZXJcblx0XHR0aGlzLmFjdG9yID0gbmV3IFNjcm9sbFZpZXcoXG5cdFx0XHR7XG5cdFx0XHRcdGhzY3JvbGxiYXJfcG9saWN5OiBQb2xpY3lUeXBlLkFVVE9NQVRJQyxcblx0XHRcdFx0dnNjcm9sbGJhcl9wb2xpY3k6IFBvbGljeVR5cGUuTkVWRVIsXG5cdFx0XHRcdHhfZmlsbDogdHJ1ZSxcblx0XHRcdFx0eV9maWxsOiB0cnVlLFxuXHRcdFx0XHR5X2FsaWduOiBBbGlnbi5NSURETEUsXG5cdFx0XHRcdHhfYWxpZ246IEFsaWduLk1JRERMRVxuXHRcdFx0fVxuXHRcdCk7XG5cdFx0dGhpcy5hY3Rvci5vdmVybGF5X3Njcm9sbGJhcnMgPSB0cnVlO1xuXG5cdFx0Ly8gU3RvcCBldmVudCBwYXNzaW5nIHdoaWxlIHNjcm9sbGluZyB0byBhbGxvdyBzY3JvbGxpbmdcblx0XHRsZXQgdlNjcm9sbCA9IHRoaXMuYWN0b3IuZ2V0X3ZzY3JvbGxfYmFyKCk7XG5cdFx0dlNjcm9sbC5jb25uZWN0KFwic2Nyb2xsLXN0YXJ0XCIsICgpID0+IHsgbWVudS5wYXNzRXZlbnRzID0gdHJ1ZTsgfSk7XG5cdFx0dlNjcm9sbC5jb25uZWN0KFwic2Nyb2xsLXN0b3BcIiwgKCkgPT4geyBtZW51LnBhc3NFdmVudHMgPSBmYWxzZTsgfSk7XG5cdFx0bGV0IGhTY3JvbGwgPSB0aGlzLmFjdG9yLmdldF9oc2Nyb2xsX2JhcigpO1xuXHRcdGhTY3JvbGwuY29ubmVjdChcInNjcm9sbC1zdGFydFwiLCAoKSA9PiB7IG1lbnUucGFzc0V2ZW50cyA9IHRydWU7IH0pO1xuXHRcdGhTY3JvbGwuY29ubmVjdChcInNjcm9sbC1zdG9wXCIsICgpID0+IHsgbWVudS5wYXNzRXZlbnRzID0gZmFsc2U7IH0pO1xuXG5cdFx0dGhpcy5hY3Rvci5oaWRlKCk7XG5cdFx0dGhpcy5hY3Rvci5zZXRfY2xpcF90b19hbGxvY2F0aW9uKHRydWUpO1xuXHRcdHRoaXMuY29udGFpbmVyID0gbmV3IEJveExheW91dCh7IHN0eWxlX2NsYXNzOiBcImhvdXJseS1ib3hcIiB9KTtcblx0XHQvLyBPbmx5IGFkZF9hY3RvciB3b3JrcyB3aXRoIFNjcm9sbFZpZXcgZm9yIHNvbWUgcmVhc29uLCBub3QgYWRkX2NoaWxkXG5cdFx0Ly8gYW5kIG9ubHkgQm94TGF5b3V0IHJlc3VsdHMgaW4gZHJhd24gc3R1ZmYgaW5zaWRlIHRoZSBTY3JvbGxWaWV3LlxuXHRcdC8vIChPbmx5IEJveGxheW91dCBhbmQgVmlld3BvcnQgaW1wbGVtZW50cyBTdC5TY3JvbGxhYmxlIG5lZWRlZCBpbnNpZGUgYSBzY3JvbGx2aWV3KVxuXHRcdHRoaXMuYWN0b3IuYWRkX2FjdG9yKHRoaXMuY29udGFpbmVyKVxuXHR9XG5cblx0LyoqXG5cdCAqIE1ha2Ugc3VyZSB0byBjYWxsIHRoaXMgYWZ0ZXIgdGhlIGhvdXJseSB3ZWF0aGVyIHdhcyBzaG93biBhdCBsZWFzdCBvbmNlLFxuXHQgKiBvdGhlcndpc2UgdGhlIGNhbGN1bGF0aW9uIHdpbGwgbm90IGJlIGFjY3VyYXRlISBcblx0ICpcblx0ICogQHBhcmFtIGRhdGUgXG5cdCAqL1xuXHRwdWJsaWMgU2Nyb2xsVG8oZGF0ZTogRGF0ZSkge1xuXHRcdGlmICh0aGlzLmhvdXJseUZvcmVjYXN0RGF0ZXMgPT0gbnVsbClcblx0XHRcdHJldHVybjtcblxuXHRcdGxldCBpdGVtV2lkdGggPSB0aGlzLkdldEhvdXJseUJveEl0ZW1XaWR0aCgpO1xuXHRcdGxldCBtaWRuaWdodEluZGV4ID0gbnVsbDtcblx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5ob3VybHlGb3JlY2FzdERhdGVzLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0aWYgKE9uU2FtZURheSh0aGlzLmhvdXJseUZvcmVjYXN0RGF0ZXNbaW5kZXhdLCBkYXRlLCB0aGlzLmFwcC5jb25maWcpKVxuXHRcdFx0XHRtaWRuaWdodEluZGV4ID0gaW5kZXg7XG5cdFx0XHRcblx0XHRcdC8vIEFkanVzdCBkYXRlcyBzbyB3ZSBqdW1wIHRvIDYgaW4gdGhlIG1vcm5pbmcsIG5vdCBtaWRuaWdodCB3aGVuIHdlIHNjcm9sbCB0byBhIGRhdGVcblx0XHRcdGNvbnN0IGVsZW1lbnQgPSBBZGRIb3Vycyh0aGlzLmhvdXJseUZvcmVjYXN0RGF0ZXNbaW5kZXhdLCAtNik7XG5cdFx0XHRpZiAoT25TYW1lRGF5KGVsZW1lbnQsIGRhdGUsIHRoaXMuYXBwLmNvbmZpZykpIHtcblx0XHRcdFx0dGhpcy5hY3Rvci5nZXRfaHNjcm9sbF9iYXIoKS5nZXRfYWRqdXN0bWVudCgpLnNldF92YWx1ZShpbmRleCAqIGl0ZW1XaWR0aCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBEYXkgaGFzIGhvdXJseSBmb3JlY2FzdHMgZWFybGllciB0aGFuIDYgYnV0IG5vdCBsYXRlciB0aGFuIDYsIHNjcm9sbCB0byBtaWRuaWdodFxuXHRcdGlmIChtaWRuaWdodEluZGV4ICE9IG51bGwpXG5cdFx0XHR0aGlzLmFjdG9yLmdldF9oc2Nyb2xsX2JhcigpLmdldF9hZGp1c3RtZW50KCkuc2V0X3ZhbHVlKG1pZG5pZ2h0SW5kZXggKiBpdGVtV2lkdGgpO1xuXHR9XG5cblx0LyoqIENoYW5nZXMgYWxsIGljb24ncyB0eXBlIHdoYXQgYXJlIGFmZmVjdGVkIGJ5XG5cdCAqIHRoZSBcInVzZSBzeW1ib2xpYyBpY29uc1wiIHNldHRpbmdcblx0ICovXG5cdHB1YmxpYyBVcGRhdGVJY29uVHlwZShpY29uVHlwZTogaW1wb3J0cy5naS5TdC5JY29uVHlwZSk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5ob3VybHlGb3JlY2FzdHMpXG5cdFx0XHRyZXR1cm47XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaG91cmx5Rm9yZWNhc3RzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAoIXRoaXMuaG91cmx5Rm9yZWNhc3RzW2ldPy5JY29uKVxuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0dGhpcy5ob3VybHlGb3JlY2FzdHNbaV0uSWNvbi5pY29uX3R5cGUgPSBpY29uVHlwZTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgRGlzcGxheShmb3JlY2FzdHM6IEhvdXJseUZvcmVjYXN0RGF0YVtdLCBjb25maWc6IENvbmZpZywgdHo6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHRcdHRoaXMuaG91cmx5Rm9yZWNhc3REYXRlcyA9IFtdO1xuXHRcdGxldCBtYXggPSBNYXRoLm1pbihmb3JlY2FzdHMubGVuZ3RoLCB0aGlzLmhvdXJseUZvcmVjYXN0cy5sZW5ndGgpO1xuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcblx0XHRcdGNvbnN0IGhvdXIgPSBmb3JlY2FzdHNbaW5kZXhdO1xuXHRcdFx0Y29uc3QgdWkgPSB0aGlzLmhvdXJseUZvcmVjYXN0c1tpbmRleF07XG5cblx0XHRcdHRoaXMuaG91cmx5Rm9yZWNhc3REYXRlcy5wdXNoKGhvdXIuZGF0ZSk7XG5cblx0XHRcdHVpLkhvdXIudGV4dCA9IEdldEhvdXJzTWludXRlcyhob3VyLmRhdGUsIGNvbmZpZy5jdXJyZW50TG9jYWxlLCBjb25maWcuX3Nob3cyNEhvdXJzLCB0eiwgY29uZmlnLl9zaG9ydEhvdXJseVRpbWUpO1xuXHRcdFx0dWkuVGVtcGVyYXR1cmUudGV4dCA9IFRlbXBUb1VzZXJDb25maWcoaG91ci50ZW1wLCBjb25maWcpO1xuXHRcdFx0dWkuSWNvbi5pY29uX25hbWUgPSAoY29uZmlnLl91c2VDdXN0b21NZW51SWNvbnMpID8gaG91ci5jb25kaXRpb24uY3VzdG9tSWNvbiA6IFdlYXRoZXJJY29uU2FmZWx5KGhvdXIuY29uZGl0aW9uLmljb25zLCBjb25maWcuSWNvblR5cGUpO1xuXHRcdFx0dWkuU3VtbWFyeS50ZXh0ID0gaG91ci5jb25kaXRpb24ubWFpbjtcblx0XHRcdHVpLlByZWNpcGl0YXRpb24udGV4dCA9IHRoaXMuR2VuZXJhdGVQcmVjaXBpdGF0aW9uVGV4dChob3VyLnByZWNpcGl0YXRpb24sIGNvbmZpZyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5BZGp1c3RIb3VybHlCb3hJdGVtV2lkdGgoKTtcblxuXHRcdHJldHVybiAhKG1heCA8PSAwKTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBTaG93KCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdC8vIEluIHNvbWUgY2FzZXMgdGhlIHByZWZlcnJlZCBoZWlnaHQgaXMgbm90IGNhbGN1bGF0ZWRcblx0XHQvLyBwcm9wZXJseSBmb3IgdGhlIGZpcnN0IHRpbWUsIHNvIHdlIHdvcmsgYXJvdW5kIGJ5IG9wZW5pbmcgYW5kIGNsb3NpbmcgaXQgb25jZVxuXHRcdHRoaXMuYWN0b3Iuc2hvdygpO1xuXHRcdHRoaXMuYWN0b3IuaGlkZSgpO1xuXG5cdFx0dGhpcy5BZGp1c3RIb3VybHlCb3hJdGVtV2lkdGgoKTtcblxuXHRcdGxldCBbbWluV2lkdGgsIG5hdHVyYWxXaWR0aF0gPSB0aGlzLmFjdG9yLmdldF9wcmVmZXJyZWRfd2lkdGgoLTEpO1xuXHRcdGxldCBbbWluSGVpZ2h0LCBuYXR1cmFsSGVpZ2h0XSA9IHRoaXMuYWN0b3IuZ2V0X3ByZWZlcnJlZF9oZWlnaHQobWluV2lkdGgpO1xuXHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcImhvdXJseVNjcm9sbFZpZXcgcmVxdWVzdGVkIGhlaWdodCBhbmQgaXMgc2V0IHRvOiBcIiArIG5hdHVyYWxIZWlnaHQpO1xuXHRcdHRoaXMuYWN0b3Iuc2V0X3dpZHRoKG1pbldpZHRoKTtcblx0XHR0aGlzLmFjdG9yLnNob3coKTtcblx0XHQvLyBXaGVuIHRoZSBzY3JvbGxWaWV3IGlzIHNob3duIHdpdGhvdXQgYW5pbWF0aW9uIGFuZCB0aGVyZSBpcyBub3QgZW5vdWdoIHZlcnRpY2FsIHNwYWNlXG5cdFx0Ly8gKG9yIGNpbm5hbW9uIGRvZXMgbm90IHRoaW5rIHRoZXJlIGlzIGVub3VnaCksIHRoZSB0ZXh0IGdldHMgc3VwZXJpbXBvc2VkIG9uIHRvcCBvZlxuXHRcdC8vIGVhY2ggb3RoZXIuXG5cdFx0Ly8gc2V0dGluZyB0aGUgbWluLWhlaWdodCBmb3JjZXMgdG8gZHJhdyB3aXRoIHRoZSB2aWV3J3MgcmVxdWVzdGVkIGhlaWdodCB3aXRob3V0XG5cdFx0Ly8gaW50ZXJmZXJpbmcgd2l0aCBhbmltYXRpb25zLlxuXHRcdHRoaXMuYWN0b3Iuc3R5bGUgPSBcIm1pbi1oZWlnaHQ6IFwiICsgbmF0dXJhbEhlaWdodC50b1N0cmluZygpICsgXCJweDtcIjtcblx0XHR0aGlzLmhvdXJseVRvZ2dsZWQgPSB0cnVlO1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRpZiAoZ2xvYmFsLnNldHRpbmdzLmdldF9ib29sZWFuKFwiZGVza3RvcC1lZmZlY3RzLW9uLW1lbnVzXCIpKSB7XG5cdFx0XHRcdHRoaXMuYWN0b3IuaGVpZ2h0ID0gMDtcblx0XHRcdFx0YWRkVHdlZW4odGhpcy5hY3Rvcixcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRoZWlnaHQ6IG5hdHVyYWxIZWlnaHQsXG5cdFx0XHRcdFx0XHR0aW1lOiAwLjI1LFxuXHRcdFx0XHRcdFx0b25VcGRhdGU6ICgpID0+IHsgfSxcblx0XHRcdFx0XHRcdG9uQ29tcGxldGU6ICgpID0+IHtcblx0XHRcdFx0XHRcdFx0dGhpcy5hY3Rvci5zZXRfaGVpZ2h0KG5hdHVyYWxIZWlnaHQpO1xuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8gV2UgbXVzdCBzZXQgbmF0dXJhbEhlaWdodCBoZXJlIGFzIHdlbGwgYmVjYXVzZSBpbnRlZ2VyXG5cdFx0XHRcdC8vIHNjYWxpbmcgZG9lc24ndCB3b3JrIHByb3Blcmx5LlxuXHRcdFx0XHR0aGlzLmFjdG9yLnNldF9oZWlnaHQobmF0dXJhbEhlaWdodCk7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBIaWRlKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGxldCBoc2Nyb2xsID0gdGhpcy5hY3Rvci5nZXRfaHNjcm9sbF9iYXIoKTtcblx0XHR0aGlzLmhvdXJseVRvZ2dsZWQgPSBmYWxzZTtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0aWYgKGdsb2JhbC5zZXR0aW5ncy5nZXRfYm9vbGVhbihcImRlc2t0b3AtZWZmZWN0cy1vbi1tZW51c1wiKSkge1xuXHRcdFx0XHQvLyBUT0RPOiBlbGltaW5hdGUgQ2x1dHRlciBXYXJuaW5ncyBvbiBjb2xsYXBzZSBpbiBsb2dzXG5cdFx0XHRcdGFkZFR3ZWVuKHRoaXMuYWN0b3IsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aGVpZ2h0OiAwLFxuXHRcdFx0XHRcdFx0dGltZTogMC4yNSxcblx0XHRcdFx0XHRcdG9uVXBkYXRlOiAoKSA9PiB7IH0sXG5cdFx0XHRcdFx0XHRvbkNvbXBsZXRlOiAoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuYWN0b3Iuc2V0X2hlaWdodCgtMSk7XG5cdFx0XHRcdFx0XHRcdC8vIFdlIG11c3QgdW5zZXQgbWluLWhlaWdodCBzdHlsZSBlbHNlXG5cdFx0XHRcdFx0XHRcdC8vIHdlIGdldCBpc3N1ZXMgd2l0aCBpbnRlZ2VyIHNjYWxpbmdcblx0XHRcdFx0XHRcdFx0Ly8gd2hlbiB3ZSByZXF1ZXN0IHByZWZlcnJlZCBoZWlnaHQgYWdhaW5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlIElzc3VlIDogaHR0cHM6Ly9naXRodWIuY29tL2xpbnV4bWludC9jaW5uYW1vbi1zcGljZXMtYXBwbGV0cy9pc3N1ZXMvMzc4N1xuXHRcdFx0XHRcdFx0XHR0aGlzLmFjdG9yLnN0eWxlID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0dGhpcy5hY3Rvci5oaWRlKCk7XG5cdFx0XHRcdFx0XHRcdC8vIFNjcm9sbCBiYWNrIHRvIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRoc2Nyb2xsLmdldF9hZGp1c3RtZW50KCkuc2V0X3ZhbHVlKDApO1xuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHRoaXMuYWN0b3Iuc3R5bGUgPSBudWxsO1xuXHRcdFx0XHR0aGlzLmFjdG9yLnNldF9oZWlnaHQoLTEpO1xuXHRcdFx0XHR0aGlzLmFjdG9yLmhpZGUoKTtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0LyoqIFNldHMgdGhlIGNvcnJlY3Qgd2lkdGggZm9yIHRoZSBob3VybHkgYm94ZXMsIG1ha2Vcblx0ICogc3VyZSB0byBjYWxsIHRoaXMgd2huIHRoZSBob3VybHkgc2Nyb2xsdmlldyBpcyBzaG93blxuXHQgKi9cblx0cHJpdmF0ZSBBZGp1c3RIb3VybHlCb3hJdGVtV2lkdGgoKTogdm9pZCB7XG5cdFx0bGV0IHJlcXVpcmVkV2lkdGggPSB0aGlzLkdldEhvdXJseUJveEl0ZW1XaWR0aCgpO1xuXG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaG91cmx5Q29udGFpbmVycy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdGNvbnN0IGVsZW1lbnQgPSB0aGlzLmhvdXJseUNvbnRhaW5lcnNbaW5kZXhdO1xuXHRcdFx0ZWxlbWVudC5zZXRfd2lkdGgocmVxdWlyZWRXaWR0aCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgaW5jb3JyZWN0IHdpZHRoIHRoZSBmaXJzdCB0aW1lLCBtYWtlIHN1cmUgdG8gY2FsbCB0aGlzIGFmdGVyIGEgc2hvdy9oaWRlIGl0ZXJhdGlvbi5cblx0ICovXG5cdHByaXZhdGUgR2V0SG91cmx5Qm94SXRlbVdpZHRoKCk6IG51bWJlciB7XG5cdFx0bGV0IHJlcXVpcmVkV2lkdGggPSAwO1xuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmhvdXJseUNvbnRhaW5lcnMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRjb25zdCB1aSA9IHRoaXMuaG91cmx5Rm9yZWNhc3RzW2luZGV4XTtcblx0XHRcdGxldCBob3VyV2lkdGggPSB1aS5Ib3VyLmdldF9wcmVmZXJyZWRfd2lkdGgoLTEpWzFdO1xuXHRcdFx0bGV0IGljb25XaWR0aCA9IHVpLkljb24uZ2V0X3ByZWZlcnJlZF93aWR0aCgtMSlbMV07XG5cdFx0XHRsZXQgc3VtbWFyeVdpZHRoID0gdWkuU3VtbWFyeS5nZXRfcHJlZmVycmVkX3dpZHRoKC0xKVsxXTtcblx0XHRcdGxldCB0ZW1wZXJhdHVyZVdpZHRoID0gdWkuVGVtcGVyYXR1cmUuZ2V0X3ByZWZlcnJlZF93aWR0aCgtMSlbMV07XG5cdFx0XHRsZXQgcHJlY2lwaXRhdGlvbldpZHRoID0gdWkuUHJlY2lwaXRhdGlvbi5nZXRfcHJlZmVycmVkX3dpZHRoKC0xKVsxXTtcblxuXHRcdFx0Ly8gSWYgdGV4dCBpcyBiaWdnZXIgdGhhbiBpY29uIHdlIGFkZCBzb21lIGFydGlmaWNpYWwgcGFkZGluZ1xuXHRcdFx0Ly8gc28gdGV4dCBkb2Vzbid0IGxvb2sgdG9vIGNsb3NlXG5cdFx0XHRpZiAocHJlY2lwaXRhdGlvbldpZHRoID4gaWNvbldpZHRoIHx8IHN1bW1hcnlXaWR0aCA+IGljb25XaWR0aCkge1xuXHRcdFx0XHRpZiAocHJlY2lwaXRhdGlvbldpZHRoID4gc3VtbWFyeVdpZHRoKVxuXHRcdFx0XHRcdHByZWNpcGl0YXRpb25XaWR0aCArPSAxMDtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHN1bW1hcnlXaWR0aCArPSAxMDtcblx0XHRcdH1cblx0XHRcdGlmIChyZXF1aXJlZFdpZHRoIDwgaG91cldpZHRoKSByZXF1aXJlZFdpZHRoID0gaG91cldpZHRoO1xuXHRcdFx0aWYgKHJlcXVpcmVkV2lkdGggPCBpY29uV2lkdGgpIHJlcXVpcmVkV2lkdGggPSBpY29uV2lkdGg7XG5cdFx0XHRpZiAocmVxdWlyZWRXaWR0aCA8IHN1bW1hcnlXaWR0aCkgcmVxdWlyZWRXaWR0aCA9IHN1bW1hcnlXaWR0aDtcblx0XHRcdGlmIChyZXF1aXJlZFdpZHRoIDwgdGVtcGVyYXR1cmVXaWR0aCkgcmVxdWlyZWRXaWR0aCA9IHRlbXBlcmF0dXJlV2lkdGg7XG5cdFx0XHRpZiAocmVxdWlyZWRXaWR0aCA8IHByZWNpcGl0YXRpb25XaWR0aCkgcmVxdWlyZWRXaWR0aCA9IHByZWNpcGl0YXRpb25XaWR0aDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVpcmVkV2lkdGg7XG5cdH1cblxuXHRwdWJsaWMgRGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLmNvbnRhaW5lci5kZXN0cm95X2FsbF9jaGlsZHJlbigpO1xuXHR9XG5cblx0cHVibGljIFJlYnVpbGQoY29uZmlnOiBDb25maWcsIHRleHRDb2xvclN0eWxlOiBzdHJpbmcpIHtcblx0XHR0aGlzLkRlc3Ryb3koKTtcblx0XHRsZXQgaG91cnMgPSB0aGlzLmFwcC5HZXRNYXhIb3VybHlGb3JlY2FzdHMoKTtcblx0XHR0aGlzLmhvdXJseUZvcmVjYXN0cyA9IFtdO1xuXHRcdHRoaXMuaG91cmx5Q29udGFpbmVycyA9IFtdO1xuXG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGhvdXJzOyBpbmRleCsrKSB7XG5cdFx0XHRsZXQgYm94ID0gbmV3IEJveExheW91dCh7IHZlcnRpY2FsOiB0cnVlLCBzdHlsZV9jbGFzczogXCJob3VybHktYm94LWl0ZW1cIiB9KTtcblx0XHRcdHRoaXMuaG91cmx5Q29udGFpbmVycy5wdXNoKGJveCk7XG5cblx0XHRcdHRoaXMuaG91cmx5Rm9yZWNhc3RzLnB1c2goe1xuXHRcdFx0XHQvLyBPdmVycmlkZSBjb2xvciBvbiBsaWdodCB0aGVtZSBmb3IgZ3JleSB0ZXh0XG5cdFx0XHRcdEhvdXI6IG5ldyBMYWJlbCh7IHRleHQ6IFwiSG91clwiLCBzdHlsZV9jbGFzczogXCJob3VybHktdGltZVwiLCBzdHlsZTogdGV4dENvbG9yU3R5bGUgfSksXG5cdFx0XHRcdEljb246IG5ldyBJY29uKHtcblx0XHRcdFx0XHRpY29uX3R5cGU6IGNvbmZpZy5JY29uVHlwZSxcblx0XHRcdFx0XHRpY29uX3NpemU6IDI0LFxuXHRcdFx0XHRcdGljb25fbmFtZTogQVBQTEVUX0lDT04sXG5cdFx0XHRcdFx0c3R5bGVfY2xhc3M6IFwiaG91cmx5LWljb25cIlxuXHRcdFx0XHR9KSxcblx0XHRcdFx0UHJlY2lwaXRhdGlvbjogbmV3IExhYmVsKHsgdGV4dDogXCIgXCIsIHN0eWxlX2NsYXNzOiBcImhvdXJseS1kYXRhXCIgfSksXG5cdFx0XHRcdFN1bW1hcnk6IG5ldyBMYWJlbCh7IHRleHQ6IF8oRUxMSVBTSVMpLCBzdHlsZV9jbGFzczogXCJob3VybHktZGF0YVwiIH0pLFxuXHRcdFx0XHRUZW1wZXJhdHVyZTogbmV3IExhYmVsKHsgdGV4dDogXyhFTExJUFNJUyksIHN0eWxlX2NsYXNzOiBcImhvdXJseS1kYXRhXCIgfSlcblx0XHRcdH0pXG5cblx0XHRcdHRoaXMuaG91cmx5Rm9yZWNhc3RzW2luZGV4XS5TdW1tYXJ5LmNsdXR0ZXJfdGV4dC5zZXRfbGluZV93cmFwKHRydWUpO1xuXHRcdFx0Ym94LmFkZF9jaGlsZCh0aGlzLmhvdXJseUZvcmVjYXN0c1tpbmRleF0uSG91cik7XG5cdFx0XHRib3guYWRkX2NoaWxkKHRoaXMuaG91cmx5Rm9yZWNhc3RzW2luZGV4XS5JY29uKTtcblx0XHRcdGJveC5hZGRfY2hpbGQodGhpcy5ob3VybHlGb3JlY2FzdHNbaW5kZXhdLlN1bW1hcnkpO1xuXHRcdFx0Ym94LmFkZF9jaGlsZCh0aGlzLmhvdXJseUZvcmVjYXN0c1tpbmRleF0uVGVtcGVyYXR1cmUpO1xuXHRcdFx0Ym94LmFkZF9jaGlsZCh0aGlzLmhvdXJseUZvcmVjYXN0c1tpbmRleF0uUHJlY2lwaXRhdGlvbik7XG5cblx0XHRcdHRoaXMuY29udGFpbmVyLmFkZChib3gsIHtcblx0XHRcdFx0eF9maWxsOiB0cnVlLFxuXHRcdFx0XHR4X2FsaWduOiBBbGlnbi5NSURETEUsXG5cdFx0XHRcdHlfYWxpZ246IEFsaWduLk1JRERMRSxcblx0XHRcdFx0eV9maWxsOiB0cnVlLFxuXHRcdFx0XHRleHBhbmQ6IHRydWVcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIERpc3BsYXlVdGlsc1xuXG5cdC8qKlxuXHQgKiBcblx0ICogQHBhcmFtIHByZWNpcCBcblx0ICogQHJldHVybnMgQWx3YXlzIHJldHVybnMgdGV4dCBcblx0ICovXG5cdHByaXZhdGUgR2VuZXJhdGVQcmVjaXBpdGF0aW9uVGV4dChwcmVjaXA6IFByZWNpcGl0YXRpb24sIGNvbmZpZzogQ29uZmlnKTogc3RyaW5nIHtcblx0XHRpZiAoIXByZWNpcCkgcmV0dXJuIFwiXCI7XG5cblx0XHRsZXQgcHJlY2lwaXRhdGlvblRleHQgPSBcIlwiO1xuXHRcdGlmICghIXByZWNpcC52b2x1bWUgJiYgcHJlY2lwLnZvbHVtZSA+IDApIHtcblx0XHRcdHByZWNpcGl0YXRpb25UZXh0ID0gTWlsbGltZXRlclRvVXNlclVuaXRzKHByZWNpcC52b2x1bWUsIGNvbmZpZy5EaXN0YW5jZVVuaXQpICsgXCIgXCIgKyAoKGNvbmZpZy5EaXN0YW5jZVVuaXQgPT0gXCJtZXRyaWNcIikgPyBfKFwibW1cIikgOiBfKFwiaW5cIikpO1xuXHRcdH1cblx0XHRpZiAoISFwcmVjaXAuY2hhbmNlKSB7XG5cdFx0XHRwcmVjaXBpdGF0aW9uVGV4dCA9IChOb3RFbXB0eShwcmVjaXBpdGF0aW9uVGV4dCkpID8gKHByZWNpcGl0YXRpb25UZXh0ICsgXCIsIFwiKSA6IFwiXCI7XG5cdFx0XHRwcmVjaXBpdGF0aW9uVGV4dCArPSAoTWF0aC5yb3VuZChwcmVjaXAuY2hhbmNlKS50b1N0cmluZygpICsgXCIlXCIpXG5cdFx0fVxuXHRcdHJldHVybiBwcmVjaXBpdGF0aW9uVGV4dDtcblx0fVxuXG5cdC8qKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGRlYnVnZ2luZywgY3VycmVudGx5IG5vdCB1c2VkICovXG5cdHByaXZhdGUgR2V0U2Nyb2xsVmlld0hlaWdodCgpOiBudW1iZXIge1xuXHRcdGxldCBib3hJdGVtSGVpZ2h0ID0gMDtcblx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5ob3VybHlDb250YWluZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgdWkgPSB0aGlzLmhvdXJseUZvcmVjYXN0c1tpbmRleF07XG5cblx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkhlaWdodCByZXF1ZXN0cyBvZiBIb3VybHkgYm94IEl0ZW1zOiBcIiArIGluZGV4KTtcblx0XHRcdGxldCBob3VySGVpZ2h0ID0gdWkuSG91ci5nZXRfcHJlZmVycmVkX2hlaWdodCgtMSlbMV07XG5cdFx0XHRsZXQgaWNvbkhlaWdodCA9IHVpLkljb24uZ2V0X3ByZWZlcnJlZF9oZWlnaHQoLTEpWzFdO1xuXHRcdFx0bGV0IHN1bW1hcnlIZWlnaHQgPSB1aS5TdW1tYXJ5LmdldF9wcmVmZXJyZWRfaGVpZ2h0KC0xKVsxXTtcblx0XHRcdGxldCB0ZW1wZXJhdHVyZUhlaWdodCA9IHVpLlRlbXBlcmF0dXJlLmdldF9wcmVmZXJyZWRfaGVpZ2h0KC0xKVsxXTtcblx0XHRcdGxldCBwcmVjaXBpdGF0aW9uSGVpZ2h0ID0gdWkuUHJlY2lwaXRhdGlvbi5nZXRfcHJlZmVycmVkX2hlaWdodCgtMSlbMV07XG5cdFx0XHRsZXQgaXRlbUhlaWdodCA9IGhvdXJIZWlnaHQgKyBpY29uSGVpZ2h0ICsgc3VtbWFyeUhlaWdodCArIHRlbXBlcmF0dXJlSGVpZ2h0ICsgcHJlY2lwaXRhdGlvbkhlaWdodDtcblx0XHRcdGlmIChib3hJdGVtSGVpZ2h0IDwgaXRlbUhlaWdodCkgYm94SXRlbUhlaWdodCA9IGl0ZW1IZWlnaHQ7XG5cdFx0fVxuXHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkZpbmFsIEhvdXJseSBib3ggaXRlbSBoZWlnaHQgaXM6IFwiICsgYm94SXRlbUhlaWdodClcblx0XHRsZXQgc2Nyb2xsQmFySGVpZ2h0ID0gdGhpcy5hY3Rvci5nZXRfaHNjcm9sbF9iYXIoKS5nZXRfcHJlZmVycmVkX3dpZHRoKC0xKVsxXTtcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJTY3JvbGxiYXIgaGVpZ2h0IGlzIFwiICsgc2Nyb2xsQmFySGVpZ2h0KTtcblx0XHRsZXQgdGhlbWUgPSB0aGlzLmNvbnRhaW5lci5nZXRfdGhlbWVfbm9kZSgpO1xuXHRcdGxldCBzdHlsaW5nID0gdGhlbWUuZ2V0X21hcmdpbihTaWRlLlRPUCkgKyB0aGVtZS5nZXRfbWFyZ2luKFNpZGUuQk9UVE9NKSArIHRoZW1lLmdldF9wYWRkaW5nKFNpZGUuVE9QKSArIHRoZW1lLmdldF9wYWRkaW5nKFNpZGUuQk9UVE9NKTtcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJTY29sbGJhckJveCB2ZXJ0aWNhbCBwYWRkaW5nIGFuZCBtYXJnaW4gaXM6IFwiICsgc3R5bGluZyk7XG5cblx0XHRyZXR1cm4gKGJveEl0ZW1IZWlnaHQgKyBzY3JvbGxCYXJIZWlnaHQgKyBzdHlsaW5nKTtcblx0fVxufVxuXG5pbnRlcmZhY2UgSG91cmx5Rm9yZWNhc3RVSSB7XG5cdEljb246IGltcG9ydHMuZ2kuU3QuSWNvbixcblx0SG91cjogaW1wb3J0cy5naS5TdC5MYWJlbCxcblx0U3VtbWFyeTogaW1wb3J0cy5naS5TdC5MYWJlbCxcblx0VGVtcGVyYXR1cmU6IGltcG9ydHMuZ2kuU3QuTGFiZWwsXG5cdFByZWNpcGl0YXRpb246IGltcG9ydHMuZ2kuU3QuTGFiZWxcbn0iLCJpbXBvcnQgeyBPcGVuVXJsIH0gZnJvbSBcIi4uL2xpYi9jb21tYW5kUnVubmVyXCI7XG5pbXBvcnQgeyBDb25maWcsIERpc3RhbmNlVW5pdHMgfSBmcm9tIFwiLi4vY29uZmlnXCI7XG5pbXBvcnQgeyBTSUdOQUxfQ0xJQ0tFRCwgRUxMSVBTSVMgfSBmcm9tIFwiLi4vY29uc3RzXCI7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gXCIuLi9saWIvZXZlbnRzXCI7XG5pbXBvcnQgeyBXZWF0aGVyQXBwbGV0IH0gZnJvbSBcIi4uL21haW5cIjtcbmltcG9ydCB7IEN1c3RvbUljb25zLCBXZWF0aGVyRGF0YSwgV2VhdGhlclByb3ZpZGVyIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBfLCBBd2FyZURhdGVTdHJpbmcsIE1ldHJlVG9Vc2VyVW5pdHMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IFdlYXRoZXJCdXR0b24gfSBmcm9tIFwiLi4vdWlfZWxlbWVudHMvd2VhdGhlcmJ1dHRvblwiO1xuXG5jb25zdCB7IEJveExheW91dCwgSWNvblR5cGUsIExhYmVsLCBJY29uLCBBbGlnbiwgfSA9IGltcG9ydHMuZ2kuU3Q7XG5cbmNvbnN0IFNUWUxFX0JBUiA9ICdib3R0b21iYXInXG5cbi8qKiBCb3R0b20gYmFyIHdpdGggdGltZXN0YW1wLCBidXR0b24gYW5kIGNyZWRpdHMgKi9cbmV4cG9ydCBjbGFzcyBVSUJhciB7XG5cdHByaXZhdGUgYWN0b3I6IGltcG9ydHMuZ2kuU3QuQm94TGF5b3V0O1xuXHRwdWJsaWMgZ2V0IEFjdG9yKCkge1xuXHRcdHJldHVybiB0aGlzLmFjdG9yO1xuXHR9XG5cblx0cHVibGljIFRvZ2dsZUNsaWNrZWQ6IEV2ZW50PFVJQmFyLCBib29sZWFuPiA9IG5ldyBFdmVudCgpO1xuXG5cdHByaXZhdGUgcHJvdmlkZXJDcmVkaXRCdXR0b246IFdlYXRoZXJCdXR0b24gPSBudWxsO1xuXHRwcml2YXRlIGhvdXJseUJ1dHRvbjogV2VhdGhlckJ1dHRvbiA9IG51bGw7XG5cdHByaXZhdGUgX3RpbWVzdGFtcDogaW1wb3J0cy5naS5TdC5MYWJlbCA9IG51bGw7XG5cblx0cHJpdmF0ZSBhcHA6IFdlYXRoZXJBcHBsZXQ7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBXZWF0aGVyQXBwbGV0KSB7XG5cdFx0dGhpcy5hcHAgPSBhcHA7XG5cdFx0dGhpcy5hY3RvciA9IG5ldyBCb3hMYXlvdXQoeyB2ZXJ0aWNhbDogZmFsc2UsIHN0eWxlX2NsYXNzOiBTVFlMRV9CQVIgfSk7XG5cdH1cblxuXHRwdWJsaWMgU3dpdGNoQnV0dG9uVG9TaG93KCkge1xuXHRcdGlmICghIXRoaXMuaG91cmx5QnV0dG9uPy5hY3Rvci5jaGlsZCkgKHRoaXMuaG91cmx5QnV0dG9uLmFjdG9yLmNoaWxkIGFzIGltcG9ydHMuZ2kuU3QuSWNvbikuaWNvbl9uYW1lID0gXCJjdXN0b20tZG93bi1hcnJvdy1zeW1ib2xpY1wiO1xuXHR9XG5cblx0cHVibGljIFN3aXRjaEJ1dHRvblRvSGlkZSgpIHtcblx0XHRpZiAoISF0aGlzLmhvdXJseUJ1dHRvbj8uYWN0b3IuY2hpbGQpICh0aGlzLmhvdXJseUJ1dHRvbi5hY3Rvci5jaGlsZCBhcyBpbXBvcnRzLmdpLlN0Lkljb24pLmljb25fbmFtZSA9IFwiY3VzdG9tLXVwLWFycm93LXN5bWJvbGljXCI7XG5cdH1cblxuXHRwdWJsaWMgRGlzcGxheUVycm9yTWVzc2FnZShtc2c6IHN0cmluZykge1xuXHRcdHRoaXMuX3RpbWVzdGFtcC50ZXh0ID0gbXNnO1xuXHR9XG5cblx0cHVibGljIERpc3BsYXkod2VhdGhlcjogV2VhdGhlckRhdGEsIHByb3ZpZGVyOiBXZWF0aGVyUHJvdmlkZXIsIGNvbmZpZzogQ29uZmlnLCBzaG91bGRTaG93VG9nZ2xlOiBib29sZWFuKTogYm9vbGVhbiB7XG5cdFx0dGhpcy5wcm92aWRlckNyZWRpdEJ1dHRvbi5hY3Rvci5sYWJlbCA9IF8oXCJQb3dlcmVkIGJ5XCIpICsgXCIgXCIgKyBwcm92aWRlci5wcmV0dHlOYW1lO1xuXHRcdHRoaXMucHJvdmlkZXJDcmVkaXRCdXR0b24udXJsID0gcHJvdmlkZXIud2Vic2l0ZTtcblx0XHRsZXQgbGFzdFVwZGF0ZWRUaW1lID0gQXdhcmVEYXRlU3RyaW5nKHdlYXRoZXIuZGF0ZSwgY29uZmlnLmN1cnJlbnRMb2NhbGUsIGNvbmZpZy5fc2hvdzI0SG91cnMpO1xuXHRcdHRoaXMuX3RpbWVzdGFtcC50ZXh0ID0gXyhcIkFzIG9mIHtsYXN0VXBkYXRlZFRpbWV9XCIsIHsgXCJsYXN0VXBkYXRlZFRpbWVcIjogbGFzdFVwZGF0ZWRUaW1lIH0pO1xuXG5cdFx0aWYgKHdlYXRoZXIubG9jYXRpb24uZGlzdGFuY2VGcm9tICE9IG51bGwpIHtcblx0XHRcdGxldCBzdHJpbmdGb3JtYXQgPSB7XG5cdFx0XHRcdGRpc3RhbmNlOiBNZXRyZVRvVXNlclVuaXRzKHdlYXRoZXIubG9jYXRpb24uZGlzdGFuY2VGcm9tLCBjb25maWcuRGlzdGFuY2VVbml0KS50b1N0cmluZygpLFxuXHRcdFx0XHRkaXN0YW5jZVVuaXQ6IHRoaXMuQmlnRGlzdGFuY2VVbml0Rm9yKGNvbmZpZy5EaXN0YW5jZVVuaXQpXG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90aW1lc3RhbXAudGV4dCArPSBgLCAke18oXCJ7ZGlzdGFuY2V9e2Rpc3RhbmNlVW5pdH0gZnJvbSB5b3VcIiwgc3RyaW5nRm9ybWF0KX1gO1xuXHRcdH1cblxuXHRcdGlmICghc2hvdWxkU2hvd1RvZ2dsZSlcblx0XHRcdHRoaXMuSGlkZUhvdXJseVRvZ2dsZSgpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cHVibGljIERlc3Ryb3koKTogdm9pZCB7XG5cdFx0dGhpcy5hY3Rvci5kZXN0cm95X2FsbF9jaGlsZHJlbigpO1xuXHR9XG5cblx0cHVibGljIFJlYnVpbGQoY29uZmlnOiBDb25maWcpIHtcblx0XHR0aGlzLkRlc3Ryb3koKTtcblx0XHR0aGlzLl90aW1lc3RhbXAgPSBuZXcgTGFiZWwoeyB0ZXh0OiBcIlBsYWNlaG9sZGVyXCIgfSk7XG5cdFx0dGhpcy5hY3Rvci5hZGQodGhpcy5fdGltZXN0YW1wLCB7XG5cdFx0XHR4X2ZpbGw6IGZhbHNlLFxuXHRcdFx0eF9hbGlnbjogQWxpZ24uU1RBUlQsXG5cdFx0XHR5X2FsaWduOiBBbGlnbi5NSURETEUsXG5cdFx0XHR5X2ZpbGw6IGZhbHNlLFxuXHRcdFx0ZXhwYW5kOiB0cnVlXG5cdFx0fSlcblxuXHRcdHRoaXMuaG91cmx5QnV0dG9uID0gbmV3IFdlYXRoZXJCdXR0b24oe1xuXHRcdFx0cmVhY3RpdmU6IHRydWUsXG5cdFx0XHRjYW5fZm9jdXM6IHRydWUsXG5cdFx0XHRjaGlsZDogbmV3IEljb24oe1xuXHRcdFx0XHRpY29uX3R5cGU6IEljb25UeXBlLlNZTUJPTElDLFxuXHRcdFx0XHQvLyBhbHdheXMgd2FudCBpdCBhIGJpdCBiaWdnZXIgZHVlIHRvIHRoZSBpY29ucydzIGhvcml6b250YWwgbmF0dXJlXG5cdFx0XHRcdGljb25fc2l6ZTogY29uZmlnLkN1cnJlbnRGb250U2l6ZSArIDMsXG5cdFx0XHRcdGljb25fbmFtZTogXCJjdXN0b20tZG93bi1hcnJvdy1zeW1ib2xpY1wiIGFzIEN1c3RvbUljb25zLFxuXHRcdFx0XHRzdHlsZTogXCJtYXJnaW46IDJweCA1cHg7XCJcblx0XHRcdH0pLFxuXHRcdH0pO1xuXHRcdHRoaXMuaG91cmx5QnV0dG9uLmFjdG9yLmNvbm5lY3QoU0lHTkFMX0NMSUNLRUQsICgpID0+IHRoaXMuVG9nZ2xlQ2xpY2tlZC5JbnZva2UodGhpcywgdHJ1ZSkpO1xuXHRcdHRoaXMuYWN0b3IuYWRkKHRoaXMuaG91cmx5QnV0dG9uLmFjdG9yLCB7XG5cdFx0XHR4X2ZpbGw6IGZhbHNlLFxuXHRcdFx0eF9hbGlnbjogQWxpZ24uTUlERExFLFxuXHRcdFx0eV9hbGlnbjogQWxpZ24uTUlERExFLFxuXHRcdFx0eV9maWxsOiBmYWxzZSxcblx0XHRcdGV4cGFuZDogdHJ1ZVxuXHRcdH0pXG5cblx0XHQvLyBIaWRlIGlmIEhvdXJseSBmb3JlY2FzdHMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAodGhpcy5hcHAuR2V0TWF4SG91cmx5Rm9yZWNhc3RzKCkgPD0gMCkge1xuXHRcdFx0dGhpcy5IaWRlSG91cmx5VG9nZ2xlKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5wcm92aWRlckNyZWRpdEJ1dHRvbiA9IG5ldyBXZWF0aGVyQnV0dG9uKHsgbGFiZWw6IF8oRUxMSVBTSVMpLCByZWFjdGl2ZTogdHJ1ZSB9KTtcblx0XHR0aGlzLnByb3ZpZGVyQ3JlZGl0QnV0dG9uLmFjdG9yLmNvbm5lY3QoU0lHTkFMX0NMSUNLRUQsICgpID0+IE9wZW5VcmwodGhpcy5wcm92aWRlckNyZWRpdEJ1dHRvbikpO1xuXG5cdFx0dGhpcy5hY3Rvci5hZGQodGhpcy5wcm92aWRlckNyZWRpdEJ1dHRvbi5hY3Rvciwge1xuXHRcdFx0eF9maWxsOiBmYWxzZSxcblx0XHRcdHhfYWxpZ246IEFsaWduLkVORCxcblx0XHRcdHlfYWxpZ246IEFsaWduLk1JRERMRSxcblx0XHRcdHlfZmlsbDogZmFsc2UsXG5cdFx0XHRleHBhbmQ6IHRydWVcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBcblx0ICogQHBhcmFtIHVuaXQgXG5cdCAqIEByZXR1cm4ga20gb3IgbWksIGJhc2VkIG9uIHVuaXRcblx0ICovXG5cdHByaXZhdGUgQmlnRGlzdGFuY2VVbml0Rm9yKHVuaXQ6IERpc3RhbmNlVW5pdHMpIHtcblx0XHRpZiAodW5pdCA9PSBcImltcGVyaWFsXCIpIHJldHVybiBfKFwibWlcIik7XG5cdFx0cmV0dXJuIF8oXCJrbVwiKTtcblx0fVxuXG5cdHByaXZhdGUgSGlkZUhvdXJseVRvZ2dsZSgpIHtcblx0XHRpZiAodGhpcy5ob3VybHlCdXR0b24gIT0gbnVsbClcblx0XHRcdHRoaXMuaG91cmx5QnV0dG9uLmFjdG9yLmNoaWxkID0gbnVsbDtcblx0fVxuXG59IiwiY29uc3QgeyBQb3B1cFNlcGFyYXRvck1lbnVJdGVtIH0gPSBpbXBvcnRzLnVpLnBvcHVwTWVudTtcblxuZXhwb3J0IGNsYXNzIFVJU2VwYXJhdG9yIHtcblx0cHVibGljIGFjdG9yOiBpbXBvcnRzLnVpLnBvcHVwTWVudS5Qb3B1cFNlcGFyYXRvck1lbnVJdGVtO1xuXG5cdHB1YmxpYyBnZXQgQWN0b3IoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWN0b3IuYWN0b3I7XG5cdH1cblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmFjdG9yID0gbmV3IFBvcHVwU2VwYXJhdG9yTWVudUl0ZW0oKTtcblx0XHQvLyByZW1vdmluZyBzdHlsaW5nIHRvIG1ha2UgdGhlbSBzcGFuIGZ1bGwgd2lkdGhcblx0XHR0aGlzLmFjdG9yLmFjdG9yLnJlbW92ZV9zdHlsZV9jbGFzc19uYW1lKFwicG9wdXAtbWVudS1pdGVtXCIpO1xuXHR9XG5cblx0cHVibGljIFNob3coKSB7XG5cdFx0dGhpcy5hY3Rvci5hY3Rvci5zaG93KCk7XG5cdH1cblxuXHRwdWJsaWMgSGlkZSgpIHtcblx0XHR0aGlzLmFjdG9yLmFjdG9yLmhpZGUoKTtcblx0fVxufSIsImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuaW1wb3J0IHsgQ3VycmVudFdlYXRoZXIgYXMgVUlDdXJyZW50V2VhdGhlciB9IGZyb20gXCIuL3VpX2VsZW1lbnRzL3VpQ3VycmVudFdlYXRoZXJcIjtcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuL2xpYi9sb2dnZXJcIjtcbmltcG9ydCB7IFdlYXRoZXJBcHBsZXQgfSBmcm9tIFwiLi9tYWluXCI7XG5pbXBvcnQgeyBFcnJvclNldmVyaXR5LCBXZWF0aGVyRGF0YSwgV2VhdGhlclByb3ZpZGVyIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IFNoYWRlSGV4Q29sb3IsIGRlbGF5LCBfIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IFVJRm9yZWNhc3RzIH0gZnJvbSBcIi4vdWlfZWxlbWVudHMvdWlGb3JlY2FzdHNcIjtcbmltcG9ydCB7IFVJSG91cmx5Rm9yZWNhc3RzIH0gZnJvbSBcIi4vdWlfZWxlbWVudHMvdWlIb3VybHlGb3JlY2FzdHNcIjtcbmltcG9ydCB7IFVJQmFyIH0gZnJvbSBcIi4vdWlfZWxlbWVudHMvdWlCYXJcIjtcbmltcG9ydCB7IFVJU2VwYXJhdG9yIH0gZnJvbSBcIi4vdWlfZWxlbWVudHMvdWlTZXBhcmF0b3JcIjtcbmltcG9ydCB7IFdlYXRoZXJCdXR0b24gfSBmcm9tIFwiLi91aV9lbGVtZW50cy93ZWF0aGVyYnV0dG9uXCI7XG5cbmNvbnN0IHsgUG9wdXBNZW51TWFuYWdlciB9ID0gaW1wb3J0cy51aS5wb3B1cE1lbnU7XG5jb25zdCB7IEJveExheW91dCwgSWNvblR5cGUsIExhYmVsIH0gPSBpbXBvcnRzLmdpLlN0O1xuY29uc3QgTGFuZzogdHlwZW9mIGltcG9ydHMubGFuZyA9IGltcG9ydHMubGFuZztcbmNvbnN0IHsgQXBwbGV0UG9wdXBNZW51IH0gPSBpbXBvcnRzLnVpLmFwcGxldDtcbmNvbnN0IHsgdGhlbWVNYW5hZ2VyIH0gPSBpbXBvcnRzLnVpLm1haW47XG5jb25zdCB7IFNpZ25hbE1hbmFnZXIgfSA9IGltcG9ydHMubWlzYy5zaWduYWxNYW5hZ2VyO1xuXG4vLyBzdHlsZXNoZWV0LmNzc1xuY29uc3QgU1RZTEVfV0VBVEhFUl9NRU5VID0gJ3dlYXRoZXItbWVudSdcblxuLyoqIFJvbGwtZG93biBQb3B1cCBNZW51ICovXG5leHBvcnQgY2xhc3MgVUkge1xuXHQvLyBTZXBhcmF0b3JzXG5cdHByaXZhdGUgRm9yZWNhc3RTZXBhcmF0b3I6IFVJU2VwYXJhdG9yO1xuXHRwcml2YXRlIEJhclNlcGFyYXRvcjogVUlTZXBhcmF0b3I7XG5cdHByaXZhdGUgSG91cmx5U2VwYXJhdG9yOiBVSVNlcGFyYXRvcjtcblxuXHRwcml2YXRlIEN1cnJlbnRXZWF0aGVyOiBVSUN1cnJlbnRXZWF0aGVyO1xuXHRwcml2YXRlIEZ1dHVyZVdlYXRoZXI6IFVJRm9yZWNhc3RzO1xuXHRwcml2YXRlIEhvdXJseVdlYXRoZXI6IFVJSG91cmx5Rm9yZWNhc3RzO1xuXHRwcml2YXRlIEJhcjogVUlCYXI7XG5cblx0Ly8gU3RhdGUgdmFyaWFibGVzXG5cdHByaXZhdGUgbGlnaHRUaGVtZTogYm9vbGVhbiA9IGZhbHNlO1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgQXBwOiBXZWF0aGVyQXBwbGV0O1xuXG5cdC8qKiBSb2xsIGRvd24gbWVudSBpdHNlbGYgKi9cblx0cHJpdmF0ZSByZWFkb25seSBtZW51OiBpbXBvcnRzLnVpLmFwcGxldC5BcHBsZXRQb3B1cE1lbnU7XG5cdHByaXZhdGUgcmVhZG9ubHkgbWVudU1hbmFnZXI6IGltcG9ydHMudWkucG9wdXBNZW51LlBvcHVwTWVudU1hbmFnZXI7XG5cdHByaXZhdGUgcmVhZG9ubHkgc2lnbmFsczogaW1wb3J0cy5taXNjLnNpZ25hbE1hbmFnZXIuU2lnbmFsTWFuYWdlcjtcblxuXHRwcml2YXRlIGxhc3REYXRlVG9nZ2xlZDogRGF0ZSA9IG51bGw7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBXZWF0aGVyQXBwbGV0LCBvcmllbnRhdGlvbjogaW1wb3J0cy5naS5TdC5TaWRlKSB7XG5cdFx0dGhpcy5BcHAgPSBhcHA7XG5cdFx0dGhpcy5tZW51TWFuYWdlciA9IG5ldyBQb3B1cE1lbnVNYW5hZ2VyKHRoaXMuQXBwKTtcblx0XHR0aGlzLm1lbnUgPSBuZXcgQXBwbGV0UG9wdXBNZW51KHRoaXMuQXBwLCBvcmllbnRhdGlvbik7XG5cdFx0Ly8gdGhpcy5tZW51LnNldEN1c3RvbVN0eWxlQ2xhc3MgYW5kIFxuXHRcdC8vdGhpcy5tZW51LmFjdG9yLmFkZF9zdHlsZV9jbGFzc19uYW1lKFNUWUxFX1dFQVRIRVJfTUVOVSk7XG5cdFx0Ly8gRG9lc24ndCBkbyBzaGl0LCBzZXR0aW5nIGNsYXNzIG9uIHRoZSBib3ggaW5zdGVhZC5cblx0XHR0aGlzLm1lbnUuYm94LmFkZF9zdHlsZV9jbGFzc19uYW1lKFNUWUxFX1dFQVRIRVJfTUVOVSk7XG5cdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiUG9wdXAgTWVudSBhcHBsaWVkIGNsYXNzZXMgYXJlOiBcIiArIHRoaXMubWVudS5ib3guZ2V0X3N0eWxlX2NsYXNzX25hbWUoKSk7XG5cdFx0dGhpcy5tZW51TWFuYWdlci5hZGRNZW51KHRoaXMubWVudSk7XG5cdFx0dGhpcy5tZW51TWFuYWdlci5fc2lnbmFscy5jb25uZWN0KHRoaXMubWVudSwgXCJvcGVuLXN0YXRlLWNoYW5nZWRcIiwgdGhpcy5Qb3B1cE1lbnVUb2dnbGVkLCB0aGlzKTtcblx0XHR0aGlzLnNpZ25hbHMgPSBuZXcgU2lnbmFsTWFuYWdlcigpO1xuXHRcdHRoaXMubGlnaHRUaGVtZSA9IHRoaXMuSXNMaWdodFRoZW1lKCk7XG5cdFx0dGhpcy5CdWlsZFBvcHVwTWVudSgpO1xuXHRcdC8vIFN1YnNjcmlwdGlvbnNcblx0XHR0aGlzLnNpZ25hbHMuY29ubmVjdCh0aGVtZU1hbmFnZXIsICd0aGVtZS1zZXQnLCB0aGlzLk9uVGhlbWVDaGFuZ2VkLCB0aGlzKTsgLy8gb24gdGhlbWUgY2hhbmdlXG5cdH1cblxuXHRwdWJsaWMgVG9nZ2xlKCk6IHZvaWQge1xuXHRcdHRoaXMubWVudS50b2dnbGUoKTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBUb2dnbGVIb3VybHlXZWF0aGVyKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGlmICh0aGlzLkhvdXJseVdlYXRoZXIuVG9nZ2xlZCkge1xuXHRcdFx0YXdhaXQgdGhpcy5IaWRlSG91cmx5V2VhdGhlcigpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGF3YWl0IHRoaXMuU2hvd0hvdXJseVdlYXRoZXIoKTtcblx0XHR9XG5cdH1cblxuXHQvKiogRnVsbHkgcmVidWlsZHMgVUkgKi9cblx0cHVibGljIFJlYnVpbGQoY29uZmlnOiBDb25maWcpOiB2b2lkIHtcblx0XHR0aGlzLlNob3dMb2FkaW5nVWkoKTtcblx0XHRsZXQgdGV4dENvbG9yU3R5bGUgPSB0aGlzLkdldFRleHRDb2xvclN0eWxlKCk7XG5cdFx0dGhpcy5DdXJyZW50V2VhdGhlci5SZWJ1aWxkKGNvbmZpZywgdGV4dENvbG9yU3R5bGUpO1xuXHRcdHRoaXMuSG91cmx5V2VhdGhlci5SZWJ1aWxkKGNvbmZpZywgdGV4dENvbG9yU3R5bGUpO1xuXHRcdHRoaXMuRnV0dXJlV2VhdGhlci5SZWJ1aWxkKGNvbmZpZywgdGV4dENvbG9yU3R5bGUpO1xuXHRcdHRoaXMuQmFyLlJlYnVpbGQoY29uZmlnKTtcblx0fVxuXG5cdC8qKiBDaGFuZ2VzIGFsbCBpY29uJ3MgdHlwZSB3aGF0IGFyZSBhZmZlY3RlZCBieVxuXHQgKiB0aGUgXCJ1c2Ugc3ltYm9saWMgaWNvbnNcIiBzZXR0aW5nXG5cdCAqL1xuXHRwdWJsaWMgVXBkYXRlSWNvblR5cGUoaWNvblR5cGU6IGltcG9ydHMuZ2kuU3QuSWNvblR5cGUpOiB2b2lkIHtcblx0XHRpZiAoaWNvblR5cGUgPT0gSWNvblR5cGUuRlVMTENPTE9SICYmIHRoaXMuQXBwLmNvbmZpZy5fdXNlQ3VzdG9tTWVudUljb25zKSByZXR1cm47XG5cdFx0dGhpcy5DdXJyZW50V2VhdGhlci5VcGRhdGVJY29uVHlwZShpY29uVHlwZSk7XG5cdFx0dGhpcy5GdXR1cmVXZWF0aGVyLlVwZGF0ZUljb25UeXBlKGljb25UeXBlKTtcblx0XHR0aGlzLkhvdXJseVdlYXRoZXIuVXBkYXRlSWNvblR5cGUoaWNvblR5cGUpO1xuXHR9XG5cblx0cHVibGljIERpc3BsYXlFcnJvck1lc3NhZ2UobXNnOiBzdHJpbmcsIGVycm9yVHlwZTogRXJyb3JTZXZlcml0eSkge1xuXHRcdHRoaXMuQmFyLkRpc3BsYXlFcnJvck1lc3NhZ2UobXNnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNwbGF5cyB3ZWF0aGVyIGluZm8gaW4gUG9wdXBcblx0ICogQHBhcmFtIHdlYXRoZXIgXG5cdCAqIEBwYXJhbSBjb25maWcgXG5cdCAqIEBwYXJhbSBwcm92aWRlciBcblx0ICovXG5cdHB1YmxpYyBEaXNwbGF5KHdlYXRoZXI6IFdlYXRoZXJEYXRhLCBjb25maWc6IENvbmZpZywgcHJvdmlkZXI6IFdlYXRoZXJQcm92aWRlcik6IGJvb2xlYW4ge1xuXHRcdHRoaXMuQ3VycmVudFdlYXRoZXIuRGlzcGxheSh3ZWF0aGVyLCBjb25maWcpO1xuXHRcdHRoaXMuRnV0dXJlV2VhdGhlci5EaXNwbGF5KHdlYXRoZXIsIGNvbmZpZyk7XG5cdFx0bGV0IHNob3VsZFNob3dUb2dnbGUgPSB0aGlzLkhvdXJseVdlYXRoZXIuRGlzcGxheSh3ZWF0aGVyLmhvdXJseUZvcmVjYXN0cywgY29uZmlnLCB3ZWF0aGVyLmxvY2F0aW9uLnRpbWVab25lKTtcblx0XHR0aGlzLkJhci5EaXNwbGF5KHdlYXRoZXIsIHByb3ZpZGVyLCBjb25maWcsIHNob3VsZFNob3dUb2dnbGUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gQ2FsbGJhY2tzXG5cblx0LyoqXG5cdCAqIFJlc2V0dGluZyBmbGFncyBmcm9tIEhvdXJseSBzY3JvbGx2aWV3IHdoZW4gdGhlbWUgY2hhbmdlZCB0byBcblx0ICogcHJldmVudCBpbmNvcnJlY3QgaGVpZ2h0IHJlcXVlc3RzLCByZWJ1aWxkIFxuXHQgKiB3aGVuIHN3aXRjaGluZyBiZXR3ZWVuIGxpZ2h0IGFuZCBkYXJrIHRoZW1lc1xuXHQgKiB0byByZWNvbG9yIHNvbWUgb2YgdGhlIHRleHRcblx0ICovXG5cdHByaXZhdGUgT25UaGVtZUNoYW5nZWQoKTogdm9pZCB7XG5cdFx0dGhpcy5IaWRlSG91cmx5V2VhdGhlcigpO1xuXHRcdGxldCBuZXdUaGVtZUlzTGlnaHQgPSB0aGlzLklzTGlnaHRUaGVtZSgpO1xuXHRcdC8vIFRoZW1lIGNoYW5nZWQgYmV0d2VlbiBsaWdodCBhbmQgZGFyayB0aGVtZVxuXHRcdGlmIChuZXdUaGVtZUlzTGlnaHQgIT0gdGhpcy5saWdodFRoZW1lKSB7XG5cdFx0XHR0aGlzLmxpZ2h0VGhlbWUgPSBuZXdUaGVtZUlzTGlnaHQ7XG5cdFx0fVxuXHRcdHRoaXMuQXBwLlJlZnJlc2hBbmRSZWJ1aWxkKCk7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIFBvcHVwTWVudVRvZ2dsZWQoY2FsbGVyOiBhbnksIGRhdGE6IGFueSkge1xuXHRcdC8vIGRhdGEgLSB0cnVlIGlzIG9wZW5lZCwgZmFsc2UgaXMgY2xvc2VkXG5cdFx0aWYgKGRhdGEgPT0gZmFsc2UpIHtcblx0XHRcdGF3YWl0IGRlbGF5KDEwMCk7IC8vIENsb3NpbmcgYWZ0ZXIgcG9wdXAgbWVudSBpcyBjbG9zZWQgXG5cdFx0XHR0aGlzLkhpZGVIb3VybHlXZWF0aGVyKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyBVdGlsc1xuXG5cdC8qKlxuXHQgKiBcblx0ICogQHBhcmFtIGNvbG9yIEJhY2tncm91bmQgY29sb3Jcblx0ICovXG5cdHByaXZhdGUgSXNMaWdodFRoZW1lKCk6IGJvb2xlYW4ge1xuXHRcdC8vIHVzaW5nIGZvcmVncm91bmQgY29sb3IsIG1vcmUgcmVsaWFibGUgdGhhbiBiYWNrZ3JvdW5kIGNvbG9yIChtb3JlIHRoZW1lcyBoYXMgaXQpXG5cdFx0bGV0IGNvbG9yID0gdGhpcy5tZW51LmFjdG9yLmdldF90aGVtZV9ub2RlKCkuZ2V0X2NvbG9yKFwiY29sb3JcIik7XG5cdFx0Ly8gbHVtaW5hbmNlIGJldHdlZW4gMCBhbmQgMVxuXHRcdGxldCBsdW1pbmFuY2UgPSAoMjEyNiAqIGNvbG9yLnJlZCArIDcxNTIgKiBjb2xvci5ncmVlbiArIDcyMiAqIGNvbG9yLmJsdWUpIC8gMTAwMDAgLyAyNTU7XG5cdFx0Ly8gSW52ZXJzZSwgd2UgYXNzdW1lIHRoZSBiYWNrZ3JvdW5kIGNvbG9yIGhlcmVcblx0XHRsdW1pbmFuY2UgPSBNYXRoLmFicygxIC0gbHVtaW5hbmNlKTtcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJUaGVtZSBpcyBMaWdodDogXCIgKyAobHVtaW5hbmNlID4gMC41KSk7XG5cdFx0cmV0dXJuIChsdW1pbmFuY2UgPiAwLjUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIGNvbG9yIGluIGhleCBzdHlsaW5nXG5cdCAqL1xuXHRwcml2YXRlIEZvcmVncm91bmRDb2xvcigpOiBzdHJpbmcge1xuXHRcdC8vIEdldCBoZXggY29sb3Igd2l0aG91dCBhbHBoYSwgYmVjYXVzZSBpdCBpcyBub3Qgc3VwcG9ydGVkIGluIGNzc1xuXHRcdGxldCBoZXggPSB0aGlzLm1lbnUuYWN0b3IuZ2V0X3RoZW1lX25vZGUoKS5nZXRfZm9yZWdyb3VuZF9jb2xvcigpLnRvX3N0cmluZygpLnN1YnN0cmluZygwLCA3KTtcblx0XHRyZXR1cm4gaGV4O1xuXHR9XG5cblx0cHJpdmF0ZSBHZXRUZXh0Q29sb3JTdHlsZSgpOiBzdHJpbmcge1xuXHRcdGxldCBoZXhDb2xvciA9IG51bGw7XG5cdFx0aWYgKHRoaXMubGlnaHRUaGVtZSkge1xuXHRcdFx0Ly8gRGFya2VuIGRlZmF1bHQgZm9yZWdyb3VuZCBjb2xvclxuXHRcdFx0aGV4Q29sb3IgPSBTaGFkZUhleENvbG9yKHRoaXMuRm9yZWdyb3VuZENvbG9yKCksIC0wLjQwKTtcblx0XHR9XG5cdFx0cmV0dXJuIFwiY29sb3I6IFwiICsgaGV4Q29sb3I7XG5cdH1cblxuXHQvKiogQ3JlYXRlcyB0aCBza2VsZXRvbiBvZiB0aGUgcG9wdXAgbWVudSAqL1xuXHRwcml2YXRlIEJ1aWxkUG9wdXBNZW51KCk6IHZvaWQge1xuXHRcdHRoaXMuQ3VycmVudFdlYXRoZXIgPSBuZXcgVUlDdXJyZW50V2VhdGhlcih0aGlzLkFwcCk7XG5cdFx0dGhpcy5GdXR1cmVXZWF0aGVyID0gbmV3IFVJRm9yZWNhc3RzKHRoaXMuQXBwKTtcblx0XHR0aGlzLkhvdXJseVdlYXRoZXIgPSBuZXcgVUlIb3VybHlGb3JlY2FzdHModGhpcy5BcHAsIHRoaXMubWVudSk7XG5cdFx0dGhpcy5GdXR1cmVXZWF0aGVyLkRheUNsaWNrZWQuU3Vic2NyaWJlKChzLCBlKSA9PiB0aGlzLk9uRGF5Q2xpY2tlZChzLCBlKSk7XG5cblx0XHR0aGlzLkJhciA9IG5ldyBVSUJhcih0aGlzLkFwcCk7XG5cdFx0dGhpcy5CYXIuVG9nZ2xlQ2xpY2tlZC5TdWJzY3JpYmUoTGFuZy5iaW5kKHRoaXMsIHRoaXMuVG9nZ2xlSG91cmx5V2VhdGhlcikpO1xuXG5cdFx0dGhpcy5Gb3JlY2FzdFNlcGFyYXRvciA9IG5ldyBVSVNlcGFyYXRvcigpO1xuXHRcdHRoaXMuSG91cmx5U2VwYXJhdG9yID0gbmV3IFVJU2VwYXJhdG9yKCk7XG5cdFx0dGhpcy5CYXJTZXBhcmF0b3IgPSBuZXcgVUlTZXBhcmF0b3IoKTtcblx0XHR0aGlzLkhvdXJseVNlcGFyYXRvci5IaWRlKCk7XG5cblx0XHQvLyBBZGQgZXZlcnl0aGluZyB0byB0aGUgUG9wdXBNZW51XG5cdFx0bGV0IG1haW5Cb3ggPSBuZXcgQm94TGF5b3V0KHsgdmVydGljYWw6IHRydWUgfSlcblx0XHRtYWluQm94LmFkZF9hY3Rvcih0aGlzLkN1cnJlbnRXZWF0aGVyLmFjdG9yKVxuXHRcdG1haW5Cb3guYWRkX2FjdG9yKHRoaXMuSG91cmx5U2VwYXJhdG9yLkFjdG9yKTtcblx0XHRtYWluQm94LmFkZF9hY3Rvcih0aGlzLkhvdXJseVdlYXRoZXIuYWN0b3IpO1xuXHRcdG1haW5Cb3guYWRkX2FjdG9yKHRoaXMuRm9yZWNhc3RTZXBhcmF0b3IuQWN0b3IpO1xuXHRcdG1haW5Cb3guYWRkX2FjdG9yKHRoaXMuRnV0dXJlV2VhdGhlci5hY3Rvcik7XG5cdFx0bWFpbkJveC5hZGRfYWN0b3IodGhpcy5CYXJTZXBhcmF0b3IuQWN0b3IpO1xuXHRcdG1haW5Cb3guYWRkX2FjdG9yKHRoaXMuQmFyLkFjdG9yKTtcblx0XHR0aGlzLm1lbnUuYWRkQWN0b3IobWFpbkJveCk7XG5cdH1cblxuXHQvKiogRGVzdHJveXMgVUkgZmlyc3QgdGhlbiBzaG93cyBpbml0aWFsIFVJICovXG5cdHByaXZhdGUgU2hvd0xvYWRpbmdVaSgpOiB2b2lkIHtcblx0XHR0aGlzLkN1cnJlbnRXZWF0aGVyLkRlc3Ryb3koKTtcblx0XHR0aGlzLkZ1dHVyZVdlYXRoZXIuRGVzdHJveSgpO1xuXHRcdHRoaXMuQmFyLkRlc3Ryb3koKVxuXHRcdHRoaXMuQ3VycmVudFdlYXRoZXIuYWN0b3Iuc2V0X2NoaWxkKG5ldyBMYWJlbCh7XG5cdFx0XHR0ZXh0OiBfKCdMb2FkaW5nIGN1cnJlbnQgd2VhdGhlciAuLi4nKVxuXHRcdH0pKVxuXHRcdHRoaXMuRnV0dXJlV2VhdGhlci5hY3Rvci5zZXRfY2hpbGQobmV3IExhYmVsKHtcblx0XHRcdHRleHQ6IF8oJ0xvYWRpbmcgZnV0dXJlIHdlYXRoZXIgLi4uJylcblx0XHR9KSlcblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgT25EYXlDbGlja2VkKHNlbmRlcjogV2VhdGhlckJ1dHRvbiwgZGF0ZTogRGF0ZSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdC8vIE9wZW4gaG91cmx5IHdlYXRoZXIgaWYgY29sbGFwc2VkXG5cdFx0aWYgKCF0aGlzLkhvdXJseVdlYXRoZXIuVG9nZ2xlZClcblx0XHRcdGF3YWl0IHRoaXMuU2hvd0hvdXJseVdlYXRoZXIoKTtcblx0XHQvLyBJZiB0aGUgc2FtZSBkYXkgd2FzIHRvZ2dsZSB0aGUgc2Vjb25kIHRpbWUsIGNvbGxhcHNlXG5cdFx0ZWxzZSBpZiAodGhpcy5sYXN0RGF0ZVRvZ2dsZWQgPT0gZGF0ZSkge1xuXHRcdFx0YXdhaXQgdGhpcy5IaWRlSG91cmx5V2VhdGhlcigpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuSG91cmx5V2VhdGhlci5TY3JvbGxUbyhkYXRlKTtcblx0XHR0aGlzLmxhc3REYXRlVG9nZ2xlZCA9IGRhdGU7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIFNob3dIb3VybHlXZWF0aGVyKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRoaXMuSG91cmx5U2VwYXJhdG9yLlNob3coKTtcblx0XHR0aGlzLkJhci5Td2l0Y2hCdXR0b25Ub0hpZGUoKTtcblx0XHRhd2FpdCB0aGlzLkhvdXJseVdlYXRoZXIuU2hvdygpO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBIaWRlSG91cmx5V2VhdGhlcigpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0aGlzLmxhc3REYXRlVG9nZ2xlZCA9IG51bGw7XG5cdFx0dGhpcy5Ib3VybHlTZXBhcmF0b3IuSGlkZSgpO1xuXHRcdHRoaXMuQmFyLlN3aXRjaEJ1dHRvblRvU2hvdygpO1xuXHRcdGF3YWl0IHRoaXMuSG91cmx5V2VhdGhlci5IaWRlKCk7XG5cdH1cbn0iLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLyAgICAgICAgICAgICAgICBEYXJrU2t5ICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5pbXBvcnQgeyBIdHRwRXJyb3IgfSBmcm9tIFwiLi4vbGliL2h0dHBMaWJcIjtcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuLi9saWIvbG9nZ2VyXCI7XG5pbXBvcnQgeyBXZWF0aGVyQXBwbGV0IH0gZnJvbSBcIi4uL21haW5cIjtcbmltcG9ydCB7IFN1blRpbWVzIH0gZnJvbSBcIi4uL2xpYi9zdW5DYWxjXCI7XG5pbXBvcnQgeyBXZWF0aGVyUHJvdmlkZXIsIFdlYXRoZXJEYXRhLCBGb3JlY2FzdERhdGEsIEhvdXJseUZvcmVjYXN0RGF0YSwgUHJlY2lwaXRhdGlvblR5cGUsIEJ1aWx0aW5JY29ucywgQ3VzdG9tSWNvbnMsIExvY2F0aW9uRGF0YSB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgXywgSXNMYW5nU3VwcG9ydGVkLCBJc05pZ2h0LCBGYWhyZW5oZWl0VG9LZWx2aW4sIENlbHNpdXNUb0tlbHZpbiwgTVBIdG9NUFMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuY29uc3QgTGFuZzogdHlwZW9mIGltcG9ydHMubGFuZyA9IGltcG9ydHMubGFuZztcblxuZXhwb3J0IGNsYXNzIERhcmtTa3kgaW1wbGVtZW50cyBXZWF0aGVyUHJvdmlkZXIge1xuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gIFByb3BlcnRpZXNcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRwdWJsaWMgcmVhZG9ubHkgcHJldHR5TmFtZSA9IF8oXCJEYXJrU2t5XCIpO1xuXHRwdWJsaWMgcmVhZG9ubHkgbmFtZSA9IFwiRGFya1NreVwiO1xuXHRwdWJsaWMgcmVhZG9ubHkgbWF4Rm9yZWNhc3RTdXBwb3J0ID0gODtcblx0cHVibGljIHJlYWRvbmx5IHdlYnNpdGUgPSBcImh0dHBzOi8vZGFya3NreS5uZXQvcG93ZXJlZGJ5L1wiO1xuXHRwdWJsaWMgcmVhZG9ubHkgbWF4SG91cmx5Rm9yZWNhc3RTdXBwb3J0ID0gMTY4O1xuXHRwdWJsaWMgcmVhZG9ubHkgbmVlZHNBcGlLZXkgPSB0cnVlO1xuXG5cdHByaXZhdGUgZGVzY3JpcHRpb25MaW5lTGVuZ3RoID0gMjU7XG5cdHByaXZhdGUgc3VwcG9ydGVkTGFuZ3VhZ2VzID0gW1xuXHRcdCdhcicsICdheicsICdiZScsICdiZycsICdicycsICdjYScsICdjcycsICdkYScsICdkZScsICdlbCcsICdlbicsICdlcycsXG5cdFx0J2V0JywgJ2ZpJywgJ2ZyJywgJ2hlJywgJ2hyJywgJ2h1JywgJ2lkJywgJ2lzJywgJ2l0JywgJ2phJywgJ2thJywgJ2tvJyxcblx0XHQna3cnLCAnbHYnLCAnbmInLCAnbmwnLCAnbm8nLCAncGwnLCAncHQnLCAncm8nLCAncnUnLCAnc2snLCAnc2wnLCAnc3InLFxuXHRcdCdzdicsICd0ZXQnLCAndHInLCAndWsnLCAneC1waWctbGF0aW4nLCAnemgnLCAnemgtdHcnXTtcblxuXHRwcml2YXRlIHF1ZXJ5ID0gXCJodHRwczovL2FwaS5kYXJrc2t5Lm5ldC9mb3JlY2FzdC9cIjtcblxuXHQvLyBEYXJrU2t5IEZpbHRlciB3b3JkcyBmb3Igc2hvcnQgY29uZGl0aW9ucywgd29uJ3Qgd29yayBvbiBldmVyeSBsYW5ndWFnZVxuXHRwcml2YXRlIERhcmtTa3lGaWx0ZXJXb3JkcyA9IFtfKFwiYW5kXCIpLCBfKFwidW50aWxcIiksIF8oXCJpblwiKSwgXyhcIlBvc3NpYmxlXCIpXTtcblxuXHRwcml2YXRlIHVuaXQ6IHF1ZXJ5VW5pdHMgPSBudWxsO1xuXG5cdHByaXZhdGUgYXBwOiBXZWF0aGVyQXBwbGV0XG5cblx0Y29uc3RydWN0b3IoX2FwcDogV2VhdGhlckFwcGxldCkge1xuXHRcdHRoaXMuYXBwID0gX2FwcDtcblx0fVxuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gIEZ1bmN0aW9uc1xuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdHB1YmxpYyBhc3luYyBHZXRXZWF0aGVyKGxvYzogTG9jYXRpb25EYXRhKTogUHJvbWlzZTxXZWF0aGVyRGF0YT4ge1xuXHRcdGxldCBub3cgPSBuZXcgRGF0ZShEYXRlLm5vdygpKTtcblx0XHRpZiAobm93LmdldFVUQ0Z1bGxZZWFyKCkgPj0gMjAyMikge1xuXHRcdFx0dGhpcy5hcHAuU2hvd0Vycm9yKFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogXCJoYXJkXCIsXG5cdFx0XHRcdFx0ZGV0YWlsOiBcIm5vIGFwaSByZXNwb25zZVwiLFxuXHRcdFx0XHRcdG1lc3NhZ2U6IF8oXCJUaGlzIEFQSSBoYXMgY2Vhc2VkIHRvIGZ1bmN0aW9uLCBwbGVhc2UgdXNlIGFub3RoZXIgb25lLlwiKVxuXHRcdFx0XHR9XG5cdFx0XHQpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0bGV0IHF1ZXJ5ID0gdGhpcy5Db25zdHJ1Y3RRdWVyeShsb2MpO1xuXHRcdGlmIChxdWVyeSA9PSBcIlwiICYmIHF1ZXJ5ID09IG51bGwpIHJldHVybiBudWxsO1xuXG5cdFx0bGV0IGpzb24gPSBhd2FpdCB0aGlzLmFwcC5Mb2FkSnNvbkFzeW5jPERhcmtTa3lQYXlsb2FkPihxdWVyeSwgbnVsbCwgTGFuZy5iaW5kKHRoaXMsIHRoaXMuSGFuZGxlRXJyb3IpKTtcblx0XHRpZiAoIWpzb24pIHJldHVybiBudWxsO1xuXG5cdFx0aWYgKCEoanNvbiBhcyBhbnkpLmNvZGUpIHsgICAgICAgICAgICAgICAgICAgLy8gTm8gY29kZSwgUmVxdWVzdCBTdWNjZXNzXG5cdFx0XHRyZXR1cm4gdGhpcy5QYXJzZVdlYXRoZXIoanNvbik7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dGhpcy5IYW5kbGVSZXNwb25zZUVycm9ycyhqc29uKTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fTtcblxuXG5cdHByaXZhdGUgUGFyc2VXZWF0aGVyKGpzb246IERhcmtTa3lQYXlsb2FkKTogV2VhdGhlckRhdGEge1xuXHRcdHRyeSB7XG5cdFx0XHRsZXQgc3VucmlzZSA9IG5ldyBEYXRlKGpzb24uZGFpbHkuZGF0YVswXS5zdW5yaXNlVGltZSAqIDEwMDApO1xuXHRcdFx0bGV0IHN1bnNldCA9IG5ldyBEYXRlKGpzb24uZGFpbHkuZGF0YVswXS5zdW5zZXRUaW1lICogMTAwMClcblx0XHRcdGxldCByZXN1bHQ6IFdlYXRoZXJEYXRhID0ge1xuXHRcdFx0XHRkYXRlOiBuZXcgRGF0ZShqc29uLmN1cnJlbnRseS50aW1lICogMTAwMCksXG5cdFx0XHRcdGNvb3JkOiB7XG5cdFx0XHRcdFx0bGF0OiBqc29uLmxhdGl0dWRlLFxuXHRcdFx0XHRcdGxvbjoganNvbi5sb25naXR1ZGVcblx0XHRcdFx0fSxcblx0XHRcdFx0bG9jYXRpb246IHtcblx0XHRcdFx0XHR1cmw6IFwiaHR0cHM6Ly9kYXJrc2t5Lm5ldC9mb3JlY2FzdC9cIiArIGpzb24ubGF0aXR1ZGUgKyBcIixcIiArIGpzb24ubG9uZ2l0dWRlLFxuXHRcdFx0XHRcdHRpbWVab25lOiBqc29uLnRpbWV6b25lLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdW5yaXNlOiBzdW5yaXNlLFxuXHRcdFx0XHRzdW5zZXQ6IHN1bnNldCxcblx0XHRcdFx0d2luZDoge1xuXHRcdFx0XHRcdHNwZWVkOiB0aGlzLlRvTVBTKGpzb24uY3VycmVudGx5LndpbmRTcGVlZCksXG5cdFx0XHRcdFx0ZGVncmVlOiBqc29uLmN1cnJlbnRseS53aW5kQmVhcmluZ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0ZW1wZXJhdHVyZTogdGhpcy5Ub0tlbHZpbihqc29uLmN1cnJlbnRseS50ZW1wZXJhdHVyZSksXG5cdFx0XHRcdHByZXNzdXJlOiBqc29uLmN1cnJlbnRseS5wcmVzc3VyZSxcblx0XHRcdFx0aHVtaWRpdHk6IGpzb24uY3VycmVudGx5Lmh1bWlkaXR5ICogMTAwLFxuXHRcdFx0XHRjb25kaXRpb246IHtcblx0XHRcdFx0XHRtYWluOiB0aGlzLkdldFNob3J0Q3VycmVudFN1bW1hcnkoanNvbi5jdXJyZW50bHkuc3VtbWFyeSksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IGpzb24uY3VycmVudGx5LnN1bW1hcnksXG5cdFx0XHRcdFx0aWNvbnM6IHRoaXMuUmVzb2x2ZUljb24oanNvbi5jdXJyZW50bHkuaWNvbiwgeyBzdW5yaXNlOiBzdW5yaXNlLCBzdW5zZXQ6IHN1bnNldCB9KSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiB0aGlzLlJlc29sdmVDdXN0b21JY29uKGpzb24uY3VycmVudGx5Lmljb24pXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGV4dHJhX2ZpZWxkOiB7XG5cdFx0XHRcdFx0bmFtZTogXyhcIkZlZWxzIExpa2VcIiksXG5cdFx0XHRcdFx0dmFsdWU6IHRoaXMuVG9LZWx2aW4oanNvbi5jdXJyZW50bHkuYXBwYXJlbnRUZW1wZXJhdHVyZSksXG5cdFx0XHRcdFx0dHlwZTogXCJ0ZW1wZXJhdHVyZVwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZvcmVjYXN0czogW10sXG5cdFx0XHRcdGhvdXJseUZvcmVjYXN0czogW11cblx0XHRcdH1cblx0XHRcdC8vIEZvcmVjYXN0XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGpzb24uZGFpbHkuZGF0YS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRsZXQgZGF5ID0ganNvbi5kYWlseS5kYXRhW2ldO1xuXHRcdFx0XHRsZXQgZm9yZWNhc3Q6IEZvcmVjYXN0RGF0YSA9IHtcblx0XHRcdFx0XHRkYXRlOiBuZXcgRGF0ZShkYXkudGltZSAqIDEwMDApLFxuXHRcdFx0XHRcdHRlbXBfbWluOiB0aGlzLlRvS2VsdmluKGRheS50ZW1wZXJhdHVyZUxvdyksXG5cdFx0XHRcdFx0dGVtcF9tYXg6IHRoaXMuVG9LZWx2aW4oZGF5LnRlbXBlcmF0dXJlSGlnaCksXG5cdFx0XHRcdFx0Y29uZGl0aW9uOiB7XG5cdFx0XHRcdFx0XHRtYWluOiB0aGlzLkdldFNob3J0U3VtbWFyeShkYXkuc3VtbWFyeSksXG5cdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogdGhpcy5Qcm9jZXNzU3VtbWFyeShkYXkuc3VtbWFyeSksXG5cdFx0XHRcdFx0XHRpY29uczogdGhpcy5SZXNvbHZlSWNvbihkYXkuaWNvbiksXG5cdFx0XHRcdFx0XHRjdXN0b21JY29uOiB0aGlzLlJlc29sdmVDdXN0b21JY29uKGRheS5pY29uKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gSlMgYXNzdW1lcyB0aW1lIGlzIGxvY2FsLCBzbyBpdCBhcHBsaWVzIHRoZSBjb3JyZWN0IG9mZnNldCBjcmVhdGluZyB0aGUgRGF0ZSAoaW5jbHVkaW5nIERheWxpZ2h0IFNhdmluZylcblx0XHRcdFx0Ly8gYnV0IHdoZW4gdXNpbmcgdGhlIGRhdGUgd2hlbiBkYXlsaWdodCBzYXZpbmcgaXMgYWN0aXZlLCBpdCBET0VTIE5PVCBhcHBseSB0aGUgRFNUIGJhY2ssXG5cdFx0XHRcdC8vIFNvIHdlIG9mZnNldCB0aGUgZGF0ZSB0byBtYWtlIGl0IE5vb25cblx0XHRcdFx0Zm9yZWNhc3QuZGF0ZS5zZXRIb3Vycyhmb3JlY2FzdC5kYXRlLmdldEhvdXJzKCkgKyAxMik7XG5cblx0XHRcdFx0cmVzdWx0LmZvcmVjYXN0cy5wdXNoKGZvcmVjYXN0KTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBqc29uLmhvdXJseS5kYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGxldCBob3VyID0ganNvbi5ob3VybHkuZGF0YVtpXTtcblx0XHRcdFx0bGV0IGZvcmVjYXN0OiBIb3VybHlGb3JlY2FzdERhdGEgPSB7XG5cdFx0XHRcdFx0ZGF0ZTogbmV3IERhdGUoaG91ci50aW1lICogMTAwMCksXG5cdFx0XHRcdFx0dGVtcDogdGhpcy5Ub0tlbHZpbihob3VyLnRlbXBlcmF0dXJlKSxcblx0XHRcdFx0XHRjb25kaXRpb246IHtcblx0XHRcdFx0XHRcdG1haW46IHRoaXMuR2V0U2hvcnRTdW1tYXJ5KGhvdXIuc3VtbWFyeSksXG5cdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogdGhpcy5Qcm9jZXNzU3VtbWFyeShob3VyLnN1bW1hcnkpLFxuXHRcdFx0XHRcdFx0aWNvbnM6IHRoaXMuUmVzb2x2ZUljb24oaG91ci5pY29uLCB7IHN1bnJpc2U6IHN1bnJpc2UsIHN1bnNldDogc3Vuc2V0IH0sIG5ldyBEYXRlKGhvdXIudGltZSAqIDEwMDApKSxcblx0XHRcdFx0XHRcdGN1c3RvbUljb246IHRoaXMuUmVzb2x2ZUN1c3RvbUljb24oaG91ci5pY29uKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cHJlY2lwaXRhdGlvbjoge1xuXHRcdFx0XHRcdFx0dHlwZTogaG91ci5wcmVjaXBUeXBlIGFzIFByZWNpcGl0YXRpb25UeXBlLFxuXHRcdFx0XHRcdFx0dm9sdW1lOiBob3VyLnByZWNpcFByb2JhYmlsaXR5LFxuXHRcdFx0XHRcdFx0Y2hhbmNlOiBob3VyLnByZWNpcFByb2JhYmlsaXR5ICogMTAwXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHJlc3VsdC5ob3VybHlGb3JlY2FzdHMucHVzaChmb3JlY2FzdCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0XHRjYXRjaCAoZSkge1xuXHRcdFx0TG9nLkluc3RhbmNlLkVycm9yKFwiRGFya1NreSBwYXlsb2FkIHBhcnNpbmcgZXJyb3I6IFwiICsgZSlcblx0XHRcdHRoaXMuYXBwLlNob3dFcnJvcih7IHR5cGU6IFwic29mdFwiLCBkZXRhaWw6IFwidW51c3VhbCBwYXlsb2FkXCIsIHNlcnZpY2U6IFwiZGFya3NreVwiLCBtZXNzYWdlOiBfKFwiRmFpbGVkIHRvIFByb2Nlc3MgV2VhdGhlciBJbmZvXCIpIH0pO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cdHByaXZhdGUgQ29udmVydFRvQVBJTG9jYWxlKHN5c3RlbUxvY2FsZTogc3RyaW5nKSB7XG5cdFx0aWYgKHN5c3RlbUxvY2FsZSA9PSBcInpoLXR3XCIpIHtcblx0XHRcdHJldHVybiBzeXN0ZW1Mb2NhbGU7XG5cdFx0fVxuXHRcdGxldCBsYW5nID0gc3lzdGVtTG9jYWxlLnNwbGl0KFwiLVwiKVswXTtcblx0XHRyZXR1cm4gbGFuZztcblx0fVxuXG5cdHByaXZhdGUgQ29uc3RydWN0UXVlcnkobG9jOiBMb2NhdGlvbkRhdGEpOiBzdHJpbmcge1xuXHRcdHRoaXMuU2V0UXVlcnlVbml0KCk7XG5cdFx0bGV0IHF1ZXJ5ID0gdGhpcy5xdWVyeSArIHRoaXMuYXBwLmNvbmZpZy5BcGlLZXkgKyBcIi9cIiArIGxvYy5sYXQudG9TdHJpbmcoKSArIFwiLFwiICsgbG9jLmxvbi50b1N0cmluZygpICsgXCI/ZXhjbHVkZT1taW51dGVseSxmbGFnc1wiICsgXCImdW5pdHM9XCIgKyB0aGlzLnVuaXQ7XG5cdFx0bGV0IGxvY2FsZSA9IHRoaXMuQ29udmVydFRvQVBJTG9jYWxlKHRoaXMuYXBwLmNvbmZpZy5jdXJyZW50TG9jYWxlKTtcblx0XHRpZiAoSXNMYW5nU3VwcG9ydGVkKGxvY2FsZSwgdGhpcy5zdXBwb3J0ZWRMYW5ndWFnZXMpICYmIHRoaXMuYXBwLmNvbmZpZy5fdHJhbnNsYXRlQ29uZGl0aW9uKSB7XG5cdFx0XHRxdWVyeSA9IHF1ZXJ5ICsgXCImbGFuZz1cIiArIGxvY2FsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHF1ZXJ5O1xuXHR9XG5cblx0LyoqXG5cdCAqIFxuXHQgKiBAcGFyYW0gbWVzc2FnZSBTb3VwIE1lc3NhZ2Ugb2JqZWN0XG5cdCAqIEByZXR1cm5zIG51bGwgaWYgY3VzdG9tIGVycm9yIGNoZWNraW5nIGRvZXMgbm90IGZpbmQgYW55dGhpbmdcblx0ICovXG5cdHByaXZhdGUgSGFuZGxlRXJyb3IobWVzc2FnZTogSHR0cEVycm9yKTogYm9vbGVhbiB7XG5cdFx0aWYgKG1lc3NhZ2UuY29kZSA9PSA0MDMpIHsgLy8gRGFya1NreSByZXR1cm5zIGF1dGggZXJyb3Igb24gdGhlIGh0dHAgbGV2ZWwgd2hlbiBrZXkgaXMgd3Jvbmdcblx0XHRcdHRoaXMuYXBwLlNob3dFcnJvcih7XG5cdFx0XHRcdHR5cGU6IFwiaGFyZFwiLFxuXHRcdFx0XHR1c2VyRXJyb3I6IHRydWUsXG5cdFx0XHRcdGRldGFpbDogXCJiYWQga2V5XCIsXG5cdFx0XHRcdHNlcnZpY2U6IFwiZGFya3NreVwiLFxuXHRcdFx0XHRtZXNzYWdlOiBfKFwiUGxlYXNlIE1ha2Ugc3VyZSB5b3VcXG5lbnRlcmVkIHRoZSBBUEkga2V5IGNvcnJlY3RseSBhbmQgeW91ciBhY2NvdW50IGlzIG5vdCBsb2NrZWRcIilcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRlbHNlIGlmIChtZXNzYWdlLmNvZGUgPT0gNDAxKSB7IC8vIERhcmtTa3kgcmV0dXJucyBhdXRoIGVycm9yIG9uIHRoZSBodHRwIGxldmVsIHdoZW4ga2V5IGlzIHdyb25nXG5cdFx0XHR0aGlzLmFwcC5TaG93RXJyb3Ioe1xuXHRcdFx0XHR0eXBlOiBcImhhcmRcIixcblx0XHRcdFx0dXNlckVycm9yOiB0cnVlLFxuXHRcdFx0XHRkZXRhaWw6IFwibm8ga2V5XCIsXG5cdFx0XHRcdHNlcnZpY2U6IFwiZGFya3NreVwiLFxuXHRcdFx0XHRtZXNzYWdlOiBfKFwiUGxlYXNlIE1ha2Ugc3VyZSB5b3VcXG5lbnRlcmVkIHRoZSBBUEkga2V5IHRoYXQgeW91IGhhdmUgZnJvbSBEYXJrU2t5XCIpXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRwcml2YXRlIEhhbmRsZVJlc3BvbnNlRXJyb3JzKGpzb246IGFueSk6IHZvaWQge1xuXHRcdGxldCBjb2RlID0ganNvbi5jb2RlO1xuXHRcdGxldCBlcnJvciA9IGpzb24uZXJyb3I7XG5cdFx0bGV0IGVycm9yTXNnID0gXCJEYXJrU2t5IEFQSTogXCJcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJEYXJrc1NreSBBUEkgZXJyb3IgcGF5bG9hZDogXCIgKyBqc29uKTtcblx0XHRzd2l0Y2ggKGNvZGUpIHtcblx0XHRcdGNhc2UgXCI0MDBcIjpcblx0XHRcdFx0TG9nLkluc3RhbmNlLkVycm9yKGVycm9yTXNnICsgZXJyb3IpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihlcnJvck1zZyArIGVycm9yKTtcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cdH07XG5cblx0cHJpdmF0ZSBQcm9jZXNzU3VtbWFyeShzdW1tYXJ5OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdGxldCBwcm9jZXNzZWQgPSBzdW1tYXJ5LnNwbGl0KFwiIFwiKTtcblx0XHRsZXQgcmVzdWx0ID0gXCJcIjtcblx0XHRsZXQgbGluZUxlbmd0aCA9IDA7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBwcm9jZXNzZWQubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChsaW5lTGVuZ3RoICsgcHJvY2Vzc2VkW2ldLmxlbmd0aCA+IHRoaXMuZGVzY3JpcHRpb25MaW5lTGVuZ3RoKSB7XG5cdFx0XHRcdHJlc3VsdCA9IHJlc3VsdCArIFwiXFxuXCI7XG5cdFx0XHRcdGxpbmVMZW5ndGggPSAwO1xuXHRcdFx0fVxuXHRcdFx0cmVzdWx0ID0gcmVzdWx0ICsgcHJvY2Vzc2VkW2ldICsgXCIgXCI7XG5cdFx0XHRsaW5lTGVuZ3RoID0gbGluZUxlbmd0aCArIHByb2Nlc3NlZFtpXS5sZW5ndGggKyAxO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdHByaXZhdGUgR2V0U2hvcnRTdW1tYXJ5KHN1bW1hcnk6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0bGV0IHByb2Nlc3NlZCA9IHN1bW1hcnkuc3BsaXQoXCIgXCIpO1xuXHRcdGlmIChwcm9jZXNzZWQubGVuZ3RoID09IDEpIHJldHVybiBwcm9jZXNzZWRbMF07XG5cdFx0bGV0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHByb2Nlc3NlZC5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKCEvW1xcKFxcKV0vLnRlc3QocHJvY2Vzc2VkW2ldKSAmJiAhdGhpcy5Xb3JkQmFubmVkKHByb2Nlc3NlZFtpXSkpIHtcblx0XHRcdFx0cmVzdWx0LnB1c2gocHJvY2Vzc2VkW2ldKSArIFwiIFwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlc3VsdC5sZW5ndGggPT0gMikgYnJlYWs7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQuam9pbihcIiBcIik7XG5cdH07XG5cblx0cHJpdmF0ZSBHZXRTaG9ydEN1cnJlbnRTdW1tYXJ5KHN1bW1hcnk6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0bGV0IHByb2Nlc3NlZCA9IHN1bW1hcnkuc3BsaXQoXCIgXCIpO1xuXHRcdGxldCByZXN1bHQgPSBcIlwiO1xuXHRcdGxldCBtYXhMb29wO1xuXHRcdChwcm9jZXNzZWQubGVuZ3RoIDwgMikgPyBtYXhMb29wID0gcHJvY2Vzc2VkLmxlbmd0aCA6IG1heExvb3AgPSAyO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbWF4TG9vcDsgaSsrKSB7XG5cdFx0XHRpZiAocHJvY2Vzc2VkW2ldICE9IFwiYW5kXCIpIHtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0ICsgcHJvY2Vzc2VkW2ldICsgXCIgXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRwcml2YXRlIFdvcmRCYW5uZWQod29yZDogc3RyaW5nKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuRGFya1NreUZpbHRlcldvcmRzLmluY2x1ZGVzKHdvcmQpO1xuXHR9XG5cblx0cHJpdmF0ZSBSZXNvbHZlSWNvbihpY29uOiBzdHJpbmcsIHN1blRpbWVzPzogU3VuVGltZXMsIGRhdGU/OiBEYXRlKTogQnVpbHRpbkljb25zW10ge1xuXHRcdHN3aXRjaCAoaWNvbikge1xuXHRcdFx0Y2FzZSBcInJhaW5cIjpcblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItcmFpblwiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIl1cblx0XHRcdGNhc2UgXCJzbm93XCI6XG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLXNub3dcIl1cblx0XHRcdGNhc2UgXCJzbGVldFwiOlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiXVxuXHRcdFx0Y2FzZSBcImZvZ1wiOlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1mb2dcIl1cblx0XHRcdC8vIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZXJlIGlzIGEgd2luZCBpY29uXG5cdFx0XHRjYXNlIFwid2luZFwiOlxuXHRcdFx0XHRyZXR1cm4gKHN1blRpbWVzICYmIElzTmlnaHQoc3VuVGltZXMsIGRhdGUpKSA/IFtcIndlYXRoZXItd2luZHlcIiwgXCJ3ZWF0aGVyLWJyZWV6ZVwiLCBcIndlYXRoZXItY2xvdWRzXCIsIFwid2VhdGhlci1mZXctY2xvdWRzLW5pZ2h0XCJdIDogW1wid2VhdGhlci13aW5keVwiLCBcIndlYXRoZXItYnJlZXplXCIsIFwid2VhdGhlci1jbG91ZHNcIiwgXCJ3ZWF0aGVyLWZldy1jbG91ZHNcIl1cblx0XHRcdGNhc2UgXCJjbG91ZHlcIjovKiBtb3N0bHkgY2xvdWR5IChkYXkpICovXG5cdFx0XHRcdHJldHVybiAoc3VuVGltZXMgJiYgSXNOaWdodChzdW5UaW1lcywgZGF0ZSkpID8gW1wid2VhdGhlci1vdmVyY2FzdFwiLCBcIndlYXRoZXItY2xvdWRzXCIsIFwid2VhdGhlci1mZXctY2xvdWRzLW5pZ2h0XCJdIDogW1wid2VhdGhlci1vdmVyY2FzdFwiLCBcIndlYXRoZXItY2xvdWRzXCIsIFwid2VhdGhlci1mZXctY2xvdWRzXCJdXG5cdFx0XHRjYXNlIFwicGFydGx5LWNsb3VkeS1uaWdodFwiOlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1mZXctY2xvdWRzLW5pZ2h0XCJdXG5cdFx0XHRjYXNlIFwicGFydGx5LWNsb3VkeS1kYXlcIjpcblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItZmV3LWNsb3Vkc1wiXVxuXHRcdFx0Y2FzZSBcImNsZWFyLW5pZ2h0XCI6XG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLWNsZWFyLW5pZ2h0XCJdXG5cdFx0XHRjYXNlIFwiY2xlYXItZGF5XCI6XG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLWNsZWFyXCJdXG5cdFx0XHQvLyBIYXZlIG5vdCBzZWVuIFN0b3JtIG9yIFNob3dlcnMgaWNvbnMgcmV0dXJuZWQgeWV0XG5cdFx0XHRjYXNlIFwic3Rvcm1cIjpcblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItc3Rvcm1cIl1cblx0XHRcdGNhc2UgXCJzaG93ZXJzXCI6XG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCJdXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHR9XG5cdH07XG5cblx0cHJpdmF0ZSBSZXNvbHZlQ3VzdG9tSWNvbihpY29uOiBzdHJpbmcpOiBDdXN0b21JY29ucyB7XG5cdFx0c3dpdGNoIChpY29uKSB7XG5cdFx0XHRjYXNlIFwicmFpblwiOlxuXHRcdFx0XHRyZXR1cm4gXCJyYWluLXN5bWJvbGljXCI7XG5cdFx0XHRjYXNlIFwic25vd1wiOlxuXHRcdFx0XHRyZXR1cm4gXCJzbm93LXN5bWJvbGljXCI7XG5cdFx0XHRjYXNlIFwiZm9nXCI6XG5cdFx0XHRcdHJldHVybiBcImZvZy1zeW1ib2xpY1wiO1xuXHRcdFx0Y2FzZSBcImNsb3VkeVwiOlxuXHRcdFx0XHRyZXR1cm4gXCJjbG91ZHktc3ltYm9saWNcIjtcblx0XHRcdGNhc2UgXCJwYXJ0bHktY2xvdWR5LW5pZ2h0XCI6XG5cdFx0XHRcdHJldHVybiBcIm5pZ2h0LWFsdC1jbG91ZHktc3ltYm9saWNcIjtcblx0XHRcdGNhc2UgXCJwYXJ0bHktY2xvdWR5LWRheVwiOlxuXHRcdFx0XHRyZXR1cm4gXCJkYXktY2xvdWR5LXN5bWJvbGljXCI7XG5cdFx0XHRjYXNlIFwiY2xlYXItbmlnaHRcIjpcblx0XHRcdFx0cmV0dXJuIFwibmlnaHQtY2xlYXItc3ltYm9saWNcIjtcblx0XHRcdGNhc2UgXCJjbGVhci1kYXlcIjpcblx0XHRcdFx0cmV0dXJuIFwiZGF5LXN1bm55LXN5bWJvbGljXCI7XG5cdFx0XHQvLyBIYXZlIG5vdCBzZWVuIFN0b3JtIG9yIFNob3dlcnMgaWNvbnMgcmV0dXJuZWQgeWV0XG5cdFx0XHRjYXNlIFwic3Rvcm1cIjpcblx0XHRcdFx0cmV0dXJuIFwidGh1bmRlcnN0b3JtLXN5bWJvbGljXCI7XG5cdFx0XHRjYXNlIFwic2hvd2Vyc1wiOlxuXHRcdFx0XHRyZXR1cm4gXCJzaG93ZXJzLXN5bWJvbGljXCI7XG5cdFx0XHQvLyBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGVyZSBpcyBhIHdpbmQgaWNvblxuXHRcdFx0Y2FzZSBcIndpbmRcIjpcblx0XHRcdFx0cmV0dXJuIFwic3Ryb25nLXdpbmQtc3ltYm9saWNcIjtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBcImNsb3VkLXJlZnJlc2gtc3ltYm9saWNcIjtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIFNldFF1ZXJ5VW5pdCgpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5hcHAuY29uZmlnLlRlbXBlcmF0dXJlVW5pdCA9PSBcImNlbHNpdXNcIikge1xuXHRcdFx0aWYgKHRoaXMuYXBwLmNvbmZpZy5XaW5kU3BlZWRVbml0ID09IFwia3BoXCIgfHwgdGhpcy5hcHAuY29uZmlnLldpbmRTcGVlZFVuaXQgPT0gXCJtL3NcIikge1xuXHRcdFx0XHR0aGlzLnVuaXQgPSAnc2knO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHRoaXMudW5pdCA9ICd1azInO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMudW5pdCA9ICd1cyc7XG5cdFx0fVxuXHR9O1xuXG5cdHByaXZhdGUgVG9LZWx2aW4odGVtcDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRpZiAodGhpcy51bml0ID09ICd1cycpIHtcblx0XHRcdHJldHVybiBGYWhyZW5oZWl0VG9LZWx2aW4odGVtcCk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0cmV0dXJuIENlbHNpdXNUb0tlbHZpbih0ZW1wKTtcblx0XHR9XG5cblx0fTtcblxuXHRwcml2YXRlIFRvTVBTKHNwZWVkOiBudW1iZXIpOiBudW1iZXIge1xuXHRcdGlmICh0aGlzLnVuaXQgPT0gJ3NpJykge1xuXHRcdFx0cmV0dXJuIHNwZWVkO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHJldHVybiBNUEh0b01QUyhzcGVlZCk7XG5cdFx0fVxuXHR9O1xufTtcblxuLyoqXG4gKiAtICdzaScgcmV0dXJucyBtZXRlci9zZWMgYW5kIENlbHNpdXNcbiAqIC0gJ3VzJyByZXR1cm5zIG1pbGVzL2hvdXIgYW5kIEZhaHJlbmhlaXRcbiAqIC0gJ3VrMicgcmV0dXJuIG1pbGVzL2hvdXIgYW5kIENlbHNpdXNcbiAqL1xudHlwZSBxdWVyeVVuaXRzID0gJ3NpJyB8ICd1cycgfCAndWsyJztcblxuaW50ZXJmYWNlIERhcmtTa3lIb3VybHlQYXlsb2FkIHtcblx0dGltZTogbnVtYmVyO1xuXHRzdW1tYXJ5OiBzdHJpbmc7XG5cdGljb246IHN0cmluZztcblx0cHJlY2lwSW50ZW5zaXR5OiBudW1iZXI7XG5cdHByZWNpcFByb2JhYmlsaXR5OiBudW1iZXI7XG5cdHByZWNpcFR5cGU6IHN0cmluZztcblx0dGVtcGVyYXR1cmU6IG51bWJlcjtcblx0YXBwYXJlbnRUZW1wZXJhdHVyZTogbnVtYmVyO1xuXHRkZXdQb2ludDogbnVtYmVyO1xuXHRodW1pZGl0eTogbnVtYmVyO1xuXHRwcmVzc3VyZTogbnVtYmVyO1xuXHR3aW5kU3BlZWQ6IG51bWJlcjtcblx0d2luZEd1c3Q6IG51bWJlcjtcblx0d2luZEJlYXJpbmc6IG51bWJlcjtcblx0Y2xvdWRDb3ZlcjogbnVtYmVyO1xuXHR1dkluZGV4OiBudW1iZXI7XG5cdHZpc2liaWxpdHk6IG51bWJlcjtcblx0b3pvbmU6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIERhcmtTa3lEYWlseVBheWxvYWQge1xuXHR0aW1lOiBudW1iZXI7XG5cdHN1bW1hcnk6IHN0cmluZztcblx0aWNvbjogc3RyaW5nO1xuXHRzdW5yaXNlVGltZTogbnVtYmVyO1xuXHRzdW5zZXRUaW1lOiBudW1iZXI7XG5cdG1vb25QaGFzZTogbnVtYmVyO1xuXHRwcmVjaXBJbnRlbnNpdHk6IG51bWJlcjtcblx0cHJlY2lwSW50ZW5zaXR5TWF4OiBudW1iZXI7XG5cdHByZWNpcEludGVuc2l0eU1heFRpbWU6IG51bWJlcjtcblx0cHJlY2lwUHJvYmFiaWxpdHk6IG51bWJlcjtcblx0cHJlY2lwVHlwZTogc3RyaW5nO1xuXHR0ZW1wZXJhdHVyZUhpZ2g6IG51bWJlcjtcblx0dGVtcGVyYXR1cmVIaWdoVGltZTogbnVtYmVyO1xuXHR0ZW1wZXJhdHVyZUxvdzogbnVtYmVyO1xuXHR0ZW1wZXJhdHVyZUxvd1RpbWU6IG51bWJlcjtcblx0YXBwYXJlbnRUZW1wZXJhdHVyZUhpZ2g6IG51bWJlcjtcblx0YXBwYXJlbnRUZW1wZXJhdHVyZUhpZ2hUaW1lOiBudW1iZXI7XG5cdGFwcGFyZW50VGVtcGVyYXR1cmVMb3c6IG51bWJlcjtcblx0YXBwYXJlbnRUZW1wZXJhdHVyZUxvd1RpbWU6IG51bWJlcjtcblx0ZGV3UG9pbnQ6IG51bWJlcjtcblx0aHVtaWRpdHk6IG51bWJlcjtcblx0cHJlc3N1cmU6IG51bWJlcjtcblx0d2luZFNwZWVkOiBudW1iZXI7XG5cdHdpbmRHdXN0OiBudW1iZXI7XG5cdHdpbmRHdXN0VGltZTogbnVtYmVyO1xuXHR3aW5kQmVhcmluZzogbnVtYmVyO1xuXHRjbG91ZENvdmVyOiBudW1iZXI7XG5cdHV2SW5kZXg6IG51bWJlcjtcblx0dXZJbmRleFRpbWU6IG51bWJlcjtcblx0dmlzaWJpbGl0eTogbnVtYmVyO1xuXHRvem9uZTogbnVtYmVyO1xuXHR0ZW1wZXJhdHVyZU1pbjogbnVtYmVyO1xuXHR0ZW1wZXJhdHVyZU1pblRpbWU6IG51bWJlcjtcblx0dGVtcGVyYXR1cmVNYXg6IG51bWJlcjtcblx0dGVtcGVyYXR1cmVNYXhUaW1lOiBudW1iZXI7XG5cdGFwcGFyZW50VGVtcGVyYXR1cmVNaW46IG51bWJlcjtcblx0YXBwYXJlbnRUZW1wZXJhdHVyZU1pblRpbWU6IG51bWJlcjtcblx0YXBwYXJlbnRUZW1wZXJhdHVyZU1heDogbnVtYmVyO1xuXHRhcHBhcmVudFRlbXBlcmF0dXJlTWF4VGltZTogbnVtYmVyO1xufVxuaW50ZXJmYWNlIERhcmtTa3lQYXlsb2FkIHtcblx0bGF0aXR1ZGU6IG51bWJlcjtcblx0bG9uZ2l0dWRlOiBudW1iZXI7XG5cdHRpbWV6b25lOiBzdHJpbmc7XG5cdGN1cnJlbnRseToge1xuXHRcdC8qKiBVbml4IHRpbWVzdGFtcCBpbiBzZWNvbmRzICovXG5cdFx0dGltZTogbnVtYmVyO1xuXHRcdHN1bW1hcnk6IHN0cmluZztcblx0XHRpY29uOiBzdHJpbmc7XG5cdFx0bmVhcmVzdFN0b3JtRGlzdGFuY2U6IG51bWJlcjtcblx0XHRuZWFyZXN0U3Rvcm1CZWFyaW5nOiBudW1iZXI7XG5cdFx0cHJlY2lwSW50ZW5zaXR5OiBudW1iZXI7XG5cdFx0cHJlY2lwUHJvYmFiaWxpdHk6IG51bWJlcjtcblx0XHR0ZW1wZXJhdHVyZTogbnVtYmVyO1xuXHRcdGFwcGFyZW50VGVtcGVyYXR1cmU6IG51bWJlcjtcblx0XHRkZXdQb2ludDogbnVtYmVyO1xuXHRcdGh1bWlkaXR5OiBudW1iZXI7XG5cdFx0cHJlc3N1cmU6IG51bWJlcjtcblx0XHR3aW5kU3BlZWQ6IG51bWJlcjtcblx0XHR3aW5kR3VzdDogbnVtYmVyO1xuXHRcdHdpbmRCZWFyaW5nOiBudW1iZXI7XG5cdFx0Y2xvdWRDb3ZlcjogbnVtYmVyO1xuXHRcdHV2SW5kZXg6IG51bWJlcjtcblx0XHR2aXNpYmlsaXR5OiBudW1iZXI7XG5cdFx0b3pvbmU6IG51bWJlcjtcblx0fSxcblx0aG91cmx5OiB7XG5cdFx0c3VtbWFyeTogc3RyaW5nO1xuXHRcdGljb246IHN0cmluZztcblx0XHRkYXRhOiBEYXJrU2t5SG91cmx5UGF5bG9hZFtdO1xuXHR9XG5cdGRhaWx5OiB7XG5cdFx0c3VtbWFyeTogc3RyaW5nO1xuXHRcdGljb246IHN0cmluZztcblx0XHRkYXRhOiBEYXJrU2t5RGFpbHlQYXlsb2FkW11cblx0fVxufVxuXG4iLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLyAgICAgICAgIE9wZW5XZWF0aGVyTWFwIFByZW1pdW0gICAgICAgIC8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5pbXBvcnQgeyBIdHRwRXJyb3IgfSBmcm9tIFwiLi4vbGliL2h0dHBMaWJcIjtcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuLi9saWIvbG9nZ2VyXCI7XG5pbXBvcnQgeyBXZWF0aGVyQXBwbGV0IH0gZnJvbSBcIi4uL21haW5cIjtcbmltcG9ydCB7IFdlYXRoZXJQcm92aWRlciwgV2VhdGhlckRhdGEsIEZvcmVjYXN0RGF0YSwgSG91cmx5Rm9yZWNhc3REYXRhLCBBcHBsZXRFcnJvciwgQnVpbHRpbkljb25zLCBDdXN0b21JY29ucywgTG9jYXRpb25EYXRhLCBJbW1lZGlhdGVQcmVjaXBpdGF0aW9uIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBfLCBJc0xhbmdTdXBwb3J0ZWQgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuY29uc3QgTGFuZzogdHlwZW9mIGltcG9ydHMubGFuZyA9IGltcG9ydHMubGFuZztcblxuZXhwb3J0IGNsYXNzIE9wZW5XZWF0aGVyTWFwIGltcGxlbWVudHMgV2VhdGhlclByb3ZpZGVyIHtcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyAgUHJvcGVydGllc1xuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdHB1YmxpYyByZWFkb25seSBwcmV0dHlOYW1lID0gXyhcIk9wZW5XZWF0aGVyTWFwXCIpO1xuXHRwdWJsaWMgcmVhZG9ubHkgbmFtZSA9IFwiT3BlbldlYXRoZXJNYXBcIjtcblx0cHVibGljIHJlYWRvbmx5IG1heEZvcmVjYXN0U3VwcG9ydCA9IDg7XG5cdHB1YmxpYyByZWFkb25seSB3ZWJzaXRlID0gXCJodHRwczovL29wZW53ZWF0aGVybWFwLm9yZy9cIjtcblx0cHVibGljIHJlYWRvbmx5IG1heEhvdXJseUZvcmVjYXN0U3VwcG9ydCA9IDQ4O1xuXHRwdWJsaWMgcmVhZG9ubHkgbmVlZHNBcGlLZXkgPSBmYWxzZTtcblxuXHRwcml2YXRlIHN1cHBvcnRlZExhbmd1YWdlcyA9IFtcImFmXCIsIFwiYWxcIiwgXCJhclwiLCBcImF6XCIsIFwiYmdcIiwgXCJjYVwiLCBcImN6XCIsIFwiZGFcIiwgXCJkZVwiLCBcImVsXCIsIFwiZW5cIiwgXCJldVwiLCBcImZhXCIsIFwiZmlcIixcblx0XHRcImZyXCIsIFwiZ2xcIiwgXCJoZVwiLCBcImhpXCIsIFwiaHJcIiwgXCJodVwiLCBcImlkXCIsIFwiaXRcIiwgXCJqYVwiLCBcImtyXCIsIFwibGFcIiwgXCJsdFwiLCBcIm1rXCIsIFwibm9cIiwgXCJubFwiLCBcInBsXCIsXG5cdFx0XCJwdFwiLCBcInB0X2JyXCIsIFwicm9cIiwgXCJydVwiLCBcInNlXCIsIFwic2tcIiwgXCJzbFwiLCBcInNwXCIsIFwiZXNcIiwgXCJzclwiLCBcInRoXCIsIFwidHJcIiwgXCJ1YVwiLCBcInVrXCIsIFwidmlcIiwgXCJ6aF9jblwiLCBcInpoX3R3XCIsIFwienVcIlxuXHRdO1xuXG5cdHByaXZhdGUgYmFzZV91cmwgPSBcImh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9vbmVjYWxsP1wiIC8vbGF0PTUxLjUwODUmbG9uPS0wLjEyNTcmYXBwaWQ9e1lPVVIgQVBJIEtFWX1cIlxuXG5cdHByaXZhdGUgYXBwOiBXZWF0aGVyQXBwbGV0XG5cdGNvbnN0cnVjdG9yKF9hcHA6IFdlYXRoZXJBcHBsZXQpIHtcblx0XHR0aGlzLmFwcCA9IF9hcHA7XG5cdH1cblxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vICBGdW5jdGlvbnNcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdHB1YmxpYyBhc3luYyBHZXRXZWF0aGVyKGxvYzogTG9jYXRpb25EYXRhKTogUHJvbWlzZTxXZWF0aGVyRGF0YT4ge1xuXHRcdGxldCBxdWVyeSA9IHRoaXMuQ29uc3RydWN0UXVlcnkodGhpcy5iYXNlX3VybCwgbG9jKTtcblx0XHRpZiAocXVlcnkgPT0gbnVsbClcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0bGV0IGpzb24gPSBhd2FpdCB0aGlzLmFwcC5Mb2FkSnNvbkFzeW5jPGFueT4ocXVlcnksIG51bGwsIExhbmcuYmluZCh0aGlzLCB0aGlzLkhhbmRsZUVycm9yKSk7XG5cdFx0aWYgKCFqc29uKVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRpZiAodGhpcy5IYWRFcnJvcnMoanNvbikpIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIHRoaXMuUGFyc2VXZWF0aGVyKGpzb24sIHRoaXMpO1xuXHR9O1xuXG5cdHByaXZhdGUgUGFyc2VXZWF0aGVyKGpzb246IGFueSwgc2VsZjogT3BlbldlYXRoZXJNYXApOiBXZWF0aGVyRGF0YSB7XG5cdFx0dHJ5IHtcblx0XHRcdGxldCB3ZWF0aGVyOiBXZWF0aGVyRGF0YSA9IHtcblx0XHRcdFx0Y29vcmQ6IHtcblx0XHRcdFx0XHRsYXQ6IGpzb24ubGF0LFxuXHRcdFx0XHRcdGxvbjoganNvbi5sb25cblx0XHRcdFx0fSxcblx0XHRcdFx0bG9jYXRpb246IHtcblx0XHRcdFx0XHQvL2NpdHk6IGpzb24ubmFtZSxcblx0XHRcdFx0XHQvL2NvdW50cnk6IGpzb24uc3lzLmNvdW50cnksXG5cdFx0XHRcdFx0dXJsOiBcImh0dHBzOi8vb3BlbndlYXRoZXJtYXAub3JnL2NpdHkvXCIsXG5cdFx0XHRcdFx0dGltZVpvbmU6IGpzb24udGltZXpvbmVcblx0XHRcdFx0fSxcblx0XHRcdFx0ZGF0ZTogbmV3IERhdGUoKGpzb24uY3VycmVudC5kdCkgKiAxMDAwKSxcblx0XHRcdFx0c3VucmlzZTogbmV3IERhdGUoKGpzb24uY3VycmVudC5zdW5yaXNlKSAqIDEwMDApLFxuXHRcdFx0XHRzdW5zZXQ6IG5ldyBEYXRlKChqc29uLmN1cnJlbnQuc3Vuc2V0KSAqIDEwMDApLFxuXHRcdFx0XHR3aW5kOiB7XG5cdFx0XHRcdFx0c3BlZWQ6IGpzb24uY3VycmVudC53aW5kX3NwZWVkLFxuXHRcdFx0XHRcdGRlZ3JlZToganNvbi5jdXJyZW50LndpbmRfZGVnXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRlbXBlcmF0dXJlOiBqc29uLmN1cnJlbnQudGVtcCxcblx0XHRcdFx0cHJlc3N1cmU6IGpzb24uY3VycmVudC5wcmVzc3VyZSxcblx0XHRcdFx0aHVtaWRpdHk6IGpzb24uY3VycmVudC5odW1pZGl0eSxcblx0XHRcdFx0Y29uZGl0aW9uOiB7XG5cdFx0XHRcdFx0bWFpbjoganNvbj8uY3VycmVudD8ud2VhdGhlcj8uWzBdPy5tYWluLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBqc29uPy5jdXJyZW50Py53ZWF0aGVyPy5bMF0/LmRlc2NyaXB0aW9uLFxuXHRcdFx0XHRcdGljb25zOiBzZWxmLlJlc29sdmVJY29uKGpzb24/LmN1cnJlbnQ/LndlYXRoZXI/LlswXT8uaWNvbiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogc2VsZi5SZXNvbHZlQ3VzdG9tSWNvbihqc29uPy5jdXJyZW50Py53ZWF0aGVyPy5bMF0/Lmljb24pXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGV4dHJhX2ZpZWxkOiB7XG5cdFx0XHRcdFx0bmFtZTogXyhcIkZlZWxzIExpa2VcIiksXG5cdFx0XHRcdFx0dmFsdWU6IGpzb24uY3VycmVudC5mZWVsc19saWtlLFxuXHRcdFx0XHRcdHR5cGU6IFwidGVtcGVyYXR1cmVcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRmb3JlY2FzdHM6IFtdXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoanNvbi5taW51dGVseSAhPSBudWxsKSB7XG5cdFx0XHRcdGxldCBpbW1lZGlhdGU6IEltbWVkaWF0ZVByZWNpcGl0YXRpb24gPSB7XG5cdFx0XHRcdFx0c3RhcnQ6IC0xLFxuXHRcdFx0XHRcdGVuZDogLTFcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGpzb24ubWludXRlbHkubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRcdFx0Y29uc3QgZWxlbWVudCA9IGpzb24ubWludXRlbHlbaW5kZXhdO1xuXHRcdFx0XHRcdGlmIChlbGVtZW50LnByZWNpcGl0YXRpb24gPiAwICYmIGltbWVkaWF0ZS5zdGFydCA9PSAtMSkge1xuXHRcdFx0XHRcdFx0aW1tZWRpYXRlLnN0YXJ0ID0gaW5kZXg7XG5cdFx0XHRcdFx0XHRjb250aW51ZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmIChlbGVtZW50LnByZWNpcGl0YXRpb24gPT0gMCAmJiBpbW1lZGlhdGUuc3RhcnQgIT0gLTEpIHtcblx0XHRcdFx0XHRcdGltbWVkaWF0ZS5lbmQgPSBpbmRleDtcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHdlYXRoZXIuaW1tZWRpYXRlUHJlY2lwaXRhdGlvbiA9IGltbWVkaWF0ZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bGV0IGZvcmVjYXN0czogRm9yZWNhc3REYXRhW10gPSBbXTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwganNvbi5kYWlseS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRsZXQgZGF5ID0ganNvbi5kYWlseVtpXTtcblx0XHRcdFx0bGV0IGZvcmVjYXN0OiBGb3JlY2FzdERhdGEgPSB7XG5cdFx0XHRcdFx0ZGF0ZTogbmV3IERhdGUoZGF5LmR0ICogMTAwMCksXG5cdFx0XHRcdFx0dGVtcF9taW46IGRheS50ZW1wLm1pbixcblx0XHRcdFx0XHR0ZW1wX21heDogZGF5LnRlbXAubWF4LFxuXHRcdFx0XHRcdGNvbmRpdGlvbjoge1xuXHRcdFx0XHRcdFx0bWFpbjogZGF5LndlYXRoZXJbMF0ubWFpbixcblx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBkYXkud2VhdGhlclswXS5kZXNjcmlwdGlvbixcblx0XHRcdFx0XHRcdGljb25zOiBzZWxmLlJlc29sdmVJY29uKGRheS53ZWF0aGVyWzBdLmljb24pLFxuXHRcdFx0XHRcdFx0Y3VzdG9tSWNvbjogc2VsZi5SZXNvbHZlQ3VzdG9tSWNvbihkYXkud2VhdGhlclswXS5pY29uKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH07XG5cdFx0XHRcdGZvcmVjYXN0cy5wdXNoKGZvcmVjYXN0KTtcblx0XHRcdH1cblx0XHRcdHdlYXRoZXIuZm9yZWNhc3RzID0gZm9yZWNhc3RzO1xuXG5cdFx0XHRsZXQgaG91cmx5OiBIb3VybHlGb3JlY2FzdERhdGFbXSA9IFtdO1xuXHRcdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGpzb24uaG91cmx5Lmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0XHRjb25zdCBob3VyID0ganNvbi5ob3VybHlbaW5kZXhdO1xuXHRcdFx0XHRsZXQgZm9yZWNhc3Q6IEhvdXJseUZvcmVjYXN0RGF0YSA9IHtcblx0XHRcdFx0XHRkYXRlOiBuZXcgRGF0ZShob3VyLmR0ICogMTAwMCksXG5cdFx0XHRcdFx0dGVtcDogaG91ci50ZW1wLFxuXHRcdFx0XHRcdGNvbmRpdGlvbjoge1xuXHRcdFx0XHRcdFx0bWFpbjogaG91ci53ZWF0aGVyWzBdLm1haW4sXG5cdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogaG91ci53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uLFxuXHRcdFx0XHRcdFx0aWNvbnM6IHNlbGYuUmVzb2x2ZUljb24oaG91ci53ZWF0aGVyWzBdLmljb24pLFxuXHRcdFx0XHRcdFx0Y3VzdG9tSWNvbjogc2VsZi5SZXNvbHZlQ3VzdG9tSWNvbihob3VyLndlYXRoZXJbMF0uaWNvbilcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGhvdXIucG9wID49IDAuMSkge1xuXHRcdFx0XHRcdGZvcmVjYXN0LnByZWNpcGl0YXRpb24gPSB7XG5cdFx0XHRcdFx0XHRjaGFuY2U6IGhvdXIucG9wICogMTAwLFxuXHRcdFx0XHRcdFx0dHlwZTogXCJub25lXCIsXG5cdFx0XHRcdFx0XHR2b2x1bWU6IG51bGxcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoISFob3VyLnJhaW4gJiYgZm9yZWNhc3QucHJlY2lwaXRhdGlvbiAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Zm9yZWNhc3QucHJlY2lwaXRhdGlvbi52b2x1bWUgPSBob3VyLnJhaW5bXCIxaFwiXTtcblx0XHRcdFx0XHRmb3JlY2FzdC5wcmVjaXBpdGF0aW9uLnR5cGUgPSBcInJhaW5cIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNub3cgdGFrZXMgcHJlY2VkZW5jZVxuXHRcdFx0XHRpZiAoISFob3VyLnNub3cgJiYgZm9yZWNhc3QucHJlY2lwaXRhdGlvbiAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Zm9yZWNhc3QucHJlY2lwaXRhdGlvbi52b2x1bWUgPSBob3VyLnNub3dbXCIxaFwiXTtcblx0XHRcdFx0XHRmb3JlY2FzdC5wcmVjaXBpdGF0aW9uLnR5cGUgPSBcInNub3dcIlxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aG91cmx5LnB1c2goZm9yZWNhc3QpO1xuXHRcdFx0fVxuXG5cdFx0XHR3ZWF0aGVyLmhvdXJseUZvcmVjYXN0cyA9IGhvdXJseTtcblx0XHRcdHJldHVybiB3ZWF0aGVyO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIk9wZW5XZWF0aGVyTWFwIFdlYXRoZXIgUGFyc2luZyBlcnJvcjogXCIgKyBlKTtcblx0XHRcdHNlbGYuYXBwLlNob3dFcnJvcih7XG5cdFx0XHRcdHR5cGU6IFwic29mdFwiLFxuXHRcdFx0XHRzZXJ2aWNlOiBcIm9wZW53ZWF0aGVybWFwXCIsXG5cdFx0XHRcdGRldGFpbDogXCJ1bnVzdWFsIHBheWxvYWRcIixcblx0XHRcdFx0bWVzc2FnZTogXyhcIkZhaWxlZCB0byBQcm9jZXNzIEN1cnJlbnQgV2VhdGhlciBJbmZvXCIpXG5cdFx0XHR9KVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cblx0cHJpdmF0ZSBDb25zdHJ1Y3RRdWVyeShiYXNlVXJsOiBzdHJpbmcsIGxvYzogTG9jYXRpb25EYXRhKTogc3RyaW5nIHtcblx0XHRsZXQgcXVlcnkgPSBiYXNlVXJsO1xuXHRcdHF1ZXJ5ID0gcXVlcnkgKyBcImxhdD1cIiArIGxvYy5sYXQgKyBcIiZsb249XCIgKyBsb2MubG9uICsgXCImYXBwaWQ9XCI7XG5cdFx0cXVlcnkgKz0gXCIxYzczZjgyNTlhODZjNmZkNDNjNzE2M2I1NDNjODY0MFwiO1xuXHRcdC8vIEFwcGVuZCBMYW5ndWFnZSBpZiBzdXBwb3J0ZWQgYW5kIGVuYWJsZWRcblx0XHRsZXQgbG9jYWxlOiBzdHJpbmcgPSB0aGlzLkNvbnZlcnRUb0FQSUxvY2FsZSh0aGlzLmFwcC5jb25maWcuY3VycmVudExvY2FsZSk7XG5cdFx0aWYgKHRoaXMuYXBwLmNvbmZpZy5fdHJhbnNsYXRlQ29uZGl0aW9uICYmIElzTGFuZ1N1cHBvcnRlZChsb2NhbGUsIHRoaXMuc3VwcG9ydGVkTGFuZ3VhZ2VzKSkge1xuXHRcdFx0cXVlcnkgPSBxdWVyeSArIFwiJmxhbmc9XCIgKyBsb2NhbGU7XG5cdFx0fVxuXHRcdHJldHVybiBxdWVyeTtcblx0fTtcblxuXHRwcml2YXRlIENvbnZlcnRUb0FQSUxvY2FsZShzeXN0ZW1Mb2NhbGU6IHN0cmluZykge1xuXHRcdC8vIERpYWxlY3Q/IHN1cHBvcnQgYnkgT1dNXG5cdFx0aWYgKHN5c3RlbUxvY2FsZSA9PSBcInpoLWNuXCIgfHwgc3lzdGVtTG9jYWxlID09IFwiemgtY25cIiB8fCBzeXN0ZW1Mb2NhbGUgPT0gXCJwdC1iclwiKSB7XG5cdFx0XHRyZXR1cm4gc3lzdGVtTG9jYWxlO1xuXHRcdH1cblx0XHRsZXQgbGFuZyA9IHN5c3RlbUxvY2FsZS5zcGxpdChcIi1cIilbMF07XG5cdFx0Ly8gT1dNIHVzZXMgZGlmZmVyZW50IGxhbmd1YWdlIGNvZGUgZm9yIFN3ZWRpc2gsIEN6ZWNoLCBLb3JlYW4sIExhdHZpYW4sIE5vcndlZ2lhblxuXHRcdGlmIChsYW5nID09IFwic3ZcIikge1xuXHRcdFx0cmV0dXJuIFwic2VcIjtcblx0XHR9IGVsc2UgaWYgKGxhbmcgPT0gXCJjc1wiKSB7XG5cdFx0XHRyZXR1cm4gXCJjelwiO1xuXHRcdH0gZWxzZSBpZiAobGFuZyA9PSBcImtvXCIpIHtcblx0XHRcdHJldHVybiBcImtyXCI7XG5cdFx0fSBlbHNlIGlmIChsYW5nID09IFwibHZcIikge1xuXHRcdFx0cmV0dXJuIFwibGFcIjtcblx0XHR9IGVsc2UgaWYgKGxhbmcgPT0gXCJublwiIHx8IGxhbmcgPT0gXCJuYlwiKSB7XG5cdFx0XHRyZXR1cm4gXCJub1wiO1xuXHRcdH1cblx0XHRyZXR1cm4gbGFuZztcblx0fVxuXG5cdHByaXZhdGUgSGFkRXJyb3JzKGpzb246IGFueSk6IGJvb2xlYW4ge1xuXHRcdGlmICghdGhpcy5IYXNSZXR1cm5lZEVycm9yKGpzb24pKSByZXR1cm4gZmFsc2U7XG5cdFx0bGV0IGVycm9yTXNnID0gXCJPcGVuV2VhdGhlck1hcCBSZXNwb25zZTogXCI7XG5cdFx0bGV0IGVycm9yID0ge1xuXHRcdFx0c2VydmljZTogXCJvcGVud2VhdGhlcm1hcFwiLFxuXHRcdFx0dHlwZTogXCJoYXJkXCIsXG5cdFx0fSBhcyBBcHBsZXRFcnJvcjtcblx0XHRsZXQgZXJyb3JQYXlsb2FkOiBPcGVuV2VhdGhlck1hcEVycm9yID0ganNvbjtcblx0XHRzd2l0Y2ggKGVycm9yUGF5bG9hZC5jb2QpIHtcblx0XHRcdGNhc2UgKFwiNDAwXCIpOlxuXHRcdFx0XHRlcnJvci5kZXRhaWwgPSBcImJhZCBsb2NhdGlvbiBmb3JtYXRcIjtcblx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9IF8oXCJQbGVhc2UgbWFrZSBzdXJlIExvY2F0aW9uIGlzIGluIHRoZSBjb3JyZWN0IGZvcm1hdCBpbiB0aGUgU2V0dGluZ3NcIik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAoXCI0MDFcIik6XG5cdFx0XHRcdGVycm9yLmRldGFpbCA9IFwiYmFkIGtleVwiO1xuXHRcdFx0XHRlcnJvci5tZXNzYWdlID0gXyhcIk1ha2Ugc3VyZSB5b3UgZW50ZXJlZCB0aGUgY29ycmVjdCBrZXkgaW4gc2V0dGluZ3NcIik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAoXCI0MDRcIik6XG5cdFx0XHRcdGVycm9yLmRldGFpbCA9IFwibG9jYXRpb24gbm90IGZvdW5kXCI7XG5cdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSBfKFwiTG9jYXRpb24gbm90IGZvdW5kLCBtYWtlIHN1cmUgbG9jYXRpb24gaXMgYXZhaWxhYmxlIG9yIGl0IGlzIGluIHRoZSBjb3JyZWN0IGZvcm1hdFwiKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIChcIjQyOVwiKTpcblx0XHRcdFx0ZXJyb3IuZGV0YWlsID0gXCJrZXkgYmxvY2tlZFwiO1xuXHRcdFx0XHRlcnJvci5tZXNzYWdlID0gXyhcIklmIHRoaXMgcHJvYmxlbSBwZXJzaXN0cywgcGxlYXNlIGNvbnRhY3QgdGhlIEF1dGhvciBvZiB0aGlzIGFwcGxldFwiKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRlcnJvci5kZXRhaWwgPSBcInVua25vd25cIjtcblx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9IF8oXCJVbmtub3duIEVycm9yLCBwbGVhc2Ugc2VlIHRoZSBsb2dzIGluIExvb2tpbmcgR2xhc3NcIik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH07XG5cdFx0dGhpcy5hcHAuU2hvd0Vycm9yKGVycm9yKTtcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJPcGVuV2VhdGhlck1hcCBFcnJvciBDb2RlOiBcIiArIGVycm9yUGF5bG9hZC5jb2QpXG5cdFx0TG9nLkluc3RhbmNlLkVycm9yKGVycm9yTXNnICsgZXJyb3JQYXlsb2FkLm1lc3NhZ2UpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdHByaXZhdGUgSGFzUmV0dXJuZWRFcnJvcihqc29uOiBhbnkpIHtcblx0XHRyZXR1cm4gKCEhanNvbj8uY29kKTtcblx0fVxuXG5cdHB1YmxpYyBIYW5kbGVFcnJvcihlcnJvcjogSHR0cEVycm9yKTogYm9vbGVhbiB7XG5cdFx0aWYgKGVycm9yLmNvZGUgPT0gNDA0KSB7XG5cdFx0XHR0aGlzLmFwcC5TaG93RXJyb3Ioe1xuXHRcdFx0XHRkZXRhaWw6IFwibG9jYXRpb24gbm90IGZvdW5kXCIsXG5cdFx0XHRcdG1lc3NhZ2U6IF8oXCJMb2NhdGlvbiBub3QgZm91bmQsIG1ha2Ugc3VyZSBsb2NhdGlvbiBpcyBhdmFpbGFibGUgb3IgaXQgaXMgaW4gdGhlIGNvcnJlY3QgZm9ybWF0XCIpLFxuXHRcdFx0XHR1c2VyRXJyb3I6IHRydWUsXG5cdFx0XHRcdHR5cGU6IFwiaGFyZFwiXG5cdFx0XHR9KVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHByaXZhdGUgUmVzb2x2ZUljb24oaWNvbjogc3RyaW5nKTogQnVpbHRpbkljb25zW10ge1xuXHRcdC8vIGh0dHBzOi8vb3BlbndlYXRoZXJtYXAub3JnL3dlYXRoZXItY29uZGl0aW9uc1xuXHRcdC8qIGZhbGxiYWNrIGljb25zIGFyZTogd2VhdGhlci1jbGVhci1uaWdodCBcblx0XHR3ZWF0aGVyLWNsZWFyIHdlYXRoZXItZmV3LWNsb3Vkcy1uaWdodCB3ZWF0aGVyLWZldy1jbG91ZHMgXG5cdFx0d2VhdGhlci1mb2cgd2VhdGhlci1vdmVyY2FzdCB3ZWF0aGVyLXNldmVyZS1hbGVydCB3ZWF0aGVyLXNob3dlcnMgXG5cdFx0d2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZCB3ZWF0aGVyLXNub3cgd2VhdGhlci1zdG9ybSAqL1xuXHRcdHN3aXRjaCAoaWNvbikge1xuXHRcdFx0Y2FzZSBcIjEwZFwiOlxuXHRcdFx0XHQvKiByYWluIGRheSAqL1xuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItZnJlZXppbmctcmFpblwiXVxuXHRcdFx0Y2FzZSBcIjEwblwiOlxuXHRcdFx0XHQvKiByYWluIG5pZ2h0ICovXG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCJdXG5cdFx0XHRjYXNlIFwiMDluXCI6XG5cdFx0XHRcdC8qIHNob3dlcnMgbmlnaCovXG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLXNob3dlcnNcIl1cblx0XHRcdGNhc2UgXCIwOWRcIjpcblx0XHRcdFx0Lyogc2hvd2VycyBkYXkgKi9cblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItc2hvd2Vyc1wiXVxuXHRcdFx0Y2FzZSBcIjEzZFwiOlxuXHRcdFx0XHQvKiBzbm93IGRheSovXG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLXNub3dcIl1cblx0XHRcdGNhc2UgXCIxM25cIjpcblx0XHRcdFx0Lyogc25vdyBuaWdodCAqL1xuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1zbm93XCJdXG5cdFx0XHRjYXNlIFwiNTBkXCI6XG5cdFx0XHRcdC8qIG1pc3QgZGF5ICovXG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLWZvZ1wiXVxuXHRcdFx0Y2FzZSBcIjUwblwiOlxuXHRcdFx0XHQvKiBtaXN0IG5pZ2h0ICovXG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLWZvZ1wiXVxuXHRcdFx0Y2FzZSBcIjA0ZFwiOlxuXHRcdFx0XHQvKiBicm9rZW4gY2xvdWRzIGRheSAqL1xuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1vdmVyY2FzdFwiLCBcIndlYXRoZXItY2xvdWRzXCIsIFwid2VhdGhlci1mZXctY2xvdWRzXCJdXG5cdFx0XHRjYXNlIFwiMDRuXCI6XG5cdFx0XHRcdC8qIGJyb2tlbiBjbG91ZHMgbmlnaHQgKi9cblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItb3ZlcmNhc3RcIiwgXCJ3ZWF0aGVyLWNsb3Vkcy1uaWdodFwiLCBcIndlYXRoZXItZmV3LWNsb3Vkcy1uaWdodFwiXVxuXHRcdFx0Y2FzZSBcIjAzblwiOlxuXHRcdFx0XHQvKiBtb3N0bHkgY2xvdWR5IChuaWdodCkgKi9cblx0XHRcdFx0cmV0dXJuIFsnd2VhdGhlci1jbG91ZHMtbmlnaHQnLCBcIndlYXRoZXItZmV3LWNsb3Vkcy1uaWdodFwiXVxuXHRcdFx0Y2FzZSBcIjAzZFwiOlxuXHRcdFx0XHQvKiBtb3N0bHkgY2xvdWR5IChkYXkpICovXG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLWNsb3Vkc1wiLCBcIndlYXRoZXItZmV3LWNsb3Vkc1wiLCBcIndlYXRoZXItb3ZlcmNhc3RcIl1cblx0XHRcdGNhc2UgXCIwMm5cIjpcblx0XHRcdFx0LyogcGFydGx5IGNsb3VkeSAobmlnaHQpICovXG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLWZldy1jbG91ZHMtbmlnaHRcIl1cblx0XHRcdGNhc2UgXCIwMmRcIjpcblx0XHRcdFx0LyogcGFydGx5IGNsb3VkeSAoZGF5KSAqL1xuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1mZXctY2xvdWRzXCJdXG5cdFx0XHRjYXNlIFwiMDFuXCI6XG5cdFx0XHRcdC8qIGNsZWFyIChuaWdodCkgKi9cblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItY2xlYXItbmlnaHRcIl1cblx0XHRcdGNhc2UgXCIwMWRcIjpcblx0XHRcdFx0Lyogc3VubnkgKi9cblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItY2xlYXJcIl1cblx0XHRcdGNhc2UgXCIxMWRcIjpcblx0XHRcdFx0Lyogc3Rvcm0gZGF5ICovXG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLXN0b3JtXCJdXG5cdFx0XHRjYXNlIFwiMTFuXCI6XG5cdFx0XHRcdC8qIHN0b3JtIG5pZ2h0ICovXG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLXN0b3JtXCJdXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHR9XG5cdH07XG5cblx0cHJpdmF0ZSBSZXNvbHZlQ3VzdG9tSWNvbihpY29uOiBzdHJpbmcpOiBDdXN0b21JY29ucyB7XG5cdFx0c3dpdGNoIChpY29uKSB7XG5cdFx0XHRjYXNlIFwiMTBkXCI6XG5cdFx0XHRcdC8qIHJhaW4gZGF5ICovXG5cdFx0XHRcdHJldHVybiBcImRheS1yYWluLXN5bWJvbGljXCI7XG5cdFx0XHRjYXNlIFwiMTBuXCI6XG5cdFx0XHRcdC8qIHJhaW4gbmlnaHQgKi9cblx0XHRcdFx0cmV0dXJuIFwibmlnaHQtcmFpbi1zeW1ib2xpY1wiO1xuXHRcdFx0Y2FzZSBcIjA5blwiOlxuXHRcdFx0XHQvKiBzaG93ZXJzIG5pZ2gqL1xuXHRcdFx0XHRyZXR1cm4gXCJuaWdodC1zaG93ZXJzLXN5bWJvbGljXCI7XG5cdFx0XHRjYXNlIFwiMDlkXCI6XG5cdFx0XHRcdC8qIHNob3dlcnMgZGF5ICovXG5cdFx0XHRcdHJldHVybiBcImRheS1zaG93ZXJzLXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCIxM2RcIjpcblx0XHRcdFx0Lyogc25vdyBkYXkqL1xuXHRcdFx0XHRyZXR1cm4gXCJkYXktc25vdy1zeW1ib2xpY1wiXG5cdFx0XHRjYXNlIFwiMTNuXCI6XG5cdFx0XHRcdC8qIHNub3cgbmlnaHQgKi9cblx0XHRcdFx0cmV0dXJuIFwibmlnaHQtYWx0LXNub3ctc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcIjUwZFwiOlxuXHRcdFx0XHQvKiBtaXN0IGRheSAqL1xuXHRcdFx0XHRyZXR1cm4gXCJkYXktZm9nLXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCI1MG5cIjpcblx0XHRcdFx0LyogbWlzdCBuaWdodCAqL1xuXHRcdFx0XHRyZXR1cm4gXCJuaWdodC1mb2ctc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcIjA0ZFwiOlxuXHRcdFx0XHQvKiBicm9rZW4gY2xvdWRzIGRheSAqL1xuXHRcdFx0XHRyZXR1cm4gXCJkYXktY2xvdWR5LXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCIwNG5cIjpcblx0XHRcdFx0LyogYnJva2VuIGNsb3VkcyBuaWdodCAqL1xuXHRcdFx0XHRyZXR1cm4gXCJuaWdodC1hbHQtY2xvdWR5LXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCIwM25cIjpcblx0XHRcdFx0LyogbW9zdGx5IGNsb3VkeSAobmlnaHQpICovXG5cdFx0XHRcdHJldHVybiBcIm5pZ2h0LWFsdC1jbG91ZHktc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcIjAzZFwiOlxuXHRcdFx0XHQvKiBtb3N0bHkgY2xvdWR5IChkYXkpICovXG5cdFx0XHRcdHJldHVybiBcImRheS1jbG91ZHktc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcIjAyblwiOlxuXHRcdFx0XHQvKiBwYXJ0bHkgY2xvdWR5IChuaWdodCkgKi9cblx0XHRcdFx0cmV0dXJuIFwibmlnaHQtYWx0LWNsb3VkeS1zeW1ib2xpY1wiXG5cdFx0XHRjYXNlIFwiMDJkXCI6XG5cdFx0XHRcdC8qIHBhcnRseSBjbG91ZHkgKGRheSkgKi9cblx0XHRcdFx0cmV0dXJuIFwiZGF5LWNsb3VkeS1zeW1ib2xpY1wiXG5cdFx0XHRjYXNlIFwiMDFuXCI6XG5cdFx0XHRcdC8qIGNsZWFyIChuaWdodCkgKi9cblx0XHRcdFx0cmV0dXJuIFwibmlnaHQtY2xlYXItc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcIjAxZFwiOlxuXHRcdFx0XHQvKiBzdW5ueSAqL1xuXHRcdFx0XHRyZXR1cm4gXCJkYXktc3Vubnktc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcIjExZFwiOlxuXHRcdFx0XHQvKiBzdG9ybSBkYXkgKi9cblx0XHRcdFx0cmV0dXJuIFwiZGF5LXRodW5kZXJzdG9ybS1zeW1ib2xpY1wiXG5cdFx0XHRjYXNlIFwiMTFuXCI6XG5cdFx0XHRcdC8qIHN0b3JtIG5pZ2h0ICovXG5cdFx0XHRcdHJldHVybiBcIm5pZ2h0LWFsdC10aHVuZGVyc3Rvcm0tc3ltYm9saWNcIlxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIFwiY2xvdWQtcmVmcmVzaC1zeW1ib2xpY1wiXG5cdFx0fVxuXHR9O1xufTtcblxuaW50ZXJmYWNlIE9wZW5XZWF0aGVyTWFwRXJyb3Ige1xuXHRjb2Q6IHN0cmluZztcblx0bWVzc2FnZTogc3RyaW5nO1xufVxuXG5jb25zdCBvcGVuV2VhdGhlck1hcENvbmRpdGlvbkxpYnJhcnkgPSBbXG5cdC8vIEdyb3VwIDJ4eDogVGh1bmRlcnN0b3JtXG5cdF8oXCJUaHVuZGVyc3Rvcm0gd2l0aCBsaWdodCByYWluXCIpLFxuXHRfKFwiVGh1bmRlcnN0b3JtIHdpdGggcmFpblwiKSxcblx0XyhcIlRodW5kZXJzdG9ybSB3aXRoIGhlYXZ5IHJhaW5cIiksXG5cdF8oXCJMaWdodCB0aHVuZGVyc3Rvcm1cIiksXG5cdF8oXCJUaHVuZGVyc3Rvcm1cIiksXG5cdF8oXCJIZWF2eSB0aHVuZGVyc3Rvcm1cIiksXG5cdF8oXCJSYWdnZWQgdGh1bmRlcnN0b3JtXCIpLFxuXHRfKFwiVGh1bmRlcnN0b3JtIHdpdGggbGlnaHQgZHJpenpsZVwiKSxcblx0XyhcIlRodW5kZXJzdG9ybSB3aXRoIGRyaXp6bGVcIiksXG5cdF8oXCJUaHVuZGVyc3Rvcm0gd2l0aCBoZWF2eSBkcml6emxlXCIpLFxuXHQvLyBHcm91cCAzeHg6IERyaXp6bGVcblx0XyhcIkxpZ2h0IGludGVuc2l0eSBkcml6emxlXCIpLFxuXHRfKFwiRHJpenpsZVwiKSxcblx0XyhcIkhlYXZ5IGludGVuc2l0eSBkcml6emxlXCIpLFxuXHRfKFwiTGlnaHQgaW50ZW5zaXR5IGRyaXp6bGUgcmFpblwiKSxcblx0XyhcIkRyaXp6bGUgcmFpblwiKSxcblx0XyhcIkhlYXZ5IGludGVuc2l0eSBkcml6emxlIHJhaW5cIiksXG5cdF8oXCJTaG93ZXIgcmFpbiBhbmQgZHJpenpsZVwiKSxcblx0XyhcIkhlYXZ5IHNob3dlciByYWluIGFuZCBkcml6emxlXCIpLFxuXHRfKFwiU2hvd2VyIGRyaXp6bGVcIiksXG5cdC8vIEdyb3VwIDV4eDogUmFpblxuXHRfKFwiTGlnaHQgcmFpblwiKSxcblx0XyhcIk1vZGVyYXRlIHJhaW5cIiksXG5cdF8oXCJIZWF2eSBpbnRlbnNpdHkgcmFpblwiKSxcblx0XyhcIlZlcnkgaGVhdnkgcmFpblwiKSxcblx0XyhcIkV4dHJlbWUgcmFpblwiKSxcblx0XyhcIkZyZWV6aW5nIHJhaW5cIiksXG5cdF8oXCJMaWdodCBpbnRlbnNpdHkgc2hvd2VyIHJhaW5cIiksXG5cdF8oXCJTaG93ZXIgcmFpblwiKSxcblx0XyhcIkhlYXZ5IGludGVuc2l0eSBzaG93ZXIgcmFpblwiKSxcblx0XyhcIlJhZ2dlZCBzaG93ZXIgcmFpblwiKSxcblx0Ly8gR3JvdXAgNnh4OiBTbm93IFxuXHRfKFwiTGlnaHQgc25vd1wiKSxcblx0XyhcIlNub3dcIiksXG5cdF8oXCJIZWF2eSBzbm93XCIpLFxuXHRfKFwiU2xlZXRcIiksXG5cdF8oXCJTaG93ZXIgc2xlZXRcIiksXG5cdF8oXCJMaWdodCByYWluIGFuZCBzbm93XCIpLFxuXHRfKFwiUmFpbiBhbmQgc25vd1wiKSxcblx0XyhcIkxpZ2h0IHNob3dlciBzbm93XCIpLFxuXHRfKFwiU2hvd2VyIHNub3dcIiksXG5cdF8oXCJIZWF2eSBzaG93ZXIgc25vd1wiKSxcblx0Ly8gR3JvdXAgN3h4OiBBdG1vc3BoZXJlIFxuXHRfKFwiTWlzdFwiKSxcblx0XyhcIlNtb2tlXCIpLFxuXHRfKFwiSGF6ZVwiKSxcblx0XyhcIlNhbmQsIGR1c3Qgd2hpcmxzXCIpLFxuXHRfKFwiRm9nXCIpLFxuXHRfKFwiU2FuZFwiKSxcblx0XyhcIkR1c3RcIiksXG5cdF8oXCJWb2xjYW5pYyBhc2hcIiksXG5cdF8oXCJTcXVhbGxzXCIpLFxuXHRfKFwiVG9ybmFkb1wiKSxcblx0Ly8gR3JvdXAgODAwOiBDbGVhciBcblx0XyhcIkNsZWFyXCIpLFxuXHRfKFwiQ2xlYXIgc2t5XCIpLFxuXHRfKFwiU2t5IGlzIGNsZWFyXCIpLFxuXHQvLyBHcm91cCA4MHg6IENsb3Vkc1xuXHRfKFwiQ2xvdWRzXCIpLFxuXHRfKFwiRmV3IGNsb3Vkc1wiKSxcblx0XyhcIlNjYXR0ZXJlZCBjbG91ZHNcIiksXG5cdF8oXCJCcm9rZW4gY2xvdWRzXCIpLFxuXHRfKFwiT3ZlcmNhc3QgY2xvdWRzXCIpXG5dOyIsIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vICAgICAgICAgICAgICAgIFVTIFdlYXRoZXIgICAgICAgICAgICAgLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmltcG9ydCB7IEh0dHBFcnJvciB9IGZyb20gXCIuLi9saWIvaHR0cExpYlwiO1xuaW1wb3J0IHsgTG9nIH0gZnJvbSBcIi4uL2xpYi9sb2dnZXJcIjtcbmltcG9ydCB7IFdlYXRoZXJBcHBsZXQgfSBmcm9tIFwiLi4vbWFpblwiO1xuaW1wb3J0IHsgU3VuQ2FsYyB9IGZyb20gXCIuLi9saWIvc3VuQ2FsY1wiO1xuaW1wb3J0IHsgV2VhdGhlclByb3ZpZGVyLCBXZWF0aGVyRGF0YSwgRm9yZWNhc3REYXRhLCBIb3VybHlGb3JlY2FzdERhdGEsIENvbmRpdGlvbiwgTG9jYXRpb25EYXRhIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBfLCBHZXREaXN0YW5jZSwgS1BIdG9NUFMsIENlbHNpdXNUb0tlbHZpbiwgSXNOaWdodCwgRmFocmVuaGVpdFRvS2VsdmluIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBVU1dlYXRoZXIgaW1wbGVtZW50cyBXZWF0aGVyUHJvdmlkZXIge1xuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gIFByb3BlcnRpZXNcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRwdWJsaWMgcmVhZG9ubHkgcHJldHR5TmFtZSA9IF8oXCJVUyBXZWF0aGVyXCIpO1xuXHRwdWJsaWMgcmVhZG9ubHkgbmFtZSA9IFwiVVMgV2VhdGhlclwiO1xuXHRwdWJsaWMgcmVhZG9ubHkgbWF4Rm9yZWNhc3RTdXBwb3J0ID0gNztcblx0cHVibGljIHJlYWRvbmx5IHdlYnNpdGUgPSBcImh0dHBzOi8vd3d3LndlYXRoZXIuZ292L1wiO1xuXHRwdWJsaWMgcmVhZG9ubHkgbWF4SG91cmx5Rm9yZWNhc3RTdXBwb3J0ID0gMTU2O1xuXHRwdWJsaWMgcmVhZG9ubHkgbmVlZHNBcGlLZXkgPSBmYWxzZTtcblxuXHRwcml2YXRlIHN1bkNhbGM6IFN1bkNhbGM7XG5cblx0cHJpdmF0ZSBzaXRlc1VybCA9IFwiaHR0cHM6Ly9hcGkud2VhdGhlci5nb3YvcG9pbnRzL1wiO1xuXG5cdHByaXZhdGUgYXBwOiBXZWF0aGVyQXBwbGV0O1xuXHRwcml2YXRlIGdyaWQ6IEdyaWRQYXlsb2FkID0gbnVsbDtcblx0LyoqIEluIG1ldHJlcyAqL1xuXHRwcml2YXRlIHJlYWRvbmx5IE1BWF9TVEFUSU9OX0RJU1QgPSA1MDAwMDtcblx0cHJpdmF0ZSBvYnNlcnZhdGlvblN0YXRpb25zOiBTdGF0aW9uUGF5bG9hZFtdID0gbnVsbDtcblx0cHJpdmF0ZSBjdXJyZW50TG9jOiBMb2NhdGlvbkRhdGEgPSBudWxsO1xuXHRwcml2YXRlIGN1cnJlbnRMb2NJRDogc3RyaW5nID0gbnVsbDtcblxuXHRjb25zdHJ1Y3RvcihfYXBwOiBXZWF0aGVyQXBwbGV0KSB7XG5cdFx0dGhpcy5hcHAgPSBfYXBwO1xuXHRcdHRoaXMuc3VuQ2FsYyA9IG5ldyBTdW5DYWxjKCk7XG5cdH1cblxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vICBGdW5jdGlvbnNcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRwdWJsaWMgYXN5bmMgR2V0V2VhdGhlcihsb2M6IExvY2F0aW9uRGF0YSk6IFByb21pc2U8V2VhdGhlckRhdGE+IHtcblx0XHRpZiAobG9jID09IG51bGwpIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gZ2V0dGluZyBncmlkIGFuZCBzdGF0aW9uIGRhdGEgZmlyc3QgdGltZSBvciBsb2NhdGlvbiBjaGFuZ2VkXG5cdFx0bGV0IGxvY0lEID0gbG9jLmxhdC50b1N0cmluZygpICsgXCIsXCIgKyBsb2MubG9uLnRvU3RyaW5nKCk7XG5cdFx0aWYgKCF0aGlzLmdyaWQgfHwgIXRoaXMub2JzZXJ2YXRpb25TdGF0aW9ucyB8fCB0aGlzLmN1cnJlbnRMb2NJRCAhPSBsb2NJRCkge1xuXHRcdFx0TG9nLkluc3RhbmNlLlByaW50KFwiRG93bmxvYWRpbmcgbmV3IHNpdGUgZGF0YVwiKVxuXHRcdFx0dGhpcy5jdXJyZW50TG9jID0gbG9jO1xuXHRcdFx0dGhpcy5jdXJyZW50TG9jSUQgPSBsb2NJRDtcblxuXHRcdFx0bGV0IGdyaWQgPSBhd2FpdCB0aGlzLkdldEdyaWREYXRhKGxvYyk7XG5cdFx0XHRpZiAoZ3JpZCA9PSBudWxsKSByZXR1cm4gbnVsbDtcblx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIkdyaWQgZm91bmQ6IFwiICsgSlNPTi5zdHJpbmdpZnkoZ3JpZCwgbnVsbCwgMikpO1xuXG5cdFx0XHRsZXQgb2JzZXJ2YXRpb25TdGF0aW9ucyA9IGF3YWl0IHRoaXMuR2V0U3RhdGlvbkRhdGEoZ3JpZC5wcm9wZXJ0aWVzLm9ic2VydmF0aW9uU3RhdGlvbnMpO1xuXHRcdFx0aWYgKG9ic2VydmF0aW9uU3RhdGlvbnMgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cblx0XHRcdC8vIENhY2hpbmdcblx0XHRcdHRoaXMuZ3JpZCA9IGdyaWQ7XG5cdFx0XHR0aGlzLm9ic2VydmF0aW9uU3RhdGlvbnMgPSBvYnNlcnZhdGlvblN0YXRpb25zO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIlNpdGUgZGF0YSBkb3dubG9hZGluZyBza2lwcGVkXCIpXG5cdFx0fVxuXG5cdFx0Ly8gTG9uZyB3YWl0IHRpbWUsIGNhbid0IGRvIFByb21pc2UuYWxsIGJlY2F1c2UgVVMgd2VhdGhlciB3aWxsIGJhbiBJUCBmb3Igc29tZSB0aW1lIG9uIHNwYW1taW5nXG5cdFx0bGV0IG9ic2VydmF0aW9ucyA9IGF3YWl0IHRoaXMuR2V0T2JzZXJ2YXRpb25zSW5SYW5nZSh0aGlzLk1BWF9TVEFUSU9OX0RJU1QsIGxvYywgdGhpcy5vYnNlcnZhdGlvblN0YXRpb25zKTtcblxuXHRcdGxldCBob3VybHlGb3JlY2FzdFByb21pc2UgPSB0aGlzLmFwcC5Mb2FkSnNvbkFzeW5jPEZvcmVjYXN0c1BheWxvYWQ+KHRoaXMuZ3JpZC5wcm9wZXJ0aWVzLmZvcmVjYXN0SG91cmx5ICsgXCI/dW5pdHM9c2lcIik7XG5cdFx0bGV0IGZvcmVjYXN0UHJvbWlzZSA9IHRoaXMuYXBwLkxvYWRKc29uQXN5bmM8Rm9yZWNhc3RzUGF5bG9hZD4odGhpcy5ncmlkLnByb3BlcnRpZXMuZm9yZWNhc3QpO1xuXHRcdGxldCBob3VybHkgPSBhd2FpdCBob3VybHlGb3JlY2FzdFByb21pc2U7XG5cdFx0bGV0IGZvcmVjYXN0ID0gYXdhaXQgZm9yZWNhc3RQcm9taXNlO1xuXG5cdFx0aWYgKCFob3VybHkgfHwgIWZvcmVjYXN0KSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJGYWlsZWQgdG8gb2J0YWluIGZvcmVjYXN0IERhdGFcIik7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHQvLyBQYXJzaW5nIGRhdGFcblx0XHRsZXQgd2VhdGhlciA9IHRoaXMuUGFyc2VDdXJyZW50KG9ic2VydmF0aW9ucywgaG91cmx5KTtcblx0XHR3ZWF0aGVyLmZvcmVjYXN0cyA9IHRoaXMuUGFyc2VGb3JlY2FzdChmb3JlY2FzdCk7XG5cdFx0d2VhdGhlci5ob3VybHlGb3JlY2FzdHMgPSB0aGlzLlBhcnNlSG91cmx5Rm9yZWNhc3QoaG91cmx5LCB0aGlzKTtcblxuXHRcdHJldHVybiB3ZWF0aGVyO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIEFwcCBlcnJvcnMgaW50ZXJuYWxseVxuXHQgKiBAcGFyYW0gbG9jIFxuXHQgKi9cblx0cHJpdmF0ZSBhc3luYyBHZXRHcmlkRGF0YShsb2M6IExvY2F0aW9uRGF0YSk6IFByb21pc2U8R3JpZFBheWxvYWQ+IHtcblx0XHQvLyBIYW5kbGluZyBvdXQgb2YgY291bnRyeSBlcnJvcnMgaW4gY2FsbGJhY2tcblx0XHRsZXQgc2l0ZURhdGEgPSBhd2FpdCB0aGlzLmFwcC5Mb2FkSnNvbkFzeW5jPEdyaWRQYXlsb2FkPih0aGlzLnNpdGVzVXJsICsgbG9jLmxhdC50b1N0cmluZygpICsgXCIsXCIgKyBsb2MubG9uLnRvU3RyaW5nKCksIG51bGwsIChtc2cpID0+IHRoaXMuT25PYnRhaW5pbmdHcmlkRGF0YShtc2cpKTtcblx0XHRyZXR1cm4gc2l0ZURhdGE7XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlcyBhcHAgZXJyb3JzIGludGVybmFsbHlcblx0ICogQHBhcmFtIHN0YXRpb25MaXN0VXJsIFxuXHQgKi9cblx0cHJpdmF0ZSBhc3luYyBHZXRTdGF0aW9uRGF0YShzdGF0aW9uTGlzdFVybDogc3RyaW5nKTogUHJvbWlzZTxTdGF0aW9uUGF5bG9hZFtdPiB7XG5cdFx0bGV0IHN0YXRpb25zID0gYXdhaXQgdGhpcy5hcHAuTG9hZEpzb25Bc3luYzxTdGF0aW9uc1BheWxvYWQ+KHN0YXRpb25MaXN0VXJsKTtcblx0XHRyZXR1cm4gc3RhdGlvbnM/LmZlYXR1cmVzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBBTEwgT2JzZXJ2YXRpb24gc3RhdGlvbnMgZGF0YSBpbiByYW5nZS5cblx0ICogRGF0YSBpcyBwcmV0dHkgc3BvdHR5IHNvIHdlIGNhbiBmaWxsIHRoZW0gdXAgZnJvbSBzdGF0aW9ucyBmdXJ0aGVyIGF3YXkgbGF0ZXJcblx0ICogQHBhcmFtIHJhbmdlIGluIG1ldHJlc1xuXHQgKi9cblx0cHJpdmF0ZSBhc3luYyBHZXRPYnNlcnZhdGlvbnNJblJhbmdlKHJhbmdlOiBudW1iZXIsIGxvYzogTG9jYXRpb25EYXRhLCBzdGF0aW9uczogU3RhdGlvblBheWxvYWRbXSk6IFByb21pc2U8T2JzZXJ2YXRpb25QYXlsb2FkW10+IHtcblx0XHRsZXQgb2JzZXJ2YXRpb25zID0gW107XG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRpb25zLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IHN0YXRpb25zW2luZGV4XTtcblx0XHRcdGVsZW1lbnQuZGlzdCA9IEdldERpc3RhbmNlKGVsZW1lbnQuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0sIGVsZW1lbnQuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0sIGxvYy5sYXQsIGxvYy5sb24pO1xuXHRcdFx0aWYgKGVsZW1lbnQuZGlzdCA+IHJhbmdlKSBicmVhaztcblx0XHRcdC8vIGRvIG5vdCBzaG93IGVycm9ycyBoZXJlLCB3ZSBjYWxsIG11bHRpcGxlIG9ic2VydmF0aW9uIHNpdGVzXG5cdFx0XHRsZXQgb2JzZXJ2YXRpb24gPSBhd2FpdCB0aGlzLmFwcC5Mb2FkSnNvbkFzeW5jPE9ic2VydmF0aW9uUGF5bG9hZD4oc3RhdGlvbnNbaW5kZXhdLmlkICsgXCIvb2JzZXJ2YXRpb25zL2xhdGVzdFwiLCBudWxsLCAobXNnKSA9PiBmYWxzZSk7XG5cdFx0XHRpZiAob2JzZXJ2YXRpb24gPT0gbnVsbCkge1xuXHRcdFx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJGYWlsZWQgdG8gZ2V0IG9ic2VydmF0aW9ucyBmcm9tIFwiICsgc3RhdGlvbnNbaW5kZXhdLmlkKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRvYnNlcnZhdGlvbnMucHVzaChvYnNlcnZhdGlvbik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvYnNlcnZhdGlvbnM7XG5cdH1cblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBtZXNzYWdlIFNvdXAgTWVzc2FnZSBvYmplY3Rcblx0ICovXG5cdHByaXZhdGUgT25PYnRhaW5pbmdHcmlkRGF0YSh0aGlzOiBVU1dlYXRoZXIsIG1lc3NhZ2U6IEh0dHBFcnJvcik6IGJvb2xlYW4ge1xuXHRcdGlmIChtZXNzYWdlLmNvZGUgPT0gNDA0KSB7XG5cdFx0XHRsZXQgZGF0YSA9IEpTT04ucGFyc2UobWVzc2FnZT8ucmVzcG9uc2U/LnJlc3BvbnNlX2JvZHk/LmRhdGEpO1xuXHRcdFx0aWYgKGRhdGEudGl0bGUgPT0gXCJEYXRhIFVuYXZhaWxhYmxlIEZvciBSZXF1ZXN0ZWQgUG9pbnRcIikge1xuXHRcdFx0XHR0aGlzLmFwcC5TaG93RXJyb3Ioe1xuXHRcdFx0XHRcdHR5cGU6IFwiaGFyZFwiLFxuXHRcdFx0XHRcdHVzZXJFcnJvcjogdHJ1ZSxcblx0XHRcdFx0XHRkZXRhaWw6IFwibG9jYXRpb24gbm90IGNvdmVyZWRcIixcblx0XHRcdFx0XHRzZXJ2aWNlOiBcInVzLXdlYXRoZXJcIixcblx0XHRcdFx0XHRtZXNzYWdlOiBfKFwiTG9jYXRpb24gaXMgb3V0c2lkZSBVUywgcGxlYXNlIHVzZSBhIGRpZmZlcmVudCBwcm92aWRlci5cIilcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIE9ic2VydmF0aW9uIGRhdGEgaXMgYSBiaXQgc3BvdHR5LCBzbyB3ZSBtZXNoIFxuXHQgKiBzdGF0aW9uIGRhdGFcblx0ICogQHBhcmFtIG9ic2VydmF0aW9ucyBcblx0ICovXG5cdHByaXZhdGUgTWVzaE9ic2VydmF0aW9uRGF0YShvYnNlcnZhdGlvbnM6IE9ic2VydmF0aW9uUGF5bG9hZFtdKTogT2JzZXJ2YXRpb25QYXlsb2FkIHtcblx0XHRpZiAob2JzZXJ2YXRpb25zLmxlbmd0aCA8IDEpIHJldHVybiBudWxsO1xuXHRcdGxldCByZXN1bHQgPSBvYnNlcnZhdGlvbnNbMF07XG5cdFx0aWYgKG9ic2VydmF0aW9ucy5sZW5ndGggPT0gMSkgcmV0dXJuIHJlc3VsdDtcblx0XHRmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgb2JzZXJ2YXRpb25zLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IG9ic2VydmF0aW9uc1tpbmRleF07XG5cdFx0XHQvLyBXZSB3YW50IHRvIGtub3cgd2hlbiB0aGlzIGhhcHBlbnMsIGF0IGxlYXN0IGZvciBkZWJ1Z2dpbmdcblx0XHRcdGxldCBkZWJ1Z1RleHQgPVxuXHRcdFx0XHRcIiBPYnNlcnZhdGlvbiBkYXRhIG1pc3NpbmcsIHBsdWdnZWQgaW4gZnJvbSBJRCBcIiArXG5cdFx0XHRcdGVsZW1lbnQuaWQgKyBcIiwgaW5kZXggXCIgKyBpbmRleCArXG5cdFx0XHRcdFwiLCBkaXN0YW5jZSBcIlxuXHRcdFx0XHQrIE1hdGgucm91bmQoR2V0RGlzdGFuY2UoXG5cdFx0XHRcdFx0ZWxlbWVudC5nZW9tZXRyeS5jb29yZGluYXRlc1sxXSxcblx0XHRcdFx0XHRlbGVtZW50Lmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdLFxuXHRcdFx0XHRcdHRoaXMuY3VycmVudExvYy5sYXQsXG5cdFx0XHRcdFx0dGhpcy5jdXJyZW50TG9jLmxvblxuXHRcdFx0XHQpKVxuXHRcdFx0XHQrIFwiIG1ldHJlc1wiO1xuXHRcdFx0aWYgKHJlc3VsdC5wcm9wZXJ0aWVzLmljb24gPT0gbnVsbCkge1xuXHRcdFx0XHRyZXN1bHQucHJvcGVydGllcy5pY29uID0gZWxlbWVudC5wcm9wZXJ0aWVzLmljb247XG5cdFx0XHRcdHJlc3VsdC5wcm9wZXJ0aWVzLnRleHREZXNjcmlwdGlvbiA9IGVsZW1lbnQucHJvcGVydGllcy50ZXh0RGVzY3JpcHRpb247XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIldlYXRoZXIgY29uZGl0aW9uXCIgKyBkZWJ1Z1RleHQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlc3VsdC5wcm9wZXJ0aWVzLnRlbXBlcmF0dXJlLnZhbHVlID09IG51bGwpIHtcblx0XHRcdFx0cmVzdWx0LnByb3BlcnRpZXMudGVtcGVyYXR1cmUudmFsdWUgPSBlbGVtZW50LnByb3BlcnRpZXMudGVtcGVyYXR1cmUudmFsdWU7XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIlRlbXBlcmF0dXJlXCIgKyBkZWJ1Z1RleHQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlc3VsdC5wcm9wZXJ0aWVzLndpbmRTcGVlZC52YWx1ZSA9PSBudWxsKSB7XG5cdFx0XHRcdHJlc3VsdC5wcm9wZXJ0aWVzLndpbmRTcGVlZC52YWx1ZSA9IGVsZW1lbnQucHJvcGVydGllcy53aW5kU3BlZWQudmFsdWU7XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIldpbmQgU3BlZWRcIiArIGRlYnVnVGV4dCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmVzdWx0LnByb3BlcnRpZXMud2luZERpcmVjdGlvbi52YWx1ZSA9PSBudWxsKSB7XG5cdFx0XHRcdHJlc3VsdC5wcm9wZXJ0aWVzLndpbmREaXJlY3Rpb24udmFsdWUgPSBlbGVtZW50LnByb3BlcnRpZXMud2luZERpcmVjdGlvbi52YWx1ZTtcblx0XHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiV2luZCBkZWdyZWVcIiArIGRlYnVnVGV4dCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmVzdWx0LnByb3BlcnRpZXMuYmFyb21ldHJpY1ByZXNzdXJlLnZhbHVlID09IG51bGwpIHtcblx0XHRcdFx0cmVzdWx0LnByb3BlcnRpZXMuYmFyb21ldHJpY1ByZXNzdXJlLnZhbHVlID0gZWxlbWVudC5wcm9wZXJ0aWVzLmJhcm9tZXRyaWNQcmVzc3VyZS52YWx1ZTtcblx0XHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiUHJlc3N1cmVcIiArIGRlYnVnVGV4dCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmVzdWx0LnByb3BlcnRpZXMucmVsYXRpdmVIdW1pZGl0eS52YWx1ZSA9PSBudWxsKSB7XG5cdFx0XHRcdHJlc3VsdC5wcm9wZXJ0aWVzLnJlbGF0aXZlSHVtaWRpdHkudmFsdWUgPSBlbGVtZW50LnByb3BlcnRpZXMucmVsYXRpdmVIdW1pZGl0eS52YWx1ZTtcblx0XHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiSHVtaWRpdHlcIiArIGRlYnVnVGV4dCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmVzdWx0LnByb3BlcnRpZXMud2luZENoaWxsLnZhbHVlID09IG51bGwpIHtcblx0XHRcdFx0cmVzdWx0LnByb3BlcnRpZXMud2luZENoaWxsLnZhbHVlID0gZWxlbWVudC5wcm9wZXJ0aWVzLndpbmRDaGlsbC52YWx1ZTtcblx0XHRcdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiV2luZENoaWxsXCIgKyBkZWJ1Z1RleHQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlc3VsdC5wcm9wZXJ0aWVzLnZpc2liaWxpdHkudmFsdWUgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXN1bHQucHJvcGVydGllcy52aXNpYmlsaXR5LnZhbHVlID0gZWxlbWVudC5wcm9wZXJ0aWVzLnZpc2liaWxpdHkudmFsdWU7XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5EZWJ1ZyhcIlZpc2liaWxpdHlcIiArIGRlYnVnVGV4dCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBqc29uIFxuXHQgKiBAcGFyYW0gaG91cmx5IGNhbiBiZSBudWxsXG5cdCAqL1xuXHRwcml2YXRlIFBhcnNlQ3VycmVudChqc29uOiBPYnNlcnZhdGlvblBheWxvYWRbXSwgaG91cmx5OiBGb3JlY2FzdHNQYXlsb2FkKTogV2VhdGhlckRhdGEge1xuXHRcdGlmIChqc29uLmxlbmd0aCA9PSAwKSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJObyBvYnNlcnZhdGlvbiBzdGF0aW9ucy9kYXRhIGFyZSBhdmFpbGFibGVcIik7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0bGV0IG9ic2VydmF0aW9uID0gdGhpcy5NZXNoT2JzZXJ2YXRpb25EYXRhKGpzb24pO1xuXHRcdGxldCB0aW1lc3RhbXAgPSBuZXcgRGF0ZShvYnNlcnZhdGlvbi5wcm9wZXJ0aWVzLnRpbWVzdGFtcCk7XG5cdFx0bGV0IHRpbWVzID0gdGhpcy5zdW5DYWxjLmdldFRpbWVzKG5ldyBEYXRlKCksIG9ic2VydmF0aW9uLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdLCBvYnNlcnZhdGlvbi5nZW9tZXRyeS5jb29yZGluYXRlc1swXSwgb2JzZXJ2YXRpb24ucHJvcGVydGllcy5lbGV2YXRpb24udmFsdWUpO1xuXHRcdHRyeSB7XG5cdFx0XHRsZXQgd2VhdGhlcjogV2VhdGhlckRhdGEgPSB7XG5cdFx0XHRcdGNvb3JkOiB7XG5cdFx0XHRcdFx0bGF0OiBvYnNlcnZhdGlvbi5nZW9tZXRyeS5jb29yZGluYXRlc1sxXSxcblx0XHRcdFx0XHRsb246IG9ic2VydmF0aW9uLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGxvY2F0aW9uOiB7XG5cdFx0XHRcdFx0Y2l0eTogLyp0aGlzLnN0YXRpb25zWzBdLnByb3BlcnRpZXMubmFtZSovIG51bGwsXG5cdFx0XHRcdFx0Y291bnRyeTogLypcIlVTQVwiKi9udWxsLFxuXHRcdFx0XHRcdHVybDogXCJodHRwczovL2ZvcmVjYXN0LndlYXRoZXIuZ292L01hcENsaWNrLnBocD9sYXQ9XCIgKyB0aGlzLmN1cnJlbnRMb2MubGF0LnRvU3RyaW5nKCkgKyBcIiZsb249XCIgKyB0aGlzLmN1cnJlbnRMb2MubG9uLnRvU3RyaW5nKCksXG5cdFx0XHRcdFx0dGltZVpvbmU6IHRoaXMub2JzZXJ2YXRpb25TdGF0aW9uc1swXS5wcm9wZXJ0aWVzLnRpbWVab25lLFxuXHRcdFx0XHRcdGRpc3RhbmNlRnJvbTogdGhpcy5vYnNlcnZhdGlvblN0YXRpb25zWzBdLmRpc3Rcblx0XHRcdFx0fSxcblx0XHRcdFx0ZGF0ZTogdGltZXN0YW1wLFxuXHRcdFx0XHRzdW5yaXNlOiB0aW1lcy5zdW5yaXNlLFxuXHRcdFx0XHRzdW5zZXQ6IHRpbWVzLnN1bnNldCxcblx0XHRcdFx0d2luZDoge1xuXHRcdFx0XHRcdHNwZWVkOiBLUEh0b01QUyhvYnNlcnZhdGlvbi5wcm9wZXJ0aWVzLndpbmRTcGVlZC52YWx1ZSksXG5cdFx0XHRcdFx0ZGVncmVlOiBvYnNlcnZhdGlvbi5wcm9wZXJ0aWVzLndpbmREaXJlY3Rpb24udmFsdWVcblx0XHRcdFx0fSxcblx0XHRcdFx0dGVtcGVyYXR1cmU6IENlbHNpdXNUb0tlbHZpbihvYnNlcnZhdGlvbi5wcm9wZXJ0aWVzLnRlbXBlcmF0dXJlLnZhbHVlKSxcblx0XHRcdFx0cHJlc3N1cmU6IG9ic2VydmF0aW9uLnByb3BlcnRpZXMuYmFyb21ldHJpY1ByZXNzdXJlLnZhbHVlIC8gMTAwLCAvLyBmcm9tIFBhIHRvIGhQYVxuXHRcdFx0XHRodW1pZGl0eTogb2JzZXJ2YXRpb24ucHJvcGVydGllcy5yZWxhdGl2ZUh1bWlkaXR5LnZhbHVlLFxuXHRcdFx0XHRjb25kaXRpb246IHRoaXMuUmVzb2x2ZUNvbmRpdGlvbihvYnNlcnZhdGlvbi5wcm9wZXJ0aWVzLmljb24sIElzTmlnaHQodGltZXMpKSxcblx0XHRcdFx0Zm9yZWNhc3RzOiBbXVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKG9ic2VydmF0aW9uLnByb3BlcnRpZXMud2luZENoaWxsLnZhbHVlICE9IG51bGwpIHtcblx0XHRcdFx0d2VhdGhlci5leHRyYV9maWVsZCA9IHtcblx0XHRcdFx0XHRuYW1lOiBfKFwiRmVlbHMgTGlrZVwiKSxcblx0XHRcdFx0XHR2YWx1ZTogQ2Vsc2l1c1RvS2VsdmluKG9ic2VydmF0aW9uLnByb3BlcnRpZXMud2luZENoaWxsLnZhbHVlKSxcblx0XHRcdFx0XHR0eXBlOiBcInRlbXBlcmF0dXJlXCJcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmICh3ZWF0aGVyLmNvbmRpdGlvbiA9PSBudWxsICYmIGhvdXJseSAhPSBudWxsKSB7XG5cdFx0XHRcdHdlYXRoZXIuY29uZGl0aW9uID0gdGhpcy5SZXNvbHZlQ29uZGl0aW9uKGhvdXJseS5wcm9wZXJ0aWVzLnBlcmlvZHNbMF0uaWNvbik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gd2VhdGhlcjtcblx0XHR9XG5cdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIlVTIFdlYXRoZXIgUGFyc2luZyBlcnJvcjogXCIgKyBlKTtcblx0XHRcdHRoaXMuYXBwLlNob3dFcnJvcih7IHR5cGU6IFwic29mdFwiLCBzZXJ2aWNlOiBcInVzLXdlYXRoZXJcIiwgZGV0YWlsOiBcInVudXN1YWwgcGF5bG9hZFwiLCBtZXNzYWdlOiBfKFwiRmFpbGVkIHRvIFByb2Nlc3MgQ3VycmVudCBXZWF0aGVyIEluZm9cIikgfSlcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fTtcblxuXHRwcml2YXRlIENoZWNrSWZIYXNUaHJlZUVsZW1lbnRzRm9yRGF5KGpzb246IEZvcmVjYXN0c1BheWxvYWQpOiBib29sZWFuIHtcblx0XHRpZiAoanNvbi5wcm9wZXJ0aWVzLnBlcmlvZHMubGVuZ3RoIDwgMykgcmV0dXJuIGZhbHNlO1xuXG5cdFx0bGV0IGNvdW50ZXIgPSAwO1xuXHRcdGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCAzOyBpbmRleCsrKSB7XG5cdFx0XHRjb25zdCBlbGVtZW50ID0ganNvbi5wcm9wZXJ0aWVzLnBlcmlvZHNbaW5kZXhdO1xuXHRcdFx0Y29uc3QgcHJldkVsZW1lbnQgPSBqc29uLnByb3BlcnRpZXMucGVyaW9kc1tpbmRleCAtIDFdO1xuXHRcdFx0bGV0IHByZXZEYXRlID0gbmV3IERhdGUocHJldkVsZW1lbnQuc3RhcnRUaW1lKS50b0xvY2FsZURhdGVTdHJpbmcodW5kZWZpbmVkLCB7dGltZVpvbmU6IHRoaXMub2JzZXJ2YXRpb25TdGF0aW9uc1swXS5wcm9wZXJ0aWVzLnRpbWVab25lfSk7XG5cdFx0XHRsZXQgY3VyRGF0ZSA9IG5ldyBEYXRlKGVsZW1lbnQuc3RhcnRUaW1lKS50b0xvY2FsZURhdGVTdHJpbmcodW5kZWZpbmVkLCB7dGltZVpvbmU6IHRoaXMub2JzZXJ2YXRpb25TdGF0aW9uc1swXS5wcm9wZXJ0aWVzLnRpbWVab25lfSk7XG5cdFx0XHRpZiAocHJldkRhdGUgPT0gY3VyRGF0ZSlcblx0XHRcdFx0Y291bnRlcisrO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRjb3VudGVyID0gMDtcblxuXHRcdFx0aWYgKGNvdW50ZXIgPiAxKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0cmV0dXJuICBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIEZpbmRUb2RheUluZGV4KGpzb246IEZvcmVjYXN0c1BheWxvYWQsIHN0YXJ0SW5kZXg6IG51bWJlciA9IDApOiBudW1iZXIge1xuXHRcdGxldCB0b2RheSA9IG5ldyBEYXRlKCk7XG5cdFx0Zm9yIChsZXQgaW5kZXggPSBzdGFydEluZGV4OyBpbmRleCA8IGpzb24ucHJvcGVydGllcy5wZXJpb2RzLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGpzb24ucHJvcGVydGllcy5wZXJpb2RzW2luZGV4XTtcblx0XHRcdGxldCB0b2RheURhdGUgPSB0b2RheS50b0xvY2FsZURhdGVTdHJpbmcodW5kZWZpbmVkLCB7dGltZVpvbmU6IHRoaXMub2JzZXJ2YXRpb25TdGF0aW9uc1swXS5wcm9wZXJ0aWVzLnRpbWVab25lfSk7XG5cdFx0XHRsZXQgY3VyRGF0ZSA9IG5ldyBEYXRlKGVsZW1lbnQuc3RhcnRUaW1lKS50b0xvY2FsZURhdGVTdHJpbmcodW5kZWZpbmVkLCB7dGltZVpvbmU6IHRoaXMub2JzZXJ2YXRpb25TdGF0aW9uc1swXS5wcm9wZXJ0aWVzLnRpbWVab25lfSk7XG5cdFx0XHRpZiAodG9kYXlEYXRlICE9IGN1ckRhdGUpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0cmV0dXJuIGluZGV4O1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgUGFyc2VGb3JlY2FzdChqc29uOiBGb3JlY2FzdHNQYXlsb2FkKTogRm9yZWNhc3REYXRhW10ge1xuXHRcdGxldCBmb3JlY2FzdHM6IEZvcmVjYXN0RGF0YVtdID0gW107XG5cdFx0dHJ5IHtcblx0XHRcdC8vIENoZWNrIGlmIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkgaGFzIG1vcmUgdGhhbiAyIGVsZW1lbnRzIGZvciBhIHNpbmdsZSBkYXkgKHNob3VsZCBiZSAyIGRheS9uaWdodCksIHRoZW4gc2tpcFxuXHRcdFx0bGV0IHN0YXJ0SW5kZXggPSAodGhpcy5DaGVja0lmSGFzVGhyZWVFbGVtZW50c0ZvckRheShqc29uKSA/IDEgOiAwKTtcblx0XHRcdC8vIEZpbmQgdG9kYXkgaWYgZG9lc24ndCBzdGFydCB3aXRoIHRoYXRcblx0XHRcdHN0YXJ0SW5kZXggPSB0aGlzLkZpbmRUb2RheUluZGV4KGpzb24sIHN0YXJ0SW5kZXgpO1xuXHRcdFx0Ly8gaWYgc3RhcnRzIHdpdGggbmlnaHQsIGhhbmRsaW5nIHRvZGF5IHNlcGFyYXRlbHlcblx0XHRcdGlmIChqc29uLnByb3BlcnRpZXMucGVyaW9kc1tzdGFydEluZGV4XS5pc0RheXRpbWUgPT0gZmFsc2UpIHtcblx0XHRcdFx0c3RhcnRJbmRleCsrO1xuXHRcdFx0XHRsZXQgdG9kYXkgPSBqc29uLnByb3BlcnRpZXMucGVyaW9kc1swXVxuXHRcdFx0XHRsZXQgZm9yZWNhc3Q6IEZvcmVjYXN0RGF0YSA9IHtcblx0XHRcdFx0XHRkYXRlOiBuZXcgRGF0ZSh0b2RheS5zdGFydFRpbWUpLFxuXHRcdFx0XHRcdHRlbXBfbWluOiBGYWhyZW5oZWl0VG9LZWx2aW4odG9kYXkudGVtcGVyYXR1cmUpLFxuXHRcdFx0XHRcdHRlbXBfbWF4OiBGYWhyZW5oZWl0VG9LZWx2aW4odG9kYXkudGVtcGVyYXR1cmUpLFxuXHRcdFx0XHRcdGNvbmRpdGlvbjogdGhpcy5SZXNvbHZlQ29uZGl0aW9uKHRvZGF5Lmljb24pLFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRmb3JlY2FzdHMucHVzaChmb3JlY2FzdCk7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwganNvbi5wcm9wZXJ0aWVzLnBlcmlvZHMubGVuZ3RoOyBpICs9IDIpIHtcblx0XHRcdFx0Ly8gRGF5IGFuZCBuaWdodCBkYXRhIGlzIHNlcGFyYXRlIGluIGFycmF5LCBzbyB3ZSBhbHRlcm5hdGVcblx0XHRcdFx0bGV0IGRheSA9IGpzb24ucHJvcGVydGllcy5wZXJpb2RzW2ldO1xuXHRcdFx0XHRsZXQgbmlnaHQgPSBqc29uLnByb3BlcnRpZXMucGVyaW9kc1tpICsgMV07IC8vIHRoaXMgY2FuIGJlIHVuZGVmaW5lZFxuXHRcdFx0XHRpZiAoIW5pZ2h0KSBuaWdodCA9IGRheTtcblx0XHRcdFx0bGV0IGZvcmVjYXN0OiBGb3JlY2FzdERhdGEgPSB7XG5cdFx0XHRcdFx0ZGF0ZTogbmV3IERhdGUoZGF5LnN0YXJ0VGltZSksXG5cdFx0XHRcdFx0dGVtcF9taW46IEZhaHJlbmhlaXRUb0tlbHZpbihuaWdodC50ZW1wZXJhdHVyZSksXG5cdFx0XHRcdFx0dGVtcF9tYXg6IEZhaHJlbmhlaXRUb0tlbHZpbihkYXkudGVtcGVyYXR1cmUpLFxuXHRcdFx0XHRcdGNvbmRpdGlvbjogdGhpcy5SZXNvbHZlQ29uZGl0aW9uKGRheS5pY29uKSxcblx0XHRcdFx0fTtcblx0XHRcdFx0Zm9yZWNhc3RzLnB1c2goZm9yZWNhc3QpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZvcmVjYXN0cztcblx0XHR9XG5cdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIlVTIFdlYXRoZXIgRm9yZWNhc3QgUGFyc2luZyBlcnJvcjogXCIgKyBlKTtcblx0XHRcdHRoaXMuYXBwLlNob3dFcnJvcih7IHR5cGU6IFwic29mdFwiLCBzZXJ2aWNlOiBcInVzLXdlYXRoZXJcIiwgZGV0YWlsOiBcInVudXN1YWwgcGF5bG9hZFwiLCBtZXNzYWdlOiBfKFwiRmFpbGVkIHRvIFByb2Nlc3MgRm9yZWNhc3QgSW5mb1wiKSB9KVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cdHByaXZhdGUgUGFyc2VIb3VybHlGb3JlY2FzdChqc29uOiBGb3JlY2FzdHNQYXlsb2FkLCBzZWxmOiBVU1dlYXRoZXIpOiBIb3VybHlGb3JlY2FzdERhdGFbXSB7XG5cdFx0bGV0IGZvcmVjYXN0czogSG91cmx5Rm9yZWNhc3REYXRhW10gPSBbXTtcblx0XHR0cnkge1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBqc29uLnByb3BlcnRpZXMucGVyaW9kcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRsZXQgaG91ciA9IGpzb24ucHJvcGVydGllcy5wZXJpb2RzW2ldO1xuXHRcdFx0XHRsZXQgdGltZXN0YW1wID0gbmV3IERhdGUoaG91ci5zdGFydFRpbWUpO1xuXG5cdFx0XHRcdGxldCBmb3JlY2FzdDogSG91cmx5Rm9yZWNhc3REYXRhID0ge1xuXHRcdFx0XHRcdGRhdGU6IHRpbWVzdGFtcCxcblx0XHRcdFx0XHR0ZW1wOiBDZWxzaXVzVG9LZWx2aW4oaG91ci50ZW1wZXJhdHVyZSksXG5cdFx0XHRcdFx0Y29uZGl0aW9uOiBzZWxmLlJlc29sdmVDb25kaXRpb24oaG91ci5pY29uLCAhaG91ci5pc0RheXRpbWUpLFxuXHRcdFx0XHRcdHByZWNpcGl0YXRpb246IG51bGxcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3JlY2FzdHMucHVzaChmb3JlY2FzdCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZm9yZWNhc3RzO1xuXHRcdH1cblx0XHRjYXRjaCAoZSkge1xuXHRcdFx0TG9nLkluc3RhbmNlLkVycm9yKFwiVVMgV2VhdGhlciBzZXJ2aWNlIEZvcmVjYXN0IFBhcnNpbmcgZXJyb3I6IFwiICsgZSk7XG5cdFx0XHRzZWxmLmFwcC5TaG93RXJyb3IoeyB0eXBlOiBcInNvZnRcIiwgc2VydmljZTogXCJ1cy13ZWF0aGVyXCIsIGRldGFpbDogXCJ1bnVzdWFsIHBheWxvYWRcIiwgbWVzc2FnZTogXyhcIkZhaWxlZCB0byBQcm9jZXNzIEhvdXJseSBGb3JlY2FzdCBJbmZvXCIpIH0pXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogaHR0cHM6Ly9hcGkud2VhdGhlci5nb3YvaWNvbnNcblx0ICogQHBhcmFtIGljb24gXG5cdCAqIEBwYXJhbSBpc05pZ2h0IFxuXHQgKi9cblx0cHJpdmF0ZSBSZXNvbHZlQ29uZGl0aW9uKGljb246IHN0cmluZywgaXNOaWdodDogYm9vbGVhbiA9IGZhbHNlKTogQ29uZGl0aW9uIHtcblx0XHRpZiAoaWNvbiA9PSBudWxsKSByZXR1cm4gbnVsbDtcblx0XHRsZXQgY29kZSA9IGljb24ubWF0Y2goLyg/IVxcLylbYS16X10rKD89KFxcP3wsKSkvKTsgLy8gQ2xlYXIgY3J1ZnQgZnJvbSBpY29uIHVybCwgbGVhdmUgb25seSBjb2RlXG5cdFx0bGV0IGljb25UeXBlID0gdGhpcy5hcHAuY29uZmlnLkljb25UeXBlO1xuXHRcdHN3aXRjaCAoY29kZVswXSkge1xuXHRcdFx0Y2FzZSBcInNrY1wiOiAvLyBGYWlyL2NsZWFyXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkNsZWFyXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiQ2xlYXJcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogKGlzTmlnaHQpID8gXCJuaWdodC1jbGVhci1zeW1ib2xpY1wiIDogXCJkYXktc3Vubnktc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogKGlzTmlnaHQpID8gW1wid2VhdGhlci1jbGVhci1uaWdodFwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdIDogW1wid2VhdGhlci1jbGVhclwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJmZXdcIjogLy8gQSBmZXcgY2xvdWRzXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkZldyBjbG91ZHNcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJGZXcgY2xvdWRzXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IChpc05pZ2h0KSA/IFwibmlnaHQtYWx0LWNsb3VkeS1zeW1ib2xpY1wiIDogXCJkYXktY2xvdWR5LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItY2xlYXItbmlnaHRcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwic2N0XCI6IC8vIFBhcnRseSBjbG91ZHlcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiUGFydGx5IGNsb3VkeVwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlBhcnRseSBjbG91ZHlcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogKGlzTmlnaHQpID8gXCJuaWdodC1hbHQtY2xvdWR5LXN5bWJvbGljXCIgOiBcImRheS1jbG91ZHktc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1jbGVhclwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJia25cIjogLy8gTW9zdGx5IGNsb3VkeVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJNb3N0bHkgY2xvdWR5XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiTW9zdGx5IGNsb3VkeVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoaXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1jbG91ZHktc3ltYm9saWNcIiA6IFwiZGF5LWNsb3VkeS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWNsb3Vkcy1uaWdodFwiLCBcIndlYXRoZXItb3ZlcmNhc3RcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwib3ZjXCI6IC8vIE92ZXJjYXN0XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIk92ZXJjYXN0XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiT3ZlcmNhc3RcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJjbG91ZHktc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1jbG91ZHNcIiwgXCJ3ZWF0aGVyLW92ZXJjYXN0XCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcIndpbmRfc2tjXCI6IC8vIEZhaXIvY2xlYXIgYW5kIHdpbmR5XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkNsZWFyXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiQ2xlYXIgYW5kIHdpbmR5XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IChJc05pZ2h0KSA/IFwibmlnaHQtYWx0LXdpbmQtc3ltYm9saWNcIiA6IFwiZGF5LXdpbmR5LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IChpc05pZ2h0KSA/IFtcIndlYXRoZXItY2xlYXItbmlnaHRcIl0gOiBbXCJ3ZWF0aGVyLWNsZWFyXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJ3aW5kX2Zld1wiOiAvLyBBIGZldyBjbG91ZHMgYW5kIHdpbmR5XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkZldyBjbG91ZHNcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJGZXcgY2xvdWRzIGFuZCB3aW5keVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoSXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1jbG91ZHktd2luZHktc3ltYm9saWNcIiA6IFwiZGF5LWNsb3VkeS13aW5keS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiAoaXNOaWdodCkgPyBbXCJ3ZWF0aGVyLWZldy1jbG91ZHMtbmlnaHRcIl0gOiBbXCJ3ZWF0aGVyLWZldy1jbG91ZHNcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcIndpbmRfc2N0XCI6IC8vIFBhcnRseSBjbG91ZHkgYW5kIHdpbmR5XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlBhcnRseSBjbG91ZHlcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJQYXJ0bHkgY2xvdWR5IGFuZCB3aW5keVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoSXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1jbG91ZHktd2luZHktc3ltYm9saWNcIiA6IFwiZGF5LWNsb3VkeS13aW5keS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiAoaXNOaWdodCkgPyBbXCJ3ZWF0aGVyLWNsb3Vkcy1uaWdodFwiLCBcIndlYXRoZXItZmV3LWNsb3Vkcy1uaWdodFwiXSA6IFtcIndlYXRoZXItY2xvdWRzXCIsIFwid2VhdGhlci1mZXctY2xvdWRzXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJ3aW5kX2JrblwiOiAvLyBNb3N0bHkgY2xvdWR5IGFuZCB3aW5keVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJNb3N0bHkgY2xvdWR5XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiTW9zdGx5IGNsb3VkeSBhbmQgd2luZHlcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogKElzTmlnaHQpID8gXCJuaWdodC1hbHQtY2xvdWR5LXdpbmR5LXN5bWJvbGljXCIgOiBcImRheS1jbG91ZHktd2luZHktc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogKGlzTmlnaHQpID8gW1wid2VhdGhlci1jbG91ZHMtbmlnaHRcIiwgXCJ3ZWF0aGVyLWZldy1jbG91ZHMtbmlnaHRcIl0gOiBbXCJ3ZWF0aGVyLWNsb3Vkc1wiLCBcIndlYXRoZXItZmV3LWNsb3Vkc1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwid2luZF9vdmNcIjpcblx0XHRcdFx0cmV0dXJuIHsgLy8gT3ZlcmNhc3QgYW5kIHdpbmR5XG5cdFx0XHRcdFx0bWFpbjogXyhcIk92ZXJjYXN0XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiT3ZlcmNhc3QgYW5kIHdpbmR5XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiY2xvdWR5LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItb3ZlcmNhc3RcIiwgXCJ3ZWF0aGVyLW1hbnktY2xvdWRzXCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcInNub3dcIjogLy8gIFwiU25vd1wiXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJTbm93XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwic25vdy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNub3dcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwicmFpbl9zbm93XCI6IC8vIFJhaW4vc25vd1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJSYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiU25vd3kgcmFpblwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInJhaW4tbWl4LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc25vdy1yYWluXCIsIFwid2VhdGhlci1zbm93XCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcInJhaW5fc2xlZXRcIjogLy8gUmFpbi9zbGVldFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJTbGVldFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNsZWV0XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwicmFpbi1taXgtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcInNub3dfc2xlZXRcIjogLy8gU25vdy9zbGVldFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJTbGVldFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNsZWV0XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwic2xlZXQtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1oYWlsXCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImZ6cmFcIjogLy8gRnJlZXppbmcgcmFpblxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJGcmVlemluZyByYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiRnJlZXppbmcgcmFpblwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInJhaW4td2luZC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLWhhaWxcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwicmFpbl9menJhXCI6IC8vIFJhaW4vZnJlZXppbmcgcmFpblxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJGcmVlemluZyByYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiRnJlZXppbmcgcmFpblwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInJhaW4td2luZC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLWhhaWxcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwic25vd19menJhXCI6IC8vIEZyZWV6aW5nIHJhaW4vc25vd1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJGcmVlemluZyByYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiRnJlZXppbmcgcmFpbiBhbmQgc25vd1wiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInJhaW4td2luZC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLWhhaWxcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwic2xlZXRcIjogLy8gU2xlZXRcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiU2xlZXRcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJTbGVldFwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInJhaW4tbWl4LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItcmFpblwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJyYWluXCI6IC8vIFJhaW5cblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiUmFpblwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlJhaW5cIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJyYWluLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItcmFpblwiLCBcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwicmFpbl9zaG93ZXJzXCI6IC8vIFJhaW4gc2hvd2VycyAoaGlnaCBjbG91ZCBjb3Zlcilcblx0XHRcdGNhc2UgXCJyYWluX3Nob3dlcnNfaGlcIjogLy8gUmFpbiBzaG93ZXJzIChsb3cgY2xvdWQgY292ZXIpXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJSYWluIHNob3dlcnNcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJyYWluLW1peC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCIsIFwid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcInRzcmFcIjogLy8gVGh1bmRlcnN0b3JtIChoaWdoIGNsb3VkIGNvdmVyKVxuXHRcdFx0Y2FzZSBcInRzcmFfc2N0XCI6IC8vIFRodW5kZXJzdG9ybSAobWVkaXVtIGNsb3VkIGNvdmVyKVxuXHRcdFx0Y2FzZSBcInRzcmFfaGlcIjogLy8gVGh1bmRlcnN0b3JtIChsb3cgY2xvdWQgY292ZXIpXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlRodW5kZXJzdG9ybVwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlRodW5kZXJzdG9ybVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInRodW5kZXJzdG9ybS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXN0b3JtXCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcInRvcm5hZG9cIjogLy8gVG9ybmFkb1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJUb3JuYWRvXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiVG9ybmFkb1wiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInRvcm5hZG8tc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImh1cnJpY2FuZVwiOiAvLyBIdXJyaWNhbmUgY29uZGl0aW9uc1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJIdXJyaWNhbmVcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIdXJyaWNhbmVcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJodXJyaWNhbmUtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcInRyb3BpY2FsX3N0b3JtXCI6IC8vIFRyb3BpY2FsIHN0b3JtIGNvbmRpdGlvbnNcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiU3Rvcm1cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJUcm9waWNhbCBzdG9ybVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInRodW5kZXJzdG9ybS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXN0b3JtXCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImR1c3RcIjogLy8gRHVzdFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJEdXN0XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiRHVzdFwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImR1c3Qtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1mb2dcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwic21va2VcIjogLy8gU21va2Vcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiU21va2VcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJTbW9rZVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNtb2tlLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItZm9nXCIsIFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImhhemVcIjogLy8gSGF6ZVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJIYXplXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSGF6ZVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImZvZy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZvZ1wiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJob3RcIjogLy8gSG90XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkhvdFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkhvdFwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImhvdC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiY29sZFwiOiAvLyBDb2xkXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkNvbGRcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJDb2xkXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwic25vd2ZsYWtlLWNvbGQtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zdG9ybVwiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJibGl6emFyZFwiOiAvLyBCbGl6emFyZFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJCbGl6emFyZFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkJsaXp6YXJkXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwidGh1bmRlcnN0b3JtLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc3Rvcm1cIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiZm9nXCI6IC8vIEZvZy9taXN0XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkZvZ1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkZvZ1wiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImZvZy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZvZ1wiLCBcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlVua25vd25cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJVbmtub3duXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiY2xvdWQtcmVmcmVzaC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuaW50ZXJmYWNlIEdyaWRQYXlsb2FkIHtcblx0XCJAY29udGV4dFwiOiBhbnksXG5cdGlkOiBzdHJpbmc7XG5cdHR5cGU6IHN0cmluZztcblx0Z2VvbWV0cnk6IHtcblx0XHR0eXBlOiBzdHJpbmcsXG5cdFx0LyoqIFtsb24sIGxhdF0gKi9cblx0XHRjb29yZGluYXRlczogbnVtYmVyW11cblx0fSxcblx0cHJvcGVydGllczoge1xuXHRcdFwiQGlkXCI6IHN0cmluZyxcblx0XHRcIkB0eXBlXCI6IFwid3g6UG9pbnRcIixcblx0XHRjd2E6IHN0cmluZztcblx0XHRmb3JlY2FzdE9mZmljZTogc3RyaW5nO1xuXHRcdGdyaWRJZDogc3RyaW5nO1xuXHRcdGdyaWRYOiBudW1iZXI7XG5cdFx0Z3JpZFk6IG51bWJlcjtcblx0XHQvKiogdXJsICovXG5cdFx0Zm9yZWNhc3Q6IHN0cmluZztcblx0XHQvKiogdXJsICovXG5cdFx0Zm9yZWNhc3RIb3VybHk6IHN0cmluZztcblx0XHQvKiogdXJsICovXG5cdFx0Zm9yZWNhc3RHcmlkRGF0YTogc3RyaW5nO1xuXHRcdC8qKiB1cmwgKi9cblx0XHRvYnNlcnZhdGlvblN0YXRpb25zOiBzdHJpbmc7XG5cdFx0cmVsYXRpdmVMb2NhdGlvbjoge1xuXHRcdFx0dHlwZTogc3RyaW5nO1xuXHRcdFx0Z2VvbWV0cnk6IHtcblx0XHRcdFx0dHlwZTogc3RyaW5nLFxuXHRcdFx0XHRjb29yZGluYXRlczogbnVtYmVyW11cblx0XHRcdH0sXG5cdFx0XHRwcm9wZXJ0aWVzOiB7XG5cdFx0XHRcdGNpdHk6IHN0cmluZztcblx0XHRcdFx0c3RhdGU6IHN0cmluZztcblx0XHRcdFx0ZGlzdGFuY2U6IHtcblx0XHRcdFx0XHR2YWx1ZTogbnVtYmVyO1xuXHRcdFx0XHRcdHVuaXRDb2RlOiBzdHJpbmc7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGJlYXJpbmc6IHtcblx0XHRcdFx0XHR2YWx1ZTogbnVtYmVyO1xuXHRcdFx0XHRcdHVuaXRDb2RlOiBzdHJpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGZvcmVjYXN0Wm9uZTogc3RyaW5nO1xuXHRcdGNvdW50eTogc3RyaW5nO1xuXHRcdGZpcmVXZWF0aGVyWm9uZTogc3RyaW5nO1xuXHRcdHRpbWVab25lOiBzdHJpbmdcblx0XHRyYWRhclN0YXRpb246IHN0cmluZztcblx0fVxufVxuXG5pbnRlcmZhY2UgU3RhdGlvblBheWxvYWQge1xuXHQvKiogdXJsICovXG5cdGlkOiBzdHJpbmc7XG5cdHR5cGU6IHN0cmluZztcblx0Z2VvbWV0cnk6IHtcblx0XHR0eXBlOiBzdHJpbmc7XG5cdFx0LyoqIFtsb24sIGxhdF0gKi9cblx0XHRjb29yZGluYXRlczogbnVtYmVyW107XG5cdH07XG5cdGRpc3Q/OiBudW1iZXI7XG5cdHByb3BlcnRpZXM6IHtcblx0XHRcIkBpZFwiOiBzdHJpbmc7XG5cdFx0XCJAdHlwZVwiOiBzdHJpbmc7XG5cdFx0ZWxldmF0aW9uOiB7XG5cdFx0XHR2YWx1ZTogbnVtYmVyO1xuXHRcdFx0dW5pdDogc3RyaW5nO1xuXHRcdH07XG5cdFx0c3RhdGlvbklkZW50aWZpZXI6IHN0cmluZztcblx0XHRuYW1lOiBzdHJpbmc7XG5cdFx0dGltZVpvbmU6IHN0cmluZztcblx0XHQvKiogdXJsICovXG5cdFx0Zm9yZWNhc3Q6IHN0cmluZztcblx0XHQvKiogdXJsICovXG5cdFx0Y291bnR5OiBzdHJpbmc7XG5cdFx0LyoqIHVybCAqL1xuXHRcdGZpcmVXZWF0aGVyWm9uZTogc3RyaW5nO1xuXHR9XG59XG5cbmludGVyZmFjZSBTdGF0aW9uc1BheWxvYWQge1xuXHRcIkBjb250ZXh0XCI6IGFueTtcblx0ZmVhdHVyZXM6IFN0YXRpb25QYXlsb2FkW11cbn1cblxuaW50ZXJmYWNlIE9ic2VydmF0aW9uUGF5bG9hZCB7XG5cdFwiQGNvbnRleHRcIjogYW55O1xuXHQvKiogaHR0cHM6Ly9hcGkud2VhdGhlci5nb3Yvc3RhdGlvbnMvV1RIQzEvb2JzZXJ2YXRpb25zLzIwMjAtMDYtMjVUMTI6NTc6MDArMDA6MDAgKi9cblx0aWQ6IHN0cmluZztcblx0dHlwZTogc3RyaW5nO1xuXHRnZW9tZXRyeToge1xuXHRcdHR5cGU6IHN0cmluZztcblx0XHQvKiogW2xvbiwgbGF0XSAqL1xuXHRcdGNvb3JkaW5hdGVzOiBudW1iZXJbXTtcblx0fVxuXHRwcm9wZXJ0aWVzOiB7XG5cdFx0XCJAaWRcIjogc3RyaW5nO1xuXHRcdFwiQHR5cGVcIjogc3RyaW5nO1xuXHRcdGVsZXZhdGlvbjoge1xuXHRcdFx0dmFsdWU6IG51bWJlcjtcblx0XHRcdHVuaXQ6IHN0cmluZztcblx0XHR9O1xuXHRcdC8qKiB1cmwgKi9cblx0XHRzdGF0aW9uOiBzdHJpbmc7XG5cdFx0LyoqIElTTyBzdHJpbmcgKi9cblx0XHR0aW1lc3RhbXA6IHN0cmluZztcblx0XHRyYXdNZXNzYWdlOiBzdHJpbmc7XG5cdFx0dGV4dERlc2NyaXB0aW9uOiBzdHJpbmc7XG5cdFx0aWNvbjogc3RyaW5nO1xuXHRcdHByZXNlbnRXZWF0aGVyOiBhbnlbXSxcblx0XHR0ZW1wZXJhdHVyZToge1xuXHRcdFx0dmFsdWU6IG51bWJlcjtcblx0XHRcdHVuaXRDb2RlOiBzdHJpbmcsXG5cdFx0XHRxdWFsaXR5Q29udHJvbDogc3RyaW5nXG5cdFx0fSxcblx0XHRkZXdwb2ludDoge1xuXHRcdFx0dmFsdWU6IG51bWJlcjtcblx0XHRcdHVuaXRDb2RlOiBzdHJpbmc7XG5cdFx0XHRxdWFsaXR5Q29udHJvbDogc3RyaW5nO1xuXHRcdH0sXG5cdFx0d2luZERpcmVjdGlvbjoge1xuXHRcdFx0dmFsdWU6IG51bWJlcjtcblx0XHRcdHVuaXRDb2RlOiBzdHJpbmc7XG5cdFx0XHRxdWFsaXR5Q29udHJvbDogc3RyaW5nO1xuXHRcdH0sXG5cdFx0d2luZFNwZWVkOiB7XG5cdFx0XHR2YWx1ZTogbnVtYmVyO1xuXHRcdFx0dW5pdENvZGU6IHN0cmluZztcblx0XHRcdHF1YWxpdHlDb250cm9sOiBzdHJpbmc7XG5cdFx0fSxcblx0XHR3aW5kR3VzdDoge1xuXHRcdFx0dmFsdWU6IG51bWJlcjtcblx0XHRcdHVuaXRDb2RlOiBzdHJpbmc7XG5cdFx0XHRxdWFsaXR5Q29udHJvbDogc3RyaW5nO1xuXHRcdH0sXG5cdFx0YmFyb21ldHJpY1ByZXNzdXJlOiB7XG5cdFx0XHR2YWx1ZTogbnVtYmVyO1xuXHRcdFx0dW5pdENvZGU6IHN0cmluZztcblx0XHRcdHF1YWxpdHlDb250cm9sOiBzdHJpbmc7XG5cdFx0fSxcblx0XHRzZWFMZXZlbFByZXNzdXJlOiB7XG5cdFx0XHR2YWx1ZTogbnVtYmVyO1xuXHRcdFx0dW5pdENvZGU6IHN0cmluZztcblx0XHRcdHF1YWxpdHlDb250cm9sOiBzdHJpbmc7XG5cdFx0fSxcblx0XHR2aXNpYmlsaXR5OiB7XG5cdFx0XHR2YWx1ZTogbnVtYmVyO1xuXHRcdFx0dW5pdENvZGU6IHN0cmluZztcblx0XHRcdHF1YWxpdHlDb250cm9sOiBzdHJpbmc7XG5cdFx0fSxcblx0XHRtYXhUZW1wZXJhdHVyZUxhc3QyNEhvdXJzOiB7XG5cdFx0XHR2YWx1ZTogbnVtYmVyO1xuXHRcdFx0dW5pdENvZGU6IHN0cmluZztcblx0XHRcdHF1YWxpdHlDb250cm9sOiBudWxsXG5cdFx0fSxcblx0XHRtaW5UZW1wZXJhdHVyZUxhc3QyNEhvdXJzOiB7XG5cdFx0XHR2YWx1ZTogbnVtYmVyO1xuXHRcdFx0dW5pdENvZGU6IHN0cmluZztcblx0XHRcdHF1YWxpdHlDb250cm9sOiBudWxsXG5cdFx0fSxcblx0XHRwcmVjaXBpdGF0aW9uTGFzdDNIb3Vyczoge1xuXHRcdFx0dmFsdWU6IG51bWJlcjtcblx0XHRcdHVuaXRDb2RlOiBzdHJpbmc7XG5cdFx0XHRxdWFsaXR5Q29udHJvbDogc3RyaW5nO1xuXHRcdH0sXG5cdFx0cmVsYXRpdmVIdW1pZGl0eToge1xuXHRcdFx0dmFsdWU6IG51bWJlcjtcblx0XHRcdHVuaXRDb2RlOiBzdHJpbmc7XG5cdFx0XHRxdWFsaXR5Q29udHJvbDogc3RyaW5nO1xuXHRcdH0sXG5cdFx0d2luZENoaWxsOiB7XG5cdFx0XHR2YWx1ZTogbnVtYmVyO1xuXHRcdFx0dW5pdENvZGU6IHN0cmluZztcblx0XHRcdHF1YWxpdHlDb250cm9sOiBzdHJpbmc7XG5cdFx0fSxcblx0XHRoZWF0SW5kZXg6IHtcblx0XHRcdHZhbHVlOiBudW1iZXI7XG5cdFx0XHR1bml0Q29kZTogc3RyaW5nO1xuXHRcdFx0cXVhbGl0eUNvbnRyb2w6IHN0cmluZztcblx0XHR9LFxuXHRcdGNsb3VkTGF5ZXJzOiBbXVxuXHR9XG59XG5cbmludGVyZmFjZSBGb3JlY2FzdHNQYXlsb2FkIHtcblx0cHJvcGVydGllczoge1xuXHRcdGVsZXZhdGlvbjoge1xuXHRcdFx0dmFsdWU6IG51bWJlcjtcblx0XHRcdHVuaXRDb2RlOiBzdHJpbmc7XG5cdFx0fSxcblx0XHRwZXJpb2RzOiBGb3JlY2FzdFBheWxvYWRbXVxuXHR9XG59XG5cbmludGVyZmFjZSBGb3JlY2FzdFBheWxvYWQge1xuXHRudW1iZXI6IG51bWJlcjtcblx0bmFtZTogc3RyaW5nO1xuXHQvKiogSVNPIHN0cmluZyAqL1xuXHRzdGFydFRpbWU6IHN0cmluZztcblx0LyoqIElTTyBzdHJpbmcgKi9cblx0ZW5kVGltZTogc3RyaW5nO1xuXHRpc0RheXRpbWU6IGJvb2xlYW47XG5cdC8qKiBVc3VhbGx5IGluIEYgKi9cblx0dGVtcGVyYXR1cmU6IG51bWJlcjtcblx0dGVtcGVyYXR1cmVVbml0OiBzdHJpbmc7XG5cdHRlbXBlcmF0dXJlVHJlbmQ6IGFueTtcblx0LyoqIExpa2UgXCI1IG1waFwiID8/ICovXG5cdHdpbmRTcGVlZDogc3RyaW5nO1xuXHQvKiogTGlrZSBcIlNTV1wiICovXG5cdHdpbmREaXJlY3Rpb246IHN0cmluZztcblx0aWNvbjogc3RyaW5nO1xuXHRzaG9ydEZvcmVjYXN0OiBzdHJpbmc7XG5cdC8qKiBDYW4gYmUgZW1wdHkgc3RyaW5nICovXG5cdGRldGFpbGVkRm9yZWNhc3Q6IHN0cmluZztcbn0iLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLyAgICAgICAgICAgICAgICBXZWF0aGVyYml0ICAgICAgICAgICAgIC8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5pbXBvcnQgeyBIdHRwRXJyb3IgfSBmcm9tIFwiLi4vbGliL2h0dHBMaWJcIjtcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuLi9saWIvbG9nZ2VyXCI7XG5pbXBvcnQgeyBXZWF0aGVyQXBwbGV0IH0gZnJvbSBcIi4uL21haW5cIjtcbmltcG9ydCB7IFdlYXRoZXJQcm92aWRlciwgV2VhdGhlckRhdGEsIEZvcmVjYXN0RGF0YSwgSG91cmx5Rm9yZWNhc3REYXRhLCBCdWlsdGluSWNvbnMsIEN1c3RvbUljb25zLCBMb2NhdGlvbkRhdGEgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IF8sIElzTGFuZ1N1cHBvcnRlZCB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5jb25zdCBMYW5nOiB0eXBlb2YgaW1wb3J0cy5sYW5nID0gaW1wb3J0cy5sYW5nO1xuXG5leHBvcnQgY2xhc3MgV2VhdGhlcmJpdCBpbXBsZW1lbnRzIFdlYXRoZXJQcm92aWRlciB7XG5cblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyAgUHJvcGVydGllc1xuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdHB1YmxpYyByZWFkb25seSBwcmV0dHlOYW1lID0gXyhcIldlYXRoZXJCaXRcIik7XG5cdHB1YmxpYyByZWFkb25seSBuYW1lID0gXCJXZWF0aGVyYml0XCI7XG5cdHB1YmxpYyByZWFkb25seSBtYXhGb3JlY2FzdFN1cHBvcnQgPSAxNjtcblx0cHVibGljIHJlYWRvbmx5IHdlYnNpdGUgPSBcImh0dHBzOi8vd3d3LndlYXRoZXJiaXQuaW8vXCI7XG5cdHB1YmxpYyByZWFkb25seSBtYXhIb3VybHlGb3JlY2FzdFN1cHBvcnQgPSA0ODtcblx0cHVibGljIHJlYWRvbmx5IG5lZWRzQXBpS2V5ID0gdHJ1ZTtcblxuXHRwcml2YXRlIHN1cHBvcnRlZExhbmd1YWdlcyA9IFtcblx0XHQnYXInLCAnYXonLCAnYmUnLCAnYmcnLCAnYnMnLCAnY2EnLCAnY3onLCAnZGEnLCAnZGUnLCAnZWwnLCAnZW4nLFxuXHRcdCdldCcsICdmaScsICdmcicsICdocicsICdodScsICdpZCcsICdpcycsICdpdCcsXG5cdFx0J2t3JywgJ2x2JywgJ25iJywgJ25sJywgJ3BsJywgJ3B0JywgJ3JvJywgJ3J1JywgJ3NrJywgJ3NsJywgJ3NyJyxcblx0XHQnc3YnLCAndHInLCAndWsnLCAnemgnLCAnemgtdHcnXTtcblxuXHRwcml2YXRlIGN1cnJlbnRfdXJsID0gXCJodHRwczovL2FwaS53ZWF0aGVyYml0LmlvL3YyLjAvY3VycmVudD9cIjtcblx0cHJpdmF0ZSBkYWlseV91cmwgPSBcImh0dHBzOi8vYXBpLndlYXRoZXJiaXQuaW8vdjIuMC9mb3JlY2FzdC9kYWlseT9cIjtcblx0cHJpdmF0ZSBob3VybHlfdXJsID0gXCJodHRwczovL2FwaS53ZWF0aGVyYml0LmlvL3YyLjAvZm9yZWNhc3QvaG91cmx5P1wiO1xuXG5cdHByaXZhdGUgYXBwOiBXZWF0aGVyQXBwbGV0O1xuXHRwcml2YXRlIGhvdXJseUFjY2VzcyA9IHRydWU7XG5cblx0Y29uc3RydWN0b3IoX2FwcDogV2VhdGhlckFwcGxldCkge1xuXHRcdHRoaXMuYXBwID0gX2FwcDtcblx0fVxuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gIEZ1bmN0aW9uc1xuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdHB1YmxpYyBhc3luYyBHZXRXZWF0aGVyKGxvYzogTG9jYXRpb25EYXRhKTogUHJvbWlzZTxXZWF0aGVyRGF0YT4ge1xuXHRcdGxldCBmb3JlY2FzdFByb21pc2UgPSB0aGlzLkdldERhdGEodGhpcy5kYWlseV91cmwsIGxvYywgdGhpcy5QYXJzZUZvcmVjYXN0KSBhcyBQcm9taXNlPEZvcmVjYXN0RGF0YVtdPjtcblx0XHRsZXQgaG91cmx5UHJvbWlzZSA9IG51bGw7XG5cdFx0aWYgKCEhdGhpcy5ob3VybHlBY2Nlc3MpIGhvdXJseVByb21pc2UgPSB0aGlzLkdldEhvdXJseURhdGEodGhpcy5ob3VybHlfdXJsLCBsb2MpO1xuXHRcdGxldCBjdXJyZW50UmVzdWx0ID0gYXdhaXQgdGhpcy5HZXREYXRhKHRoaXMuY3VycmVudF91cmwsIGxvYywgdGhpcy5QYXJzZUN1cnJlbnQpIGFzIFdlYXRoZXJEYXRhO1xuXHRcdGlmICghY3VycmVudFJlc3VsdCkgcmV0dXJuIG51bGw7XG5cblx0XHRsZXQgZm9yZWNhc3RSZXN1bHQgPSBhd2FpdCBmb3JlY2FzdFByb21pc2U7XG5cdFx0Y3VycmVudFJlc3VsdC5mb3JlY2FzdHMgPSAoIWZvcmVjYXN0UmVzdWx0KSA/IFtdIDogZm9yZWNhc3RSZXN1bHQ7XG5cdFx0bGV0IGhvdXJseVJlc3VsdCA9IGF3YWl0IGhvdXJseVByb21pc2U7XG5cdFx0Y3VycmVudFJlc3VsdC5ob3VybHlGb3JlY2FzdHMgPSAoIWhvdXJseVJlc3VsdCkgPyBbXSA6IGhvdXJseVJlc3VsdDtcblx0XHRyZXR1cm4gY3VycmVudFJlc3VsdDtcblx0fTtcblxuXHQvLyBBIGZ1bmN0aW9uIGFzIGEgZnVuY3Rpb24gcGFyYW1ldGVyIDIgbGV2ZWxzIGRlZXAgZG9lcyBub3Qga25vd1xuXHQvLyBhYm91dCB0aGUgdG9wIGxldmVsIG9iamVjdCBpbmZvcm1hdGlvbiwgaGFzIHRvIHBhc3MgaXQgaW4gYXMgYSBwYXJhbWV0ZXJcblx0LyoqXG5cdCAqIFxuXHQgKiBAcGFyYW0gYmFzZVVybCBcblx0ICogQHBhcmFtIFBhcnNlRnVuY3Rpb24gcmV0dXJucyBXZWF0aGVyRGF0YSBvciBGb3JlY2FzdERhdGEgT2JqZWN0XG5cdCAqL1xuXHRwcml2YXRlIGFzeW5jIEdldERhdGEoYmFzZVVybDogc3RyaW5nLCBsb2M6IExvY2F0aW9uRGF0YSwgUGFyc2VGdW5jdGlvbjogKGpzb246IGFueSwgY29udGV4dDogYW55KSA9PiBXZWF0aGVyRGF0YSB8IEZvcmVjYXN0RGF0YVtdIHwgSG91cmx5Rm9yZWNhc3REYXRhW10pIHtcblx0XHRsZXQgcXVlcnkgPSB0aGlzLkNvbnN0cnVjdFF1ZXJ5KGJhc2VVcmwsIGxvYyk7XG5cdFx0aWYgKHF1ZXJ5ID09IG51bGwpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdGxldCBqc29uID0gYXdhaXQgdGhpcy5hcHAuTG9hZEpzb25Bc3luYyhxdWVyeSwgbnVsbCwgTGFuZy5iaW5kKHRoaXMsIHRoaXMuSGFuZGxlRXJyb3IpKTtcblxuXHRcdGlmIChqc29uID09IG51bGwpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiBQYXJzZUZ1bmN0aW9uKGpzb24sIHRoaXMpO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBHZXRIb3VybHlEYXRhKGJhc2VVcmw6IHN0cmluZywgbG9jOiBMb2NhdGlvbkRhdGEpIHtcblx0XHRsZXQgcXVlcnkgPSB0aGlzLkNvbnN0cnVjdFF1ZXJ5KGJhc2VVcmwsIGxvYyk7XG5cdFx0aWYgKHF1ZXJ5ID09IG51bGwpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdGxldCBqc29uID0gYXdhaXQgdGhpcy5hcHAuTG9hZEpzb25Bc3luYzxhbnk+KHF1ZXJ5LCBudWxsLCBMYW5nLmJpbmQodGhpcywgdGhpcy5IYW5kbGVIb3VybHlFcnJvcikpO1xuXG5cdFx0aWYgKCEhanNvbj8uZXJyb3IpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGlmIChqc29uID09IG51bGwpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiB0aGlzLlBhcnNlSG91cmx5Rm9yZWNhc3QoanNvbiwgdGhpcyk7XG5cdH07XG5cblx0cHJpdmF0ZSBQYXJzZUN1cnJlbnQoanNvbjogYW55LCBzZWxmOiBXZWF0aGVyYml0KTogV2VhdGhlckRhdGEge1xuXHRcdGpzb24gPSBqc29uLmRhdGFbMF07XG5cdFx0bGV0IGhvdXJEaWZmID0gc2VsZi5Ib3VyRGlmZmVyZW5jZShuZXcgRGF0ZShqc29uLnRzICogMTAwMCksIHNlbGYuUGFyc2VTdHJpbmdUaW1lKGpzb24ub2JfdGltZSkpO1xuXHRcdGlmIChob3VyRGlmZiAhPSAwKSBMb2cuSW5zdGFuY2UuRGVidWcoXCJXZWF0aGVyYml0IHJlcG9ydGluZyBpbmNvcnJlY3QgdGltZSwgY29ycmVjdGluZyB3aXRoIFwiICsgKDAgLSBob3VyRGlmZikudG9TdHJpbmcoKSArIFwiIGhvdXJzXCIpO1xuXHRcdHRyeSB7XG5cdFx0XHRsZXQgd2VhdGhlcjogV2VhdGhlckRhdGEgPSB7XG5cdFx0XHRcdGNvb3JkOiB7XG5cdFx0XHRcdFx0bGF0OiBqc29uLmxhdCxcblx0XHRcdFx0XHRsb246IGpzb24ubG9uXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGxvY2F0aW9uOiB7XG5cdFx0XHRcdFx0Y2l0eToganNvbi5jaXR5X25hbWUsXG5cdFx0XHRcdFx0Y291bnRyeToganNvbi5jb3VudHJ5X2NvZGUsXG5cdFx0XHRcdFx0dXJsOiBudWxsLFxuXHRcdFx0XHRcdHRpbWVab25lOiBqc29uLnRpbWV6b25lXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRhdGU6IG5ldyBEYXRlKGpzb24udHMgKiAxMDAwKSxcblx0XHRcdFx0c3VucmlzZTogc2VsZi5UaW1lVG9EYXRlKGpzb24uc3VucmlzZSwgaG91ckRpZmYpLFxuXHRcdFx0XHRzdW5zZXQ6IHNlbGYuVGltZVRvRGF0ZShqc29uLnN1bnNldCwgaG91ckRpZmYpLFxuXHRcdFx0XHR3aW5kOiB7XG5cdFx0XHRcdFx0c3BlZWQ6IGpzb24ud2luZF9zcGQsXG5cdFx0XHRcdFx0ZGVncmVlOiBqc29uLndpbmRfZGlyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRlbXBlcmF0dXJlOiBqc29uLnRlbXAsXG5cdFx0XHRcdHByZXNzdXJlOiBqc29uLnByZXMsXG5cdFx0XHRcdGh1bWlkaXR5OiBqc29uLnJoLFxuXHRcdFx0XHRjb25kaXRpb246IHtcblx0XHRcdFx0XHRtYWluOiBqc29uLndlYXRoZXIuZGVzY3JpcHRpb24sXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IGpzb24ud2VhdGhlci5kZXNjcmlwdGlvbixcblx0XHRcdFx0XHRpY29uczogc2VsZi5SZXNvbHZlSWNvbihqc29uLndlYXRoZXIuaWNvbiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogc2VsZi5SZXNvbHZlQ3VzdG9tSWNvbihqc29uLndlYXRoZXIuaWNvbilcblx0XHRcdFx0fSxcblx0XHRcdFx0ZXh0cmFfZmllbGQ6IHtcblx0XHRcdFx0XHRuYW1lOiBfKFwiRmVlbHMgTGlrZVwiKSxcblx0XHRcdFx0XHR2YWx1ZToganNvbi5hcHBfdGVtcCxcblx0XHRcdFx0XHR0eXBlOiBcInRlbXBlcmF0dXJlXCJcblx0XHRcdFx0fSxcblx0XHRcdFx0Zm9yZWNhc3RzOiBbXVxuXHRcdFx0fTtcblxuXHRcdFx0cmV0dXJuIHdlYXRoZXI7XG5cdFx0fVxuXHRcdGNhdGNoIChlKSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJXZWF0aGVyYml0IFdlYXRoZXIgUGFyc2luZyBlcnJvcjogXCIgKyBlKTtcblx0XHRcdHNlbGYuYXBwLlNob3dFcnJvcih7IHR5cGU6IFwic29mdFwiLCBzZXJ2aWNlOiBcIndlYXRoZXJiaXRcIiwgZGV0YWlsOiBcInVudXN1YWwgcGF5bG9hZFwiLCBtZXNzYWdlOiBfKFwiRmFpbGVkIHRvIFByb2Nlc3MgQ3VycmVudCBXZWF0aGVyIEluZm9cIikgfSlcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fTtcblxuXHRwcml2YXRlIFBhcnNlRm9yZWNhc3QoanNvbjogYW55LCBzZWxmOiBXZWF0aGVyYml0KTogRm9yZWNhc3REYXRhW10ge1xuXHRcdGxldCBmb3JlY2FzdHM6IEZvcmVjYXN0RGF0YVtdID0gW107XG5cdFx0dHJ5IHtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwganNvbi5kYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGxldCBkYXkgPSBqc29uLmRhdGFbaV07XG5cdFx0XHRcdGxldCBmb3JlY2FzdDogRm9yZWNhc3REYXRhID0ge1xuXHRcdFx0XHRcdGRhdGU6IG5ldyBEYXRlKGRheS50cyAqIDEwMDApLFxuXHRcdFx0XHRcdHRlbXBfbWluOiBkYXkubWluX3RlbXAsXG5cdFx0XHRcdFx0dGVtcF9tYXg6IGRheS5tYXhfdGVtcCxcblx0XHRcdFx0XHRjb25kaXRpb246IHtcblx0XHRcdFx0XHRcdG1haW46IGRheS53ZWF0aGVyLmRlc2NyaXB0aW9uLFxuXHRcdFx0XHRcdFx0ZGVzY3JpcHRpb246IGRheS53ZWF0aGVyLmRlc2NyaXB0aW9uLFxuXHRcdFx0XHRcdFx0aWNvbnM6IHNlbGYuUmVzb2x2ZUljb24oZGF5LndlYXRoZXIuaWNvbiksXG5cdFx0XHRcdFx0XHRjdXN0b21JY29uOiBzZWxmLlJlc29sdmVDdXN0b21JY29uKGRheS53ZWF0aGVyLmljb24pXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fTtcblx0XHRcdFx0Zm9yZWNhc3RzLnB1c2goZm9yZWNhc3QpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZvcmVjYXN0cztcblx0XHR9XG5cdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIldlYXRoZXJiaXQgRm9yZWNhc3QgUGFyc2luZyBlcnJvcjogXCIgKyBlKTtcblx0XHRcdHNlbGYuYXBwLlNob3dFcnJvcih7IHR5cGU6IFwic29mdFwiLCBzZXJ2aWNlOiBcIndlYXRoZXJiaXRcIiwgZGV0YWlsOiBcInVudXN1YWwgcGF5bG9hZFwiLCBtZXNzYWdlOiBfKFwiRmFpbGVkIHRvIFByb2Nlc3MgRm9yZWNhc3QgSW5mb1wiKSB9KVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cdHByaXZhdGUgUGFyc2VIb3VybHlGb3JlY2FzdChqc29uOiBhbnksIHNlbGY6IFdlYXRoZXJiaXQpOiBIb3VybHlGb3JlY2FzdERhdGFbXSB7XG5cdFx0bGV0IGZvcmVjYXN0czogSG91cmx5Rm9yZWNhc3REYXRhW10gPSBbXTtcblx0XHR0cnkge1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBqc29uLmRhdGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0bGV0IGhvdXIgPSBqc29uLmRhdGFbaV07XG5cdFx0XHRcdGxldCBmb3JlY2FzdDogSG91cmx5Rm9yZWNhc3REYXRhID0ge1xuXHRcdFx0XHRcdGRhdGU6IG5ldyBEYXRlKGhvdXIudHMgKiAxMDAwKSxcblx0XHRcdFx0XHR0ZW1wOiBob3VyLnRlbXAsXG5cdFx0XHRcdFx0Y29uZGl0aW9uOiB7XG5cdFx0XHRcdFx0XHRtYWluOiBob3VyLndlYXRoZXIuZGVzY3JpcHRpb24sXG5cdFx0XHRcdFx0XHRkZXNjcmlwdGlvbjogaG91ci53ZWF0aGVyLmRlc2NyaXB0aW9uLFxuXHRcdFx0XHRcdFx0aWNvbnM6IHNlbGYuUmVzb2x2ZUljb24oaG91ci53ZWF0aGVyLmljb24pLFxuXHRcdFx0XHRcdFx0Y3VzdG9tSWNvbjogc2VsZi5SZXNvbHZlQ3VzdG9tSWNvbihob3VyLndlYXRoZXIuaWNvbilcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHByZWNpcGl0YXRpb246IHtcblx0XHRcdFx0XHRcdHR5cGU6IFwicmFpblwiLFxuXHRcdFx0XHRcdFx0dm9sdW1lOiBob3VyLnByZWNpcCxcblx0XHRcdFx0XHRcdGNoYW5jZTogaG91ci5wb3Bcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdGlmIChob3VyLnNub3cgIT0gMCkge1xuXHRcdFx0XHRcdGZvcmVjYXN0LnByZWNpcGl0YXRpb24udHlwZSA9IFwic25vd1wiO1xuXHRcdFx0XHRcdGZvcmVjYXN0LnByZWNpcGl0YXRpb24udm9sdW1lID0gaG91ci5zbm93O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvcmVjYXN0cy5wdXNoKGZvcmVjYXN0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmb3JlY2FzdHM7XG5cdFx0fVxuXHRcdGNhdGNoIChlKSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJXZWF0aGVyYml0IEZvcmVjYXN0IFBhcnNpbmcgZXJyb3I6IFwiICsgZSk7XG5cdFx0XHRzZWxmLmFwcC5TaG93RXJyb3IoeyB0eXBlOiBcInNvZnRcIiwgc2VydmljZTogXCJ3ZWF0aGVyYml0XCIsIGRldGFpbDogXCJ1bnVzdWFsIHBheWxvYWRcIiwgbWVzc2FnZTogXyhcIkZhaWxlZCB0byBQcm9jZXNzIEZvcmVjYXN0IEluZm9cIikgfSlcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fVxuXG5cblx0cHJpdmF0ZSBUaW1lVG9EYXRlKHRpbWU6IHN0cmluZywgaG91ckRpZmY6IG51bWJlcik6IERhdGUge1xuXHRcdGxldCBob3Vyc01pbnV0ZXMgPSB0aW1lLnNwbGl0KFwiOlwiKTtcblx0XHRsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0ZGF0ZS5zZXRIb3VycyhwYXJzZUludChob3Vyc01pbnV0ZXNbMF0pIC0gaG91ckRpZmYpXG5cdFx0ZGF0ZS5zZXRNaW51dGVzKHBhcnNlSW50KGhvdXJzTWludXRlc1sxXSkpXG5cdFx0cmV0dXJuIGRhdGU7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBXZWF0aGVyYml0IGRvZXMgbm90IGNvbnNpZGVyIERheWxpZ2h0IHNhdmluZyB0aW1lIHdoZW4gcmV0dXJuaW5nIERhdGVzXG5cdCAqIGluIHN0cmluZyBmb3JtYXQsIGJ1dCB3ZSBjYW4gY2hlY2sgaWYgdW5peCB0aW1lc3RhbXAgYW5kIGRhdGUgc3RyaW5nIGhhcyBtaXNtYXRjaFxuXHQgKiB0byBmaWd1cmUgb3V0IGlmIGl0J3MgYW4gaW5jb3JyZWN0IERhdGUuXG5cdCAqIFxuXHQgKiBAcGFyYW0gdHMgdW5peCB0aW1lc3RhbXAgaW5pdGlhbGl6ZWQgYXMgRGF0ZSBmcm9tIHBheWxvYWRcblx0ICogQHBhcmFtIGxhc3Rfb2JfdGltZSBsYXN0IHJlZnJlc2ggdGltZSBpbiBzdHJpbmcgZm9ybWF0XG5cdCAqIEByZXR1cm5zIHRoZSBob3VyIGRpZmZlcmVuY2Ugb2YgaW5jb3JyZWN0IHRpbWUgZnJvbSBjb3JyZWN0IHRpbWVcblx0ICovXG5cdHByaXZhdGUgSG91ckRpZmZlcmVuY2UoY29ycmVjdFRpbWU6IERhdGUsIGluY29ycmVjdFRpbWU6IERhdGUpOiBudW1iZXIge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKChpbmNvcnJlY3RUaW1lLmdldFRpbWUoKSAtIGNvcnJlY3RUaW1lLmdldFRpbWUoKSkgLyAoMTAwMCAqIDYwICogNjApKTtcblx0fVxuXG5cdHByaXZhdGUgUGFyc2VTdHJpbmdUaW1lKGxhc3Rfb2JfdGltZTogc3RyaW5nKTogRGF0ZSB7XG5cdFx0bGV0IHNwbGl0ID0gbGFzdF9vYl90aW1lLnNwbGl0KC9bVFxcLVxcczpdLyk7XG5cdFx0aWYgKHNwbGl0Lmxlbmd0aCAhPSA1KSByZXR1cm4gbnVsbDtcblx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQoc3BsaXRbMF0pLCBwYXJzZUludChzcGxpdFsxXSkgLSAxLCBwYXJzZUludChzcGxpdFsyXSksIHBhcnNlSW50KHNwbGl0WzNdKSwgcGFyc2VJbnQoc3BsaXRbNF0pKTtcblx0fVxuXG5cdHByaXZhdGUgQ29udmVydFRvQVBJTG9jYWxlKHN5c3RlbUxvY2FsZTogc3RyaW5nKSB7XG5cdFx0aWYgKHN5c3RlbUxvY2FsZSA9PSBcInpoLXR3XCIpIHtcblx0XHRcdHJldHVybiBzeXN0ZW1Mb2NhbGU7XG5cdFx0fVxuXHRcdC8vIEN6ZWNoIGNvZGUgaXMgZGlmZmVyZW50XG5cdFx0bGV0IGxhbmcgPSBzeXN0ZW1Mb2NhbGUuc3BsaXQoXCItXCIpWzBdO1xuXHRcdGlmIChsYW5nID09IFwiY3NcIikge1xuXHRcdFx0cmV0dXJuIFwiY3pcIjtcblx0XHR9XG5cdFx0cmV0dXJuIGxhbmc7XG5cdH1cblxuXHRwcml2YXRlIENvbnN0cnVjdFF1ZXJ5KHF1ZXJ5OiBzdHJpbmcsIGxvYzogTG9jYXRpb25EYXRhKTogc3RyaW5nIHtcblx0XHRxdWVyeSA9IHF1ZXJ5ICsgXCJrZXk9XCIgKyB0aGlzLmFwcC5jb25maWcuQXBpS2V5ICsgXCImbGF0PVwiICsgbG9jLmxhdCArIFwiJmxvbj1cIiArIGxvYy5sb24gKyBcIiZ1bml0cz1TXCJcblx0XHRsZXQgbGFuZyA9IHRoaXMuQ29udmVydFRvQVBJTG9jYWxlKHRoaXMuYXBwLmNvbmZpZy5jdXJyZW50TG9jYWxlKTtcblx0XHRpZiAoSXNMYW5nU3VwcG9ydGVkKGxhbmcsIHRoaXMuc3VwcG9ydGVkTGFuZ3VhZ2VzKSAmJiB0aGlzLmFwcC5jb25maWcuX3RyYW5zbGF0ZUNvbmRpdGlvbikge1xuXHRcdFx0cXVlcnkgPSBxdWVyeSArIFwiJmxhbmc9XCIgKyBsYW5nO1xuXHRcdH1cblx0XHRyZXR1cm4gcXVlcnk7XG5cdH07XG5cblx0LyoqXG5cdCogXG5cdCogQHBhcmFtIG1lc3NhZ2UgU291cCBNZXNzYWdlIG9iamVjdFxuXHQqIEByZXR1cm5zIG51bGwgaWYgY3VzdG9tIGVycm9yIGNoZWNraW5nIGRvZXMgbm90IGZpbmQgYW55dGhpbmdcblx0Ki9cblx0cHJpdmF0ZSBIYW5kbGVFcnJvcihtZXNzYWdlOiBIdHRwRXJyb3IpOiBib29sZWFuIHtcblx0XHRpZiAobWVzc2FnZS5jb2RlID09IDQwMykgeyAvLyBiYWQga2V5XG5cdFx0XHR0aGlzLmFwcC5TaG93RXJyb3Ioe1xuXHRcdFx0XHR0eXBlOiBcImhhcmRcIixcblx0XHRcdFx0dXNlckVycm9yOiB0cnVlLFxuXHRcdFx0XHRkZXRhaWw6IFwiYmFkIGtleVwiLFxuXHRcdFx0XHRzZXJ2aWNlOiBcIndlYXRoZXJiaXRcIixcblx0XHRcdFx0bWVzc2FnZTogXyhcIlBsZWFzZSBNYWtlIHN1cmUgeW91XFxuZW50ZXJlZCB0aGUgQVBJIGtleSBjb3JyZWN0bHkgYW5kIHlvdXIgYWNjb3VudCBpcyBub3QgbG9ja2VkXCIpXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRwcml2YXRlIEhhbmRsZUhvdXJseUVycm9yKG1lc3NhZ2U6IEh0dHBFcnJvcik6IGJvb2xlYW4ge1xuXHRcdC8vLyBTa2lwIEhvdXJseSBmb3JlY2FzdCBpZiBpdCBpcyBmb3JiaWRkZW4gKDQwMykgICAgICAgICAgICBcblx0XHRpZiAobWVzc2FnZS5jb2RlID09IDQwMykgeyAvLyBiYWQga2V5XG5cdFx0XHR0aGlzLmhvdXJseUFjY2VzcyA9IGZhbHNlO1xuXHRcdFx0TG9nLkluc3RhbmNlLlByaW50KFwiSG91cmx5IGZvcmVjYXN0IGlzIGluYWNjZXNzaWJsZSwgc2tpcHBpbmdcIilcblx0XHRcdHRoaXMuYXBwLlNob3dFcnJvcih7XG5cdFx0XHRcdHR5cGU6IFwic2lsZW50XCIsXG5cdFx0XHRcdHVzZXJFcnJvcjogZmFsc2UsXG5cdFx0XHRcdGRldGFpbDogXCJiYWQga2V5XCIsXG5cdFx0XHRcdHNlcnZpY2U6IFwid2VhdGhlcmJpdFwiLFxuXHRcdFx0XHRtZXNzYWdlOiBfKFwiQVBJIGtleSBkb2Vzbid0IHByb3ZpZGUgYWNjZXNzIHRvIEhvdXJseSBXZWF0aGVyLCBza2lwcGluZ1wiKVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cHJpdmF0ZSBSZXNvbHZlSWNvbihpY29uOiBzdHJpbmcpOiBCdWlsdGluSWNvbnNbXSB7XG5cdFx0c3dpdGNoIChpY29uKSB7XG5cdFx0XHQvLyBUaHVuZGVyc3Rvcm1zXG5cdFx0XHRjYXNlIFwidDAxblwiOlxuXHRcdFx0Y2FzZSBcInQwMWRcIjpcblx0XHRcdGNhc2UgXCJ0MDJuXCI6XG5cdFx0XHRjYXNlIFwidDAyZFwiOlxuXHRcdFx0Y2FzZSBcInQwM25cIjpcblx0XHRcdGNhc2UgXCJ0MDNkXCI6XG5cdFx0XHRjYXNlIFwidDA0blwiOlxuXHRcdFx0Y2FzZSBcInQwNGRcIjpcblx0XHRcdGNhc2UgXCJ0MDVuXCI6XG5cdFx0XHRjYXNlIFwidDA1ZFwiOlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1zdG9ybVwiXVxuXHRcdFx0Ly8gRHJpenpsZVxuXHRcdFx0Y2FzZSBcImQwMWRcIjpcblx0XHRcdGNhc2UgXCJkMDFuXCI6XG5cdFx0XHRjYXNlIFwiZDAyZFwiOlxuXHRcdFx0Y2FzZSBcImQwMm5cIjpcblx0XHRcdGNhc2UgXCJkMDNkXCI6XG5cdFx0XHRjYXNlIFwiZDAzblwiOlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItcmFpblwiLCBcIndlYXRoZXItZnJlZXppbmctcmFpblwiXVxuXHRcdFx0Ly8gUmFpblxuXHRcdFx0Y2FzZSBcInIwMWRcIjpcblx0XHRcdGNhc2UgXCJyMDFuXCI6XG5cdFx0XHRjYXNlIFwicjAyZFwiOlxuXHRcdFx0Y2FzZSBcInIwMm5cIjpcblx0XHRcdGNhc2UgXCJyMDNkXCI6XG5cdFx0XHRjYXNlIFwicjAzblwiOlxuXHRcdFx0Y2FzZSBcInIwNGRcIjpcblx0XHRcdGNhc2UgXCJyMDRuXCI6XG5cdFx0XHRjYXNlIFwicjA1ZFwiOlxuXHRcdFx0Y2FzZSBcInIwNW5cIjpcblx0XHRcdGNhc2UgXCJyMDZkXCI6XG5cdFx0XHRjYXNlIFwicjA2blwiOlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiXVxuXHRcdFx0Ly8gU25vd1xuXHRcdFx0Y2FzZSBcInMwMWRcIjpcblx0XHRcdGNhc2UgXCJzMDFuXCI6XG5cdFx0XHRjYXNlIFwiczAyZFwiOlxuXHRcdFx0Y2FzZSBcInMwMm5cIjpcblx0XHRcdGNhc2UgXCJzMDNkXCI6XG5cdFx0XHRjYXNlIFwiczAzblwiOlxuXHRcdFx0Y2FzZSBcInMwNGRcIjpcblx0XHRcdGNhc2UgXCJzMDRuXCI6XG5cdFx0XHRjYXNlIFwiczA2ZFwiOlxuXHRcdFx0Y2FzZSBcInMwNm5cIjpcblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItc25vd1wiXVxuXHRcdFx0Ly8gU2xlZXRcblx0XHRcdGNhc2UgXCJzMDVkXCI6XG5cdFx0XHRjYXNlIFwiczA1blwiOlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiXVxuXHRcdFx0Ly8gRm9nLCBTYW5kLCBoYXplLCBzbW9rZSwgbWlzdFxuXHRcdFx0Y2FzZSBcImEwMWRcIjpcblx0XHRcdGNhc2UgXCJhMDFuXCI6XG5cdFx0XHRjYXNlIFwiYTAyZFwiOlxuXHRcdFx0Y2FzZSBcImEwMm5cIjpcblx0XHRcdGNhc2UgXCJhMDNkXCI6XG5cdFx0XHRjYXNlIFwiYTAzblwiOlxuXHRcdFx0Y2FzZSBcImEwNGRcIjpcblx0XHRcdGNhc2UgXCJhMDRuXCI6XG5cdFx0XHRjYXNlIFwiYTA1ZFwiOlxuXHRcdFx0Y2FzZSBcImEwNW5cIjpcblx0XHRcdGNhc2UgXCJhMDZkXCI6XG5cdFx0XHRjYXNlIFwiYTA2blwiOlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1mb2dcIl1cblx0XHRcdGNhc2UgXCJjMDJkXCI6XG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLWZldy1jbG91ZHNcIl1cblx0XHRcdGNhc2UgXCJjMDJuXCI6XG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLWZldy1jbG91ZHMtbmlnaHRcIl1cblx0XHRcdGNhc2UgXCJjMDFuXCI6XG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLWNsZWFyLW5pZ2h0XCJdXG5cdFx0XHRjYXNlIFwiYzAxZFwiOlxuXHRcdFx0XHRyZXR1cm4gW1wid2VhdGhlci1jbGVhclwiXVxuXHRcdFx0Y2FzZSBcImMwM2RcIjpcblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItY2xvdWRzXCIsIFwid2VhdGhlci1mZXctY2xvdWRzXCIsIFwid2VhdGhlci1vdmVyY2FzdFwiXVxuXHRcdFx0Y2FzZSBcImMwM25cIjpcblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItY2xvdWRzLW5pZ2h0XCIsIFwid2VhdGhlci1mZXctY2xvdWRzLW5pZ2h0XCIsIFwid2VhdGhlci1vdmVyY2FzdFwiXVxuXHRcdFx0Y2FzZSBcImMwNG5cIjpcblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItb3ZlcmNhc3RcIiwgXCJ3ZWF0aGVyLWNsb3Vkcy1uaWdodFwiLCBcIndlYXRoZXItZmV3LWNsb3Vkcy1uaWdodFwiXVxuXHRcdFx0Y2FzZSBcImMwNGRcIjpcblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItb3ZlcmNhc3RcIiwgXCJ3ZWF0aGVyLWNsb3Vkc1wiLCBcIndlYXRoZXItZmV3LWNsb3Vkc1wiXVxuXHRcdFx0Y2FzZSBcInUwMGRcIjpcblx0XHRcdGNhc2UgXCJ1MDBuXCI6XG5cdFx0XHRcdHJldHVybiBbXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIFtcIndlYXRoZXItc2V2ZXJlLWFsZXJ0XCJdXG5cdFx0fVxuXHR9O1xuXG5cdHByaXZhdGUgUmVzb2x2ZUN1c3RvbUljb24oaWNvbjogc3RyaW5nKTogQ3VzdG9tSWNvbnMge1xuXHRcdHN3aXRjaCAoaWNvbikge1xuXHRcdFx0Ly8gVGh1bmRlcnN0b3Jtc1xuXHRcdFx0Y2FzZSBcInQwMWRcIjpcblx0XHRcdGNhc2UgXCJ0MDJkXCI6XG5cdFx0XHRjYXNlIFwidDAzZFwiOlxuXHRcdFx0XHRyZXR1cm4gXCJkYXktdGh1bmRlcnN0b3JtLXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCJ0MDRkXCI6XG5cdFx0XHRjYXNlIFwidDA1ZFwiOlxuXHRcdFx0XHRyZXR1cm4gXCJ0aHVuZGVyc3Rvcm0tc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcInQwMW5cIjpcblx0XHRcdGNhc2UgXCJ0MDJuXCI6XG5cdFx0XHRjYXNlIFwidDAzblwiOlxuXHRcdFx0XHRyZXR1cm4gXCJuaWdodC1hbHQtdGh1bmRlcnN0b3JtLXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCJ0MDRuXCI6XG5cdFx0XHRjYXNlIFwidDA1blwiOlxuXHRcdFx0XHRyZXR1cm4gXCJ0aHVuZGVyc3Rvcm0tc3ltYm9saWNcIlxuXHRcdFx0Ly8gRHJpenpsZVxuXHRcdFx0Y2FzZSBcImQwMWRcIjpcblx0XHRcdGNhc2UgXCJkMDJkXCI6XG5cdFx0XHRjYXNlIFwiZDAzZFwiOlxuXHRcdFx0Y2FzZSBcImQwMW5cIjpcblx0XHRcdGNhc2UgXCJkMDJuXCI6XG5cdFx0XHRjYXNlIFwiZDAzblwiOlxuXHRcdFx0XHRyZXR1cm4gXCJzaG93ZXJzLXN5bWJvbGljXCJcblx0XHRcdC8vIFJhaW5cblx0XHRcdGNhc2UgXCJyMDFkXCI6XG5cdFx0XHRjYXNlIFwicjAyZFwiOlxuXHRcdFx0Y2FzZSBcInIwM2RcIjpcblx0XHRcdGNhc2UgXCJyMDFuXCI6XG5cdFx0XHRjYXNlIFwicjAyblwiOlxuXHRcdFx0Y2FzZSBcInIwM25cIjpcblx0XHRcdFx0cmV0dXJuIFwicmFpbi1zeW1ib2xpY1wiXG5cdFx0XHRjYXNlIFwicjA0ZFwiOlxuXHRcdFx0Y2FzZSBcInIwNWRcIjpcblx0XHRcdFx0cmV0dXJuIFwiZGF5LXJhaW4tc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcInIwNmRcIjpcblx0XHRcdFx0cmV0dXJuIFwicmFpbi1zeW1ib2xpY1wiXG5cdFx0XHRjYXNlIFwicjA0blwiOlxuXHRcdFx0Y2FzZSBcInIwNW5cIjpcblx0XHRcdFx0cmV0dXJuIFwibmlnaHQtYWx0LXJhaW4tc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcInIwNm5cIjpcblx0XHRcdFx0cmV0dXJuIFwicmFpbi1zeW1ib2xpY1wiXG5cdFx0XHQvLyBTbm93XG5cdFx0XHRjYXNlIFwiczAxZFwiOlxuXHRcdFx0Y2FzZSBcInMwNGRcIjpcblx0XHRcdFx0cmV0dXJuIFwiZGF5LXNub3ctc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcInMwMmRcIjpcblx0XHRcdGNhc2UgXCJzMDNkXCI6XG5cdFx0XHRjYXNlIFwiczA2ZFwiOlxuXHRcdFx0XHRyZXR1cm4gXCJzbm93LXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCJzMDFuXCI6XG5cdFx0XHRjYXNlIFwiczA0blwiOlxuXHRcdFx0XHRyZXR1cm4gXCJuaWdodC1hbHQtc25vdy1zeW1ib2xpY1wiXG5cdFx0XHRjYXNlIFwiczAyblwiOlxuXHRcdFx0Y2FzZSBcInMwM25cIjpcblx0XHRcdGNhc2UgXCJzMDZuXCI6XG5cdFx0XHRcdHJldHVybiBcInNub3ctc3ltYm9saWNcIlxuXHRcdFx0Ly8gU2xlZXRcblx0XHRcdGNhc2UgXCJzMDVkXCI6XG5cdFx0XHRjYXNlIFwiczA1blwiOlxuXHRcdFx0XHRyZXR1cm4gXCJzbGVldC1zeW1ib2xpY1wiXG5cdFx0XHQvLyBGb2csIFNhbmQsIGhhemUsIHNtb2tlLCBtaXN0XG5cdFx0XHRjYXNlIFwiYTAxZFwiOlxuXHRcdFx0Y2FzZSBcImEwMmRcIjpcblx0XHRcdGNhc2UgXCJhMDNkXCI6XG5cdFx0XHRjYXNlIFwiYTA0ZFwiOlxuXHRcdFx0Y2FzZSBcImEwNWRcIjpcblx0XHRcdGNhc2UgXCJhMDZkXCI6XG5cdFx0XHRcdHJldHVybiBcImRheS1mb2ctc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcImEwMW5cIjpcblx0XHRcdGNhc2UgXCJhMDJuXCI6XG5cdFx0XHRjYXNlIFwiYTAzblwiOlxuXHRcdFx0Y2FzZSBcImEwNG5cIjpcblx0XHRcdGNhc2UgXCJhMDVuXCI6XG5cdFx0XHRjYXNlIFwiYTA2blwiOlxuXHRcdFx0XHRyZXR1cm4gXCJuaWdodC1mb2ctc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcImMwMmRcIjpcblx0XHRcdFx0cmV0dXJuIFwiZGF5LWNsb3VkeS1zeW1ib2xpY1wiXG5cdFx0XHRjYXNlIFwiYzAyblwiOlxuXHRcdFx0XHRyZXR1cm4gXCJuaWdodC1hbHQtY2xvdWR5LXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCJjMDFuXCI6XG5cdFx0XHRcdHJldHVybiBcIm5pZ2h0LWNsZWFyLXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCJjMDFkXCI6XG5cdFx0XHRcdHJldHVybiBcImRheS1zdW5ueS1zeW1ib2xpY1wiXG5cdFx0XHRjYXNlIFwiYzAzZFwiOlxuXHRcdFx0XHRyZXR1cm4gXCJkYXktY2xvdWR5LXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCJjMDNuXCI6XG5cdFx0XHRcdHJldHVybiBcIm5pZ2h0LWFsdC1jbG91ZHktc3ltYm9saWNcIlxuXHRcdFx0Y2FzZSBcImMwNG5cIjpcblx0XHRcdFx0cmV0dXJuIFwiY2xvdWR5LXN5bWJvbGljXCJcblx0XHRcdGNhc2UgXCJjMDRkXCI6XG5cdFx0XHRcdHJldHVybiBcImNsb3VkeS1zeW1ib2xpY1wiXG5cdFx0XHRjYXNlIFwidTAwZFwiOlxuXHRcdFx0Y2FzZSBcInUwMG5cIjpcblx0XHRcdFx0cmV0dXJuIFwiY2xvdWQtcmVmcmVzaC1zeW1ib2xpY1wiXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gXCJjbG91ZC1yZWZyZXNoLXN5bWJvbGljXCJcblx0XHR9XG5cdH1cbn07XG5cbi8qKlxuICogIE0gLSBbREVGQVVMVF0gTWV0cmljIChDZWxzaXVzLCBtL3MsIG1tKVxuXHRTIC0gU2NpZW50aWZpYyAoS2VsdmluLCBtL3MsIG1tKVxuXHRJIC0gRmFocmVuaGVpdCAoRiwgbXBoLCBpbilcbiAqL1xudHlwZSBxdWVyeVVuaXRzID0gJ00nIHwgJ1MnIHwgJ0knO1xuaW50ZXJmYWNlIERhdGVUaW1lIHtcblx0eWVhcjogbnVtYmVyO1xuXHRtb250aDogbnVtYmVyO1xuXHRkYXk6IG51bWJlcjtcblx0aG91cnM6IG51bWJlcjtcblx0bWludXRlczogbnVtYmVyO1xuXHRzZWNvbmRzOiBudW1iZXI7XG59IiwiaW1wb3J0IHsgTG9nIH0gZnJvbSBcIi4uL2xpYi9sb2dnZXJcIjtcbmltcG9ydCB7IFdlYXRoZXJBcHBsZXQgfSBmcm9tIFwiLi4vbWFpblwiO1xuaW1wb3J0IHsgU3VuQ2FsYyB9IGZyb20gXCIuLi9saWIvc3VuQ2FsY1wiO1xuaW1wb3J0IHsgV2VhdGhlclByb3ZpZGVyLCBXZWF0aGVyRGF0YSwgSG91cmx5Rm9yZWNhc3REYXRhLCBGb3JlY2FzdERhdGEsIENvbmRpdGlvbiwgTG9jYXRpb25EYXRhIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBDZWxzaXVzVG9LZWx2aW4sIElzTmlnaHQsIF8gfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIE1ldE5vcndheSBpbXBsZW1lbnRzIFdlYXRoZXJQcm92aWRlciB7XG5cdHB1YmxpYyByZWFkb25seSBwcmV0dHlOYW1lID0gXyhcIk1FVCBOb3J3YXlcIik7XG5cdHB1YmxpYyByZWFkb25seSBuYW1lID0gXCJNZXROb3J3YXlcIjtcblx0cHVibGljIHJlYWRvbmx5IG1heEZvcmVjYXN0U3VwcG9ydCA9IDEwO1xuXHRwdWJsaWMgcmVhZG9ubHkgd2Vic2l0ZSA9IFwiaHR0cHM6Ly93d3cubWV0Lm5vL2VuXCI7XG5cdHB1YmxpYyByZWFkb25seSBtYXhIb3VybHlGb3JlY2FzdFN1cHBvcnQgPSA0ODtcblx0cHVibGljIHJlYWRvbmx5IG5lZWRzQXBpS2V5ID0gZmFsc2U7XG5cblx0cHJpdmF0ZSBhcHA6IFdlYXRoZXJBcHBsZXRcblx0cHJpdmF0ZSBiYXNlVXJsID0gXCJodHRwczovL2FwaS5tZXQubm8vd2VhdGhlcmFwaS9sb2NhdGlvbmZvcmVjYXN0LzIuMC9jb21wbGV0ZT9cIlxuXHRwcml2YXRlIHN1bkNhbGM6IFN1bkNhbGM7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBXZWF0aGVyQXBwbGV0KSB7XG5cdFx0dGhpcy5hcHAgPSBhcHA7XG5cdFx0dGhpcy5zdW5DYWxjID0gbmV3IFN1bkNhbGMoKTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBHZXRXZWF0aGVyKGxvYzogTG9jYXRpb25EYXRhKTogUHJvbWlzZTxXZWF0aGVyRGF0YT4ge1xuXHRcdGxldCBxdWVyeSA9IHRoaXMuR2V0VXJsKGxvYyk7XG5cdFx0aWYgKHF1ZXJ5ID09IG51bGwpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdGxldCBqc29uID0gYXdhaXQgdGhpcy5hcHAuTG9hZEpzb25Bc3luYzxNZXROb3J3YXlQYXlsb2FkPihxdWVyeSk7XG5cblx0XHRpZiAoIWpzb24pIHtcblx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIk1FVCBOb3J3YXk6IEVtcHR5IHJlc3BvbnNlIGZyb20gQVBJXCIpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuUGFyc2VXZWF0aGVyKGpzb24pO1xuXHR9XG5cblx0cHJpdmF0ZSBSZW1vdmVFYXJsaWVyRWxlbWVudHMoanNvbjogTWV0Tm9yd2F5UGF5bG9hZCk6IE1ldE5vcndheVBheWxvYWQge1xuXHRcdGxldCBub3cgPSBuZXcgRGF0ZSgpO1xuXHRcdGxldCBzdGFydEluZGV4ID0gLTE7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBqc29uLnByb3BlcnRpZXMudGltZXNlcmllcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGpzb24ucHJvcGVydGllcy50aW1lc2VyaWVzW2ldO1xuXHRcdFx0bGV0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKGVsZW1lbnQudGltZSk7XG5cdFx0XHRpZiAodGltZXN0YW1wIDwgbm93ICYmIG5vdy5nZXRIb3VycygpICE9IHRpbWVzdGFtcC5nZXRIb3VycygpKSB7XG5cdFx0XHRcdHN0YXJ0SW5kZXggPSBpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChzdGFydEluZGV4ICE9IC0xKSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJSZW1vdmluZyBvdXRkYXRlZCB3ZWF0aGVyIGluZm9ybWF0aW9uLi4uXCIpXG5cdFx0XHRqc29uLnByb3BlcnRpZXMudGltZXNlcmllcy5zcGxpY2UoMCwgc3RhcnRJbmRleCArIDEpO1xuXHRcdH1cblxuXHRcdHJldHVybiBqc29uO1xuXHR9XG5cblx0cHJpdmF0ZSBQYXJzZVdlYXRoZXIoanNvbjogTWV0Tm9yd2F5UGF5bG9hZCk6IFdlYXRoZXJEYXRhIHtcblx0XHRqc29uID0gdGhpcy5SZW1vdmVFYXJsaWVyRWxlbWVudHMoanNvbik7XG5cdFx0bGV0IHRpbWVzID0gdGhpcy5zdW5DYWxjLmdldFRpbWVzKG5ldyBEYXRlKCksIGpzb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0sIGpzb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0sIGpzb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMl0pO1xuXHRcdC8vIEN1cnJlbnQgV2VhdGhlclxuXHRcdGxldCBjdXJyZW50ID0ganNvbi5wcm9wZXJ0aWVzLnRpbWVzZXJpZXNbMF07XG5cdFx0bGV0IHJlc3VsdDogV2VhdGhlckRhdGEgPSB7XG5cdFx0XHR0ZW1wZXJhdHVyZTogQ2Vsc2l1c1RvS2VsdmluKGN1cnJlbnQuZGF0YS5pbnN0YW50LmRldGFpbHMuYWlyX3RlbXBlcmF0dXJlKSxcblx0XHRcdGNvb3JkOiB7XG5cdFx0XHRcdGxhdDoganNvbi5nZW9tZXRyeS5jb29yZGluYXRlc1sxXSxcblx0XHRcdFx0bG9uOiBqc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdXG5cdFx0XHR9LFxuXHRcdFx0ZGF0ZTogbmV3IERhdGUoY3VycmVudC50aW1lKSxcblx0XHRcdGNvbmRpdGlvbjogdGhpcy5SZXNvbHZlQ29uZGl0aW9uKGN1cnJlbnQuZGF0YS5uZXh0XzFfaG91cnMuc3VtbWFyeS5zeW1ib2xfY29kZSwgSXNOaWdodCh0aW1lcykpLFxuXHRcdFx0aHVtaWRpdHk6IGN1cnJlbnQuZGF0YS5pbnN0YW50LmRldGFpbHMucmVsYXRpdmVfaHVtaWRpdHksXG5cdFx0XHRwcmVzc3VyZTogY3VycmVudC5kYXRhLmluc3RhbnQuZGV0YWlscy5haXJfcHJlc3N1cmVfYXRfc2VhX2xldmVsLFxuXHRcdFx0ZXh0cmFfZmllbGQ6IHtcblx0XHRcdFx0bmFtZTogXyhcIkNsb3VkaW5lc3NcIiksXG5cdFx0XHRcdHR5cGU6IFwicGVyY2VudFwiLFxuXHRcdFx0XHR2YWx1ZTogY3VycmVudC5kYXRhLmluc3RhbnQuZGV0YWlscy5jbG91ZF9hcmVhX2ZyYWN0aW9uXG5cdFx0XHR9LFxuXHRcdFx0c3VucmlzZTogdGltZXMuc3VucmlzZSxcblx0XHRcdHN1bnNldDogdGltZXMuc3Vuc2V0LFxuXHRcdFx0d2luZDoge1xuXHRcdFx0XHRkZWdyZWU6IGN1cnJlbnQuZGF0YS5pbnN0YW50LmRldGFpbHMud2luZF9mcm9tX2RpcmVjdGlvbixcblx0XHRcdFx0c3BlZWQ6IGN1cnJlbnQuZGF0YS5pbnN0YW50LmRldGFpbHMud2luZF9zcGVlZFxuXHRcdFx0fSxcblx0XHRcdGxvY2F0aW9uOiB7XG5cdFx0XHRcdHVybDogbnVsbCxcblx0XHRcdH0sXG5cdFx0XHRmb3JlY2FzdHM6IFtdXG5cdFx0fTtcblxuXHRcdGxldCBob3VybHlGb3JlY2FzdHM6IEhvdXJseUZvcmVjYXN0RGF0YVtdID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBqc29uLnByb3BlcnRpZXMudGltZXNlcmllcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGpzb24ucHJvcGVydGllcy50aW1lc2VyaWVzW2ldO1xuXG5cdFx0XHQvLyBIb3VybHkgZm9yZWNhc3Rcblx0XHRcdGlmICghIWVsZW1lbnQuZGF0YS5uZXh0XzFfaG91cnMpIHtcblx0XHRcdFx0aG91cmx5Rm9yZWNhc3RzLnB1c2goe1xuXHRcdFx0XHRcdGRhdGU6IG5ldyBEYXRlKGVsZW1lbnQudGltZSksXG5cdFx0XHRcdFx0dGVtcDogQ2Vsc2l1c1RvS2VsdmluKGVsZW1lbnQuZGF0YS5pbnN0YW50LmRldGFpbHMuYWlyX3RlbXBlcmF0dXJlKSxcblx0XHRcdFx0XHRwcmVjaXBpdGF0aW9uOiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBcInJhaW5cIixcblx0XHRcdFx0XHRcdHZvbHVtZTogZWxlbWVudC5kYXRhLm5leHRfMV9ob3Vycy5kZXRhaWxzLnByZWNpcGl0YXRpb25fYW1vdW50XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRjb25kaXRpb246IHRoaXMuUmVzb2x2ZUNvbmRpdGlvbihlbGVtZW50LmRhdGEubmV4dF8xX2hvdXJzLnN1bW1hcnkuc3ltYm9sX2NvZGUsIElzTmlnaHQodGltZXMsIG5ldyBEYXRlKGVsZW1lbnQudGltZSkpKVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzdWx0LmhvdXJseUZvcmVjYXN0cyA9IGhvdXJseUZvcmVjYXN0cztcblx0XHRyZXN1bHQuZm9yZWNhc3RzID0gdGhpcy5CdWlsZEZvcmVjYXN0cyhqc29uLnByb3BlcnRpZXMudGltZXNlcmllcyk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHByaXZhdGUgQnVpbGRGb3JlY2FzdHMoZm9yZWNhc3RzRGF0YTogTWV0Tm9yd2F5RGF0YVtdKTogRm9yZWNhc3REYXRhW10ge1xuXHRcdGxldCBmb3JlY2FzdHM6IEZvcmVjYXN0RGF0YVtdID0gW107XG5cdFx0bGV0IGRheXMgPSB0aGlzLlNvcnREYXRhQnlEYXkoZm9yZWNhc3RzRGF0YSk7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGRheXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGxldCBmb3JlY2FzdDogRm9yZWNhc3REYXRhID0ge1xuXHRcdFx0XHRjb25kaXRpb246IHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImNsb3VkeS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBcIlwiLFxuXHRcdFx0XHRcdGljb25zOiBbXSxcblx0XHRcdFx0XHRtYWluOiBcIlwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRhdGU6IG51bGwsXG5cdFx0XHRcdHRlbXBfbWF4OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksXG5cdFx0XHRcdHRlbXBfbWluOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcblx0XHRcdH1cblxuXHRcdFx0Ly8gR2V0IG1pbi9tYXggdGVtcCBmcm9tIDYtaG91cmx5IGRhdGFcblx0XHRcdC8vIGdldCBjb25kaXRpb24gZnJvbSBob3VybHkgZGF0YVxuXHRcdFx0bGV0IGNvbmRpdGlvbkNvdW50ZXI6IENvbmRpdGlvbkNvdW50ID0ge307XG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGRheXNbaV0ubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0Y29uc3QgZWxlbWVudCA9IGRheXNbaV1bal07XG5cdFx0XHRcdGlmICghZWxlbWVudC5kYXRhLm5leHRfNl9ob3VycykgY29udGludWU7XG5cdFx0XHRcdGZvcmVjYXN0LmRhdGUgPSBuZXcgRGF0ZShlbGVtZW50LnRpbWUpO1xuXHRcdFx0XHRpZiAoZWxlbWVudC5kYXRhLm5leHRfNl9ob3Vycy5kZXRhaWxzLmFpcl90ZW1wZXJhdHVyZV9tYXggPiBmb3JlY2FzdC50ZW1wX21heCkgZm9yZWNhc3QudGVtcF9tYXggPSBlbGVtZW50LmRhdGEubmV4dF82X2hvdXJzLmRldGFpbHMuYWlyX3RlbXBlcmF0dXJlX21heDtcblx0XHRcdFx0aWYgKGVsZW1lbnQuZGF0YS5uZXh0XzZfaG91cnMuZGV0YWlscy5haXJfdGVtcGVyYXR1cmVfbWluIDwgZm9yZWNhc3QudGVtcF9taW4pIGZvcmVjYXN0LnRlbXBfbWluID0gZWxlbWVudC5kYXRhLm5leHRfNl9ob3Vycy5kZXRhaWxzLmFpcl90ZW1wZXJhdHVyZV9taW47XG5cblx0XHRcdFx0bGV0IFtzeW1ib2xdID0gZWxlbWVudC5kYXRhLm5leHRfNl9ob3Vycy5zdW1tYXJ5LnN5bWJvbF9jb2RlLnNwbGl0KFwiX1wiKTtcblx0XHRcdFx0bGV0IHNldmVyaXR5ID0gY29uZGl0aW9uU2V2ZXJpdHlbc3ltYm9sIGFzIENvbmRpdGlvbnNdO1xuXG5cdFx0XHRcdGlmICghY29uZGl0aW9uQ291bnRlcltzZXZlcml0eV0pIGNvbmRpdGlvbkNvdW50ZXJbc2V2ZXJpdHldID0geyBjb3VudDogMCwgbmFtZTogc3ltYm9sIGFzIENvbmRpdGlvbnMgfTtcblx0XHRcdFx0Y29uZGl0aW9uQ291bnRlcltzZXZlcml0eV0uY291bnQgPSBjb25kaXRpb25Db3VudGVyW3NldmVyaXR5XS5jb3VudCArIDE7XG5cdFx0XHR9XG5cblx0XHRcdGZvcmVjYXN0LnRlbXBfbWF4ID0gQ2Vsc2l1c1RvS2VsdmluKGZvcmVjYXN0LnRlbXBfbWF4KTtcblx0XHRcdGZvcmVjYXN0LnRlbXBfbWluID0gQ2Vsc2l1c1RvS2VsdmluKGZvcmVjYXN0LnRlbXBfbWluKTtcblx0XHRcdGZvcmVjYXN0LmNvbmRpdGlvbiA9IHRoaXMuUmVzb2x2ZUNvbmRpdGlvbih0aGlzLkdldE1vc3RTZXZlcmVDb25kaXRpb24oY29uZGl0aW9uQ291bnRlcikpO1xuXG5cdFx0XHRmb3JlY2FzdHMucHVzaChmb3JlY2FzdCk7XG5cdFx0fVxuXHRcdHJldHVybiBmb3JlY2FzdHM7XG5cdH1cblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vXG5cdC8vICBVdGlsaXR5IGZ1bmN0aW9uc1xuXHQvL1xuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdHByaXZhdGUgR2V0RWFybGllc3REYXRhRm9yVG9kYXkoZXZlbnRzOiBNZXROb3J3YXlEYXRhW10pOiBNZXROb3J3YXlEYXRhIHtcblx0XHRsZXQgZWFybGllc3Q6IG51bWJlciA9IDA7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGVhcmxpZXN0RWxlbWVudFRpbWUgPSBuZXcgRGF0ZShldmVudHNbZWFybGllc3RdLnRpbWUpO1xuXHRcdFx0bGV0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKGV2ZW50c1tpXS50aW1lKTtcblxuXHRcdFx0aWYgKHRpbWVzdGFtcC50b0RhdGVTdHJpbmcoKSAhPSBuZXcgRGF0ZSgpLnRvRGF0ZVN0cmluZygpKSBjb250aW51ZTtcblx0XHRcdGlmIChlYXJsaWVzdEVsZW1lbnRUaW1lIDwgdGltZXN0YW1wKSBjb250aW51ZTtcblxuXHRcdFx0ZWFybGllc3QgPSBpO1xuXHRcdH1cblx0XHRyZXR1cm4gZXZlbnRzW2VhcmxpZXN0XTtcblx0fVxuXG5cdHByaXZhdGUgU29ydERhdGFCeURheShkYXRhOiBNZXROb3J3YXlEYXRhW10pOiBNZXROb3J3YXlEYXRhW11bXSB7XG5cdFx0bGV0IGRheXM6IEFycmF5PGFueT4gPSBbXVxuXHRcdC8vIFNvcnQgYW5kIGNvbnRhaW5lcml6ZSBmb3JlY2FzdHMgYnkgZGF0ZVxuXHRcdGxldCBjdXJyZW50RGF5ID0gbmV3IERhdGUodGhpcy5HZXRFYXJsaWVzdERhdGFGb3JUb2RheShkYXRhKS50aW1lKTtcblx0XHRsZXQgZGF5SW5kZXggPSAwO1xuXHRcdGRheXMucHVzaChbXSk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBlbGVtZW50ID0gZGF0YVtpXTtcblx0XHRcdGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKGVsZW1lbnQudGltZSk7XG5cdFx0XHRpZiAodGltZXN0YW1wLnRvRGF0ZVN0cmluZygpID09IGN1cnJlbnREYXkudG9EYXRlU3RyaW5nKCkpIHtcblx0XHRcdFx0ZGF5c1tkYXlJbmRleF0ucHVzaChlbGVtZW50KTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKHRpbWVzdGFtcC50b0RhdGVTdHJpbmcoKSAhPSBjdXJyZW50RGF5LnRvRGF0ZVN0cmluZygpKSB7XG5cdFx0XHRcdGRheUluZGV4Kys7XG5cdFx0XHRcdGN1cnJlbnREYXkgPSB0aW1lc3RhbXA7XG5cdFx0XHRcdGRheXMucHVzaChbXSk7XG5cdFx0XHRcdGRheXNbZGF5SW5kZXhdLnB1c2goZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRheXM7XG5cdH1cblxuXHRwcml2YXRlIEdldE1vc3RDb21tb25Db25kaXRpb24oY291bnQ6IENvbmRpdGlvbkNvdW50KTogc3RyaW5nIHtcblx0XHRsZXQgcmVzdWx0OiBudW1iZXIgPSBudWxsO1xuXHRcdGZvciAobGV0IGtleSBpbiBjb3VudCkge1xuXHRcdFx0aWYgKHJlc3VsdCA9PSBudWxsKSByZXN1bHQgPSBwYXJzZUludChrZXkpO1xuXHRcdFx0aWYgKGNvdW50W3Jlc3VsdF0uY291bnQgPCBjb3VudFtrZXldLmNvdW50KSByZXN1bHQgPSBwYXJzZUludChrZXkpO1xuXHRcdH1cblx0XHRyZXR1cm4gY291bnRbcmVzdWx0XS5uYW1lO1xuXHR9XG5cblx0cHJpdmF0ZSBHZXRNb3N0U2V2ZXJlQ29uZGl0aW9uKGNvbmRpdGlvbnM6IENvbmRpdGlvbkNvdW50KTogc3RyaW5nIHtcblx0XHQvLyBmb3IgV2VhdGhlciBjb25kaXRpb25zXG5cdFx0Ly90aGlzLmFwcC5sb2cuRGVidWcoSlNPTi5zdHJpbmdpZnkoY29uZGl0aW9ucykpO1xuXG5cdFx0Ly8gV2Ugd2FudCB0byBrbm93IHRoZSB3b3JzdCBjb25kaXRpb25cblx0XHRsZXQgcmVzdWx0OiBudW1iZXIgPSBudWxsO1xuXHRcdGZvciAobGV0IGtleSBpbiBjb25kaXRpb25zKSB7XG5cdFx0XHRsZXQgY29uZGl0aW9uSUQgPSBwYXJzZUludChrZXkpO1xuXHRcdFx0Ly8gUG9sYXIgbmlnaHQgaWQncyBhcmUgYWJvdmUgMTAwLCBtYWtlIHN1cmUgdG8gcmVtb3ZlIHRoZW0gZm9yIGNoZWNraW5nXG5cdFx0XHRsZXQgcmVzdWx0U3RyaXBwZWQgPSAocmVzdWx0ID4gMTAwKSA/IHJlc3VsdCAtIDEwMCA6IHJlc3VsdDtcblx0XHRcdGxldCBjb25kaXRpb25JRFN0cmlwcGVkID0gKGNvbmRpdGlvbklEID4gMTAwKSA/IGNvbmRpdGlvbklEIC0gMTAwIDogY29uZGl0aW9uSUQ7XG5cdFx0XHQvLyBNYWtlIHRoZSBjb21wYXJpc29uLCBrZWVwIHRoZSBwb2xhciBuaWdodCBjb25kaXRpb24gaWRcblx0XHRcdGlmIChjb25kaXRpb25JRFN0cmlwcGVkID4gcmVzdWx0U3RyaXBwZWQpIHJlc3VsdCA9IGNvbmRpdGlvbklEO1xuXHRcdH1cblx0XHQvLyBJZiB0aGVyZSBpcyBubyByYWluIG9yIHdvcnNlLCBqdXN0IGdldCB0aGUgbW9zdCBjb21tb24gY29uZGl0aW9uIGZvciB0aGUgZGF5XG5cdFx0aWYgKHJlc3VsdCA8PSA0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5HZXRNb3N0Q29tbW9uQ29uZGl0aW9uKGNvbmRpdGlvbnMpO1xuXHRcdH1cblx0XHRyZXR1cm4gY29uZGl0aW9uc1tyZXN1bHRdLm5hbWU7XG5cdH1cblxuXHRwcml2YXRlIEdldFVybChsb2M6IExvY2F0aW9uRGF0YSk6IHN0cmluZyB7XG5cdFx0bGV0IHVybCA9IHRoaXMuYmFzZVVybCArIFwibGF0PVwiO1xuXHRcdHVybCArPSAobG9jLmxhdCArIFwiJmxvbj1cIiArIGxvYy5sb24pO1xuXHRcdHJldHVybiB1cmw7XG5cdH1cblxuXHRwcml2YXRlIERlY29uc3RydWN0Q29uZGl0aW9uKGljb246IHN0cmluZykge1xuXHRcdGxldCBjb25kaXRpb24gPSBpY29uLnNwbGl0KFwiX1wiKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0aW1lT2ZEYXk6IGNvbmRpdGlvblsxXSBhcyBUaW1lT2ZEYXksXG5cdFx0XHRjb25kaXRpb246IGNvbmRpdGlvblswXSBhcyBDb25kaXRpb25zXG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBSZXNvbHZlQ29uZGl0aW9uKGljb246IHN0cmluZywgaXNOaWdodDogYm9vbGVhbiA9IGZhbHNlKTogQ29uZGl0aW9uIHtcblx0XHRsZXQgd2VhdGhlciA9IHRoaXMuRGVjb25zdHJ1Y3RDb25kaXRpb24oaWNvbik7XG5cdFx0c3dpdGNoICh3ZWF0aGVyLmNvbmRpdGlvbikge1xuXHRcdFx0Y2FzZSBcImNsZWFyc2t5XCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogKGlzTmlnaHQpID8gXCJuaWdodC1jbGVhci1zeW1ib2xpY1wiIDogXCJkYXktc3Vubnktc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiQ2xlYXIgc2t5XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiQ2xlYXIgc2t5XCIpLFxuXHRcdFx0XHRcdGljb25zOiAoaXNOaWdodCkgPyBbXCJ3ZWF0aGVyLWNsZWFyLW5pZ2h0XCJdIDogW1wid2VhdGhlci1jbGVhclwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiY2xvdWR5XCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJjbG91ZHktc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiQ2xvdWR5XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiQ2xvdWR5XCIpLFxuXHRcdFx0XHRcdGljb25zOiAoaXNOaWdodCkgPyBbXCJ3ZWF0aGVyLW92ZXJjYXN0XCIsIFwid2VhdGhlci1jbG91ZHMtbmlnaHRcIiwgXCJ3ZWF0aGVyLWZldy1jbG91ZHMtbmlnaHRcIl0gOiBbXCJ3ZWF0aGVyLW92ZXJjYXN0XCIsIFwid2VhdGhlci1jbG91ZHNcIiwgXCJ3ZWF0aGVyLWZldy1jbG91ZHNcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImZhaXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoaXNOaWdodCkgPyBcIm5pZ2h0LWNsb3VkeS1zeW1ib2xpY1wiIDogXCJkYXktY2xvdWR5LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkZhaXJcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJGYWlyXCIpLFxuXHRcdFx0XHRcdGljb25zOiAoaXNOaWdodCkgPyBbXCJ3ZWF0aGVyLWZldy1jbG91ZHMtbmlnaHRcIiwgXCJ3ZWF0aGVyLWNsb3Vkcy1uaWdodFwiLCBcIndlYXRoZXItb3ZlcmNhc3RcIl0gOiBbXCJ3ZWF0aGVyLWZldy1jbG91ZHNcIiwgXCJ3ZWF0aGVyLWNsb3Vkc1wiLCBcIndlYXRoZXItb3ZlcmNhc3RcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImZvZ1wiOlxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiZm9nLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkZvZ1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkZvZ1wiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1mb2dcIiwgXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiaGVhdnlyYWluXCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJyYWluLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkhlYXZ5IHJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSByYWluXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImhlYXZ5cmFpbmFuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInRodW5kZXJzdG9ybS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdG1haW46IF8oXCJIZWF2eSByYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSGVhdnkgcmFpbiBhbmQgdGh1bmRlclwiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJoZWF2eXJhaW5zaG93ZXJzXCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogKGlzTmlnaHQpID8gXCJuaWdodC1hbHQtcmFpbi1zeW1ib2xpY1wiIDogXCJkYXktcmFpbi1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdG1haW46IF8oXCJIZWF2eSByYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSGVhdnkgcmFpbiBzaG93ZXJzXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlclwiOlxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGN1c3RvbUljb246IChJc05pZ2h0KSA/IFwibmlnaHQtYWx0LXRodW5kZXJzdG9ybS1zeW1ib2xpY1wiIDogXCJkYXktdGh1bmRlcnN0b3JtLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkhlYXZ5IHJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSByYWluIHNob3dlcnMgYW5kIHRodW5kZXJcIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImhlYXZ5c2xlZXRcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNsZWV0LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkhlYXZ5IHNsZWV0XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSGVhdnkgc2xlZXRcIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItcmFpblwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiaGVhdnlzbGVldGFuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNsZWV0LXN0b3JtLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkhlYXZ5IHNsZWV0XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSGVhdnkgc2xlZXQgYW5kIHRodW5kZXJcIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItcmFpblwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiaGVhdnlzbGVldHNob3dlcnNcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoaXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1zbGVldC1zeW1ib2xpY1wiIDogXCJkYXktc2xlZXQtc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiSGVhdnkgc2xlZXRcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSBzbGVldCBzaG93ZXJzXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCJdXG5cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImhlYXZ5c2xlZXRzaG93ZXJzYW5kdGh1bmRlclwiOlxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGN1c3RvbUljb246IChJc05pZ2h0KSA/IFwibmlnaHQtYWx0LXNsZWV0LXN0b3JtLXN5bWJvbGljXCIgOiBcImRheS1zbGVldC1zdG9ybS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdG1haW46IF8oXCJIZWF2eSBzbGVldFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkhlYXZ5IHNsZWV0IHNob3dlcnMgYW5kIHRodW5kZXJcIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIl1cblxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiaGVhdnlzbm93XCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzbm93LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkhlYXZ5IHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSBzbm93XCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNub3dcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImhlYXZ5c25vd2FuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNub3ctc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiSGVhdnkgc25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkhlYXZ5IHNub3cgYW5kIHRodW5kZXJcIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc25vd1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiaGVhdnlzbm93c2hvd2Vyc1wiOlxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGN1c3RvbUljb246IChpc05pZ2h0KSA/IFwibmlnaHQtYWx0LXNub3ctc3ltYm9saWNcIiA6IFwiZGF5LXNub3ctc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiSGVhdnkgc25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkhlYXZ5IHNub3cgc2hvd2Vyc1wiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93LXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc25vd1wiXVxuXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlclwiOlxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGN1c3RvbUljb246IChpc05pZ2h0KSA/IFwibmlnaHQtYWx0LXNub3ctdGh1bmRlcnN0b3JtLXN5bWJvbGljXCIgOiBcImRheS1zbm93LXRodW5kZXJzdG9ybS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdG1haW46IF8oXCJIZWF2eSBzbm93XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSGVhdnkgc25vdyBzaG93ZXJzIGFuZCB0aHVuZGVyXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNub3ctc2NhdHRlcmVkXCIsIFwid2VhdGhlci1zbm93XCJdXG5cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImxpZ2h0cmFpblwiOlxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGN1c3RvbUljb246IFwicmFpbi1taXgtc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiTGlnaHQgcmFpblwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IHJhaW5cIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXJhaW5cIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImxpZ2h0cmFpbmFuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInJhaW4tbWl4LXN0b3JtLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkxpZ2h0IHJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJMaWdodCByYWluIGFuZCB0aHVuZGVyXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCIsIFwid2VhdGhlci1yYWluXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJsaWdodHJhaW5zaG93ZXJzXCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogKGlzTmlnaHQpID8gXCJuaWdodC1hbHQtcmFpbi1taXgtc3ltYm9saWNcIiA6IFwiZGF5LXJhaW4tbWl4LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkxpZ2h0IHJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJMaWdodCByYWluIHNob3dlcnNcIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXJhaW5cIl1cblxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwibGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoaXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1yYWluLW1peC1zdG9ybS1zeW1ib2xpY1wiIDogXCJkYXktcmFpbi1taXgtc3Rvcm0tc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiTGlnaHQgcmFpblwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IHJhaW4gc2hvd2VycyBhbmQgdGh1bmRlclwiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItcmFpblwiXVxuXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJsaWdodHNsZWV0XCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzbGVldC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdG1haW46IF8oXCJMaWdodCBzbGVldFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IHNsZWV0XCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImxpZ2h0c2xlZXRhbmR0aHVuZGVyXCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzbGVldC1zdG9ybS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdG1haW46IF8oXCJMaWdodCBzbGVldFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IHNsZWV0IGFuZCB0aHVuZGVyXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImxpZ2h0c2xlZXRzaG93ZXJzXCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogKElzTmlnaHQpID8gXCJuaWdodC1hbHQtc2xlZXQtc3ltYm9saWNcIiA6IFwiZGF5LXNsZWV0LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkxpZ2h0IHNsZWV0XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiTGlnaHQgc2xlZXQgc2hvd2Vyc1wiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzXCJdXG5cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImxpZ2h0c3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoSXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1zbGVldC1zdG9ybS1zeW1ib2xpY1wiIDogXCJkYXktc2xlZXQtc3Rvcm0tc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiTGlnaHQgc2xlZXRcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJMaWdodCBzbGVldCBzaG93ZXJzIGFuZCB0aHVuZGVyXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIl1cblxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwibGlnaHRzbm93XCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzbm93LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIkxpZ2h0IHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJMaWdodCBzbm93XCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNub3dcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcImxpZ2h0c25vd2FuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNub3ctc3Rvcm0tc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiTGlnaHQgc25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IHNub3cgYW5kIHRodW5kZXJcIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc25vd1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwibGlnaHRzbm93c2hvd2Vyc1wiOlxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGN1c3RvbUljb246IChpc05pZ2h0KSA/IFwibmlnaHQtYWx0LXNub3ctc3ltYm9saWNcIiA6IFwiZGF5LXNub3ctc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiTGlnaHQgc25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IHNub3cgc2hvd2Vyc1wiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93LXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc25vd1wiXVxuXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoaXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1zbm93LXRodW5kZXJzdG9ybS1zeW1ib2xpY1wiIDogXCJkYXktc25vdy10aHVuZGVyc3Rvcm0tc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiTGlnaHQgc25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IHNub3cgc2hvd2VycyBhbmQgdGh1bmRlclwiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93LXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc25vd1wiXVxuXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJwYXJ0bHljbG91ZHlcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoaXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1jbG91ZHktc3ltYm9saWNcIiA6IFwiZGF5LWNsb3VkeS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdG1haW46IF8oXCJQYXJ0bHkgY2xvdWR5XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiUGFydGx5IGNsb3VkeVwiKSxcblx0XHRcdFx0XHRpY29uczogKGlzTmlnaHQpID8gW1wid2VhdGhlci1jbG91ZHMtbmlnaHRcIiwgXCJ3ZWF0aGVyLWZldy1jbG91ZHMtbmlnaHRcIiwgXCJ3ZWF0aGVyLW92ZXJjYXN0XCJdIDogW1wid2VhdGhlci1jbG91ZHNcIiwgXCJ3ZWF0aGVyLWZldy1jbG91ZHNcIiwgXCJ3ZWF0aGVyLW92ZXJjYXN0XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJyYWluXCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJyYWluLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJSYWluXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJyYWluYW5kdGh1bmRlclwiOlxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGN1c3RvbUljb246IFwidGh1bmRlcnN0b3JtLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJSYWluIGFuZCB0aHVuZGVyXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXN0b3JtXCIsIFwid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwicmFpbnNob3dlcnNcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoaXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1yYWluLW1peC1zeW1ib2xpY1wiIDogXCJkYXktcmFpbi1taXgtc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiUmFpbiBzaG93ZXJzXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiUmFpbiBzaG93ZXJzXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCIsIFwid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJyYWluc2hvd2Vyc2FuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoaXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1yYWluLW1peC1zdG9ybS1zeW1ib2xpY1wiIDogXCJkYXktcmFpbi1taXgtc3Rvcm0tc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiUmFpbiBzaG93ZXJzXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiUmFpbiBzaG93ZXJzIGFuZCB0aHVuZGVyXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCIsIFwid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJzbGVldFwiOlxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGN1c3RvbUljb246IFwic2xlZXQtc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiU2xlZXRcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJTbGVldFwiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgXCJzbGVldGFuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNsZWV0LXN0b3JtLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIlNsZWV0XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiU2xlZXQgYW5kIHRodW5kZXJcIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItc2hvd2Vyc1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwic2xlZXRzaG93ZXJzXCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogKGlzTmlnaHQpID8gXCJuaWdodC1hbHQtc2xlZXQtc3ltYm9saWNcIiA6IFwiZGF5LXNsZWV0LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIlNsZWV0XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiU2xlZXQgc2hvd2Vyc1wiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzXCJdXG5cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcInNsZWV0c2hvd2Vyc2FuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoaXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1zbGVldC1zdG9ybS1zeW1ib2xpY1wiIDogXCJkYXktc2xlZXQtc3Rvcm0tc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiU2xlZXRcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJTbGVldCBzaG93ZXJzIGFuZCB0aHVuZGVyXCIpLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBcInNub3dcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNub3ctc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiU25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNub3dcIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc25vd1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwic25vd2FuZHRodW5kZXJcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNub3ctc3Rvcm0tc3ltYm9saWNcIixcblx0XHRcdFx0XHRtYWluOiBfKFwiU25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNub3cgYW5kIHRodW5kZXJcIiksXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc25vd1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwic25vd3Nob3dlcnNcIjpcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjdXN0b21JY29uOiAoaXNOaWdodCkgPyBcIm5pZ2h0LWFsdC1zbm93LXN5bWJvbGljXCIgOiBcImRheS1zbm93LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIlNub3cgc2hvd2Vyc1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNub3cgc2hvd2Vyc1wiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93LXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc25vd1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwic25vd3Nob3dlcnNhbmR0aHVuZGVyXCI6XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogKGlzTmlnaHQpID8gXCJuaWdodC1hbHQtc25vdy10aHVuZGVyc3Rvcm0tc3ltYm9saWNcIiA6IFwiZGF5LXNub3ctdGh1bmRlcnN0b3JtLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0bWFpbjogXyhcIlNub3cgc2hvd2Vyc1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNub3cgc2hvd2VycyBhbmQgdGh1bmRlclwiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93LXNjYXR0ZXJlZFwiLCBcIndlYXRoZXItc25vd1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJjb25kaXRpb24gY29kZSBub3QgZm91bmQ6IFwiICsgd2VhdGhlci5jb25kaXRpb24pO1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiY2xvdWQtcmVmcmVzaC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdG1haW46IF8oXCJVbmtub3duXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiVW5rbm93blwiKSxcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zZXZlcmUtYWxlcnRcIl1cblx0XHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG4vKiogaHR0cHM6Ly9hcGkubWV0Lm5vL3dlYXRoZXJhcGkvd2VhdGhlcmljb24vMi4wL2RvY3VtZW50YXRpb24jIS9kYXRhL2dldF9sZWdlbmRzICovXG5jb25zdCBjb25kaXRpb25TZXZlcml0eTogQ29uZGl0aW9uUHJvcGVydGllcyA9IHtcblx0Y2xlYXJza3k6IDEsXG5cdGNsb3VkeTogNCxcblx0ZmFpcjogMixcblx0Zm9nOiAxNSxcblx0aGVhdnlyYWluOiAxMCxcblx0aGVhdnlyYWluYW5kdGh1bmRlcjogMTEsXG5cdGhlYXZ5cmFpbnNob3dlcnM6IDQxLFxuXHRoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcjogMjUsXG5cdGhlYXZ5c2xlZXQ6IDQ4LFxuXHRoZWF2eXNsZWV0YW5kdGh1bmRlcjogMzIsXG5cdGhlYXZ5c2xlZXRzaG93ZXJzOiA0Myxcblx0aGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyOiAyNyxcblx0aGVhdnlzbm93OiA1MCxcblx0aGVhdnlzbm93YW5kdGh1bmRlcjogMzQsXG5cdGhlYXZ5c25vd3Nob3dlcnM6IDQ1LFxuXHRoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcjogMjksXG5cdGxpZ2h0cmFpbjogNDYsXG5cdGxpZ2h0cmFpbmFuZHRodW5kZXI6IDMwLFxuXHRsaWdodHJhaW5zaG93ZXJzOiA0MCxcblx0bGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXI6IDI0LFxuXHRsaWdodHNsZWV0OiA0Nyxcblx0bGlnaHRzbGVldGFuZHRodW5kZXI6IDMxLFxuXHRsaWdodHNsZWV0c2hvd2VyczogNDIsXG5cdGxpZ2h0c25vdzogNDksXG5cdGxpZ2h0c25vd2FuZHRodW5kZXI6IDMzLFxuXHRsaWdodHNub3dzaG93ZXJzOiA0NCxcblx0bGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcjogMjYsXG5cdGxpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcjogMjgsXG5cdHBhcnRseWNsb3VkeTogMyxcblx0cmFpbjogOSxcblx0cmFpbmFuZHRodW5kZXI6IDIyLFxuXHRyYWluc2hvd2VyczogNSxcblx0cmFpbnNob3dlcnNhbmR0aHVuZGVyOiA2LFxuXHRzbGVldDogMTIsXG5cdHNsZWV0YW5kdGh1bmRlcjogMjMsXG5cdHNsZWV0c2hvd2VyczogNyxcblx0c2xlZXRzaG93ZXJzYW5kdGh1bmRlcjogMjAsXG5cdHNub3c6IDEzLFxuXHRzbm93YW5kdGh1bmRlcjogMTQsXG5cdHNub3dzaG93ZXJzOiA4LFxuXHRzbm93c2hvd2Vyc2FuZHRodW5kZXI6IDIxXG59XG5cbmludGVyZmFjZSBNZXROb3J3YXlQYXlsb2FkIHtcblx0dHlwZTogc3RyaW5nLFxuXHRnZW9tZXRyeToge1xuXHRcdHR5cGU6IHN0cmluZyxcblx0XHQvKiogbG9uLCBsYXQsIGFsdCAqL1xuXHRcdGNvb3JkaW5hdGVzOiBudW1iZXJbXVxuXHR9LFxuXHRwcm9wZXJ0aWVzOiB7XG5cdFx0bWV0YToge1xuXHRcdFx0dXBkYXRlZF9hdDogc3RyaW5nLFxuXHRcdFx0dW5pdHM6IHtcblx0XHRcdFx0YWlyX3ByZXNzdXJlX2F0X3NlYV9sZXZlbDogc3RyaW5nLFxuXHRcdFx0XHRhaXJfdGVtcGVyYXR1cmU6IHN0cmluZyxcblx0XHRcdFx0YWlyX3RlbXBlcmF0dXJlX21heDogc3RyaW5nLFxuXHRcdFx0XHRhaXJfdGVtcGVyYXR1cmVfbWluOiBzdHJpbmcsXG5cdFx0XHRcdGNsb3VkX2FyZWFfZnJhY3Rpb246IHN0cmluZyxcblx0XHRcdFx0Y2xvdWRfYXJlYV9mcmFjdGlvbl9oaWdoOiBzdHJpbmcsXG5cdFx0XHRcdGNsb3VkX2FyZWFfZnJhY3Rpb25fbG93OiBzdHJpbmcsXG5cdFx0XHRcdGNsb3VkX2FyZWFfZnJhY3Rpb25fbWVkaXVtOiBzdHJpbmcsXG5cdFx0XHRcdGRld19wb2ludF90ZW1wZXJhdHVyZTogc3RyaW5nLFxuXHRcdFx0XHRmb2dfYXJlYV9mcmFjdGlvbjogc3RyaW5nLFxuXHRcdFx0XHRwcmVjaXBpdGF0aW9uX2Ftb3VudDogc3RyaW5nLFxuXHRcdFx0XHRyZWxhdGl2ZV9odW1pZGl0eTogc3RyaW5nLFxuXHRcdFx0XHR1bHRyYXZpb2xldF9pbmRleF9jbGVhcl9za3k6IHN0cmluZyxcblx0XHRcdFx0d2luZF9mcm9tX2RpcmVjdGlvbjogc3RyaW5nLFxuXHRcdFx0XHR3aW5kX3NwZWVkOiBzdHJpbmdcblx0XHRcdH1cblx0XHR9LFxuXHRcdHRpbWVzZXJpZXM6IE1ldE5vcndheURhdGFbXVxuXHR9XG59XG5cbmludGVyZmFjZSBNZXROb3J3YXlEYXRhIHtcblx0dGltZTogc3RyaW5nLFxuXHRkYXRhOiB7XG5cdFx0aW5zdGFudDoge1xuXHRcdFx0ZGV0YWlsczoge1xuXHRcdFx0XHQvKipoUGEgKi9cblx0XHRcdFx0YWlyX3ByZXNzdXJlX2F0X3NlYV9sZXZlbDogbnVtYmVyLFxuXHRcdFx0XHQvKiogQyAqL1xuXHRcdFx0XHRhaXJfdGVtcGVyYXR1cmU6IG51bWJlcixcblx0XHRcdFx0LyoqICUgKi9cblx0XHRcdFx0Y2xvdWRfYXJlYV9mcmFjdGlvbjogbnVtYmVyLFxuXHRcdFx0XHQvKiogJSAqL1xuXHRcdFx0XHRjbG91ZF9hcmVhX2ZyYWN0aW9uX2hpZ2g6IG51bWJlcixcblx0XHRcdFx0LyoqICUgKi9cblx0XHRcdFx0Y2xvdWRfYXJlYV9mcmFjdGlvbl9sb3c6IG51bWJlcixcblx0XHRcdFx0LyoqICUgKi9cblx0XHRcdFx0Y2xvdWRfYXJlYV9mcmFjdGlvbl9tZWRpdW06IG51bWJlcixcblx0XHRcdFx0LyoqIEMgKi9cblx0XHRcdFx0ZGV3X3BvaW50X3RlbXBlcmF0dXJlOiBudW1iZXIsXG5cdFx0XHRcdC8qKiAlICovXG5cdFx0XHRcdGZvZ19hcmVhX2ZyYWN0aW9uOiBudW1iZXIsXG5cdFx0XHRcdC8qKiAlICovXG5cdFx0XHRcdHJlbGF0aXZlX2h1bWlkaXR5OiBudW1iZXIsXG5cdFx0XHRcdC8qKiAxICovXG5cdFx0XHRcdHVsdHJhdmlvbGV0X2luZGV4X2NsZWFyX3NreTogbnVtYmVyLFxuXHRcdFx0XHQvKiogZGVncmVlcyAqL1xuXHRcdFx0XHR3aW5kX2Zyb21fZGlyZWN0aW9uOiBudW1iZXIsXG5cdFx0XHRcdC8qKiBtL3MgKi9cblx0XHRcdFx0d2luZF9zcGVlZDogbnVtYmVyXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRuZXh0XzEyX2hvdXI/OiB7XG5cdFx0XHRzdW1tYXJ5OiB7XG5cdFx0XHRcdHN5bWJvbF9jb2RlOiBzdHJpbmdcblx0XHRcdH1cblx0XHR9LFxuXHRcdG5leHRfMV9ob3Vycz86IHtcblx0XHRcdHN1bW1hcnk6IHtcblx0XHRcdFx0c3ltYm9sX2NvZGU6IHN0cmluZ1xuXHRcdFx0fSxcblx0XHRcdGRldGFpbHM6IHtcblx0XHRcdFx0LyoqIG1tICovXG5cdFx0XHRcdHByZWNpcGl0YXRpb25fYW1vdW50OiBudW1iZXJcblx0XHRcdH1cblx0XHR9LFxuXHRcdG5leHRfNl9ob3Vycz86IHtcblx0XHRcdHN1bW1hcnk6IHtcblx0XHRcdFx0c3ltYm9sX2NvZGU6IHN0cmluZ1xuXHRcdFx0fSxcblx0XHRcdGRldGFpbHM6IHtcblx0XHRcdFx0LyoqIEMgKi9cblx0XHRcdFx0YWlyX3RlbXBlcmF0dXJlX21heDogbnVtYmVyLFxuXHRcdFx0XHQvKiogQyAqL1xuXHRcdFx0XHRhaXJfdGVtcGVyYXR1cmVfbWluOiBudW1iZXIsXG5cdFx0XHRcdC8qKiBtbSAqL1xuXHRcdFx0XHRwcmVjaXBpdGF0aW9uX2Ftb3VudDogbnVtYmVyXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmludGVyZmFjZSBDb25kaXRpb25Db3VudCB7XG5cdFtrZXk6IG51bWJlcl06IE1FVENvbmRpdGlvblxufVxuXG5pbnRlcmZhY2UgTUVUQ29uZGl0aW9uIHtcblx0Y291bnQ6IG51bWJlcjtcblx0bmFtZTogQ29uZGl0aW9ucztcbn1cblxudHlwZSBUaW1lT2ZEYXkgPSBcImRheVwiIHwgXCJuaWdodFwiIHwgXCJwb2xhcnR3aWxpZ2h0XCI7XG5cbnR5cGUgQ29uZGl0aW9uUHJvcGVydGllcyA9IHtcblx0W2tleSBpbiBDb25kaXRpb25zXTogbnVtYmVyXG59XG5cbnR5cGUgQ29uZGl0aW9ucyA9XG5cdFwiY2xlYXJza3lcIiB8XG5cdFwiY2xvdWR5XCIgfFxuXHRcImZhaXJcIiB8XG5cdFwiZm9nXCIgfFxuXHRcImhlYXZ5cmFpblwiIHxcblx0XCJoZWF2eXJhaW5hbmR0aHVuZGVyXCIgfFxuXHRcImhlYXZ5cmFpbnNob3dlcnNcIiB8XG5cdFwiaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJcIiB8XG5cdFwiaGVhdnlzbGVldFwiIHxcblx0XCJoZWF2eXNsZWV0YW5kdGh1bmRlclwiIHxcblx0XCJoZWF2eXNsZWV0c2hvd2Vyc1wiIHxcblx0XCJoZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJcIiB8XG5cdFwiaGVhdnlzbm93XCIgfFxuXHRcImhlYXZ5c25vd2FuZHRodW5kZXJcIiB8XG5cdFwiaGVhdnlzbm93c2hvd2Vyc1wiIHxcblx0XCJoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlclwiIHxcblx0XCJsaWdodHJhaW5cIiB8XG5cdFwibGlnaHRyYWluYW5kdGh1bmRlclwiIHxcblx0XCJsaWdodHJhaW5zaG93ZXJzXCIgfFxuXHRcImxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyXCIgfFxuXHRcImxpZ2h0c2xlZXRcIiB8XG5cdFwibGlnaHRzbGVldGFuZHRodW5kZXJcIiB8XG5cdFwibGlnaHRzbGVldHNob3dlcnNcIiB8XG5cdFwibGlnaHRzbm93XCIgfFxuXHRcImxpZ2h0c25vd2FuZHRodW5kZXJcIiB8XG5cdFwibGlnaHRzbm93c2hvd2Vyc1wiIHxcblx0XCJsaWdodHNzbGVldHNob3dlcnNhbmR0aHVuZGVyXCIgfFxuXHRcImxpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlclwiIHxcblx0XCJwYXJ0bHljbG91ZHlcIiB8XG5cdFwicmFpblwiIHxcblx0XCJyYWluYW5kdGh1bmRlclwiIHxcblx0XCJyYWluc2hvd2Vyc1wiIHxcblx0XCJyYWluc2hvd2Vyc2FuZHRodW5kZXJcIiB8XG5cdFwic2xlZXRcIiB8XG5cdFwic2xlZXRhbmR0aHVuZGVyXCIgfFxuXHRcInNsZWV0c2hvd2Vyc1wiIHxcblx0XCJzbGVldHNob3dlcnNhbmR0aHVuZGVyXCIgfFxuXHRcInNub3dcIiB8XG5cdFwic25vd2FuZHRodW5kZXJcIiB8XG5cdFwic25vd3Nob3dlcnNcIiB8XG5cdFwic25vd3Nob3dlcnNhbmR0aHVuZGVyXCI7XG4iLCJpbXBvcnQgeyBMb2cgfSBmcm9tIFwiLi9sb2dnZXJcIjtcbmltcG9ydCB7IEVycm9yRGV0YWlsIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBfIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmNvbnN0IHsgTWVzc2FnZSwgUHJveHlSZXNvbHZlckRlZmF1bHQsIFNlc3Npb25Bc3luYyB9ID0gaW1wb3J0cy5naS5Tb3VwO1xuXG5leHBvcnQgY2xhc3MgSHR0cExpYiB7XG5cdHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBIdHRwTGliID0gbnVsbDtcblx0LyoqIFNpbmdsZSBpbnN0YW5jZSBvZiBsb2cgKi9cblx0cHVibGljIHN0YXRpYyBnZXQgSW5zdGFuY2UoKSB7XG5cdFx0aWYgKHRoaXMuaW5zdGFuY2UgPT0gbnVsbClcblx0XHRcdHRoaXMuaW5zdGFuY2UgPSBuZXcgSHR0cExpYigpO1xuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlO1xuXHR9XG5cblx0LyoqIFNvdXAgc2Vzc2lvbiAoc2VlIGh0dHBzOi8vYnVnemlsbGEuZ25vbWUub3JnL3Nob3dfYnVnLmNnaT9pZD02NjEzMjMjYzY0KSAqL1xuXHRwcml2YXRlIHJlYWRvbmx5IF9odHRwU2Vzc2lvbiA9IG5ldyBTZXNzaW9uQXN5bmMoKTtcblxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuX2h0dHBTZXNzaW9uLnVzZXJfYWdlbnQgPSBcIk1vemlsbGEvNS4wIChYMTE7IFVidW50dTsgTGludXggeDg2XzY0OyBydjozNy4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzM3LjBcIjsgLy8gaXBhcGkgYmxvY2tzIG5vbi1icm93c2VycyBhZ2VudHMsIGltaXRhdGluZyBicm93c2VyXG5cdFx0dGhpcy5faHR0cFNlc3Npb24udGltZW91dCA9IDEwO1xuXHRcdHRoaXMuX2h0dHBTZXNzaW9uLmlkbGVfdGltZW91dCA9IDEwO1xuXHRcdHRoaXMuX2h0dHBTZXNzaW9uLmFkZF9mZWF0dXJlKG5ldyBQcm94eVJlc29sdmVyRGVmYXVsdCgpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIG9idGFpbmluZyBKU09OIG92ZXIgaHR0cC4gXG5cdCAqL1xuXHRwdWJsaWMgYXN5bmMgTG9hZEpzb25Bc3luYzxUPih1cmw6IHN0cmluZywgcGFyYW1zPzogSFRUUFBhcmFtcywgbWV0aG9kOiBNZXRob2QgPSBcIkdFVFwiKTogUHJvbWlzZTxSZXNwb25zZTxUPj4ge1xuXHRcdGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuTG9hZEFzeW5jKHVybCwgcGFyYW1zLCBtZXRob2QpO1xuXG5cdFx0aWYgKCFyZXNwb25zZS5TdWNjZXNzKVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlO1xuXG5cdFx0dHJ5IHtcblx0XHRcdGxldCBwYXlsb2FkID0gSlNPTi5wYXJzZShyZXNwb25zZS5EYXRhKTtcblx0XHRcdHJlc3BvbnNlLkRhdGEgPSBwYXlsb2FkO1xuXHRcdH1cblx0XHRjYXRjaCAoZSkgeyAvLyBQYXlsb2FkIGlzIG5vdCBKU09OXG5cdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJFcnJvcjogQVBJIHJlc3BvbnNlIGlzIG5vdCBKU09OLiBUaGUgcmVzcG9uc2U6IFwiICsgcmVzcG9uc2UuRGF0YSk7XG5cdFx0XHRyZXNwb25zZS5TdWNjZXNzID0gZmFsc2U7XG5cdFx0XHRyZXNwb25zZS5FcnJvckRhdGEgPSB7XG5cdFx0XHRcdGNvZGU6IC0xLFxuXHRcdFx0XHRtZXNzYWdlOiBcImJhZCBhcGkgcmVzcG9uc2UgLSBub24ganNvblwiLFxuXHRcdFx0XHRyZWFzb25fcGhyYXNlOiBudWxsLFxuXHRcdFx0fVxuXHRcdH1cblx0XHRmaW5hbGx5IHtcblx0XHRcdHJldHVybiByZXNwb25zZSBhcyBSZXNwb25zZTxUPjtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlcyBvYnRhaW5pbmcgZGF0YSBvdmVyIGh0dHAuIFxuXHQgKi9cblx0cHVibGljIGFzeW5jIExvYWRBc3luYyh1cmw6IHN0cmluZywgcGFyYW1zPzogSFRUUFBhcmFtcywgbWV0aG9kOiBNZXRob2QgPSBcIkdFVFwiKTogUHJvbWlzZTxHZW5lcmljUmVzcG9uc2U+IHtcblx0XHRsZXQgbWVzc2FnZSA9IGF3YWl0IHRoaXMuU2VuZCh1cmwsIHBhcmFtcywgbWV0aG9kKTtcblxuXHRcdGxldCBlcnJvcjogSHR0cEVycm9yID0gbnVsbDtcblxuXHRcdC8vIEVycm9yIGdlbmVyYXRpb25cblx0XHRpZiAoIW1lc3NhZ2UpIHtcblx0XHRcdGVycm9yID0ge1xuXHRcdFx0XHRjb2RlOiAwLFxuXHRcdFx0XHRtZXNzYWdlOiBcIm5vIG5ldHdvcmsgcmVzcG9uc2VcIixcblx0XHRcdFx0cmVhc29uX3BocmFzZTogXCJubyBuZXR3b3JrIHJlc3BvbnNlXCIsXG5cdFx0XHRcdHJlc3BvbnNlOiBudWxsXG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIG5ldHdvcmsgb3IgRE5TIGVycm9yXG5cdFx0ZWxzZSBpZiAobWVzc2FnZS5zdGF0dXNfY29kZSA8IDEwMCAmJiBtZXNzYWdlLnN0YXR1c19jb2RlID49IDApIHtcblx0XHRcdGVycm9yID0ge1xuXHRcdFx0XHRjb2RlOiBtZXNzYWdlLnN0YXR1c19jb2RlLFxuXHRcdFx0XHRtZXNzYWdlOiBcIm5vIG5ldHdvcmsgcmVzcG9uc2VcIixcblx0XHRcdFx0cmVhc29uX3BocmFzZTogbWVzc2FnZS5yZWFzb25fcGhyYXNlLFxuXHRcdFx0XHRyZXNwb25zZTogbWVzc2FnZVxuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmIChtZXNzYWdlLnN0YXR1c19jb2RlID4gMzAwIHx8IG1lc3NhZ2Uuc3RhdHVzX2NvZGUgPCAyMDApIHtcblx0XHRcdGVycm9yID0ge1xuXHRcdFx0XHRjb2RlOiBtZXNzYWdlLnN0YXR1c19jb2RlLFxuXHRcdFx0XHRtZXNzYWdlOiBcImJhZCBzdGF0dXMgY29kZVwiLFxuXHRcdFx0XHRyZWFzb25fcGhyYXNlOiBtZXNzYWdlLnJlYXNvbl9waHJhc2UsXG5cdFx0XHRcdHJlc3BvbnNlOiBtZXNzYWdlXG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCFtZXNzYWdlLnJlc3BvbnNlX2JvZHkpIHtcblx0XHRcdGVycm9yID0ge1xuXHRcdFx0XHRjb2RlOiBtZXNzYWdlLnN0YXR1c19jb2RlLFxuXHRcdFx0XHRtZXNzYWdlOiBcIm5vIHJlc3BvbnNlIGJvZHlcIixcblx0XHRcdFx0cmVhc29uX3BocmFzZTogbWVzc2FnZS5yZWFzb25fcGhyYXNlLFxuXHRcdFx0XHRyZXNwb25zZTogbWVzc2FnZVxuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmICghbWVzc2FnZS5yZXNwb25zZV9ib2R5LmRhdGEpIHtcblx0XHRcdGVycm9yID0ge1xuXHRcdFx0XHRjb2RlOiBtZXNzYWdlLnN0YXR1c19jb2RlLFxuXHRcdFx0XHRtZXNzYWdlOiBcIm5vIHJlc3BvbnNlIGRhdGFcIixcblx0XHRcdFx0cmVhc29uX3BocmFzZTogbWVzc2FnZS5yZWFzb25fcGhyYXNlLFxuXHRcdFx0XHRyZXNwb25zZTogbWVzc2FnZVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChtZXNzYWdlPy5zdGF0dXNfY29kZSA+IDIwMCAmJiBtZXNzYWdlPy5zdGF0dXNfY29kZSA8IDMwMCkge1xuXHRcdFx0TG9nLkluc3RhbmNlLlByaW50KFwiV3JuaW5nOiBBUEkgcmV0dXJuZWQgbm9uLU9LIHN0YXR1cyBjb2RlICdcIiArIG1lc3NhZ2U/LnN0YXR1c19jb2RlICsgXCInXCIpO1xuXHRcdH1cblxuXHRcdExvZy5JbnN0YW5jZS5EZWJ1ZzIoXCJBUEkgZnVsbCByZXNwb25zZTogXCIgKyBtZXNzYWdlPy5yZXNwb25zZV9ib2R5Py5kYXRhPy50b1N0cmluZygpKTtcblx0XHRpZiAoZXJyb3IgIT0gbnVsbClcblx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIkVycm9yIGNhbGxpbmcgVVJMOiBcIiArIGVycm9yLnJlYXNvbl9waHJhc2UgKyBcIiwgXCIgKyBlcnJvcj8ucmVzcG9uc2U/LnJlc3BvbnNlX2JvZHk/LmRhdGEpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRTdWNjZXNzOiAoZXJyb3IgPT0gbnVsbCksXG5cdFx0XHREYXRhOiBtZXNzYWdlPy5yZXNwb25zZV9ib2R5Py5kYXRhLFxuXHRcdFx0RXJyb3JEYXRhOiBlcnJvclxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTZW5kIGEgaHR0cCByZXF1ZXN0XG5cdCAqIEBwYXJhbSB1cmwgXG5cdCAqIEBwYXJhbSBwYXJhbXMgXG5cdCAqIEBwYXJhbSBtZXRob2QgXG5cdCAqL1xuXHRwdWJsaWMgYXN5bmMgU2VuZCh1cmw6IHN0cmluZywgcGFyYW1zPzogSFRUUFBhcmFtcywgbWV0aG9kOiBNZXRob2QgPSBcIkdFVFwiKTogUHJvbWlzZTxpbXBvcnRzLmdpLlNvdXAuTWVzc2FnZT4ge1xuXHRcdC8vIEFkZCBwYXJhbXMgdG8gdXJsXG5cdFx0aWYgKHBhcmFtcyAhPSBudWxsKSB7XG5cdFx0XHRsZXQgaXRlbXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpO1xuXHRcdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGl0ZW1zLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0XHRjb25zdCBpdGVtID0gaXRlbXNbaW5kZXhdO1xuXHRcdFx0XHR1cmwgKz0gKGluZGV4ID09IDApID8gXCI/XCIgOiBcIiZcIjtcblx0XHRcdFx0dXJsICs9IChpdGVtKSArIFwiPVwiICsgcGFyYW1zW2l0ZW1dXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IHF1ZXJ5ID0gZW5jb2RlVVJJKHVybCk7XG5cdFx0TG9nLkluc3RhbmNlLkRlYnVnKFwiVVJMIGNhbGxlZDogXCIgKyBxdWVyeSk7XG5cdFx0bGV0IGRhdGE6IGltcG9ydHMuZ2kuU291cC5NZXNzYWdlID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0bGV0IG1lc3NhZ2UgPSBNZXNzYWdlLm5ldyhtZXRob2QsIHF1ZXJ5KTtcblx0XHRcdHRoaXMuX2h0dHBTZXNzaW9uLnF1ZXVlX21lc3NhZ2UobWVzc2FnZSwgKHNlc3Npb24sIG1lc3NhZ2UpID0+IHtcblx0XHRcdFx0cmVzb2x2ZShtZXNzYWdlKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cbn1cblxuLy8gRGVjbGFyYXRpb25zXG5leHBvcnQgdHlwZSBNZXRob2QgPSBcIkdFVFwiIHwgXCJQT1NUXCIgfCBcIlBVVFwiIHwgXCJERUxFVEVcIjtcbmV4cG9ydCB0eXBlIE5ldHdvcmtFcnJvciA9IFwiXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2U8VD4gZXh0ZW5kcyBHZW5lcmljUmVzcG9uc2Uge1xuXHREYXRhOiBULFxufVxuXG5pbnRlcmZhY2UgR2VuZXJpY1Jlc3BvbnNlIHtcblx0U3VjY2VzczogYm9vbGVhbjtcblx0RGF0YTogYW55O1xuXHRFcnJvckRhdGE6IEh0dHBFcnJvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBIVFRQUGFyYW1zIHtcblx0W2tleTogc3RyaW5nXTogYm9vbGVhbiB8IHN0cmluZyB8IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBIdHRwRXJyb3Ige1xuXHRjb2RlOiBudW1iZXI7XG5cdG1lc3NhZ2U6IEVycm9yRGV0YWlsO1xuXHRyZWFzb25fcGhyYXNlOiBzdHJpbmc7XG5cdGRhdGE/OiBhbnk7XG5cdHJlc3BvbnNlPzogaW1wb3J0cy5naS5Tb3VwLk1lc3NhZ2Vcbn0iLCJpbXBvcnQgeyBTZXJ2aWNlcyB9IGZyb20gXCIuLi9jb25maWdcIjtcbmltcG9ydCB7IEh0dHBFcnJvciwgSFRUUFBhcmFtcyB9IGZyb20gXCIuLi9saWIvaHR0cExpYlwiO1xuaW1wb3J0IHsgV2VhdGhlckFwcGxldCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBDb25kaXRpb24sIEZvcmVjYXN0RGF0YSwgSG91cmx5Rm9yZWNhc3REYXRhLCBMb2NhdGlvbkRhdGEsIFByZWNpcGl0YXRpb25UeXBlLCBXZWF0aGVyRGF0YSwgV2VhdGhlclByb3ZpZGVyIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBDZWxzaXVzVG9LZWx2aW4sIElzTGFuZ1N1cHBvcnRlZCwgXyB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5cblxuZXhwb3J0IGNsYXNzIFZpc3VhbENyb3NzaW5nIGltcGxlbWVudHMgV2VhdGhlclByb3ZpZGVyIHtcblx0cmVhZG9ubHkgcHJldHR5TmFtZTogc3RyaW5nID0gXyhcIlZpc3VhbCBDcm9zc2luZ1wiKTtcblx0cmVhZG9ubHkgbmFtZTogU2VydmljZXMgPSBcIlZpc3VhbCBDcm9zc2luZ1wiO1xuXHRyZWFkb25seSBtYXhGb3JlY2FzdFN1cHBvcnQ6IG51bWJlciA9IDE1O1xuXHRyZWFkb25seSBtYXhIb3VybHlGb3JlY2FzdFN1cHBvcnQ6IG51bWJlciA9IDMzNjtcblx0cmVhZG9ubHkgd2Vic2l0ZTogc3RyaW5nID0gXCJodHRwczovL3dlYXRoZXIudmlzdWFsY3Jvc3NpbmcuY29tL1wiO1xuXHRyZWFkb25seSBuZWVkc0FwaUtleTogYm9vbGVhbiA9IHRydWU7XG5cblx0cHJpdmF0ZSB1cmw6IHN0cmluZyA9IFwiaHR0cHM6Ly93ZWF0aGVyLnZpc3VhbGNyb3NzaW5nLmNvbS9WaXN1YWxDcm9zc2luZ1dlYlNlcnZpY2VzL3Jlc3Qvc2VydmljZXMvdGltZWxpbmUvXCI7XG5cdHByaXZhdGUgcGFyYW1zOiBIVFRQUGFyYW1zID0ge1xuXHRcdHVuaXRHcm91cDogXCJtZXRyaWNcIixcblx0XHRrZXk6IG51bGwsXG5cdFx0aW5jbHVkZTogXCJmY3N0LGhvdXJzLGN1cnJlbnRcIixcblx0XHQvKiogUmF3IGRlc2NyaXB0b3IgSUQgKi9cblx0XHRsYW5nOiBcImlkXCJcblx0fVxuXG5cdHByaXZhdGUgc3VwcG9ydGVkTGFuZ3M6IHN0cmluZ1tdID0gW1wiZW5cIiwgXCJkZVwiLCBcImZyXCIsIFwiZXNcIl1cblxuXHRwcml2YXRlIGFwcDogV2VhdGhlckFwcGxldDtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IFdlYXRoZXJBcHBsZXQpIHtcblx0XHR0aGlzLmFwcCA9IGFwcDtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBHZXRXZWF0aGVyKGxvYzogTG9jYXRpb25EYXRhKTogUHJvbWlzZTxXZWF0aGVyRGF0YT4ge1xuXHRcdGlmIChsb2MgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cdFx0dGhpcy5wYXJhbXNbJ2tleSddID0gdGhpcy5hcHAuY29uZmlnLkFwaUtleTtcblx0XHRsZXQgdHJhbnNsYXRlID0gdHJ1ZTtcblx0XHRpZiAoSXNMYW5nU3VwcG9ydGVkKHRoaXMuYXBwLmNvbmZpZy5MYW5ndWFnZSwgdGhpcy5zdXBwb3J0ZWRMYW5ncykpIHtcblx0XHRcdHRoaXMucGFyYW1zWydsYW5nJ10gPSB0aGlzLmFwcC5jb25maWcuTGFuZ3VhZ2U7XG5cdFx0XHR0cmFuc2xhdGUgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRsZXQgdXJsID0gdGhpcy51cmwgKyBsb2MubGF0ICsgXCIsXCIgKyBsb2MubG9uO1xuXHRcdGxldCBqc29uID0gYXdhaXQgdGhpcy5hcHAuTG9hZEpzb25Bc3luYzxWaXN1YWxDcm9zc2luZ1BheWxvYWQ+KHVybCwgdGhpcy5wYXJhbXMsIChlKSA9PiB0aGlzLkhhbmRsZUh0dHBFcnJvcihlKSk7XG5cblx0XHRpZiAoIWpzb24pIHJldHVybiBudWxsO1xuXHRcdHJldHVybiB0aGlzLlBhcnNlV2VhdGhlcihqc29uLCB0cmFuc2xhdGUpO1xuXHR9XG5cblx0cHJpdmF0ZSBQYXJzZVdlYXRoZXIod2VhdGhlcjogVmlzdWFsQ3Jvc3NpbmdQYXlsb2FkLCB0cmFuc2xhdGU6IGJvb2xlYW4pOiBXZWF0aGVyRGF0YSB7XG5cdFx0bGV0IGN1cnJlbnRIb3VyID0gdGhpcy5HZXRDdXJyZW50SG91cih3ZWF0aGVyLmRheXMpO1xuXHRcdGxldCByZXN1bHQ6IFdlYXRoZXJEYXRhID0ge1xuXHRcdFx0ZGF0ZTogbmV3IERhdGUod2VhdGhlci5jdXJyZW50Q29uZGl0aW9ucy5kYXRldGltZUVwb2NoICogMTAwMCksXG5cdFx0XHRsb2NhdGlvbjoge1xuXHRcdFx0XHR1cmw6IGVuY29kZVVSSShcImh0dHBzOi8vd3d3LnZpc3VhbGNyb3NzaW5nLmNvbS93ZWF0aGVyLWhpc3RvcnkvXCIgKyB3ZWF0aGVyLmxhdGl0dWRlICsgXCIsXCIgKyB3ZWF0aGVyLmxvbmdpdHVkZSArIFwiL1wiKSxcblx0XHRcdFx0dGltZVpvbmU6IHdlYXRoZXIudGltZXpvbmUsXG5cdFx0XHRcdHR6T2Zmc2V0OiB3ZWF0aGVyLnR6b2Zmc2V0LFxuXHRcdFx0fSxcblx0XHRcdGNvb3JkOiB7XG5cdFx0XHRcdGxhdDogd2VhdGhlci5sYXRpdHVkZSxcblx0XHRcdFx0bG9uOiB3ZWF0aGVyLmxvbmdpdHVkZSxcblx0XHRcdH0sXG5cdFx0XHRodW1pZGl0eTogd2VhdGhlci5jdXJyZW50Q29uZGl0aW9ucy5odW1pZGl0eSA/PyBjdXJyZW50SG91ci5odW1pZGl0eSxcblx0XHRcdHByZXNzdXJlOiB3ZWF0aGVyLmN1cnJlbnRDb25kaXRpb25zLnByZXNzdXJlID8/IGN1cnJlbnRIb3VyLnByZXNzdXJlLFxuXHRcdFx0d2luZDoge1xuXHRcdFx0XHRkZWdyZWU6IHdlYXRoZXIuY3VycmVudENvbmRpdGlvbnMud2luZGRpciA/PyBjdXJyZW50SG91ci53aW5kZGlyLFxuXHRcdFx0XHRzcGVlZDogd2VhdGhlci5jdXJyZW50Q29uZGl0aW9ucy53aW5kc3BlZWQgPz8gY3VycmVudEhvdXIud2luZHNwZWVkLFxuXHRcdFx0fSxcblx0XHRcdHRlbXBlcmF0dXJlOiBDZWxzaXVzVG9LZWx2aW4od2VhdGhlci5jdXJyZW50Q29uZGl0aW9ucy50ZW1wID8/IGN1cnJlbnRIb3VyLnRlbXApLFxuXHRcdFx0c3VucmlzZTogbmV3IERhdGUod2VhdGhlci5jdXJyZW50Q29uZGl0aW9ucy5zdW5yaXNlRXBvY2ggKiAxMDAwKSxcblx0XHRcdHN1bnNldDogbmV3IERhdGUod2VhdGhlci5jdXJyZW50Q29uZGl0aW9ucy5zdW5zZXRFcG9jaCAqIDEwMDApLFxuXHRcdFx0Y29uZGl0aW9uOiB0aGlzLkdlbmVyYXRlQ29uZGl0aW9uKHdlYXRoZXIuY3VycmVudENvbmRpdGlvbnMuaWNvbiwgd2VhdGhlci5jdXJyZW50Q29uZGl0aW9ucy5jb25kaXRpb25zLCB0cmFuc2xhdGUpLFxuXHRcdFx0ZXh0cmFfZmllbGQ6IHtcblx0XHRcdFx0bmFtZTogXyhcIkZlZWxzIExpa2VcIiksXG5cdFx0XHRcdHR5cGU6IFwidGVtcGVyYXR1cmVcIixcblx0XHRcdFx0Ly8gdXNlIGN1cnJlbnQgaG91ciBpbnN0ZWFkLCBvYnNlcnZhdGlvbnMgZmVlbHMgbGlrZSBkb2Vzbid0IHNlZW0gdG8gZGlmZmVyIGF0IGFsbFxuXHRcdFx0XHR2YWx1ZTogQ2Vsc2l1c1RvS2VsdmluKGN1cnJlbnRIb3VyLmZlZWxzbGlrZSA/PyB3ZWF0aGVyLmN1cnJlbnRDb25kaXRpb25zLmZlZWxzbGlrZSlcblx0XHRcdH0sXG5cdFx0XHRmb3JlY2FzdHM6IHRoaXMuUGFyc2VGb3JlY2FzdHMod2VhdGhlci5kYXlzLCB0cmFuc2xhdGUpLFxuXHRcdFx0aG91cmx5Rm9yZWNhc3RzOiB0aGlzLlBhcnNlSG91cmx5Rm9yZWNhc3RzKHdlYXRoZXIuZGF5cywgdHJhbnNsYXRlKVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRwcml2YXRlIFBhcnNlRm9yZWNhc3RzKGZvcmVjYXN0czogRGF5Rm9yZWNhc3RbXSwgdHJhbnNsYXRlOiBib29sZWFuKTogRm9yZWNhc3REYXRhW10ge1xuXHRcdGxldCByZXN1bHQ6IEZvcmVjYXN0RGF0YVtdID0gW107XG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGZvcmVjYXN0cy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdGNvbnN0IGVsZW1lbnQgPSBmb3JlY2FzdHNbaW5kZXhdO1xuXHRcdFx0cmVzdWx0LnB1c2goe1xuXHRcdFx0XHRkYXRlOiBuZXcgRGF0ZShlbGVtZW50LmRhdGV0aW1lRXBvY2ggKiAxMDAwKSxcblx0XHRcdFx0Y29uZGl0aW9uOiB0aGlzLkdlbmVyYXRlQ29uZGl0aW9uKGVsZW1lbnQuaWNvbiwgZWxlbWVudC5jb25kaXRpb25zLCB0cmFuc2xhdGUpLFxuXHRcdFx0XHR0ZW1wX21heDogQ2Vsc2l1c1RvS2VsdmluKGVsZW1lbnQudGVtcG1heCksXG5cdFx0XHRcdHRlbXBfbWluOiBDZWxzaXVzVG9LZWx2aW4oZWxlbWVudC50ZW1wbWluKVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHByaXZhdGUgUGFyc2VIb3VybHlGb3JlY2FzdHMoZm9yZWNhc3RzOiBEYXlGb3JlY2FzdFtdLCB0cmFuc2xhdGU6IGJvb2xlYW4pOiBIb3VybHlGb3JlY2FzdERhdGFbXSB7XG5cdFx0bGV0IGN1cnJlbnRIb3VyID0gbmV3IERhdGUoKTtcblx0XHRjdXJyZW50SG91ci5zZXRNaW51dGVzKDAsIDAsIDApO1xuXG5cdFx0bGV0IHJlc3VsdDogSG91cmx5Rm9yZWNhc3REYXRhW10gPSBbXTtcblx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZm9yZWNhc3RzLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGZvcmVjYXN0c1tpbmRleF07XG5cdFx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZWxlbWVudC5ob3Vycy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdFx0Y29uc3QgaG91ciA9IGVsZW1lbnQuaG91cnNbaW5kZXhdO1xuXHRcdFx0XHRsZXQgdGltZSA9IG5ldyBEYXRlKGhvdXIuZGF0ZXRpbWVFcG9jaCAqIDEwMDApO1xuXHRcdFx0XHRpZiAodGltZSA8IGN1cnJlbnRIb3VyKSBjb250aW51ZTtcblx0XHRcdFx0bGV0IGl0ZW06IEhvdXJseUZvcmVjYXN0RGF0YSA9IHtcblx0XHRcdFx0XHRkYXRlOiB0aW1lLFxuXHRcdFx0XHRcdHRlbXA6IENlbHNpdXNUb0tlbHZpbihob3VyLnRlbXApLFxuXHRcdFx0XHRcdGNvbmRpdGlvbjogdGhpcy5HZW5lcmF0ZUNvbmRpdGlvbihob3VyLmljb24sIGhvdXIuY29uZGl0aW9ucywgdHJhbnNsYXRlKVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGhvdXIucHJlY2lwdHlwZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aXRlbS5wcmVjaXBpdGF0aW9uID0ge1xuXHRcdFx0XHRcdFx0dHlwZTogaG91ci5wcmVjaXB0eXBlWzBdLFxuXHRcdFx0XHRcdFx0Y2hhbmNlOiBob3VyLnByZWNpcHByb2IsXG5cdFx0XHRcdFx0XHR2b2x1bWU6IGhvdXIucHJlY2lwXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyppZiAoaXRlbS5wcmVjaXBpdGF0aW9uLnR5cGUgPT0gXCJzbm93XCIpXG5cdFx0XHRcdFx0aXRlbS5wcmVjaXBpdGF0aW9uLnZvbHVtZSA9IGhvdXIuc25vdzsqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRwcml2YXRlIEdldEN1cnJlbnRIb3VyKGZvcmVjYXN0czogRGF5Rm9yZWNhc3RbXSk6IEhvdXJGb3JlY2FzdCB7XG5cdFx0aWYgKGZvcmVjYXN0cz8ubGVuZ3RoIDwgMSlcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0bGV0IGN1cnJlbnRIb3VyID0gbmV3IERhdGUoKTtcblx0XHRjdXJyZW50SG91ci5zZXRNaW51dGVzKDAsIDAsIDApO1xuXG5cdFx0Y29uc3QgZWxlbWVudCA9IGZvcmVjYXN0c1swXTtcblx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZWxlbWVudC5ob3Vycy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdGNvbnN0IGhvdXIgPSBlbGVtZW50LmhvdXJzW2luZGV4XTtcblx0XHRcdGxldCB0aW1lID0gbmV3IERhdGUoaG91ci5kYXRldGltZUVwb2NoICogMTAwMCk7XG5cdFx0XHRpZiAodGltZSA8IGN1cnJlbnRIb3VyKSBjb250aW51ZTtcblx0XHRcdHJldHVybiBob3VyO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHByaXZhdGUgR2VuZXJhdGVDb25kaXRpb24oaWNvbjogc3RyaW5nLCBjb25kaXRpb246IHN0cmluZywgdHJhbnNsYXRlOiBib29sZWFuKTogQ29uZGl0aW9uIHtcblx0XHRsZXQgcmVzdWx0OiBDb25kaXRpb24gPSB7XG5cdFx0XHRtYWluOiAodHJhbnNsYXRlKSA/IHRoaXMuUmVzb2x2ZVR5cGVJRCh0aGlzLkdldEZpcnN0Q29uZGl0aW9uKGNvbmRpdGlvbikpIDogdGhpcy5HZXRGaXJzdENvbmRpdGlvbihjb25kaXRpb24pLFxuXHRcdFx0ZGVzY3JpcHRpb246ICh0cmFuc2xhdGUpID8gdGhpcy5SZXNvbHZlVHlwZUlEcyhjb25kaXRpb24pIDogY29uZGl0aW9uLFxuXHRcdFx0aWNvbnM6IFtdLFxuXHRcdFx0Y3VzdG9tSWNvbjogXCJyZWZyZXNoLXN5bWJvbGljXCJcblx0XHR9O1xuXG5cdFx0c3dpdGNoIChpY29uKSB7XG5cdFx0XHRjYXNlIFwiY2xlYXItZGF5XCI6XG5cdFx0XHRcdHJlc3VsdC5pY29ucyA9IFtcIndlYXRoZXItY2xlYXJcIl07XG5cdFx0XHRcdHJlc3VsdC5jdXN0b21JY29uID0gXCJkYXktc3Vubnktc3ltYm9saWNcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiY2xlYXItbmlnaHRcIjpcblx0XHRcdFx0cmVzdWx0Lmljb25zID0gW1wid2VhdGhlci1jbGVhci1uaWdodFwiXTtcblx0XHRcdFx0cmVzdWx0LmN1c3RvbUljb24gPSBcIm5pZ2h0LWNsZWFyLXN5bWJvbGljXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInBhcnRseS1jbG91ZHktZGF5XCI6XG5cdFx0XHRcdHJlc3VsdC5pY29ucyA9IFtcIndlYXRoZXItZmV3LWNsb3Vkc1wiXTtcblx0XHRcdFx0cmVzdWx0LmN1c3RvbUljb24gPSBcImRheS1jbG91ZHktc3ltYm9saWNcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwicGFydGx5LWNsb3VkeS1uaWdodFwiOlxuXHRcdFx0XHRyZXN1bHQuaWNvbnMgPSBbXCJ3ZWF0aGVyLWZldy1jbG91ZHMtbmlnaHRcIl07XG5cdFx0XHRcdHJlc3VsdC5jdXN0b21JY29uID0gXCJuaWdodC1hbHQtY2xvdWR5LXN5bWJvbGljXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImNsb3VkeVwiOlxuXHRcdFx0XHRyZXN1bHQuaWNvbnMgPSBbXCJ3ZWF0aGVyLW92ZXJjYXN0XCIsIFwid2VhdGhlci1jbG91ZHNcIiwgXCJ3ZWF0aGVyLW1hbnktY2xvdWRzXCJdO1xuXHRcdFx0XHRyZXN1bHQuY3VzdG9tSWNvbiA9IFwiY2xvdWR5LXN5bWJvbGljXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcIndpbmRcIjpcblx0XHRcdFx0cmVzdWx0Lmljb25zID0gW1wid2VhdGhlci13aW5keVwiLCBcIndlYXRoZXItYnJlZXplXCJdO1xuXHRcdFx0XHRyZXN1bHQuY3VzdG9tSWNvbiA9IFwid2luZHktc3ltYm9saWNcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiZm9nXCI6XG5cdFx0XHRcdHJlc3VsdC5pY29ucyA9IFtcIndlYXRoZXItZm9nXCJdO1xuXHRcdFx0XHRyZXN1bHQuY3VzdG9tSWNvbiA9IFwiZm9nLXN5bWJvbGljXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInJhaW5cIjpcblx0XHRcdFx0cmVzdWx0Lmljb25zID0gW1wid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zbm93LXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIl07XG5cdFx0XHRcdHJlc3VsdC5jdXN0b21JY29uID0gXCJyYWluLXN5bWJvbGljXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInNub3dcIjpcblx0XHRcdFx0cmVzdWx0Lmljb25zID0gW1wid2VhdGhlci1zbm93XCJdO1xuXHRcdFx0XHRyZXN1bHQuY3VzdG9tSWNvbiA9IFwic25vdy1zeW1ib2xpY1wiO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0cHJpdmF0ZSBHZXRGaXJzdENvbmRpdGlvbihjb25kaXRpb246IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0bGV0IHNwbGl0ID0gY29uZGl0aW9uLnNwbGl0KFwiLCBcIik7XG5cdFx0cmV0dXJuIHNwbGl0WzBdO1xuXHR9XG5cblx0cHJpdmF0ZSBSZXNvbHZlVHlwZUlEKGNvbmRpdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRzd2l0Y2ggKGNvbmRpdGlvbi50b0xvd2VyQ2FzZSgpKSB7XG5cdFx0XHRjYXNlIFwidHlwZV8xXCI6XG5cdFx0XHRcdHJldHVybiBfKFwiQmxvd2luZyBvciBkcmlmdGluZyBzbm93XCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfMlwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIkRyaXp6bGVcIik7XG5cdFx0XHRjYXNlIFwidHlwZV8zXCI6XG5cdFx0XHRcdHJldHVybiBfKFwiSGVhdnkgZHJpenpsZVwiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzRcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJMaWdodCBkcml6emxlXCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfNVwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIkhlYXZ5IGRyaXp6bGUvcmFpblwiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzZcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJMaWdodCBkcml6emxlL3JhaW5cIik7XG5cdFx0XHRjYXNlIFwidHlwZV83XCI6XG5cdFx0XHRcdHJldHVybiBfKFwiRHVzdHN0b3JtXCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfOFwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIkZvZ1wiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzlcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJGcmVlemluZyBkcml6emxlL2ZyZWV6aW5nIHJhaW5cIik7XG5cdFx0XHRjYXNlIFwidHlwZV8xMFwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIkhlYXZ5IGZyZWV6aW5nIGRyaXp6bGUvZnJlZXppbmcgcmFpblwiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzExXCI6XG5cdFx0XHRcdHJldHVybiBfKFwiTGlnaHQgZnJlZXppbmcgZHJpenpsZS9mcmVlemluZyByYWluXCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfMTJcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJGcmVlemluZyBmb2dcIik7XG5cdFx0XHRjYXNlIFwidHlwZV8xM1wiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIkhlYXZ5IGZyZWV6aW5nIHJhaW5cIik7XG5cdFx0XHRjYXNlIFwidHlwZV8xNFwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIkxpZ2h0IGZyZWV6aW5nIHJhaW5cIik7XG5cdFx0XHRjYXNlIFwidHlwZV8xNVwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIkZ1bm5lbCBjbG91ZC90b3JuYWRvXCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfMTZcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJIYWlsIHNob3dlcnNcIik7XG5cdFx0XHRjYXNlIFwidHlwZV8xN1wiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIkljZVwiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzE4XCI6XG5cdFx0XHRcdHJldHVybiBfKFwiTGlnaHRuaW5nIHdpdGhvdXQgdGh1bmRlclwiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzE5XCI6XG5cdFx0XHRcdHJldHVybiBfKFwiTWlzdFwiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzIwXCI6XG5cdFx0XHRcdHJldHVybiBfKFwiUHJlY2lwaXRhdGlvbiBpbiB2aWNpbml0eVwiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzIxXCI6XG5cdFx0XHRcdHJldHVybiBfKFwiUmFpblwiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzIyXCI6XG5cdFx0XHRcdHJldHVybiBfKFwiSGVhdnkgcmFpbiBhbmQgc25vd1wiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzIzXCI6XG5cdFx0XHRcdHJldHVybiBfKFwiTGlnaHQgcmFpbiBBbmQgc25vd1wiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzI0XCI6XG5cdFx0XHRcdHJldHVybiBfKFwiUmFpbiBzaG93ZXJzXCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfMjVcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJIZWF2eSByYWluXCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfMjZcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJMaWdodCByYWluXCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfMjdcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJTa3kgY292ZXJhZ2UgZGVjcmVhc2luZ1wiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzI4XCI6XG5cdFx0XHRcdHJldHVybiBfKFwiU2t5IGNvdmVyYWdlIGluY3JlYXNpbmdcIik7XG5cdFx0XHRjYXNlIFwidHlwZV8yOVwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIlNreSB1bmNoYW5nZWRcIik7XG5cdFx0XHRjYXNlIFwidHlwZV8zMFwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIlNtb2tlIG9yIGhhemVcIik7XG5cdFx0XHRjYXNlIFwidHlwZV8zMVwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIlNub3dcIik7XG5cdFx0XHRjYXNlIFwidHlwZV8zMlwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIlNub3cgYW5kIHJhaW4gc2hvd2Vyc1wiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzMzXCI6XG5cdFx0XHRcdHJldHVybiBfKFwiU25vdyBzaG93ZXJzXCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfMzRcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJIZWF2eSBzbm93XCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfMzVcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJMaWdodCBzbm93XCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfMzZcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJTcXVhbGxzXCIpO1xuXHRcdFx0Y2FzZSBcInR5cGVfMzdcIjpcblx0XHRcdFx0cmV0dXJuIF8oXCJUaHVuZGVyc3Rvcm1cIik7XG5cdFx0XHRjYXNlIFwidHlwZV8zOFwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIlRodW5kZXJzdG9ybSB3aXRob3V0IHByZWNpcGl0YXRpb25cIik7XG5cdFx0XHRjYXNlIFwidHlwZV8zOVwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIkRpYW1vbmQgZHVzdFwiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzQwXCI6XG5cdFx0XHRcdHJldHVybiBfKFwiSGFpbFwiKTtcblx0XHRcdGNhc2UgXCJ0eXBlXzQxXCI6XG5cdFx0XHRcdHJldHVybiBfKFwiT3ZlcmNhc3RcIik7XG5cdFx0XHRjYXNlIFwidHlwZV80MlwiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIlBhcnRpYWxseSBjbG91ZHlcIik7XG5cdFx0XHRjYXNlIFwidHlwZV80M1wiOlxuXHRcdFx0XHRyZXR1cm4gXyhcIkNsZWFyXCIpO1xuXHRcdH1cblx0XHRyZXR1cm4gY29uZGl0aW9uO1xuXHR9XG5cblx0cHJpdmF0ZSBSZXNvbHZlVHlwZUlEcyhjb25kaXRpb246IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0bGV0IHJlc3VsdCA9IFwiXCI7XG5cdFx0bGV0IHNwbGl0ID0gY29uZGl0aW9uLnNwbGl0KFwiLCBcIik7XG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHNwbGl0Lmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IHNwbGl0W2luZGV4XTtcblx0XHRcdHJlc3VsdCArPSB0aGlzLlJlc29sdmVUeXBlSUQoZWxlbWVudCk7XG5cdFx0XHQvLyBub3QgdGhlIGxhc3Rcblx0XHRcdGlmIChpbmRleCA8IHNwbGl0Lmxlbmd0aCAtIDEpXG5cdFx0XHRcdHJlc3VsdCArPSBcIiwgXCI7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRwcml2YXRlIEhhbmRsZUh0dHBFcnJvcihlcnJvcjogSHR0cEVycm9yKTogYm9vbGVhbiB7XG5cdFx0aWYgKGVycm9yPy5jb2RlID09IDQwMSkge1xuXHRcdFx0dGhpcy5hcHAuU2hvd0Vycm9yKHtcblx0XHRcdFx0dHlwZTogXCJoYXJkXCIsXG5cdFx0XHRcdHVzZXJFcnJvcjogdHJ1ZSxcblx0XHRcdFx0ZGV0YWlsOiBcImJhZCBrZXlcIixcblx0XHRcdFx0bWVzc2FnZTogXyhcIlBsZWFzZSBtYWtlIHN1cmUgeW91IGVudGVyZWQgdGhlIEFQSSBrZXkgY29ycmVjdGx5XCIpXG5cdFx0XHR9KVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59XG5cbmludGVyZmFjZSBWaXN1YWxDcm9zc2luZ1BheWxvYWQge1xuXHRxdWVyeUNvc3Q6IG51bWJlcjtcblx0cmVtYWluaW5nQ29zdDogbnVtYmVyO1xuXHRyZW1haW5pbmdDcmVkaXRzOiBudW1iZXI7XG5cdGxhdGl0dWRlOiBudW1iZXI7XG5cdGxvbmdpdHVkZTogbnVtYmVyO1xuXHRyZXNvbHZlZEFkZHJlc3M6IHN0cmluZztcblx0YWRkcmVzczogc3RyaW5nO1xuXHR0aW1lem9uZTogc3RyaW5nO1xuXHR0em9mZnNldDogbnVtYmVyO1xuXHRkYXlzPzogRGF5Rm9yZWNhc3RbXTtcblx0YWxlcnRzPzogYW55O1xuXHRjdXJyZW50Q29uZGl0aW9uczogQ3VycmVudE9ic2VydmF0aW9uO1xuXHRzdGF0aW9uczoge1xuXHRcdFtrZXk6IHN0cmluZ106IFN0YXRpb25cblx0fTtcbn1cblxuaW50ZXJmYWNlIFN0YXRpb24ge1xuXHRkaXN0YW5jZTogbnVtYmVyO1xuXHRsYXRpdHVkZTogbnVtYmVyO1xuXHRsb25naXR1ZGU6IG51bWJlcjtcblx0dXNlQ291bnQ6IG51bWJlcjtcblx0aWQ6IHN0cmluZztcblx0bmFtZTogc3RyaW5nO1xuXHRjb250cmlidXRpb246IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIEN1cnJlbnRPYnNlcnZhdGlvbiB7XG5cdGRhdGV0aW1lOiBzdHJpbmc7XG5cdGRhdGV0aW1lRXBvY2g6IG51bWJlcjtcblx0LyoqIEMgKi9cblx0dGVtcDogbnVtYmVyO1xuXHQvKiogQyAqL1xuXHRmZWVsc2xpa2U6IG51bWJlcjtcblx0LyoqIEMgKi9cblx0ZGV3OiBudW1iZXI7XG5cdC8qKiBQZXJjZW50ICovXG5cdGh1bWlkaXR5OiBudW1iZXI7XG5cdHByZWNpcDogbnVtYmVyO1xuXHRwcmVjaXB0eXBlPzogUHJlY2lwaXRhdGlvblR5cGVbXTtcblx0c25vdz86IG51bWJlcjtcblx0c25vd2RlcHRoPzogbnVtYmVyO1xuXHR3aW5kZ3VzdDogbnVtYmVyO1xuXHR3aW5kc3BlZWQ6IG51bWJlcjtcblx0LyoqIGRlZ3JlZSAqL1xuXHR3aW5kZGlyOiBudW1iZXI7XG5cdC8qKiBoUGEgKi9cblx0cHJlc3N1cmU6IG51bWJlcjtcblx0LyoqICUgKi9cblx0Y2xvdWRjb3ZlcjogbnVtYmVyO1xuXHR2aXNpYmlsaXR5OiBudW1iZXI7XG5cdHNvbGFycmFkaWF0aW9uOiBudW1iZXI7XG5cdHNvbGFyZW5lcmd5OiBudW1iZXI7XG5cdHN1bnJpc2U6IHN0cmluZztcblx0c3VucmlzZUVwb2NoOiBudW1iZXI7XG5cdHN1bnNldDogc3RyaW5nO1xuXHRzdW5zZXRFcG9jaDogbnVtYmVyO1xuXHQvKiogcmFuZ2luZyBmcm9tIDAgKHRoZSBuZXcgbW9vbikgdG8gMC41ICh0aGUgZnVsbCBtb29uKSBhbmQgYmFjayB0byAxICh0aGUgbmV4dCBuZXcgbW9vbikgKi9cblx0bW9vbnBoYXNlOiBudW1iZXI7XG5cdGNvbmRpdGlvbnM6IHN0cmluZztcblx0aWNvbjogc3RyaW5nO1xuXHRzdGF0aW9uczogbnVsbDtcblx0c291cmNlOiBTb3VyY2U7XG59XG5cbmludGVyZmFjZSBEYXlGb3JlY2FzdCB7XG5cdGRhdGV0aW1lOiBzdHJpbmc7XG5cdGRhdGV0aW1lRXBvY2g6IG51bWJlcjtcblx0LyoqIEMgKi9cblx0dGVtcG1heDogbnVtYmVyO1xuXHQvKiogQyAqL1xuXHR0ZW1wbWluOiBudW1iZXI7XG5cdC8qKiBDICovXG5cdHRlbXA6IG51bWJlcjtcblx0LyoqIEMgKi9cblx0ZmVlbHNsaWtlbWF4OiBudW1iZXI7XG5cdC8qKiBDICovXG5cdGZlZWxzbGlrZW1pbjogbnVtYmVyO1xuXHQvKiogQyAqL1xuXHRmZWVsc2xpa2U6IG51bWJlcjtcblx0ZGV3OiBudW1iZXI7XG5cdC8qKiBQZXJjZW50ICovXG5cdGh1bWlkaXR5OiBudW1iZXI7XG5cdHByZWNpcDogbnVtYmVyO1xuXHRwcmVjaXBwcm9iOiBudW1iZXI7XG5cdHByZWNpcGNvdmVyPzogbnVtYmVyO1xuXHRwcmVjaXB0eXBlPzogUHJlY2lwaXRhdGlvblR5cGVbXTtcblx0c25vdz86IG51bWJlcjtcblx0c25vd2RlcHRoPzogbnVtYmVyO1xuXHRyYWluPzogbnVtYmVyO1xuXHR3aW5kZ3VzdDogbnVtYmVyO1xuXHR3aW5kc3BlZWQ6IG51bWJlcjtcblx0LyoqIGRlZ3JlZSAqL1xuXHR3aW5kZGlyOiBudW1iZXI7XG5cdC8qKiBoUGEgKi9cblx0cHJlc3N1cmU6IG51bWJlcjtcblx0LyoqICUgKi9cblx0Y2xvdWRjb3ZlcjogbnVtYmVyO1xuXHR2aXNpYmlsaXR5OiBudW1iZXI7XG5cdHNvbGFycmFkaWF0aW9uOiBudW1iZXI7XG5cdHNvbGFyZW5lcmd5OiBudW1iZXI7XG5cdHN1bnJpc2U6IHN0cmluZztcblx0c3VucmlzZUVwb2NoOiBudW1iZXI7XG5cdHN1bnNldDogc3RyaW5nO1xuXHRzdW5zZXRFcG9jaDogbnVtYmVyO1xuXHRtb29ucGhhc2U6IG51bWJlcjtcblx0Y29uZGl0aW9uczogc3RyaW5nO1xuXHRpY29uOiBzdHJpbmc7XG5cdHN0YXRpb25zOiBudWxsO1xuXHRzb3VyY2U6IFNvdXJjZTtcblx0aG91cnM/OiBIb3VyRm9yZWNhc3RbXTtcbn1cblxuaW50ZXJmYWNlIEhvdXJGb3JlY2FzdCB7XG5cdGRhdGV0aW1lOiBzdHJpbmc7XG5cdGRhdGV0aW1lRXBvY2g6IG51bWJlcjtcblx0LyoqIEMgKi9cblx0dGVtcDogbnVtYmVyO1xuXHQvKiogQyAqL1xuXHRmZWVsc2xpa2U6IG51bWJlcjtcblx0ZGV3OiBudW1iZXI7XG5cdC8qKiBQZXJjZW50ICovXG5cdGh1bWlkaXR5OiBudW1iZXI7XG5cdHByZWNpcDogbnVtYmVyO1xuXHRwcmVjaXBwcm9iOiBudW1iZXI7XG5cdHByZWNpcHR5cGU/OiBQcmVjaXBpdGF0aW9uVHlwZVtdO1xuXHRzbm93OiBudW1iZXI7XG5cdHNub3dkZXB0aDogbnVtYmVyO1xuXHR3aW5kZ3VzdDogbnVtYmVyO1xuXHR3aW5kc3BlZWQ6IG51bWJlcjtcblx0LyoqIGRlZ3JlZSAqL1xuXHR3aW5kZGlyOiBudW1iZXI7XG5cdC8qKiBoUGEgKi9cblx0cHJlc3N1cmU6IG51bWJlcjtcblx0LyoqICUgKi9cblx0Y2xvdWRjb3ZlcjogbnVtYmVyO1xuXHR2aXNpYmlsaXR5OiBudW1iZXI7XG5cdHNvbGFycmFkaWF0aW9uOiBudW1iZXI7XG5cdHNvbGFyZW5lcmd5OiBudW1iZXI7XG5cdGNvbmRpdGlvbnM6IHN0cmluZztcblx0aWNvbjogc3RyaW5nO1xuXHRzdGF0aW9uczogbnVsbDtcblx0c291cmNlOiBTb3VyY2U7XG5cdG1vb25waGFzZTogbnVtYmVyO1xufVxuXG50eXBlIFNvdXJjZSA9IFwiZmNzdFwiIHwgXCJcIjsiLCJpbXBvcnQgeyBTZXJ2aWNlcyB9IGZyb20gXCIuLi9jb25maWdcIjtcbmltcG9ydCB7IEh0dHBFcnJvciwgSFRUUFBhcmFtcyB9IGZyb20gXCIuLi9saWIvaHR0cExpYlwiO1xuaW1wb3J0IHsgV2VhdGhlckFwcGxldCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBDb25kaXRpb24sIEZvcmVjYXN0RGF0YSwgSG91cmx5Rm9yZWNhc3REYXRhLCBMb2NhdGlvbkRhdGEsIFByZWNpcGl0YXRpb25UeXBlLCBXZWF0aGVyRGF0YSwgV2VhdGhlclByb3ZpZGVyIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBDZWxzaXVzVG9LZWx2aW4sIF8gfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuXG5leHBvcnQgY2xhc3MgQ2xpbWFjZWxsVjQgaW1wbGVtZW50cyBXZWF0aGVyUHJvdmlkZXIge1xuXHRuZWVkc0FwaUtleTogYm9vbGVhbiA9IHRydWU7XG5cdHByZXR0eU5hbWU6IHN0cmluZyA9IF8oXCJDbGltYWNlbGxcIik7XG5cdG5hbWU6IFNlcnZpY2VzID0gXCJDbGltYWNlbGxWNFwiO1xuXHRtYXhGb3JlY2FzdFN1cHBvcnQ6IG51bWJlciA9IDE1O1xuXHRtYXhIb3VybHlGb3JlY2FzdFN1cHBvcnQ6IG51bWJlciA9IDEwODtcblx0d2Vic2l0ZTogc3RyaW5nID0gXCJodHRwczovL3d3dy5jbGltYWNlbGwuY28vXCI7XG5cblx0cHJpdmF0ZSBhcHA6IFdlYXRoZXJBcHBsZXQ7XG5cblx0cHJpdmF0ZSB1cmwgPSBcImh0dHBzOi8vZGF0YS5jbGltYWNlbGwuY28vdjQvdGltZWxpbmVzXCI7XG5cblx0cHJpdmF0ZSBwYXJhbXM6IEhUVFBQYXJhbXMgPSB7XG5cdFx0YXBpa2V5OiBudWxsLFxuXHRcdGxvY2F0aW9uOiBudWxsLFxuXHRcdHRpbWVzdGVwczogXCJjdXJyZW50LDFoLDFkXCIsXG5cdFx0dW5pdHM6IFwibWV0cmljXCIsXG5cdFx0ZmllbGRzOiBcInRlbXBlcmF0dXJlLHRlbXBlcmF0dXJlTWF4LHRlbXBlcmF0dXJlTWluLHByZXNzdXJlU3VyZmFjZUxldmVsLHdlYXRoZXJDb2RlLHN1bnNldFRpbWUsc3VucmlzZVRpbWUscHJlY2lwaXRhdGlvblR5cGUscHJlY2lwaXRhdGlvblByb2JhYmlsaXR5LHByZWNpcGl0YXRpb25JbnRlbnNpdHksd2luZERpcmVjdGlvbix3aW5kU3BlZWQsaHVtaWRpdHksdGVtcGVyYXR1cmVBcHBhcmVudFwiXG5cdH1cblxuXHRjb25zdHJ1Y3RvcihhcHA6IFdlYXRoZXJBcHBsZXQpIHtcblx0XHR0aGlzLmFwcCA9IGFwcDtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBHZXRXZWF0aGVyKGxvYzogTG9jYXRpb25EYXRhKTogUHJvbWlzZTxXZWF0aGVyRGF0YT4ge1xuXHRcdGlmIChsb2MgPT0gbnVsbClcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0dGhpcy5wYXJhbXMuYXBpa2V5ID0gdGhpcy5hcHAuY29uZmlnLkFwaUtleTtcblx0XHR0aGlzLnBhcmFtcy5sb2NhdGlvbiA9IGxvYy5sYXQgKyBcIixcIiArIGxvYy5sb247XG5cblx0XHRsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwcC5Mb2FkSnNvbkFzeW5jPENsaW1hY2VsbFY0UGF5bG9hZD4odGhpcy51cmwsIHRoaXMucGFyYW1zLCAobSkgPT4gdGhpcy5IYW5kbGVIVFRQRXJyb3IobSkpO1xuXG5cdFx0aWYgKHJlc3BvbnNlID09IG51bGwpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiB0aGlzLlBhcnNlV2VhdGhlcihsb2MsIHJlc3BvbnNlKTtcblx0fVxuXG5cdHByaXZhdGUgSGFuZGxlSFRUUEVycm9yKG1lc3NhZ2U6IEh0dHBFcnJvcik6IGJvb2xlYW4ge1xuXHRcdGlmIChtZXNzYWdlLmNvZGUgPT0gNDAxKSB7XG5cdFx0XHR0aGlzLmFwcC5TaG93RXJyb3Ioe1xuXHRcdFx0XHR0eXBlOiBcImhhcmRcIixcblx0XHRcdFx0dXNlckVycm9yOiB0cnVlLFxuXHRcdFx0XHRkZXRhaWw6IFwibm8ga2V5XCIsXG5cdFx0XHRcdHNlcnZpY2U6IFwiY2xpbWFjZWxsXCIsXG5cdFx0XHRcdG1lc3NhZ2U6IF8oXCJQbGVhc2UgTWFrZSBzdXJlIHlvdVxcbmVudGVyZWQgdGhlIEFQSSBrZXkgdGhhdCB5b3UgaGF2ZSBmcm9tIENsaW1hY2VsbFwiKVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cHJpdmF0ZSBQYXJzZVdlYXRoZXIobG9jOiBMb2NhdGlvbkRhdGEsIGRhdGE6IENsaW1hY2VsbFY0UGF5bG9hZCk6IFdlYXRoZXJEYXRhIHtcblx0XHRsZXQgY3VycmVudCA9IGRhdGEuZGF0YS50aW1lbGluZXMuZmluZCh4ID0+IHgudGltZXN0ZXAgPT0gXCJjdXJyZW50XCIpPy5pbnRlcnZhbHM/LlswXTtcblx0XHRsZXQgaG91cmx5ID0gZGF0YS5kYXRhLnRpbWVsaW5lcy5maW5kKHggPT4geC50aW1lc3RlcCA9PSBcIjFoXCIpLmludGVydmFscztcblx0XHRsZXQgZGFpbHkgPSBkYXRhLmRhdGEudGltZWxpbmVzLmZpbmQoeCA9PiB4LnRpbWVzdGVwID09IFwiMWRcIikuaW50ZXJ2YWxzO1xuXG5cdFx0bGV0IHJlc3VsdDogV2VhdGhlckRhdGEgPSB7XG5cdFx0XHRjb29yZDoge1xuXHRcdFx0XHRsYXQ6IGxvYy5sYXQsXG5cdFx0XHRcdGxvbjogbG9jLmxvblxuXHRcdFx0fSxcblx0XHRcdGRhdGU6IG5ldyBEYXRlKGN1cnJlbnQuc3RhcnRUaW1lKSxcblx0XHRcdGNvbmRpdGlvbjogdGhpcy5SZXNvbHZlQ29uZGl0aW9uKGN1cnJlbnQudmFsdWVzLndlYXRoZXJDb2RlKSxcblx0XHRcdGh1bWlkaXR5OiBjdXJyZW50LnZhbHVlcy5odW1pZGl0eSxcblx0XHRcdHByZXNzdXJlOiBjdXJyZW50LnZhbHVlcy5wcmVzc3VyZVN1cmZhY2VMZXZlbCxcblx0XHRcdHRlbXBlcmF0dXJlOiBDZWxzaXVzVG9LZWx2aW4oY3VycmVudC52YWx1ZXMudGVtcGVyYXR1cmUpLFxuXHRcdFx0d2luZDoge1xuXHRcdFx0XHRkZWdyZWU6IGN1cnJlbnQudmFsdWVzLndpbmREaXJlY3Rpb24sXG5cdFx0XHRcdHNwZWVkOiBjdXJyZW50LnZhbHVlcy53aW5kU3BlZWRcblx0XHRcdH0sXG5cdFx0XHRzdW5yaXNlOiBuZXcgRGF0ZShkYWlseT8uWzBdLnZhbHVlcy5zdW5yaXNlVGltZSksXG5cdFx0XHRzdW5zZXQ6IG5ldyBEYXRlKGRhaWx5Py5bMF0udmFsdWVzLnN1bnNldFRpbWUpLFxuXHRcdFx0bG9jYXRpb246IHtcblx0XHRcdFx0dXJsOiBcImh0dHBzOi8vd3d3LmNsaW1hY2VsbC5jby93ZWF0aGVyXCJcblx0XHRcdH0sXG5cdFx0XHRleHRyYV9maWVsZDoge1xuXHRcdFx0XHRuYW1lOiBfKFwiRmVlbHMgTGlrZVwiKSxcblx0XHRcdFx0dHlwZTogXCJ0ZW1wZXJhdHVyZVwiLFxuXHRcdFx0XHR2YWx1ZTogQ2Vsc2l1c1RvS2VsdmluKGN1cnJlbnQudmFsdWVzLnRlbXBlcmF0dXJlQXBwYXJlbnQpXG5cdFx0XHR9LFxuXHRcdFx0Zm9yZWNhc3RzOiBbXVxuXHRcdH1cblxuXHRcdGxldCBob3VyczogSG91cmx5Rm9yZWNhc3REYXRhW10gPSBbXTtcblx0XHRsZXQgZGF5czogRm9yZWNhc3REYXRhW10gPSBbXTtcblxuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBkYWlseS5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdGNvbnN0IGVsZW1lbnQgPSBkYWlseVtpbmRleF07XG5cdFx0XHRkYXlzLnB1c2goe1xuXHRcdFx0XHRjb25kaXRpb246IHRoaXMuUmVzb2x2ZUNvbmRpdGlvbihlbGVtZW50LnZhbHVlcy53ZWF0aGVyQ29kZSksXG5cdFx0XHRcdGRhdGU6IG5ldyBEYXRlKGVsZW1lbnQuc3RhcnRUaW1lKSxcblx0XHRcdFx0dGVtcF9tYXg6IENlbHNpdXNUb0tlbHZpbihlbGVtZW50LnZhbHVlcy50ZW1wZXJhdHVyZU1heCksXG5cdFx0XHRcdHRlbXBfbWluOiBDZWxzaXVzVG9LZWx2aW4oZWxlbWVudC52YWx1ZXMudGVtcGVyYXR1cmVNaW4pXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaG91cmx5Lmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGhvdXJseVtpbmRleF07XG5cdFx0XHRsZXQgaG91cjogSG91cmx5Rm9yZWNhc3REYXRhID0ge1xuXHRcdFx0XHRjb25kaXRpb246IHRoaXMuUmVzb2x2ZUNvbmRpdGlvbihlbGVtZW50LnZhbHVlcy53ZWF0aGVyQ29kZSksXG5cdFx0XHRcdGRhdGU6IG5ldyBEYXRlKGVsZW1lbnQuc3RhcnRUaW1lKSxcblx0XHRcdFx0dGVtcDogQ2Vsc2l1c1RvS2VsdmluKGVsZW1lbnQudmFsdWVzLnRlbXBlcmF0dXJlKVxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gYml0IHNuZWFreSwgYnV0IHNldHRpbmcgdGhlIGhvdXJseSBmb3JlY2FzdCBzdGFydFRpbWUgdG8gYmVnaW5uaW5nIG9mIHRoZSBob3VyXG5cdFx0XHQvLyBzbyBpdCBpcyBkaXNwbGF5ZWQgcHJvcGVybHlcblx0XHRcdGhvdXIuZGF0ZS5zZXRNaW51dGVzKDAsIDAsIDApO1xuXG5cdFx0XHRpZiAoZWxlbWVudC52YWx1ZXMucHJlY2lwaXRhdGlvblByb2JhYmlsaXR5ID4gMCAmJiBlbGVtZW50LnZhbHVlcy5wcmVjaXBpdGF0aW9uSW50ZW5zaXR5ID4gMCkge1xuXHRcdFx0XHRob3VyLnByZWNpcGl0YXRpb24gPSB7XG5cdFx0XHRcdFx0Y2hhbmNlOiBlbGVtZW50LnZhbHVlcy5wcmVjaXBpdGF0aW9uUHJvYmFiaWxpdHksXG5cdFx0XHRcdFx0dm9sdW1lOiBlbGVtZW50LnZhbHVlcy5wcmVjaXBpdGF0aW9uSW50ZW5zaXR5LFxuXHRcdFx0XHRcdHR5cGU6IHRoaXMuUHJlY2lwVHlwZVRvQXBwbGV0VHlwZShlbGVtZW50LnZhbHVlcy5wcmVjaXBpdGF0aW9uVHlwZSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aG91cnMucHVzaChob3VyKTtcblx0XHR9XG5cblx0XHRyZXN1bHQuZm9yZWNhc3RzID0gZGF5cztcblx0XHRyZXN1bHQuaG91cmx5Rm9yZWNhc3RzID0gaG91cnM7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0cHJpdmF0ZSBSZXNvbHZlQ29uZGl0aW9uKHdlYXRoZXJDb2RlOiBudW1iZXIsIGlzTmlnaHQ6IGJvb2xlYW4gPSBmYWxzZSk6IENvbmRpdGlvbiB7XG5cdFx0bGV0IHJlc3VsdDogQ29uZGl0aW9uID0ge1xuXHRcdFx0Y3VzdG9tSWNvbjogXCJyZWZyZXNoLXN5bWJvbGljXCIsXG5cdFx0XHRpY29uczogW1wid2VhdGhlci1zZXZlcmUtYWxlcnRcIl0sXG5cdFx0XHRtYWluOiBfKFwiVW5rbm93blwiKSxcblx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiVW5rbm93blwiKVxuXHRcdH07XG5cblx0XHRzd2l0Y2ggKHdlYXRoZXJDb2RlKSB7XG5cdFx0XHRjYXNlIDA6ICAgICAvLyBVbmtub3duXG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRjYXNlIDEwMDA6ICAvLyBDbGVhclxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IGlzTmlnaHQgPyBfKFwiQ2xlYXJcIikgOiBfKFwiU3VubnlcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IGlzTmlnaHQgPyBfKFwiQ2xlYXJcIikgOiBfKFwiU3VubnlcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogaXNOaWdodCA/IFwibmlnaHQtY2xlYXItc3ltYm9saWNcIiA6IFwiZGF5LXN1bm55LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IGlzTmlnaHQgPyBbXCJ3ZWF0aGVyLWNsZWFyLW5pZ2h0XCJdIDogW1wid2VhdGhlci1jbGVhclwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDEwMDE6ICAvLyBDbG91ZHlcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiQ2xvdWR5XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiQ2xvdWR5XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiY2xvdWR5LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItb3ZlcmNhc3RcIiwgXCJ3ZWF0aGVyLW1hbnktY2xvdWRzXCIsIGlzTmlnaHQgPyBcIndlYXRoZXItY2xvdWRzLW5pZ2h0XCIgOiBcIndlYXRoZXItY2xvdWRzXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgMTEwMDogLy8gTW9zdGx5IENsZWFyXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIk1vc3RseSBjbGVhclwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIk1vc3RseSBjbGVhclwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBpc05pZ2h0ID8gXCJuaWdodC1hbHQtY2xvdWR5LXN5bWJvbGljXCIgOiBcImRheS1jbG91ZHktc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogaXNOaWdodCA/IFtcIndlYXRoZXItZmV3LWNsb3Vkcy1uaWdodFwiLCBcIndlYXRoZXItY2xvdWRzLW5pZ2h0XCJdIDogW1wid2VhdGhlci1mZXctY2xvdWRzXCIsIFwid2VhdGhlci1jbG91ZHNcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSAxMTAxOiAvLyBQYXJ0bHkgQ2xvdWR5XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlBhcnRseSBjbG91ZHlcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJQYXJ0bHkgY2xvdWR5XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IGlzTmlnaHQgPyBcIm5pZ2h0LWFsdC1jbG91ZHktc3ltYm9saWNcIiA6IFwiZGF5LWNsb3VkeS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBpc05pZ2h0ID8gW1wid2VhdGhlci1jbG91ZHMtbmlnaHRcIiwgXCJ3ZWF0aGVyLWZldy1jbG91ZHMtbmlnaHRcIl0gOiBbXCJ3ZWF0aGVyLWNsb3Vkc1wiLCBcIndlYXRoZXItZmV3LWNsb3Vkc1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDExMDI6ICAvLyBNb3N0bHkgQ2xvdWR5XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIk1vc3RseSBjbG91ZHlcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJNb3N0bHkgY2xvdWR5XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwiY2xvdWQtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1vdmVyY2FzdFwiLCBcIndlYXRoZXItbWFueS1jbG91ZHNcIiwgaXNOaWdodCA/IFwid2VhdGhlci1jbG91ZHMtbmlnaHRcIiA6IFwid2VhdGhlci1jbG91ZHNcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSAyMDAwOiAgLy8gRm9nXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkZvZ1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkZvZ1wiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImZvZy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZvZ1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDIxMDA6ICAvLyBMaWdodCBGb2dcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiRm9nXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiTGlnaHQgZm9nXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IGlzTmlnaHQgPyBcIm5pZ2h0LWZvZy1zeW1ib2xpY1wiIDogXCJkYXktZm9nLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItZm9nXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgMzAwMDogIC8vIExpZ2h0IFdpbmRcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiV2luZFwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IHdpbmRcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogaXNOaWdodCA/IFwibmlnaHQtYWx0LXdpbmQtc3ltYm9saWNcIiA6IFwiZGF5LXdpbmR5LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItd2luZHlcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSAzMDAxOiAgLy8gV2luZFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJXaW5kXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiV2luZFwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcIndpbmR5LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItd2luZHlcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSAzMDAyOiAgLy9TdHJvbmcgV2luZFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJXaW5kXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiU3Ryb25nIHdpbmRcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJ3aW5keS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXdpbmR5XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgNDAwMDogIC8vIERyaXp6bGVcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiRHJpenpsZVwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkRyaXp6bGVcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJyYWluLW1peC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCIsIFwid2VhdGhlci1zaG93ZXJzXCIsIFwid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgNDAwMTogIC8vIFJhaW5cblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiUmFpblwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlJhaW5cIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJyYWluLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItcmFpblwiLCBcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSA0MjAwOiAgLy8gTGlnaHQgUmFpblxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJSYWluXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiTGlnaHQgcmFpblwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBpc05pZ2h0ID8gXCJuaWdodC1hbHQtcmFpbi1zeW1ib2xpY1wiIDogXCJkYXktcmFpbi1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCIsIFwid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDQyMDE6ICAvLyBIZWF2eSBSYWluXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSByYWluXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwicmFpbi1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgNTAwMDogIC8vIFNub3dcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiU25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNub3dcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzbm93LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc25vd1wiLCBcIndlYXRoZXItc25vdy1zY2F0dGVyZWRcIiwgaXNOaWdodCA/IFwid2VhdGhlci1zbm93LW5pZ2h0XCIgOiBcIndlYXRoZXItc25vdy1kYXlcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSA1MDAxOiAgLy8gRmx1cnJpZXNcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiRmx1cnJpZXNcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJGbHVycmllc1wiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNub3ctd2luZC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNub3dcIiwgXCJ3ZWF0aGVyLXNub3ctc2NhdHRlcmVkXCIsIGlzTmlnaHQgPyBcIndlYXRoZXItc25vdy1uaWdodFwiIDogXCJ3ZWF0aGVyLXNub3ctZGF5XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgNTEwMDogIC8vIExpZ2h0IFNub3dcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiU25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IHNub3dcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogaXNOaWdodCA/IFwibmlnaHQtYWx0LXNub3ctc3ltYm9saWNcIiA6IFwiZGF5LXNub3ctc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogaXNOaWdodCA/IFtcIndlYXRoZXItc25vdy1zY2F0dGVyZWQtbmlnaHRcIiwgXCJ3ZWF0aGVyLXNub3ctbmlnaHRcIiwgXCJ3ZWF0aGVyLXNub3dcIl0gOiBbXCJ3ZWF0aGVyLXNub3ctc2NhdHRlcmVkLWRheVwiLCBcIndlYXRoZXItc25vdy1kYXlcIiwgXCJ3ZWF0aGVyLXNub3dcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSA1MTAxOiAvLyBIZWF2eSBTbm93XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSBzbm93XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwic25vdy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNub3dcIiwgXCJ3ZWF0aGVyLXNub3ctc2NhdHRlcmVkXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgNjAwMDogLy8gRnJlZXppbmcgRHJpenpsZVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJEcml6emxlXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiRnJlZXppbmcgZHJpenpsZVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInJhaW4tbWl4LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSA2MDAxOiAvLyBGcmVlemluZyBSYWluXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJGcmVlemluZyByYWluXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwicmFpbi1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgNjIwMDogIC8vIExpZ2h0IEZyZWV6aW5nIFJhaW5cblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiUmFpblwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkxpZ2h0IGZyZWV6aW5nIHJhaW5cIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogaXNOaWdodCA/IFwibmlnaHQtYWx0LXJhaW4tc3ltYm9saWNcIiA6IFwiZGF5LXJhaW4tc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1mcmVlemluZy1yYWluXCIsIFwid2VhdGhlci1yYWluXCIsIFwid2VhdGhlci1zaG93ZXJzXCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDYyMDE6ICAvLyBIZWF2eSBGcmVlemluZyBSYWluXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSBmcmVlemluZyByYWluXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwicmFpbi1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgNzAwMDogIC8vIEljZSBQZWxsZXRzXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkljZSBwZWxsZXRzXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSWNlIHBlbGxldHNcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzbGVldC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgNzEwMTogIC8vIEhlYXZ5IEljZSBQZWxsZXRzXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkljZSBwZWxsZXRzXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiSGVhdnkgaWNlIHBlbGxldHNcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzbGVldC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgNzEwMjogIC8vIExpZ2h0IEljZSBQZWxsZXRzXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkljZSBwZWxsZXRzXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiTGlnaHQgaWNlIHBlbGxldHNcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogaXNOaWdodCA/IFwibmlnaHQtYWx0LXNsZWV0LXN5bWJvbGljXCIgOiBcImRheS1zbGVldC1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLXNob3dlcnMtc2NhdHRlcmVkXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgODAwMDogIC8vIFRodW5kZXJzdG9ybVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJUaHVuZGVyc3Rvcm1cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJUaHVuZGVyc3Rvcm1cIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJ0aHVuZGVyc3Rvcm0tc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zdG9ybVwiXVxuXHRcdFx0XHR9XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgUHJlY2lwVHlwZVRvQXBwbGV0VHlwZSh0eXBlOiBQcmVjaXBUeXBlKTogUHJlY2lwaXRhdGlvblR5cGUge1xuXHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0Y2FzZSBQcmVjaXBUeXBlLk5fQTpcblx0XHRcdFx0cmV0dXJuIFwibm9uZVwiO1xuXHRcdFx0Y2FzZSBQcmVjaXBUeXBlLlJhaW46XG5cdFx0XHRcdHJldHVybiBcInJhaW5cIjtcblx0XHRcdGNhc2UgUHJlY2lwVHlwZS5Tbm93OlxuXHRcdFx0XHRyZXR1cm4gXCJzbm93XCI7XG5cdFx0XHRjYXNlIFByZWNpcFR5cGUuRnJlZXppbmdfUmFpbjpcblx0XHRcdFx0cmV0dXJuIFwiZnJlZXppbmcgcmFpblwiO1xuXHRcdFx0Y2FzZSBQcmVjaXBUeXBlLkljZV9QZWxsZXRzOlxuXHRcdFx0XHRyZXR1cm4gXCJpY2UgcGVsbGV0c1wiO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIFwibm9uZVwiO1xuXHRcdH1cblx0fVxufVxuXG5jb25zdCBlbnVtIFByZWNpcFR5cGUge1xuXHROX0EsXG5cdFJhaW4sXG5cdFNub3csXG5cdEZyZWV6aW5nX1JhaW4sXG5cdEljZV9QZWxsZXRzXG59XG5cblxuaW50ZXJmYWNlIENsaW1hY2VsbFY0UGF5bG9hZCB7XG5cdGRhdGE6IHtcblx0XHR0aW1lbGluZXM6IFRpbWVsaW5lUGF5bG9hZFtdO1xuXHR9O1xuXHR3YXJuaW5nczogV2FybmluZ1BheWxvYWRbXVxufVxuXG5pbnRlcmZhY2UgVGltZWxpbmVQYXlsb2FkIHtcblx0dGltZXN0ZXA6IFRpbWVzdGVwO1xuXHQvKiogSVNPIERhdGUgU3RyaW5nICovXG5cdHN0YXJ0VGltZTogc3RyaW5nO1xuXHQvKiogSVNPIERhdGUgU3RyaW5nICovXG5cdGVuZFRpbWU6IHN0cmluZztcblx0aW50ZXJ2YWxzOiBJbnRlcnZhbFBheWxvYWRbXVxufVxuXG5pbnRlcmZhY2UgSW50ZXJ2YWxQYXlsb2FkIHtcblx0LyoqIElTTyBEYXRlIFN0cmluZyAqL1xuXHRzdGFydFRpbWU6IHN0cmluZztcblx0dmFsdWVzOiB7XG5cdFx0LyoqIEMgKi9cblx0XHR0ZW1wZXJhdHVyZTogbnVtYmVyO1xuXHRcdHdlYXRoZXJDb2RlOiBudW1iZXI7XG5cdFx0LyoqIGhQYSAqL1xuXHRcdHByZXNzdXJlU3VyZmFjZUxldmVsOiBudW1iZXI7XG5cdFx0cHJlY2lwaXRhdGlvblR5cGU6IFByZWNpcFR5cGU7XG5cdFx0LyoqICUgKi9cblx0XHRwcmVjaXBpdGF0aW9uUHJvYmFiaWxpdHk6IG51bWJlcjtcblx0XHQvKiogbW0vaHIgKi9cblx0XHRwcmVjaXBpdGF0aW9uSW50ZW5zaXR5OiBudW1iZXI7XG5cdFx0LyoqIGRlZ3JlZXMgb3IgbnVsbCAqL1xuXHRcdHdpbmREaXJlY3Rpb246IG51bWJlcjtcblx0XHQvKiogbS9zICovXG5cdFx0d2luZFNwZWVkOiBudW1iZXI7XG5cdFx0LyoqICUgKi9cblx0XHRodW1pZGl0eTogbnVtYmVyO1xuXHRcdC8qKiBDICovXG5cdFx0dGVtcGVyYXR1cmVBcHBhcmVudDogbnVtYmVyO1xuXHRcdC8qKiBDICovXG5cdFx0dGVtcGVyYXR1cmVNYXg6IG51bWJlcjtcblx0XHQvKiogQyAqL1xuXHRcdHRlbXBlcmF0dXJlTWluOiBudW1iZXI7XG5cdFx0LyoqIFVUQyBEYXRlIHN0cmluZywgb25seSBpbiAxZCB0eXBlICovXG5cdFx0c3VucmlzZVRpbWU/OiBzdHJpbmc7XG5cdFx0LyoqIFVUQyBEYXRlIHN0cmluZywgb25seSBpbiAxZCB0eXBlICovXG5cdFx0c3Vuc2V0VGltZT86IHN0cmluZztcblx0fVxufVxuXG50eXBlIFRpbWVzdGVwID0gXCJjdXJyZW50XCIgfCBcIjFkXCIgfCBcIjFoXCI7XG5cbmludGVyZmFjZSBXYXJuaW5nUGF5bG9hZCB7XG5cdGNvZGU6IG51bWJlcjtcblx0dHlwZTogc3RyaW5nO1xuXHRtZXNzYWdlOiBzdHJpbmc7XG5cdG1ldGE6IHtcblx0XHR0aW1lc3RlcDogVGltZXN0ZXA7XG5cdFx0ZnJvbTogc3RyaW5nO1xuXHRcdHRvOiBzdHJpbmdcblx0fVxufSIsImltcG9ydCB7IFNlcnZpY2VzIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuaW1wb3J0IHsgSFRUUFBhcmFtcyB9IGZyb20gXCIuLi9saWIvaHR0cExpYlwiO1xuaW1wb3J0IHsgV2VhdGhlckFwcGxldCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBDb25kaXRpb24sIEZvcmVjYXN0RGF0YSwgSG91cmx5Rm9yZWNhc3REYXRhLCBMb2NhdGlvbkRhdGEsIFByZWNpcGl0YXRpb25UeXBlLCBXZWF0aGVyRGF0YSwgV2VhdGhlclByb3ZpZGVyIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBDZWxzaXVzVG9LZWx2aW4sIEdldERpc3RhbmNlLCBtb2RlLCBfIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBEYW5pc2hNSSBpbXBsZW1lbnRzIFdlYXRoZXJQcm92aWRlciB7XG5cdG5lZWRzQXBpS2V5OiBib29sZWFuID0gZmFsc2U7XG5cdHByZXR0eU5hbWU6IHN0cmluZyA9IF8oXCJETUkgRGVubWFya1wiKTtcblx0bmFtZTogU2VydmljZXMgPSBcIkRhbmlzaE1JXCI7XG5cdG1heEZvcmVjYXN0U3VwcG9ydDogbnVtYmVyID0gMTA7XG5cdG1heEhvdXJseUZvcmVjYXN0U3VwcG9ydDogbnVtYmVyID0gNDg7XG5cdHdlYnNpdGU6IHN0cmluZyA9IFwiaHR0cHM6Ly93d3cuZG1pLmRrL1wiO1xuXG5cdHByaXZhdGUgYXBwOiBXZWF0aGVyQXBwbGV0O1xuXHRwcml2YXRlIHVybCA9IFwiaHR0cHM6Ly93d3cuZG1pLmRrL05pbkpvMkRtaURrL25pbmpvMmRtaWRrXCI7XG5cdHByaXZhdGUgZm9yZWNhc3RQYXJhbXM6IEhUVFBQYXJhbXMgPSB7XG5cdFx0Y21kOiBcImxsalwiLCAvLyBsYXRsb25nanNvblxuXHRcdGxvbjogbnVsbCxcblx0XHRsYXQ6IG51bGwsXG5cdFx0dHo6IFwiVVRDXCIgICAvLyBoYXZlIHRvIGFzIGluIFVUQyB1bmxlc3Mgd2UgZG9uJ3QgZ2V0IHByb3BlciB0aW1lc1xuXHR9XG5cblx0LyoqIFBhcmFtcyBoYXMgdG8gYmUgaW4gdGhpcyBleGFjdCBvcmRlciAqL1xuXHRwcml2YXRlIG9ic2VydmF0aW9uUGFyYW1zOiBIVFRQUGFyYW1zID0ge1xuXHRcdGNtZDogXCJvYmpcIixcblx0XHRlYXN0OiBudWxsLFxuXHRcdHdlc3Q6IG51bGwsXG5cdFx0c291dGg6IG51bGwsXG5cdFx0bm9ydGg6IG51bGxcblx0fVxuXG5cdGNvbnN0cnVjdG9yKGFwcDogV2VhdGhlckFwcGxldCkge1xuXHRcdHRoaXMuYXBwID0gYXBwO1xuXHR9XG5cblx0YXN5bmMgR2V0V2VhdGhlcihsb2M6IExvY2F0aW9uRGF0YSk6IFByb21pc2U8V2VhdGhlckRhdGE+IHtcblx0XHRpZiAobG9jID09IG51bGwpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdHRoaXMuR2V0TG9jYXRpb25Cb3VuZGluZ0JveChsb2MpO1xuXHRcdGxldCBvYnNlcnZhdGlvbnMgPSB0aGlzLk9yZGVyT2JzZXJ2YXRpb25zKGF3YWl0IHRoaXMuYXBwLkxvYWRKc29uQXN5bmM8RGFuaXNoT2JzZXJ2YXRpb25QYXlsb2Fkcz4odGhpcy51cmwsIHRoaXMub2JzZXJ2YXRpb25QYXJhbXMpLCBsb2MpO1xuXG5cdFx0dGhpcy5mb3JlY2FzdFBhcmFtcy5sYXQgPSBsb2MubGF0O1xuXHRcdHRoaXMuZm9yZWNhc3RQYXJhbXMubG9uID0gbG9jLmxvbjtcblxuXHRcdGxldCBmb3JlY2FzdHMgPSBhd2FpdCB0aGlzLmFwcC5Mb2FkSnNvbkFzeW5jPERhbmlzaE1JUGF5bG9hZD4odGhpcy51cmwsIHRoaXMuZm9yZWNhc3RQYXJhbXMpO1xuXHRcdHJldHVybiB0aGlzLlBhcnNlV2VhdGhlcihvYnNlcnZhdGlvbnMsIGZvcmVjYXN0cyk7XG5cdH1cblxuXHRwcml2YXRlIFBhcnNlV2VhdGhlcihvYnNlcnZhdGlvbnM6IERhbmlzaE9ic2VydmF0aW9uUGF5bG9hZFtdLCBmb3JlY2FzdHM6IERhbmlzaE1JUGF5bG9hZCk6IFdlYXRoZXJEYXRhIHtcblx0XHRsZXQgb2JzZXJ2YXRpb24gPSB0aGlzLk1lcmdlT2JzZXJ2YXRpb25zKG9ic2VydmF0aW9ucyk7XG5cdFx0bGV0IHJlc3VsdCA9IHtcblx0XHRcdHRlbXBlcmF0dXJlOiBDZWxzaXVzVG9LZWx2aW4ob2JzZXJ2YXRpb24uVGVtcGVyYXR1cmUybSksXG5cdFx0XHRjb25kaXRpb246IHRoaXMuUmVzb2x2ZUNvbmRpdGlvbihvYnNlcnZhdGlvbi5zeW1ib2wpLFxuXHRcdFx0aHVtaWRpdHk6IG9ic2VydmF0aW9uLlJlbGF0aXZlSHVtaWRpdHksXG5cdFx0XHRwcmVzc3VyZTogKCFvYnNlcnZhdGlvbi5QcmVzc3VyZU1TTCkgPyBudWxsIDogb2JzZXJ2YXRpb24uUHJlc3N1cmVNU0wgLyAxMDAsXG5cdFx0XHR3aW5kOiB7XG5cdFx0XHRcdGRlZ3JlZTogb2JzZXJ2YXRpb24uV2luZERpcmVjdGlvbixcblx0XHRcdFx0c3BlZWQ6IG9ic2VydmF0aW9uLldpbmRTcGVlZDEwbVxuXHRcdFx0fVxuXHRcdH0gYXMgV2VhdGhlckRhdGE7XG5cblx0XHRyZXN1bHQubG9jYXRpb24gPSB7XG5cdFx0XHRjaXR5OiBmb3JlY2FzdHMuY2l0eSxcblx0XHRcdGNvdW50cnk6IGZvcmVjYXN0cy5jb3VudHJ5LFxuXHRcdFx0dGltZVpvbmU6IG51bGwsIC8vIGJlY2F1c2Ugd2UgYXNrIGluIFVUQywgd2UgZ2V0IFVUQyBhcyB0aGUgdGltZXpvbmUsIHNvIHdlIGp1c3QgZHJvcCBpdFxuXHRcdFx0dXJsOiBgaHR0cHM6Ly93d3cuZG1pLmRrL2xva2F0aW9uL3Nob3cvJHtmb3JlY2FzdHMuY291bnRyeX0vJHtmb3JlY2FzdHMuaWR9YFxuXHRcdH07XG5cdFx0cmVzdWx0LmNvb3JkID0ge1xuXHRcdFx0bG9uOiBmb3JlY2FzdHMubG9uZ2l0dWRlLFxuXHRcdFx0bGF0OiBmb3JlY2FzdHMubGF0aXR1ZGVcblx0XHR9O1xuXHRcdHJlc3VsdC5kYXRlID0gdGhpcy5EYXRlU3RyaW5nVG9EYXRlKGZvcmVjYXN0cy5sYXN0dXBkYXRlKTtcblx0XHRyZXN1bHQuaHVtaWRpdHkgPSByZXN1bHQuaHVtaWRpdHkgPz8gZm9yZWNhc3RzLnRpbWVzZXJpZVswXS5odW1pZGl0eTtcblx0XHRyZXN1bHQucHJlc3N1cmUgPSByZXN1bHQucHJlc3N1cmUgPz8gZm9yZWNhc3RzLnRpbWVzZXJpZVswXS5wcmVzc3VyZTtcblx0XHRyZXN1bHQudGVtcGVyYXR1cmUgPSByZXN1bHQudGVtcGVyYXR1cmUgPz8gQ2Vsc2l1c1RvS2VsdmluKGZvcmVjYXN0cy50aW1lc2VyaWVbMF0udGVtcCk7XG5cdFx0cmVzdWx0LndpbmQuZGVncmVlID0gcmVzdWx0LndpbmQuZGVncmVlID8/IGZvcmVjYXN0cy50aW1lc2VyaWVbMF0ud2luZERlZ3JlZTtcblx0XHRyZXN1bHQud2luZC5zcGVlZCA9IHJlc3VsdC53aW5kLnNwZWVkID8/IGZvcmVjYXN0cy50aW1lc2VyaWVbMF0ud2luZFNwZWVkO1xuXHRcdHJlc3VsdC5zdW5yaXNlID0gdGhpcy5EYXRlU3RyaW5nVG9EYXRlKGZvcmVjYXN0cy5zdW5yaXNlKTtcblx0XHRyZXN1bHQuc3Vuc2V0ID0gdGhpcy5EYXRlU3RyaW5nVG9EYXRlKGZvcmVjYXN0cy5zdW5zZXQpO1xuXG5cdFx0aWYgKHJlc3VsdC5jb25kaXRpb24uY3VzdG9tSWNvbiA9PSBcImFsaWVuLXN5bWJvbGljXCIpIHtcblx0XHRcdHJlc3VsdC5jb25kaXRpb24gPSB0aGlzLlJlc29sdmVDb25kaXRpb24oZm9yZWNhc3RzLnRpbWVzZXJpZVswXS5zeW1ib2wpO1xuXHRcdH1cblxuXHRcdGxldCBmb3JlY2FzdERhdGE6IEZvcmVjYXN0RGF0YVtdID0gW107XG5cdFx0Ly8gZm9yIHRoZSBsYXN0IG9uZSB3ZSBkb24ndCBoYXZlIHN5bWJvbHMsIHNvIHNraXBcblx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZm9yZWNhc3RzLmFnZ0RhdGEubGVuZ3RoIC0gMTsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGZvcmVjYXN0cy5hZ2dEYXRhW2luZGV4XTtcblx0XHRcdGZvcmVjYXN0RGF0YS5wdXNoKHtcblx0XHRcdFx0ZGF0ZTogdGhpcy5EYXRlU3RyaW5nVG9EYXRlKGVsZW1lbnQudGltZSksXG5cdFx0XHRcdHRlbXBfbWF4OiBDZWxzaXVzVG9LZWx2aW4oZWxlbWVudC5tYXhUZW1wKSxcblx0XHRcdFx0dGVtcF9taW46IENlbHNpdXNUb0tlbHZpbihlbGVtZW50Lm1pblRlbXApLFxuXHRcdFx0XHRjb25kaXRpb246IHRoaXMuUmVzb2x2ZURhaWx5Q29uZGl0aW9uKGZvcmVjYXN0cy50aW1lc2VyaWUsIHRoaXMuRGF0ZVN0cmluZ1RvRGF0ZShlbGVtZW50LnRpbWUpKVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0cmVzdWx0LmZvcmVjYXN0cyA9IGZvcmVjYXN0RGF0YTtcblxuXHRcdGxldCBob3VybHlEYXRhOiBIb3VybHlGb3JlY2FzdERhdGFbXSA9IFtdO1xuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBmb3JlY2FzdHMudGltZXNlcmllLmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGZvcmVjYXN0cy50aW1lc2VyaWVbaW5kZXhdO1xuXHRcdFx0aWYgKGVsZW1lbnQudGltZSA9PSBudWxsKVxuXHRcdFx0XHRjb250aW51ZVxuXG5cdFx0XHRsZXQgaG91cjogSG91cmx5Rm9yZWNhc3REYXRhID0ge1xuXHRcdFx0XHRkYXRlOiB0aGlzLkRhdGVTdHJpbmdUb0RhdGUoZWxlbWVudC50aW1lKSxcblx0XHRcdFx0dGVtcDogQ2Vsc2l1c1RvS2VsdmluKGVsZW1lbnQudGVtcCksXG5cdFx0XHRcdGNvbmRpdGlvbjogdGhpcy5SZXNvbHZlQ29uZGl0aW9uKGVsZW1lbnQuc3ltYm9sKVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKGVsZW1lbnQucHJlY2lwMSA+IDAuMDEgJiYgZWxlbWVudC5wcmVjaXBUeXBlICE9IG51bGwpIHtcblx0XHRcdFx0aG91ci5wcmVjaXBpdGF0aW9uID0ge1xuXHRcdFx0XHRcdHR5cGU6IHRoaXMuRGFuaXNoUHJlY2lwVG9UeXBlKGVsZW1lbnQucHJlY2lwVHlwZSksXG5cdFx0XHRcdFx0dm9sdW1lOiBlbGVtZW50LnByZWNpcDFcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRob3VybHlEYXRhLnB1c2goaG91cik7XG5cdFx0fVxuXHRcdHJlc3VsdC5ob3VybHlGb3JlY2FzdHMgPSBob3VybHlEYXRhO1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHByaXZhdGUgTWVyZ2VPYnNlcnZhdGlvbnMob2JzZXJ2YXRpb25zOiBEYW5pc2hPYnNlcnZhdGlvblBheWxvYWRbXSk6IERhbmlzaE9ic2VydmF0aW9uRGF0YSB7XG5cdFx0bGV0IHJlc3VsdDogRGFuaXNoT2JzZXJ2YXRpb25EYXRhID0ge1xuXHRcdFx0c3ltYm9sOiBudWxsLFxuXHRcdFx0UHJlc3N1cmVNU0w6IG51bGwsXG5cdFx0XHRUZW1wZXJhdHVyZTJtOiBudWxsLFxuXHRcdFx0V2luZERpcmVjdGlvbjogbnVsbCxcblx0XHRcdFJlbGF0aXZlSHVtaWRpdHk6IG51bGwsXG5cdFx0XHRXaW5kU3BlZWQxMG06IG51bGwsXG5cdFx0fVxuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBvYnNlcnZhdGlvbnMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRjb25zdCBlbGVtZW50ID0gb2JzZXJ2YXRpb25zW2luZGV4XTtcblx0XHRcdHJlc3VsdC5zeW1ib2wgPSByZXN1bHQuc3ltYm9sID8/IGVsZW1lbnQudmFsdWVzLnN5bWJvbDtcblx0XHRcdHJlc3VsdC5QcmVzc3VyZU1TTCA9IHJlc3VsdC5QcmVzc3VyZU1TTCA/PyBlbGVtZW50LnZhbHVlcy5QcmVzc3VyZU1TTDtcblx0XHRcdHJlc3VsdC5UZW1wZXJhdHVyZTJtID0gcmVzdWx0LlRlbXBlcmF0dXJlMm0gPz8gZWxlbWVudC52YWx1ZXMuVGVtcGVyYXR1cmUybTtcblx0XHRcdHJlc3VsdC5XaW5kRGlyZWN0aW9uID0gcmVzdWx0LldpbmREaXJlY3Rpb24gPz8gZWxlbWVudC52YWx1ZXMuV2luZERpcmVjdGlvbjtcblx0XHRcdHJlc3VsdC5SZWxhdGl2ZUh1bWlkaXR5ID0gcmVzdWx0LlJlbGF0aXZlSHVtaWRpdHkgPz8gZWxlbWVudC52YWx1ZXMuUmVsYXRpdmVIdW1pZGl0eTtcblx0XHRcdHJlc3VsdC5XaW5kU3BlZWQxMG0gPSByZXN1bHQuV2luZFNwZWVkMTBtID8/IGVsZW1lbnQudmFsdWVzLldpbmRTcGVlZDEwbTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0cHJpdmF0ZSBSZXNvbHZlRGFpbHlDb25kaXRpb24oaG91cmx5RGF0YTogRGFuaXNoTUlIb3VybHlQYXlsb2FkW10sIGRhdGU6IERhdGUpIHtcblx0XHRsZXQgdGFyZ2V0ID0gbmV3IERhdGUoZGF0ZSk7XG5cdFx0Ly8gY2hhbmdlIGl0IHRvIDYgaW4gdGhlIG1vcm5pbmcgc28gYSBkYXkgbWFrZXMgbW9yZSBzZW5zZVxuXHRcdHRhcmdldC5zZXRIb3Vycyh0YXJnZXQuZ2V0SG91cnMoKSArIDYpO1xuXHRcdC8vIG5leHQgZGF5IGJvdW5kYXJ5XG5cdFx0bGV0IHVwdG8gPSBuZXcgRGF0ZSh0YXJnZXQpO1xuXHRcdHVwdG8uc2V0RGF0ZSh1cHRvLmdldERhdGUoKSArIDEpO1xuXG5cdFx0bGV0IHJlbGV2YW50SG91cnMgPSBob3VybHlEYXRhLmZpbHRlcih4ID0+IHtcblx0XHRcdGxldCBob3VyID0gdGhpcy5EYXRlU3RyaW5nVG9EYXRlKHgudGltZSk7XG5cdFx0XHRpZiAoaG91ciA+PSB0YXJnZXQgJiYgaG91ciA8IHVwdG8pXG5cdFx0XHRcdHJldHVybiBob3VyO1xuXHRcdH0pO1xuXG5cdFx0Ly8gY29udmVydCBuaWdodCBzeW1ib2xzIHRvIGRheSBzeW1ib2xzIGZvciBkYWlseVxuXHRcdGxldCBub3JtYWxpemVkU3ltYm9scyA9IHJlbGV2YW50SG91cnMubWFwKHggPT4gKHguc3ltYm9sID4gMTAwKSA/ICh4LnN5bWJvbCAtIDEwMCkgOiB4LnN5bWJvbCk7XG5cblx0XHRsZXQgcmVzdWx0U3ltYm9sOiBudW1iZXIgPSBudWxsO1xuXHRcdC8vIHN5bWJvbHMgaW5jbHVkZSByYWluIG9yIG90aGVyIHN0dWZmLCBnZXQgbW9zdCBzZXZlcmVcblx0XHQvLyBleGNsdWRlIGZvZ2d5IGZyb20gcHJpb3JpdHkgc3ltYm9sc1xuXHRcdGlmICghIW5vcm1hbGl6ZWRTeW1ib2xzLmZpbmQoeCA9PiB4ID4gMTAgJiYgeCAhPSA0NSkpXG5cdFx0XHRyZXN1bHRTeW1ib2wgPSBNYXRoLm1heCguLi5ub3JtYWxpemVkU3ltYm9scyk7XG5cdFx0ZWxzZSAvLyBnZXQgbW9zdCBjb21tb24gaWYgdGhlcmUgaXMgbm8gcHJlY2lwaXRhdGlvblxuXHRcdFx0cmVzdWx0U3ltYm9sID0gbW9kZShub3JtYWxpemVkU3ltYm9scyk7XG5cblx0XHRyZXR1cm4gdGhpcy5SZXNvbHZlQ29uZGl0aW9uKHJlc3VsdFN5bWJvbCk7XG5cdH1cblxuXHRwcml2YXRlIFJlc29sdmVDb25kaXRpb24oc3ltYm9sOiBudW1iZXIpOiBDb25kaXRpb24ge1xuXHRcdGxldCBpc05pZ2h0ID0gKHN5bWJvbCA+IDEwMCk7XG5cdFx0aWYgKGlzTmlnaHQpXG5cdFx0XHRzeW1ib2wgPSBzeW1ib2wgLSAxMDA7XG5cdFx0c3dpdGNoIChzeW1ib2wpIHtcblx0XHRcdGNhc2UgMTogICAgIC8vIENsZWFyXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkNsZWFyXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiQ2xlYXJcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogaXNOaWdodCA/IFwibmlnaHQtY2xlYXItc3ltYm9saWNcIiA6IFwiZGF5LXN1bm55LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IGlzTmlnaHQgPyBbXCJ3ZWF0aGVyLWNsZWFyLW5pZ2h0XCJdIDogW1wid2VhdGhlci1jbGVhclwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDI6ICAgICAvLyBQYXJ0bHkgY2xvdWR5IGRheVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJQYXJ0bHkgY2xvdWR5XCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiUGFydGx5IGNsb3VkeVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBpc05pZ2h0ID8gXCJuaWdodC1hbHQtY2xvdWR5LXN5bWJvbGljXCIgOiBcImRheS1jbG91ZHktc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogaXNOaWdodCA/IFtcIndlYXRoZXItZmV3LWNsb3Vkcy1uaWdodFwiLCBcIndlYXRoZXItY2xvdWRzLW5pZ2h0XCJdIDogW1wid2VhdGhlci1mZXctY2xvdWRzXCIsIFwid2VhdGhlci1jbG91ZHNcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSAzOiAgICAgLy8gY2xvdWR5XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkNsb3VkeVwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIkNsb3VkeVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImNsb3VkeS1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLW92ZXJjYXN0XCIsIFwid2VhdGhlci1tYW55LWNsb3Vkc1wiLCBcIndlYXRoZXItY2xvdWRzXCIsIFwid2VhdGhlci1mZXctY2xvdWRzXCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgMzg6ICAgLy8gQmxvd2luZyBzbm93XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJCbG93aW5nIHNub3dcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzbm93LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc25vd1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDQ1OiAgIC8vRm9nZ3lcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiRm9nZ3lcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJGb2dneVwiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcImZvZy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLWZvZ1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDYwOiAgIC8vIFJhaW5cblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiUmFpblwiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlJhaW5cIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJyYWluLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItcmFpblwiLCBcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItc2hvd2Vyc1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDYzOiAgICAvLyBNb2RlcmF0ZSByYWluXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIk1vZGVyYXRlIHJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJNb2RlcmF0ZSByYWluXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwicmFpbi1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXJhaW5cIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSA2ODogICAvLyBSYWluIGFuZCBzbm93XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW4gYW5kIHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJSYWluIGFuZCBzbm93XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwicmFpbi1taXgtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93LXJhaW5cIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXJhaW5cIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSA2OTogICAvLyBIZWF2eSByYWluIGFuZCBzbm93XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW4gYW5kIHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSByYWluIGFuZCBzbm93XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwicmFpbi1taXgtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93LXJhaW5cIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXJhaW5cIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSA3MDogICAgLy8gU2xpZ2h0IHNub3dcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiU2xpZ2h0IHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJTbGlnaHQgc25vd1wiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBcInNub3ctc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93XCIsIFwid2VhdGhlci1zbm93LXNjYXR0ZXJlZFwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDczOiAgIC8vIE1vZGVyYXRlIHNub3dcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiTW9kZXJhdGUgc25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIk1vZGVyYXRlIHNub3dcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzbm93LXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc25vd1wiLCBcIndlYXRoZXItc25vdy1zY2F0dGVyZWRcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSA4MDogICAgLy8gUmFpbiBzaG93ZXJzXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW5cIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJSYWluIHNob3dlcnNcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJzaG93ZXJzLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc2hvd2Vyc1wiLCBcIndlYXRoZXItZnJlZXppbmctcmFpblwiLCBcIndlYXRoZXItcmFpblwiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDgxOiAgICAvLyBNb2RlcmF0ZSByYWluIHNob3dlcnMgZGF5XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW4gc2hvd2Vyc1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIk1vZGVyYXRlIHJhaW4gc2hvd2Vyc1wiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBpc05pZ2h0ID8gXCJuaWdodC1hbHQtc2hvd2Vycy1zeW1ib2xpY1wiIDogXCJkYXktc2hvd2Vycy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBpc05pZ2h0ID8gW1wid2VhdGhlci1zaG93ZXJzLW5pZ2h0XCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZC1uaWdodFwiLCBcIndlYXRoZXItc2hvd2Vycy1zY2F0dGVyZWRcIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIl0gOiBbXCJ3ZWF0aGVyLXNob3dlcnMtZGF5XCIsIFwid2VhdGhlci1zaG93ZXJzLXNjYXR0ZXJlZC1kYXlcIiwgXCJ3ZWF0aGVyLXNob3dlcnNcIl1cblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSA4MzogICAgLy8gU2xpZ2h0IG1peGVkIHJhaW4gYW5kIHNub3cgZGF5XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW4gYW5kIHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJNaXhlZCByYWluIGFuZCBzbm93XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IGlzTmlnaHQgPyBcIm5pZ2h0LWFsdC1yYWluLW1peC1zeW1ib2xpY1wiIDogXCJkYXktcmFpbi1taXgtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93LXJhaW5cIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXNub3ctZGF5XCIsIFwid2VhdGhlci1zbm93XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgODQ6ICAgIC8vIEhlYXZ5IG1peGVkIHJhaW4gYW5kIHNub3cgZGF5XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIlJhaW4gYW5kIHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSBtaXhlZCByYWluIGFuZCBzbm93XCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwicmFpbi1taXgtc3ltYm9saWNcIixcblx0XHRcdFx0XHRpY29uczogW1wid2VhdGhlci1zbm93LXJhaW5cIiwgXCJ3ZWF0aGVyLWZyZWV6aW5nLXJhaW5cIiwgXCJ3ZWF0aGVyLXNub3ctZGF5XCIsIFwid2VhdGhlci1zbm93XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgODU6ICAgIC8vIFNub3cgc2hvd2VycyBkYXlcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiU25vd1wiKSxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogXyhcIlNub3cgc2hvd2Vyc1wiKSxcblx0XHRcdFx0XHRjdXN0b21JY29uOiBpc05pZ2h0ID8gXCJuaWdodC1hbHQtc25vdy1zeW1ib2xpY1wiIDogXCJkYXktc25vdy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBpc05pZ2h0ID8gW1wid2VhdGhlci1zbm93LW5pZ2h0XCIsIFwid2VhdGhlci1zbm93XCJdIDogW1wid2VhdGhlci1zbm93LWRheVwiLCBcIndlYXRoZXItc25vd1wiXVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIDg2OiAgICAvLyBIZWF2eSBzbm93IHNob3dlcnMgZGF5XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbjogXyhcIkhlYXZ5IHNub3dcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJIZWF2eSBzbm93IHNob3dlcnNcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJkYXktc25vdy1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNub3ctZGF5XCIsIFwid2VhdGhlci1zbm93XCJdXG5cdFx0XHRcdH1cblx0XHRcdGNhc2UgOTU6ICAgLy8gVGh1bmRlcnN0b3JtIHdpdGggcHJlY2lwaXRhdGlvbnNcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRtYWluOiBfKFwiVGh1bmRlcnN0b3JtXCIpLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBfKFwiVGh1bmRlcnN0b3JtXCIpLFxuXHRcdFx0XHRcdGN1c3RvbUljb246IFwidGh1bmRlcnN0b3JtLXN5bWJvbGljXCIsXG5cdFx0XHRcdFx0aWNvbnM6IFtcIndlYXRoZXItc3Rvcm1cIl1cblx0XHRcdFx0fVxuXHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1haW46IF8oXCJOT1QgRk9VTkRcIiksXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IF8oXCJOT1QgRk9VTkRcIiksXG5cdFx0XHRcdFx0Y3VzdG9tSWNvbjogXCJhbGllbi1zeW1ib2xpY1wiLFxuXHRcdFx0XHRcdGljb25zOiBbXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiXVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBEYW5pc2hQcmVjaXBUb1R5cGUodHlwZTogRGFuaXNoUHJlY2lwVHlwZSk6IFByZWNpcGl0YXRpb25UeXBlIHtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgXCJzbmVcIjpcblx0XHRcdFx0cmV0dXJuIFwic25vd1wiO1xuXHRcdFx0Y2FzZSBcInJlZ25cIjpcblx0XHRcdFx0cmV0dXJuIFwicmFpblwiO1xuXHRcdFx0Y2FzZSBcInNsdWRcIjpcblx0XHRcdFx0cmV0dXJuIFwiaWNlIHBlbGxldHNcIjtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBcIm5vbmVcIjtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRXhwYW5kcyB0aGUgbG9jYXRpb25zIHRvIGFib3V0IDEwa20gYm94XG5cdCAqIEBwYXJhbSBsb2MgXG5cdCAqL1xuXHRwcml2YXRlIEdldExvY2F0aW9uQm91bmRpbmdCb3gobG9jOiBMb2NhdGlvbkRhdGEpIHtcblx0XHR0aGlzLm9ic2VydmF0aW9uUGFyYW1zLndlc3QgPSBsb2MubG9uICsgMC4wNzU7XG5cdFx0dGhpcy5vYnNlcnZhdGlvblBhcmFtcy5lYXN0ID0gbG9jLmxvbiAtIDAuMDc1O1xuXHRcdHRoaXMub2JzZXJ2YXRpb25QYXJhbXMubm9ydGggPSBsb2MubGF0ICsgMC4wNDU7XG5cdFx0dGhpcy5vYnNlcnZhdGlvblBhcmFtcy5zb3V0aCA9IGxvYy5sYXQgLSAwLjA0O1xuXHR9XG5cblx0cHJpdmF0ZSBPcmRlck9ic2VydmF0aW9ucyhvYnNlcnZhdGlvbnM6IERhbmlzaE9ic2VydmF0aW9uUGF5bG9hZHMsIGxvYzogTG9jYXRpb25EYXRhKTogRGFuaXNoT2JzZXJ2YXRpb25QYXlsb2FkW10ge1xuXHRcdGxldCByZXN1bHQ6IERhbmlzaE9ic2VydmF0aW9uUGF5bG9hZFtdID0gW107XG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gb2JzZXJ2YXRpb25zKSB7XG5cdFx0XHRjb25zdCBlbGVtZW50ID0gb2JzZXJ2YXRpb25zW2tleV07XG5cdFx0XHRlbGVtZW50LmRpc3QgPSBHZXREaXN0YW5jZShsb2MubGF0LCBsb2MubG9uLCBlbGVtZW50LmxhdGl0dWRlLCBlbGVtZW50LmxvbmdpdHVkZSk7XG5cdFx0XHRyZXN1bHQucHVzaChlbGVtZW50KTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuU29ydE9ic2VydmF0aW9uU2l0ZXMocmVzdWx0KTtcblx0fVxuXG5cdHByaXZhdGUgU29ydE9ic2VydmF0aW9uU2l0ZXMob2JzZXJ2YXRpb25zOiBEYW5pc2hPYnNlcnZhdGlvblBheWxvYWRbXSk6IERhbmlzaE9ic2VydmF0aW9uUGF5bG9hZFtdIHtcblx0XHRpZiAob2JzZXJ2YXRpb25zID09IG51bGwpIHJldHVybiBudWxsO1xuXHRcdG9ic2VydmF0aW9ucyA9IG9ic2VydmF0aW9ucy5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRpZiAoYS5kaXN0IDwgYi5kaXN0KSByZXR1cm4gLTE7XG5cdFx0XHRpZiAoYS5kaXN0ID09IGIuZGlzdCkgcmV0dXJuIDA7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9KVxuXHRcdHJldHVybiBvYnNlcnZhdGlvbnM7XG5cdH1cblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBzdHIgZXhhbXBsZSAyMDIxMDIwNzEzMDAwMCBvciAyMDIxMDIxNCBvciAnODAzJyBvciAnMTcwNCcsXG5cdCAqL1xuXHRwcml2YXRlIERhdGVTdHJpbmdUb0RhdGUoc3RyOiBzdHJpbmcpOiBEYXRlIHtcblx0XHRpZiAoIXN0cikgcmV0dXJuIG51bGw7XG5cdFx0aWYgKHN0ci5sZW5ndGggPT0gMTQpIHtcblx0XHRcdHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhcblx0XHRcdFx0cGFyc2VJbnQoc3RyLnN1YnN0cmluZygwLCA0KSksXG5cdFx0XHRcdHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoNCwgNikpIC0gMSxcblx0XHRcdFx0cGFyc2VJbnQoc3RyLnN1YnN0cmluZyg2LCA4KSksXG5cdFx0XHRcdHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoOCwgMTApKSxcblx0XHRcdFx0cGFyc2VJbnQoc3RyLnN1YnN0cmluZygxMCwgMTIpKSxcblx0XHRcdFx0cGFyc2VJbnQoc3RyLnN1YnN0cmluZygxMiwgMTQpKVxuXHRcdFx0KSk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKHN0ci5sZW5ndGggPT0gOCkge1xuXHRcdFx0cmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKFxuXHRcdFx0XHRwYXJzZUludChzdHIuc3Vic3RyaW5nKDAsIDQpKSxcblx0XHRcdFx0cGFyc2VJbnQoc3RyLnN1YnN0cmluZyg0LCA2KSkgLSAxLFxuXHRcdFx0XHRwYXJzZUludChzdHIuc3Vic3RyaW5nKDYsIDgpKSxcblx0XHRcdFx0MCwgMCwgMCwgMFxuXHRcdFx0KSk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKHN0ci5sZW5ndGggPT0gNCB8fCBzdHIubGVuZ3RoID09IDMpIHtcblx0XHRcdC8vIFBhZCB3aXRoIDBzXG5cdFx0XHRpZiAoc3RyLmxlbmd0aCA9PSAzKSB7XG5cdFx0XHRcdHN0ciA9IChcIjAwMDBcIiArIHN0cikuc3Vic3RyKC00LCA0KTtcblx0XHRcdH1cblx0XHRcdGxldCB0b2RheSA9IG5ldyBEYXRlKCk7XG5cdFx0XHR0b2RheS5zZXRVVENIb3VycyhwYXJzZUludChzdHIuc3Vic3RyaW5nKDAsIDIpKSwgcGFyc2VJbnQoc3RyLnN1YnN0cmluZygyLCA0KSksIDAsIDApO1xuXHRcdFx0cmV0dXJuIHRvZGF5O1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG5pbnRlcmZhY2UgRGFuaXNoT2JzZXJ2YXRpb25QYXlsb2FkcyB7XG5cdFtrZXk6IHN0cmluZ106IERhbmlzaE9ic2VydmF0aW9uUGF5bG9hZDtcbn1cblxuaW50ZXJmYWNlIERhbmlzaE9ic2VydmF0aW9uRGF0YSB7XG5cdC8qKiBsYXN0IG9ic2VydmF0aW9ucyBhc2NlbmRpbmcgKGxhc3QgaXMgZnJlc2hlc3QpLCBDICovXG5cdFRlbXBlcmF0dXJlMm0/OiBudW1iZXI7XG5cdC8qKiBsYXN0IG9ic2VydmF0aW9ucyBhc2NlbmRpbmcgKGxhc3QgaXMgZnJlc2hlc3QpLCAlICovXG5cdFJlbGF0aXZlSHVtaWRpdHk/OiBudW1iZXI7XG5cdC8qKiBtbT8gKi9cblx0UHJlY0Ftb3VudDEwTWluPzogbnVtYmVyO1xuXHRQcmVzc3VyZU1TTD86IG51bWJlcjtcblx0V2luZERpcmVjdGlvbj86IG51bWJlcjtcblx0LyoqIG0vcz8gKi9cblx0V2luZFNwZWVkMTBtPzogbnVtYmVyO1xuXHQvKiogbS9zPyAqL1xuXHRXaW5kR3VzdExhc3QxME1pbj86IG51bWJlcjtcblx0c3ltYm9sPzogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgRGFuaXNoT2JzZXJ2YXRpb25QYXlsb2FkIHtcblx0bmFtZTogc3RyaW5nO1xuXHRsYXRpdHVkZTogbnVtYmVyO1xuXHRsb25naXR1ZGU6IG51bWJlcjtcblx0LyoqIGRpc3RhbmNlIGZyb20gdXNlcidzIGxvY2F0aW9uIGluIG1ldHJlcywgY2FsY3VsYXRlZCBhZnRlciBvYnRhaW5pbmcgKi9cblx0ZGlzdD86IG51bWJlcjtcblx0dGltZTogc3RyaW5nO1xuXHR2YWx1ZXM6IERhbmlzaE9ic2VydmF0aW9uRGF0YVxufVxuXG5pbnRlcmZhY2UgRGFuaXNoTUlQYXlsb2FkIHtcblx0aWQ6IHN0cmluZztcblx0Y2l0eTogc3RyaW5nO1xuXHRjb3VudHJ5OiBzdHJpbmc7XG5cdGxvbmdpdHVkZTogbnVtYmVyO1xuXHRsYXRpdHVkZTogbnVtYmVyO1xuXHR0aW1lem9uZTogc3RyaW5nO1xuXHQvKiogZGF0ZSBmb3JtYXQgaW4gWVlZWU1NRERISE1NU1MgKi9cblx0bGFzdHVwZGF0ZTogc3RyaW5nO1xuXHQvKiogSE1NICovXG5cdHN1bnJpc2U6IHN0cmluZztcblx0LyoqIEhNTSAqL1xuXHRzdW5zZXQ6IHN0cmluZztcblx0dGltZXNlcmllOiBEYW5pc2hNSUhvdXJseVBheWxvYWRbXTtcblx0YWdnRGF0YTogRGFuaXNoTUlEYWlseVBheWxvYWRbXTtcbn1cblxuLyoqIHNub3cgfCBzbGVldCB8IHJhaW4gKi9cbnR5cGUgRGFuaXNoUHJlY2lwVHlwZSA9IFwic25lXCIgfCBcInNsdWRcIiB8IFwicmVnblwiO1xuXG5pbnRlcmZhY2UgRGFuaXNoTUlIb3VybHlQYXlsb2FkIHtcblx0LyoqIGRhdGUgZm9ybWF0IGluIFlZWVlNTURESEhNTVNTICovXG5cdHRpbWU6IHN0cmluZztcblx0LyoqIEMgKi9cblx0dGVtcDogbnVtYmVyO1xuXHRzeW1ib2w6IG51bWJlcjtcblx0cHJlY2lwMTogbnVtYmVyO1xuXHRwcmVjaXBUeXBlPzogRGFuaXNoUHJlY2lwVHlwZTtcblx0d2luZERpcjogc3RyaW5nO1xuXHR3aW5kRGVncmVlOiBudW1iZXI7XG5cdC8qKiBtL3M/PyAqL1xuXHR3aW5kU3BlZWQ6IG51bWJlcjtcblx0LyoqIG0vcz8/ICovXG5cdHdpbmRHdXN0OiBudW1iZXI7XG5cdC8qKiAlICovXG5cdGh1bWlkaXR5OiBudW1iZXI7XG5cdC8qKiBoUGEgKi9cblx0cHJlc3N1cmU6IG51bWJlcjtcblx0LyoqIG0/LCBvbmx5IGluIHRoZSBmaXJzdCA0OCBpdGVtcyAqL1xuXHR2aXNpYmlsaXR5PzogbnVtYmVyO1xuXHRwcmVjaXAzOiBudW1iZXI7XG5cdHByZWNpcDY6IG51bWJlcjtcblx0LyoqIE9ubHkgaW4gdGhlIGZpcnN0IDQ4IGl0ZW1zICovXG5cdHRlbXAxMD86IG51bWJlcjtcblx0LyoqIE9ubHkgaW4gdGhlIGZpcnN0IDQ4IGl0ZW1zICovXG5cdHRlbXA1MD86IG51bWJlcjtcblx0LyoqIE9ubHkgaW4gdGhlIGZpcnN0IDQ4IGl0ZW1zICovXG5cdHRlbXA5MD86IG51bWJlcjtcblx0LyoqIE9ubHkgaW4gdGhlIGZpcnN0IDQ4IGl0ZW1zICovXG5cdHByZWMxMD86IG51bWJlcjtcblx0LyoqIE9ubHkgaW4gdGhlIGZpcnN0IDQ4IGl0ZW1zICovXG5cdHByZWM1MD86IG51bWJlcjtcblx0LyoqIE9ubHkgaW4gdGhlIGZpcnN0IDQ4IGl0ZW1zICovXG5cdHByZWM3NT86IG51bWJlcjtcblx0LyoqIE9ubHkgaW4gdGhlIGZpcnN0IDQ4IGl0ZW1zICovXG5cdHByZWM5MD86IG51bWJlcjtcblx0LyoqIE9ubHkgaW4gdGhlIGZpcnN0IDQ4IGl0ZW1zICovXG5cdHdpbmRzcGVlZDEwPzogbnVtYmVyO1xuXHQvKiogT25seSBpbiB0aGUgZmlyc3QgNDggaXRlbXMgKi9cblx0d2luZHNwZWVkNTA/OiBudW1iZXI7XG5cdC8qKiBPbmx5IGluIHRoZSBmaXJzdCA0OCBpdGVtcyAqL1xuXHR3aW5kc3BlZWQ5MD86IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIERhbmlzaE1JRGFpbHlQYXlsb2FkIHtcblx0LyoqIFlZWVlNTUREIGZvcm1hdCAqL1xuXHR0aW1lOiBzdHJpbmc7XG5cdC8qKiBDICovXG5cdG1pblRlbXA6IG51bWJlcjtcblx0LyoqIEMgKi9cblx0bWVhblRlbXA6IG51bWJlclxuXHQvKiogQyAqL1xuXHRtYXhUZW1wOiBudW1iZXI7XG5cdHByZWNpcFN1bTogbnVtYmVyO1xuXHR1dlJhZGlhdGlvbjogbnVtYmVyO1xufSIsIlxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gV2VhdGhlciBBcHBsZXRcbi8vXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBXZWF0aGVyTG9vcCB9IGZyb20gXCIuL2xvb3BcIjtcbmltcG9ydCB7IE1ldFVrIH0gZnJvbSBcIi4vcHJvdmlkZXJzL21ldF91a1wiO1xuaW1wb3J0IHsgV2VhdGhlckRhdGEsIFdlYXRoZXJQcm92aWRlciwgTG9jYXRpb25EYXRhLCBBcHBsZXRFcnJvciwgQ3VzdG9tSWNvbnMsIE5pY2VFcnJvckRldGFpbCwgUmVmcmVzaFN0YXRlLCBCdWlsdGluSWNvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgVUkgfSBmcm9tIFwiLi91aVwiO1xuaW1wb3J0IHsgQXdhcmVEYXRlU3RyaW5nLCBDYXBpdGFsaXplRmlyc3RMZXR0ZXIsIEdlbmVyYXRlTG9jYXRpb25UZXh0LCBOb3RFbXB0eSwgUHJvY2Vzc0NvbmRpdGlvbiwgVGVtcFRvVXNlckNvbmZpZywgVW5pdFRvVW5pY29kZSwgV2VhdGhlckljb25TYWZlbHksIF8gfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgRGFya1NreSB9IGZyb20gXCIuL3Byb3ZpZGVycy9kYXJrU2t5XCI7XG5pbXBvcnQgeyBPcGVuV2VhdGhlck1hcCB9IGZyb20gXCIuL3Byb3ZpZGVycy9vcGVuV2VhdGhlck1hcFwiO1xuaW1wb3J0IHsgVVNXZWF0aGVyIH0gZnJvbSBcIi4vcHJvdmlkZXJzL3VzX3dlYXRoZXJcIjtcbmltcG9ydCB7IFdlYXRoZXJiaXQgfSBmcm9tIFwiLi9wcm92aWRlcnMvd2VhdGhlcmJpdFwiO1xuaW1wb3J0IHsgTWV0Tm9yd2F5IH0gZnJvbSBcIi4vcHJvdmlkZXJzL21ldF9ub3J3YXlcIjtcbmltcG9ydCB7IEh0dHBMaWIsIEh0dHBFcnJvciwgTWV0aG9kLCBIVFRQUGFyYW1zIH0gZnJvbSBcIi4vbGliL2h0dHBMaWJcIjtcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuL2xpYi9sb2dnZXJcIjtcbmltcG9ydCB7IEFQUExFVF9JQ09OLCBSRUZSRVNIX0lDT04gfSBmcm9tIFwiLi9jb25zdHNcIjtcbmltcG9ydCB7IFZpc3VhbENyb3NzaW5nIH0gZnJvbSBcIi4vcHJvdmlkZXJzL3Zpc3VhbGNyb3NzaW5nXCI7XG5pbXBvcnQgeyBDbGltYWNlbGxWNCB9IGZyb20gXCIuL3Byb3ZpZGVycy9jbGltYWNlbGxWNFwiO1xuaW1wb3J0IHsgRGFuaXNoTUkgfSBmcm9tIFwiLi9wcm92aWRlcnMvZGFuaXNoTUlcIjtcblxuY29uc3QgeyBUZXh0SWNvbkFwcGxldCwgQWxsb3dlZExheW91dCwgTWVudUl0ZW0gfSA9IGltcG9ydHMudWkuYXBwbGV0O1xuY29uc3QgeyBzcGF3bkNvbW1hbmRMaW5lIH0gPSBpbXBvcnRzLm1pc2MudXRpbDtcbmNvbnN0IHsgSWNvblR5cGUsIFNpZGUgfSA9IGltcG9ydHMuZ2kuU3Q7XG5cbmV4cG9ydCBjbGFzcyBXZWF0aGVyQXBwbGV0IGV4dGVuZHMgVGV4dEljb25BcHBsZXQge1xuXHRwcml2YXRlIHJlYWRvbmx5IGxvb3A6IFdlYXRoZXJMb29wO1xuXHRwcml2YXRlIGxvY2sgPSBmYWxzZTtcblx0cHJpdmF0ZSByZWZyZXNoVHJpZ2dlcmVkV2hpbGVMb2NrZWQgPSBmYWxzZTtcblxuXHQvKiogQ2hvc2VuIEFQSSAqL1xuXHRwcml2YXRlIHByb3ZpZGVyOiBXZWF0aGVyUHJvdmlkZXI7XG5cblx0cHJpdmF0ZSBvcmllbnRhdGlvbjogaW1wb3J0cy5naS5TdC5TaWRlO1xuXHRwdWJsaWMgZ2V0IE9yaWVudGF0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9yaWVudGF0aW9uO1xuXHR9XG5cblx0LyoqIFJ1bm5pbmcgYXBwbGV0J3MgcGF0aCAqL1xuXHRwdWJsaWMgcmVhZG9ubHkgQXBwbGV0RGlyOiBzdHJpbmc7XG5cdHB1YmxpYyByZWFkb25seSBjb25maWc6IENvbmZpZztcblx0cHVibGljIHJlYWRvbmx5IHVpOiBVSTtcblxuXHQvKiogVXNlZCBmb3IgZXJyb3IgaGFuZGxpbmcsIGZpcnN0IGVycm9yIGNhbGxzIGZsaXBzIGl0XG5cdCAqIHRvIHByZXZlbnRzIGRpc3BsYXlpbmcgb3RoZXIgZXJyb3JzIGluIHRoZSBjdXJyZW50IGxvb3AuXG5cdCAqL1xuXHRwdWJsaWMgZW5jb3VudGVyZWRFcnJvcjogYm9vbGVhbiA9IGZhbHNlO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihtZXRhZGF0YTogYW55LCBvcmllbnRhdGlvbjogaW1wb3J0cy5naS5TdC5TaWRlLCBwYW5lbEhlaWdodDogbnVtYmVyLCBpbnN0YW5jZUlkOiBudW1iZXIpIHtcblx0XHRzdXBlcihvcmllbnRhdGlvbiwgcGFuZWxIZWlnaHQsIGluc3RhbmNlSWQpO1xuXHRcdHRoaXMuQXBwbGV0RGlyID0gbWV0YWRhdGEucGF0aDtcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJBcHBsZXQgY3JlYXRlZCB3aXRoIGluc3RhbmNlSUQgXCIgKyBpbnN0YW5jZUlkKTtcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJBcHBsZXREaXIgaXM6IFwiICsgdGhpcy5BcHBsZXREaXIpO1xuXG5cdFx0dGhpcy5TZXRBcHBsZXRPblBhbmVsKCk7XG5cdFx0dGhpcy5jb25maWcgPSBuZXcgQ29uZmlnKHRoaXMsIGluc3RhbmNlSWQpO1xuXHRcdHRoaXMuQWRkUmVmcmVzaEJ1dHRvbigpO1xuXHRcdHRoaXMuRW5zdXJlUHJvdmlkZXIoKTtcblx0XHR0aGlzLnVpID0gbmV3IFVJKHRoaXMsIG9yaWVudGF0aW9uKTtcblx0XHR0aGlzLnVpLlJlYnVpbGQodGhpcy5jb25maWcpO1xuXHRcdHRoaXMubG9vcCA9IG5ldyBXZWF0aGVyTG9vcCh0aGlzLCBpbnN0YW5jZUlkKTtcblxuXHRcdHRoaXMub3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcblx0XHR0cnkge1xuXHRcdFx0dGhpcy5zZXRBbGxvd2VkTGF5b3V0KEFsbG93ZWRMYXlvdXQuQk9USCk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Ly8gdmVydGljYWwgcGFuZWwgbm90IHN1cHBvcnRlZFxuXHRcdH1cblx0XHR0aGlzLmxvb3AuU3RhcnQoKTtcblx0fVxuXG5cdHB1YmxpYyBMb2NrZWQoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMubG9jaztcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyBRdWV1ZXMgYSByZWZyZXNoIGlmIGlmIHJlZnJlc2ggd2FzIHRyaWdnZXJlZCB3aGlsZSBsb2NrZWQuXG5cdCAqL1xuXHRwdWJsaWMgUmVmcmVzaEFuZFJlYnVpbGQodGhpczogV2VhdGhlckFwcGxldCwgbG9jPzogTG9jYXRpb25EYXRhKTogdm9pZCB7XG5cdFx0dGhpcy5sb29wLlJlc3VtZSgpO1xuXHRcdGlmICh0aGlzLkxvY2tlZCgpKSB7XG5cdFx0XHR0aGlzLnJlZnJlc2hUcmlnZ2VyZWRXaGlsZUxvY2tlZCA9IHRydWU7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuUmVmcmVzaFdlYXRoZXIodHJ1ZSwgbG9jKTtcblx0fTtcblxuXHQvKipcblx0ICogTWFpbiBmdW5jdGlvbiBwdWxsaW5nIGFuZCByZWZyZXNoaW5nIGRhdGFcblx0ICogQHBhcmFtIHJlYnVpbGQgXG5cdCAqL1xuXHRwdWJsaWMgYXN5bmMgUmVmcmVzaFdlYXRoZXIodGhpczogV2VhdGhlckFwcGxldCwgcmVidWlsZDogYm9vbGVhbiwgbG9jYXRpb24/OiBMb2NhdGlvbkRhdGEpOiBQcm9taXNlPFJlZnJlc2hTdGF0ZT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAodGhpcy5sb2NrKSB7XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5QcmludChcIlJlZnJlc2hpbmcgaW4gcHJvZ3Jlc3MsIHJlZnJlc2ggc2tpcHBlZC5cIik7XG5cdFx0XHRcdHJldHVybiBSZWZyZXNoU3RhdGUuTG9ja2VkO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmxvY2sgPSB0cnVlO1xuXHRcdFx0dGhpcy5lbmNvdW50ZXJlZEVycm9yID0gZmFsc2U7XG5cblx0XHRcdGlmICghbG9jYXRpb24pIHtcblx0XHRcdFx0bG9jYXRpb24gPSBhd2FpdCB0aGlzLmNvbmZpZy5FbnN1cmVMb2NhdGlvbigpO1xuXHRcdFx0XHRpZiAoIWxvY2F0aW9uKSB7XG5cdFx0XHRcdFx0dGhpcy5VbmxvY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gUmVmcmVzaFN0YXRlLkVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuRW5zdXJlUHJvdmlkZXIoKTtcblx0XHRcdC8vIE5vIGtleVxuXHRcdFx0aWYgKHRoaXMucHJvdmlkZXIubmVlZHNBcGlLZXkgJiYgdGhpcy5jb25maWcuTm9BcGlLZXkoKSkge1xuXHRcdFx0XHRMb2cuSW5zdGFuY2UuRXJyb3IoXCJObyBBUEkgS2V5IGdpdmVuXCIpO1xuXHRcdFx0XHR0aGlzLlNob3dFcnJvcih7XG5cdFx0XHRcdFx0dHlwZTogXCJoYXJkXCIsXG5cdFx0XHRcdFx0dXNlckVycm9yOiB0cnVlLFxuXHRcdFx0XHRcdGRldGFpbDogXCJubyBrZXlcIixcblx0XHRcdFx0XHRtZXNzYWdlOiBfKFwiVGhpcyBwcm92aWRlciByZXF1aXJlcyBhbiBBUEkga2V5IHRvIG9wZXJhdGVcIilcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdFx0bGV0IHdlYXRoZXJJbmZvID0gYXdhaXQgdGhpcy5wcm92aWRlci5HZXRXZWF0aGVyKGxvY2F0aW9uKTtcblx0XHRcdGlmICh3ZWF0aGVySW5mbyA9PSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuVW5sb2NrKCk7XG5cdFx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIkNvdWxkIG5vdCByZWZyZXNoIHdlYXRoZXIsIGRhdGEgY291bGQgbm90IGJlIG9idGFpbmVkLlwiKTtcblx0XHRcdFx0dGhpcy5TaG93RXJyb3Ioe1xuXHRcdFx0XHRcdHR5cGU6IFwiaGFyZFwiLFxuXHRcdFx0XHRcdGRldGFpbDogXCJubyBhcGkgcmVzcG9uc2VcIixcblx0XHRcdFx0XHRtZXNzYWdlOiBcIkFQSSBkaWQgbm90IHJldHVybiBkYXRhXCJcblx0XHRcdFx0fSlcblx0XHRcdFx0cmV0dXJuIFJlZnJlc2hTdGF0ZS5GYWlsdXJlO1xuXHRcdFx0fVxuXG5cdFx0XHR3ZWF0aGVySW5mbyA9IHRoaXMuTWVyZ2VXZWF0aGVyRGF0YSh3ZWF0aGVySW5mbywgbG9jYXRpb24pO1xuXHRcdFx0dGhpcy5jb25maWcuVGltZXpvbmUgPSB3ZWF0aGVySW5mby5sb2NhdGlvbi50aW1lWm9uZTtcblxuXHRcdFx0aWYgKHJlYnVpbGQpIHRoaXMudWkuUmVidWlsZCh0aGlzLmNvbmZpZyk7XG5cdFx0XHRpZiAoIXRoaXMudWkuRGlzcGxheSh3ZWF0aGVySW5mbywgdGhpcy5jb25maWcsIHRoaXMucHJvdmlkZXIpIHx8XG5cdFx0XHRcdCF0aGlzLkRpc3BsYXlXZWF0aGVyKHdlYXRoZXJJbmZvKSkge1xuXHRcdFx0XHR0aGlzLlVubG9jaygpO1xuXHRcdFx0XHRyZXR1cm4gUmVmcmVzaFN0YXRlLkZhaWx1cmU7XG5cdFx0XHR9XG5cblx0XHRcdExvZy5JbnN0YW5jZS5QcmludChcIldlYXRoZXIgSW5mb3JtYXRpb24gcmVmcmVzaGVkXCIpO1xuXHRcdFx0dGhpcy5sb29wLlJlc2V0RXJyb3JDb3VudCgpO1xuXHRcdFx0dGhpcy5VbmxvY2soKTtcblx0XHRcdHJldHVybiBSZWZyZXNoU3RhdGUuU3VjY2Vzcztcblx0XHR9XG5cdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdExvZy5JbnN0YW5jZS5FcnJvcihcIkdlbmVyaWMgRXJyb3Igd2hpbGUgcmVmcmVzaGluZyBXZWF0aGVyIGluZm86IFwiICsgZSArIFwiLCBcIiwgZSk7XG5cdFx0XHR0aGlzLlNob3dFcnJvcih7IHR5cGU6IFwiaGFyZFwiLCBkZXRhaWw6IFwidW5rbm93blwiLCBtZXNzYWdlOiBfKFwiVW5leHBlY3RlZCBFcnJvciBXaGlsZSBSZWZyZXNoaW5nIFdlYXRoZXIsIHBsZWFzZSBzZWUgbG9nIGluIExvb2tpbmcgR2xhc3NcIikgfSk7XG5cdFx0XHR0aGlzLlVubG9jaygpO1xuXHRcdFx0cmV0dXJuIFJlZnJlc2hTdGF0ZS5GYWlsdXJlO1xuXHRcdH1cblx0fVxuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyBQYW5lbCBTZXQgaGVscGVycyBoZWxwZXJzXG5cblx0LyoqIERpc3BsYXlzIHdlYXRoZXIgaW5mbyBpbiBhcHBsZXQncyBwYW5lbCAqL1xuXHRwcml2YXRlIERpc3BsYXlXZWF0aGVyKHdlYXRoZXI6IFdlYXRoZXJEYXRhKTogYm9vbGVhbiB7XG5cdFx0bGV0IGxvY2F0aW9uID0gR2VuZXJhdGVMb2NhdGlvblRleHQod2VhdGhlciwgdGhpcy5jb25maWcpO1xuXG5cdFx0bGV0IGxhc3RVcGRhdGVkVGltZSA9IEF3YXJlRGF0ZVN0cmluZyh3ZWF0aGVyLmRhdGUsIHRoaXMuY29uZmlnLmN1cnJlbnRMb2NhbGUsIHRoaXMuY29uZmlnLl9zaG93MjRIb3Vycyk7XG5cdFx0dGhpcy5TZXRBcHBsZXRUb29sdGlwKGAke2xvY2F0aW9ufSAtICR7XyhcIkFzIG9mIHtsYXN0VXBkYXRlZFRpbWV9XCIsIHsgXCJsYXN0VXBkYXRlZFRpbWVcIjogbGFzdFVwZGF0ZWRUaW1lIH0pfWApO1xuXHRcdHRoaXMuRGlzcGxheVdlYXRoZXJPbkxhYmVsKHdlYXRoZXIudGVtcGVyYXR1cmUsIHdlYXRoZXIuY29uZGl0aW9uLmRlc2NyaXB0aW9uKTtcblx0XHR0aGlzLlNldEFwcGxldEljb24od2VhdGhlci5jb25kaXRpb24uaWNvbnMsIHdlYXRoZXIuY29uZGl0aW9uLmN1c3RvbUljb24pO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cHJpdmF0ZSBEaXNwbGF5V2VhdGhlck9uTGFiZWwodGVtcGVyYXR1cmU6IG51bWJlciwgbWFpbkNvbmRpdGlvbjogc3RyaW5nKSB7XG5cdFx0bWFpbkNvbmRpdGlvbiA9IENhcGl0YWxpemVGaXJzdExldHRlcihtYWluQ29uZGl0aW9uKVxuXHRcdC8vIEFwcGxldCBwYW5lbCBsYWJlbFxuXHRcdGxldCBsYWJlbCA9IFwiXCI7XG5cdFx0Ly8gSG9yaXpvbnRhbCBwYW5lbHNcblx0XHRpZiAodGhpcy5PcmllbnRhdGlvbiAhPSBTaWRlLkxFRlQgJiYgdGhpcy5PcmllbnRhdGlvbiAhPSBTaWRlLlJJR0hUKSB7XG5cdFx0XHRpZiAodGhpcy5jb25maWcuX3Nob3dDb21tZW50SW5QYW5lbCkge1xuXHRcdFx0XHRsYWJlbCArPSBtYWluQ29uZGl0aW9uO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuY29uZmlnLl9zaG93VGV4dEluUGFuZWwpIHtcblx0XHRcdFx0aWYgKGxhYmVsICE9IFwiXCIpIHtcblx0XHRcdFx0XHRsYWJlbCArPSBcIiBcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsYWJlbCArPSBUZW1wVG9Vc2VyQ29uZmlnKHRlbXBlcmF0dXJlLCB0aGlzLmNvbmZpZyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIFZlcnRpY2FsIHBhbmVsc1xuXHRcdGVsc2Uge1xuXHRcdFx0aWYgKHRoaXMuY29uZmlnLl9zaG93VGV4dEluUGFuZWwpIHtcblx0XHRcdFx0bGFiZWwgPSBUZW1wVG9Vc2VyQ29uZmlnKHRlbXBlcmF0dXJlLCB0aGlzLmNvbmZpZywgZmFsc2UpO1xuXHRcdFx0XHQvLyBWZXJ0aWNhbCBwYW5lbCB3aWR0aCBpcyBtb3JlIHRoYW4gdGhpcyB2YWx1ZSB0aGVuIHdlIGhhcyBzcGFjZVxuXHRcdFx0XHQvLyB0byBzaG93IHVuaXRzXG5cdFx0XHRcdGlmICh0aGlzLkdldFBhbmVsSGVpZ2h0KCkgPj0gMzUpIHtcblx0XHRcdFx0XHRsYWJlbCArPSBVbml0VG9Vbmljb2RlKHRoaXMuY29uZmlnLlRlbXBlcmF0dXJlVW5pdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPdmVycmlkaW5nIHRlbXBlcmF0dXJlIHBhbmVsIGxhYmVsXG5cdFx0aWYgKE5vdEVtcHR5KHRoaXMuY29uZmlnLl90ZW1wVGV4dE92ZXJyaWRlKSkge1xuXHRcdFx0bGFiZWwgPSB0aGlzLmNvbmZpZy5fdGVtcFRleHRPdmVycmlkZVxuXHRcdFx0XHQucmVwbGFjZShcInt0fVwiLCBUZW1wVG9Vc2VyQ29uZmlnKHRlbXBlcmF0dXJlLCB0aGlzLmNvbmZpZywgZmFsc2UpKVxuXHRcdFx0XHQucmVwbGFjZShcInt1fVwiLCBVbml0VG9Vbmljb2RlKHRoaXMuY29uZmlnLlRlbXBlcmF0dXJlVW5pdCkpXG5cdFx0XHRcdC5yZXBsYWNlKFwie2N9XCIsIG1haW5Db25kaXRpb24pO1xuXHRcdH1cblxuXHRcdHRoaXMuU2V0QXBwbGV0TGFiZWwobGFiZWwpO1xuXHR9XG5cblx0cHJpdmF0ZSBTZXRBcHBsZXRUb29sdGlwKG1zZzogc3RyaW5nKSB7XG5cdFx0dGhpcy5zZXRfYXBwbGV0X3Rvb2x0aXAobXNnKTtcblx0fVxuXG5cdHByaXZhdGUgU2V0QXBwbGV0SWNvbihpY29uTmFtZXM6IEJ1aWx0aW5JY29uc1tdLCBjdXN0b21JY29uOiBDdXN0b21JY29ucykge1xuXHRcdGlmICh0aGlzLmNvbmZpZy5fdXNlQ3VzdG9tQXBwbGV0SWNvbnMpIHtcblx0XHRcdHRoaXMuU2V0Q3VzdG9tSWNvbihjdXN0b21JY29uKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRsZXQgaWNvbiA9IFdlYXRoZXJJY29uU2FmZWx5KGljb25OYW1lcywgdGhpcy5jb25maWcuQXBwbGV0SWNvblR5cGUpO1xuXHRcdFx0dGhpcy5jb25maWcuQXBwbGV0SWNvblR5cGUgPT0gSWNvblR5cGUuU1lNQk9MSUMgP1xuXHRcdFx0XHR0aGlzLnNldF9hcHBsZXRfaWNvbl9zeW1ib2xpY19uYW1lKGljb24pIDpcblx0XHRcdFx0dGhpcy5zZXRfYXBwbGV0X2ljb25fbmFtZShpY29uKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIFNldEFwcGxldExhYmVsKGxhYmVsOiBzdHJpbmcpIHtcblx0XHR0aGlzLnNldF9hcHBsZXRfbGFiZWwobGFiZWwpO1xuXHR9XG5cblx0cHJpdmF0ZSBHZXRQYW5lbEhlaWdodCgpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLnBhbmVsLmhlaWdodDtcblx0fVxuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyBVSSBoZWxwZXJzXG5cblx0cHVibGljIEdldE1heEZvcmVjYXN0RGF5cygpOiBudW1iZXIge1xuXHRcdGlmICghdGhpcy5wcm92aWRlcikgcmV0dXJuIHRoaXMuY29uZmlnLl9mb3JlY2FzdERheXM7XG5cdFx0cmV0dXJuIE1hdGgubWluKHRoaXMuY29uZmlnLl9mb3JlY2FzdERheXMsIHRoaXMucHJvdmlkZXIubWF4Rm9yZWNhc3RTdXBwb3J0KTtcblx0fVxuXG5cdHB1YmxpYyBHZXRNYXhIb3VybHlGb3JlY2FzdHMoKTogbnVtYmVyIHtcblx0XHRpZiAoIXRoaXMucHJvdmlkZXIpIHJldHVybiB0aGlzLmNvbmZpZy5fZm9yZWNhc3RIb3Vycztcblx0XHRyZXR1cm4gTWF0aC5taW4odGhpcy5jb25maWcuX2ZvcmVjYXN0SG91cnMsIHRoaXMucHJvdmlkZXIubWF4SG91cmx5Rm9yZWNhc3RTdXBwb3J0KTtcblx0fVxuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyBJTyBIZWxwZXJzXG5cblx0LyoqXG5cdCAqIExvYWRzIEpTT04gcmVzcG9uc2UgZnJvbSBzcGVjaWZpZWQgVVJMc1xuXHQgKiBAcGFyYW0gdXJsIFVSTCB3aXRob3V0IHBhcmFtc1xuXHQgKiBAcGFyYW0gcGFyYW1zIHBhcmFtIG9iamVjdFxuXHQgKiBAcGFyYW0gSGFuZGxlRXJyb3Igc2hvdWxkIHJldHVybiB0cnVlIGlmIHlvdSB3YW50IHRoaXMgZnVuY3Rpb24gdG8gaGFuZGxlIGVycm9ycywgZWxzZSBmYWxzZVxuXHQgKiBAcGFyYW0gbWV0aG9kIGRlZmF1bHQgaXMgR0VUXG5cdCAqL1xuXHRwdWJsaWMgYXN5bmMgTG9hZEpzb25Bc3luYzxUPih0aGlzOiBXZWF0aGVyQXBwbGV0LCB1cmw6IHN0cmluZywgcGFyYW1zPzogSFRUUFBhcmFtcywgSGFuZGxlRXJyb3I/OiAobWVzc2FnZTogSHR0cEVycm9yKSA9PiBib29sZWFuLCBtZXRob2Q6IE1ldGhvZCA9IFwiR0VUXCIpOiBQcm9taXNlPFQ+IHtcblx0XHRsZXQgcmVzcG9uc2UgPSBhd2FpdCBIdHRwTGliLkluc3RhbmNlLkxvYWRKc29uQXN5bmM8VD4odXJsLCBwYXJhbXMsIG1ldGhvZCk7XG5cblx0XHRpZiAoIXJlc3BvbnNlLlN1Y2Nlc3MpIHtcblx0XHRcdC8vIGNoZWNrIGlmIGNhbGxlciB3YW50c1xuXHRcdFx0aWYgKCEhSGFuZGxlRXJyb3IgJiYgIUhhbmRsZUVycm9yKHJlc3BvbnNlLkVycm9yRGF0YSkpXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHRoaXMuSGFuZGxlSFRUUEVycm9yKHJlc3BvbnNlLkVycm9yRGF0YSk7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXNwb25zZS5EYXRhO1xuXHR9XG5cblx0LyoqXG5cdCAqIExvYWRzIHJlc3BvbnNlIGZyb20gc3BlY2lmaWVkIFVSTHNcblx0ICogQHBhcmFtIHVybCBVUkwgd2l0aG91dCBwYXJhbXNcblx0ICogQHBhcmFtIHBhcmFtcyBwYXJhbSBvYmplY3Rcblx0ICogQHBhcmFtIEhhbmRsZUVycm9yIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiB5b3Ugd2FudCB0aGlzIGZ1bmN0aW9uIHRvIGhhbmRsZSBlcnJvcnMsIGVsc2UgZmFsc2Vcblx0ICogQHBhcmFtIG1ldGhvZCBkZWZhdWx0IGlzIEdFVFxuXHQgKi9cblx0XHQgcHVibGljIGFzeW5jIExvYWRBc3luYyh0aGlzOiBXZWF0aGVyQXBwbGV0LCB1cmw6IHN0cmluZywgcGFyYW1zPzogSFRUUFBhcmFtcywgSGFuZGxlRXJyb3I/OiAobWVzc2FnZTogSHR0cEVycm9yKSA9PiBib29sZWFuLCBtZXRob2Q6IE1ldGhvZCA9IFwiR0VUXCIpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdFx0bGV0IHJlc3BvbnNlID0gYXdhaXQgSHR0cExpYi5JbnN0YW5jZS5Mb2FkQXN5bmModXJsLCBwYXJhbXMsIG1ldGhvZCk7XG5cdFxuXHRcdFx0aWYgKCFyZXNwb25zZS5TdWNjZXNzKSB7XG5cdFx0XHRcdC8vIGNoZWNrIGlmIGNhbGxlciB3YW50c1xuXHRcdFx0XHRpZiAoISFIYW5kbGVFcnJvciAmJiAhSGFuZGxlRXJyb3IocmVzcG9uc2UuRXJyb3JEYXRhKSlcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5IYW5kbGVIVFRQRXJyb3IocmVzcG9uc2UuRXJyb3JEYXRhKTtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiByZXNwb25zZS5EYXRhO1xuXHRcdH1cblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vIENvbmZpZyBDYWxsYmFja3MsIGRvIG5vdCBkZWxldGVcblxuXHRwcml2YXRlIGFzeW5jIGxvY2F0aW9uTG9va3VwKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGxldCBjb21tYW5kID0gXCJ4ZGctb3BlbiBcIjtcblx0XHRzcGF3bkNvbW1hbmRMaW5lKGNvbW1hbmQgKyBcImh0dHBzOi8vY2lubmFtb24tc3BpY2VzLmxpbnV4bWludC5jb20vYXBwbGV0cy92aWV3LzE3XCIpO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBzdWJtaXRJc3N1ZSgpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRsZXQgY29tbWFuZCA9IFwieGRnLW9wZW4gXCI7XG5cdFx0c3Bhd25Db21tYW5kTGluZShjb21tYW5kICsgXCJodHRwczovL2dpdGh1Yi5jb20vbGludXhtaW50L2Npbm5hbW9uLXNwaWNlcy1hcHBsZXRzL2lzc3Vlcy9uZXdcIik7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIHNhdmVDdXJyZW50TG9jYXRpb24oKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0dGhpcy5jb25maWcuTG9jU3RvcmUuU2F2ZUN1cnJlbnRMb2NhdGlvbih0aGlzLmNvbmZpZy5DdXJyZW50TG9jYXRpb24pO1xuXHR9XG5cblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyBBcHBsZXQgT3ZlcnJpZGVzLCBkbyBub3QgZGVsZXRlXG5cblx0LyoqIG92ZXJyaWRlIGZ1bmN0aW9uICovXG5cdHB1YmxpYyBvbl9vcmllbnRhdGlvbl9jaGFuZ2VkKG9yaWVudGF0aW9uOiBpbXBvcnRzLmdpLlN0LlNpZGUpIHtcblx0XHR0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG5cdFx0dGhpcy5SZWZyZXNoV2VhdGhlcih0cnVlKTtcblx0fTtcblxuXHQvKiogT3ZlcnJpZGUgZnVuY3Rpb24gKi9cblx0cHVibGljIG9uX2FwcGxldF9yZW1vdmVkX2Zyb21fcGFuZWwoZGVsZXRlQ29uZmlnOiBhbnkpIHtcblx0XHRMb2cuSW5zdGFuY2UuUHJpbnQoXCJSZW1vdmluZyBhcHBsZXQgaW5zdGFuY2UuLi5cIilcblx0XHR0aGlzLmxvb3AuU3RvcCgpO1xuXHR9XG5cblx0LyoqIE92ZXJyaWRlIGZ1bmN0aW9uICovXG5cdHB1YmxpYyBvbl9hcHBsZXRfY2xpY2tlZChldmVudDogYW55KTogdm9pZCB7XG5cdFx0dGhpcy51aS5Ub2dnbGUoKTtcblx0fVxuXG5cdC8qKiBPdmVycmlkZSBmdW5jdGlvbiAqL1xuXHRwdWJsaWMgb25fYXBwbGV0X21pZGRsZV9jbGlja2VkKGV2ZW50OiBhbnkpIHtcblxuXHR9XG5cblx0LyoqIE92ZXJyaWRlIGZ1bmN0aW9uICovXG5cdHB1YmxpYyBvbl9wYW5lbF9oZWlnaHRfY2hhbmdlZCgpIHtcblx0XHQvLyBJbXBsZW1lbnRlZCBieUFwcGxldHNcblx0fVxuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyBVdGlsaXRpZXNcblxuXHQvKiogU2V0IGFwcGxldCBvbiB0aGUgcGFuZWwgd2l0aCBkZWZhdWx0IHNldHRpbmdzICovXG5cdHByaXZhdGUgU2V0QXBwbGV0T25QYW5lbCgpOiB2b2lkIHtcblx0XHR0aGlzLnNldF9hcHBsZXRfaWNvbl9uYW1lKEFQUExFVF9JQ09OKTtcblx0XHR0aGlzLnNldF9hcHBsZXRfbGFiZWwoXyhcIi4uLlwiKSk7XG5cdFx0dGhpcy5zZXRfYXBwbGV0X3Rvb2x0aXAoXyhcIkNsaWNrIHRvIG9wZW5cIikpO1xuXHR9XG5cblx0cHJpdmF0ZSBVbmxvY2soKTogdm9pZCB7XG5cdFx0dGhpcy5sb2NrID0gZmFsc2U7XG5cdFx0aWYgKHRoaXMucmVmcmVzaFRyaWdnZXJlZFdoaWxlTG9ja2VkKSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuUHJpbnQoXCJSZWZyZXNoaW5nIHRyaWdnZXJlZCBieSBjb25maWcgY2hhbmdlIHdoaWxlIHJlZnJlc2hpbmcsIHN0YXJ0aW5nIG5vdy4uLlwiKTtcblx0XHRcdHRoaXMucmVmcmVzaFRyaWdnZXJlZFdoaWxlTG9ja2VkID0gZmFsc2U7XG5cdFx0XHR0aGlzLlJlZnJlc2hBbmRSZWJ1aWxkKCk7XG5cdFx0fVxuXG5cdH1cblxuXHQvKiogSW50byByaWdodC1jbGljayBjb250ZXh0IG1lbnUgKi9cblx0cHJpdmF0ZSBBZGRSZWZyZXNoQnV0dG9uKCk6IHZvaWQge1xuXHRcdGxldCBpdGVtTGFiZWwgPSBfKFwiUmVmcmVzaFwiKVxuXHRcdC8vICgpID0+IGZ1bmN0aW9ucyBkbyBub3QgbmVlZCB0byBiaW5kIGNvbnRleHRcblx0XHRsZXQgcmVmcmVzaE1lbnVJdGVtID0gbmV3IE1lbnVJdGVtKGl0ZW1MYWJlbCwgUkVGUkVTSF9JQ09OLCAoKSA9PiB0aGlzLlJlZnJlc2hBbmRSZWJ1aWxkKCkpO1xuXHRcdHRoaXMuX2FwcGxldF9jb250ZXh0X21lbnUuYWRkTWVudUl0ZW0ocmVmcmVzaE1lbnVJdGVtKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIGdlbmVyYWwgZXJyb3JzIGZyb20gSFRUUExpYlxuXHQgKiBAcGFyYW0gZXJyb3IgXG5cdCAqL1xuXHRwcml2YXRlIEhhbmRsZUhUVFBFcnJvcihlcnJvcjogSHR0cEVycm9yKTogdm9pZCB7XG5cdFx0bGV0IGFwcGxldEVycm9yOiBBcHBsZXRFcnJvciA9IHtcblx0XHRcdGRldGFpbDogZXJyb3IubWVzc2FnZSxcblx0XHRcdHVzZXJFcnJvcjogZmFsc2UsXG5cdFx0XHRjb2RlOiBlcnJvci5jb2RlLFxuXHRcdFx0bWVzc2FnZTogdGhpcy5lcnJNc2dbZXJyb3IubWVzc2FnZV0sXG5cdFx0XHR0eXBlOiBcInNvZnRcIlxuXHRcdH07XG5cblx0XHRzd2l0Y2ggKGVycm9yLm1lc3NhZ2UpIHtcblx0XHRcdGNhc2UgXCJiYWQgc3RhdHVzIGNvZGVcIjpcblx0XHRcdGNhc2UgXCJ1bmtub3duXCI6XG5cdFx0XHRcdGFwcGxldEVycm9yLnR5cGUgPSBcImhhcmRcIlxuXHRcdH1cblxuXHRcdHRoaXMuU2hvd0Vycm9yKGFwcGxldEVycm9yKTtcblx0fVxuXG5cdHByaXZhdGUgU2V0Q3VzdG9tSWNvbihpY29uTmFtZTogQ3VzdG9tSWNvbnMpOiB2b2lkIHtcblx0XHR0aGlzLnNldF9hcHBsZXRfaWNvbl9zeW1ib2xpY19uYW1lKGljb25OYW1lKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBMYXp5IGxvYWQgcHJvdmlkZXJcblx0ICogQHBhcmFtIGZvcmNlIEZvcmNlIHByb3ZpZGVyIHJlIGluaXRpYWxpemF0aW9uXG5cdCAqL1xuXHRwcml2YXRlIEVuc3VyZVByb3ZpZGVyKGZvcmNlOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcblx0XHRsZXQgY3VycmVudE5hbWUgPSB0aGlzLnByb3ZpZGVyPy5uYW1lO1xuXHRcdHN3aXRjaCAodGhpcy5jb25maWcuX2RhdGFTZXJ2aWNlKSB7XG5cdFx0XHRjYXNlIFwiRGFya1NreVwiOiAgICAgICAgICAgLy8gTm8gQ2l0eSBJbmZvXG5cdFx0XHRcdGlmIChjdXJyZW50TmFtZSAhPSBcIkRhcmtTa3lcIiB8fCBmb3JjZSkgdGhpcy5wcm92aWRlciA9IG5ldyBEYXJrU2t5KHRoaXMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJPcGVuV2VhdGhlck1hcFwiOiAgIC8vIE5vIENpdHkgSW5mb1xuXHRcdFx0XHRpZiAoY3VycmVudE5hbWUgIT0gXCJPcGVuV2VhdGhlck1hcFwiIHx8IGZvcmNlKSB0aGlzLnByb3ZpZGVyID0gbmV3IE9wZW5XZWF0aGVyTWFwKHRoaXMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJNZXROb3J3YXlcIjogICAgICAgICAvLyBObyBUWiBvciBjaXR5IGluZm9cblx0XHRcdFx0aWYgKGN1cnJlbnROYW1lICE9IFwiTWV0Tm9yd2F5XCIgfHwgZm9yY2UpIHRoaXMucHJvdmlkZXIgPSBuZXcgTWV0Tm9yd2F5KHRoaXMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJXZWF0aGVyYml0XCI6XG5cdFx0XHRcdGlmIChjdXJyZW50TmFtZSAhPSBcIldlYXRoZXJiaXRcIiB8fCBmb3JjZSkgdGhpcy5wcm92aWRlciA9IG5ldyBXZWF0aGVyYml0KHRoaXMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJDbGltYWNlbGxWNFwiOlxuXHRcdFx0XHRpZiAoY3VycmVudE5hbWUgIT0gXCJDbGltYWNlbGxWNFwiIHx8IGZvcmNlKSB0aGlzLnByb3ZpZGVyID0gbmV3IENsaW1hY2VsbFY0KHRoaXMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJNZXQgT2ZmaWNlIFVLXCI6XG5cdFx0XHRcdGlmIChjdXJyZW50TmFtZSAhPSBcIk1ldCBPZmZpY2UgVUtcIiB8fCBmb3JjZSkgdGhpcy5wcm92aWRlciA9IG5ldyBNZXRVayh0aGlzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiVVMgV2VhdGhlclwiOlxuXHRcdFx0XHRpZiAoY3VycmVudE5hbWUgIT0gXCJVUyBXZWF0aGVyXCIgfHwgZm9yY2UpIHRoaXMucHJvdmlkZXIgPSBuZXcgVVNXZWF0aGVyKHRoaXMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJWaXN1YWwgQ3Jvc3NpbmdcIjpcblx0XHRcdFx0aWYgKGN1cnJlbnROYW1lICE9IFwiVmlzdWFsIENyb3NzaW5nXCIgfHwgZm9yY2UpIHRoaXMucHJvdmlkZXIgPSBuZXcgVmlzdWFsQ3Jvc3NpbmcodGhpcyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcIkRhbmlzaE1JXCI6XG5cdFx0XHRcdGlmIChjdXJyZW50TmFtZSAhPSBcIkRhbmlzaE1JXCIgfHwgZm9yY2UpIHRoaXMucHJvdmlkZXIgPSBuZXcgRGFuaXNoTUkodGhpcyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9XG5cblx0LyoqIEZpbGxzIGluIG1pc3Npbmcgd2VhdGhlciBpbmZvIGZyb20gbG9jYXRpb24gRGF0YVxuXHQgKiBhbmQgYXBwbGllcyB0cmFuc2xhdGlvbnMgaWYgbmVlZGVkLlxuXHQgKi9cblx0cHJpdmF0ZSBNZXJnZVdlYXRoZXJEYXRhKHdlYXRoZXJJbmZvOiBXZWF0aGVyRGF0YSwgbG9jYXRpb25EYXRhOiBMb2NhdGlvbkRhdGEpIHtcblx0XHRpZiAod2VhdGhlckluZm8ubG9jYXRpb24uY2l0eSA9PSBudWxsKSB3ZWF0aGVySW5mby5sb2NhdGlvbi5jaXR5ID0gbG9jYXRpb25EYXRhLmNpdHk7XG5cdFx0aWYgKHdlYXRoZXJJbmZvLmxvY2F0aW9uLmNvdW50cnkgPT0gbnVsbCkgd2VhdGhlckluZm8ubG9jYXRpb24uY291bnRyeSA9IGxvY2F0aW9uRGF0YS5jb3VudHJ5O1xuXHRcdGlmICh3ZWF0aGVySW5mby5sb2NhdGlvbi50aW1lWm9uZSA9PSBudWxsKSB3ZWF0aGVySW5mby5sb2NhdGlvbi50aW1lWm9uZSA9IGxvY2F0aW9uRGF0YS50aW1lWm9uZTtcblx0XHRpZiAod2VhdGhlckluZm8uY29vcmQubGF0ID09IG51bGwpIHdlYXRoZXJJbmZvLmNvb3JkLmxhdCA9IGxvY2F0aW9uRGF0YS5sYXQ7XG5cdFx0aWYgKHdlYXRoZXJJbmZvLmNvb3JkLmxvbiA9PSBudWxsKSB3ZWF0aGVySW5mby5jb29yZC5sb24gPSBsb2NhdGlvbkRhdGEubG9uO1xuXHRcdGlmICh3ZWF0aGVySW5mby5ob3VybHlGb3JlY2FzdHMgPT0gbnVsbCkgd2VhdGhlckluZm8uaG91cmx5Rm9yZWNhc3RzID0gW107XG5cblx0XHQvLyBUcmFuc2xhdGUgY29uZGl0aW9ucyBpZiBzZXRcblx0XHR3ZWF0aGVySW5mby5jb25kaXRpb24ubWFpbiA9IFByb2Nlc3NDb25kaXRpb24od2VhdGhlckluZm8uY29uZGl0aW9uLm1haW4sIHRoaXMuY29uZmlnLl90cmFuc2xhdGVDb25kaXRpb24pO1xuXHRcdHdlYXRoZXJJbmZvLmNvbmRpdGlvbi5kZXNjcmlwdGlvbiA9IFByb2Nlc3NDb25kaXRpb24od2VhdGhlckluZm8uY29uZGl0aW9uLmRlc2NyaXB0aW9uLCB0aGlzLmNvbmZpZy5fdHJhbnNsYXRlQ29uZGl0aW9uKTtcblxuXHRcdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB3ZWF0aGVySW5mby5mb3JlY2FzdHMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRjb25zdCBjb25kaXRpb24gPSB3ZWF0aGVySW5mby5mb3JlY2FzdHNbaW5kZXhdLmNvbmRpdGlvbjtcblx0XHRcdGNvbmRpdGlvbi5tYWluID0gUHJvY2Vzc0NvbmRpdGlvbihjb25kaXRpb24ubWFpbiwgdGhpcy5jb25maWcuX3RyYW5zbGF0ZUNvbmRpdGlvbik7XG5cdFx0XHRjb25kaXRpb24uZGVzY3JpcHRpb24gPSBQcm9jZXNzQ29uZGl0aW9uKGNvbmRpdGlvbi5kZXNjcmlwdGlvbiwgdGhpcy5jb25maWcuX3RyYW5zbGF0ZUNvbmRpdGlvbik7XG5cdFx0fVxuXG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHdlYXRoZXJJbmZvLmhvdXJseUZvcmVjYXN0cy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdGNvbnN0IGNvbmRpdGlvbiA9IHdlYXRoZXJJbmZvLmhvdXJseUZvcmVjYXN0c1tpbmRleF0uY29uZGl0aW9uO1xuXHRcdFx0Y29uZGl0aW9uLm1haW4gPSBQcm9jZXNzQ29uZGl0aW9uKGNvbmRpdGlvbi5tYWluLCB0aGlzLmNvbmZpZy5fdHJhbnNsYXRlQ29uZGl0aW9uKTtcblx0XHRcdGNvbmRpdGlvbi5kZXNjcmlwdGlvbiA9IFByb2Nlc3NDb25kaXRpb24oY29uZGl0aW9uLmRlc2NyaXB0aW9uLCB0aGlzLmNvbmZpZy5fdHJhbnNsYXRlQ29uZGl0aW9uKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gd2VhdGhlckluZm87XG5cdH1cblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHQvLyBFcnJvciBoYW5kbGluZ1xuXG5cdC8qKiBGb3IgZGlzcGxheWluZyBoYXJkIGVycm9ycyAqL1xuXHRwcml2YXRlIERpc3BsYXlIYXJkRXJyb3IodGl0bGU6IHN0cmluZywgbXNnOiBzdHJpbmcpOiB2b2lkIHtcblx0XHR0aGlzLnNldF9hcHBsZXRfbGFiZWwodGl0bGUpO1xuXHRcdHRoaXMuc2V0X2FwcGxldF90b29sdGlwKFwiQ2xpY2sgdG8gb3BlblwiKTtcblx0XHR0aGlzLnNldF9hcHBsZXRfaWNvbl9uYW1lKFwid2VhdGhlci1zZXZlcmUtYWxlcnRcIik7XG5cdFx0dGhpcy51aS5EaXNwbGF5RXJyb3JNZXNzYWdlKG1zZywgXCJoYXJkXCIpO1xuXHR9O1xuXG5cdHByaXZhdGUgZXJyTXNnOiBOaWNlRXJyb3JEZXRhaWwgPSB7IC8vIEVycm9yIG1lc3NhZ2VzIHRvIHVzZVxuXHRcdHVua25vd246IF8oXCJFcnJvclwiKSxcblx0XHRcImJhZCBhcGkgcmVzcG9uc2UgLSBub24ganNvblwiOiBfKFwiU2VydmljZSBFcnJvclwiKSxcblx0XHRcImJhZCBrZXlcIjogXyhcIkluY29ycmVjdCBBUEkgS2V5XCIpLFxuXHRcdFwiYmFkIGFwaSByZXNwb25zZVwiOiBfKFwiU2VydmljZSBFcnJvclwiKSxcblx0XHRcImJhZCBsb2NhdGlvbiBmb3JtYXRcIjogXyhcIkluY29ycmVjdCBMb2NhdGlvbiBGb3JtYXRcIiksXG5cdFx0XCJiYWQgc3RhdHVzIGNvZGVcIjogXyhcIlNlcnZpY2UgRXJyb3JcIiksXG5cdFx0XCJrZXkgYmxvY2tlZFwiOiBfKFwiS2V5IEJsb2NrZWRcIiksXG5cdFx0XCJsb2NhdGlvbiBub3QgZm91bmRcIjogXyhcIkNhbid0IGZpbmQgbG9jYXRpb25cIiksXG5cdFx0XCJubyBhcGkgcmVzcG9uc2VcIjogXyhcIlNlcnZpY2UgRXJyb3JcIiksXG5cdFx0XCJubyBrZXlcIjogXyhcIk5vIEFwaSBLZXlcIiksXG5cdFx0XCJubyBsb2NhdGlvblwiOiBfKFwiTm8gTG9jYXRpb25cIiksXG5cdFx0XCJubyBuZXR3b3JrIHJlc3BvbnNlXCI6IF8oXCJTZXJ2aWNlIEVycm9yXCIpLFxuXHRcdFwibm8gcmVzcG9uc2UgYm9keVwiOiBfKFwiU2VydmljZSBFcnJvclwiKSxcblx0XHRcIm5vIHJlc3BvbnNlIGRhdGFcIjogXyhcIlNlcnZpY2UgRXJyb3JcIiksXG5cdFx0XCJ1bnVzdWFsIHBheWxvYWRcIjogXyhcIlNlcnZpY2UgRXJyb3JcIiksXG5cdFx0XCJpbXBvcnQgZXJyb3JcIjogXyhcIk1pc3NpbmcgUGFja2FnZXNcIiksXG5cdFx0XCJsb2NhdGlvbiBub3QgY292ZXJlZFwiOiBfKFwiTG9jYXRpb24gbm90IGNvdmVyZWRcIiksXG5cdH1cblxuXHRwdWJsaWMgU2hvd0Vycm9yKGVycm9yOiBBcHBsZXRFcnJvcik6IHZvaWQge1xuXHRcdGlmIChlcnJvciA9PSBudWxsKSByZXR1cm47XG5cdFx0Ly8gQW4gZXJyb3IgYWxyZWFkeSBjbGFpbWVkIGluIHRoaXMgbG9vcFxuXHRcdGlmICh0aGlzLmVuY291bnRlcmVkRXJyb3IgPT0gdHJ1ZSkgcmV0dXJuO1xuXG5cdFx0dGhpcy5lbmNvdW50ZXJlZEVycm9yID0gdHJ1ZTtcblx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJVc2VyIGZhY2luZyBFcnJvciByZWNlaXZlZCwgZXJyb3I6IFwiICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IsIG51bGwsIDIpKTtcblxuXHRcdGlmIChlcnJvci50eXBlID09IFwiaGFyZFwiKSB7XG5cdFx0XHRMb2cuSW5zdGFuY2UuRGVidWcoXCJEaXNwbGF5aW5nIGhhcmQgZXJyb3JcIik7XG5cdFx0XHR0aGlzLnVpLlJlYnVpbGQodGhpcy5jb25maWcpO1xuXHRcdFx0dGhpcy5EaXNwbGF5SGFyZEVycm9yKHRoaXMuZXJyTXNnW2Vycm9yLmRldGFpbF0sICghZXJyb3IubWVzc2FnZSkgPyBcIlwiIDogZXJyb3IubWVzc2FnZSk7XG5cdFx0fVxuXG5cdFx0aWYgKGVycm9yLnR5cGUgPT0gXCJzb2Z0XCIpIHtcblx0XHRcdC8vIE1heWJlIHNvbWV0aGluZyBsZXNzIGludmFzaXZlIG9uIG5ldHdvcmsgcmVsYXRlZCBlcnJvcnM/XG5cdFx0XHQvLyBOb3RoaW5nIHlldFxuXHRcdFx0aWYgKHRoaXMubG9vcC5Jc0RhdGFUb29PbGQoKSkge1xuXHRcdFx0XHR0aGlzLnNldF9hcHBsZXRfdG9vbHRpcChcIkNsaWNrIHRvIG9wZW5cIik7XG5cdFx0XHRcdHRoaXMuc2V0X2FwcGxldF9pY29uX25hbWUoXCJ3ZWF0aGVyLXNldmVyZS1hbGVydFwiKTtcblx0XHRcdFx0dGhpcy51aS5EaXNwbGF5RXJyb3JNZXNzYWdlKF8oXCJDb3VsZCBub3QgdXBkYXRlIHdlYXRoZXIgZm9yIGEgd2hpbGUuLi5cXG5hcmUgeW91IGNvbm5lY3RlZCB0byB0aGUgaW50ZXJuZXQ/XCIpLCBcInNvZnRcIik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGVycm9yLnVzZXJFcnJvcikge1xuXHRcdFx0dGhpcy5sb29wLlBhdXNlKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bGV0IG5leHRSZWZyZXNoID0gdGhpcy5sb29wLkdldFNlY29uZHNVbnRpbE5leHRSZWZyZXNoKCk7XG5cdFx0TG9nLkluc3RhbmNlLkVycm9yKFwiUmV0cnlpbmcgaW4gdGhlIG5leHQgXCIgKyBuZXh0UmVmcmVzaC50b1N0cmluZygpICsgXCIgc2Vjb25kcy4uLlwiKTtcblx0fVxuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufSIsImltcG9ydCB7IFVVSUQgfSBmcm9tIFwiLi9jb25zdHNcIjtcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuL2xpYi9sb2dnZXJcIjtcbmltcG9ydCB7IFdlYXRoZXJBcHBsZXQgfSBmcm9tIFwiLi9tYWluXCI7XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vIEVudHJ5IHBvaW50XG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWluKG1ldGFkYXRhOiBhbnksIG9yaWVudGF0aW9uOiBpbXBvcnRzLmdpLlN0LlNpZGUsIHBhbmVsSGVpZ2h0OiBudW1iZXIsIGluc3RhbmNlSWQ6IG51bWJlcikge1xuXHQvLyBpbXBvcnRpbmcgY3VzdG9tIHRyYW5zbGF0aW9uc1xuXHRpbXBvcnRzLmdldHRleHQuYmluZHRleHRkb21haW4oVVVJRCwgaW1wb3J0cy5naS5HTGliLmdldF9ob21lX2RpcigpICsgXCIvLmxvY2FsL3NoYXJlL2xvY2FsZVwiKTtcblx0Ly8gTWFudWFsbHkgYWRkIHRoZSBpY29ucyB0byB0aGUgaWNvbiB0aGVtZSAtIG9ubHkgb25lIGljb25zIGZvbGRlclxuXHRpbXBvcnRzLmdpLkd0ay5JY29uVGhlbWUuZ2V0X2RlZmF1bHQoKS5hcHBlbmRfc2VhcmNoX3BhdGgobWV0YWRhdGEucGF0aCArIFwiLy4uL2ljb25zXCIpO1xuXHRpbXBvcnRzLmdpLkd0ay5JY29uVGhlbWUuZ2V0X2RlZmF1bHQoKS5hcHBlbmRfc2VhcmNoX3BhdGgobWV0YWRhdGEucGF0aCArIFwiLy4uL2Fycm93LWljb25zXCIpO1xuXG5cdExvZy5JbnN0YW5jZS5VcGRhdGVJbnN0YW5jZUlEKGluc3RhbmNlSWQpO1xuXG5cdHJldHVybiBuZXcgV2VhdGhlckFwcGxldChtZXRhZGF0YSwgb3JpZW50YXRpb24sIHBhbmVsSGVpZ2h0LCBpbnN0YW5jZUlkKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///591\n')}},__webpack_require__={d:(F,Q)=>{for(var U in Q)__webpack_require__.o(Q,U)&&!__webpack_require__.o(F,U)&&Object.defineProperty(F,U,{enumerable:!0,get:Q[U]})},o:(F,Q)=>Object.prototype.hasOwnProperty.call(F,Q),r:F=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(F,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(F,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__[591](0,__webpack_exports__,__webpack_require__),weatherApplet=__webpack_exports__})();