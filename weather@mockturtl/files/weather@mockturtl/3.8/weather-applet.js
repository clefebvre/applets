var weatherApplet;(()=>{var __webpack_modules__={842:module=>{eval("/*\n (c) 2011-2015, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/moon position and light phases.\n https://github.com/mourner/suncalc\n*/\n\n(function () { 'use strict';\n\n// shortcuts for easier to read formulas\n\nvar PI   = Math.PI,\n    sin  = Math.sin,\n    cos  = Math.cos,\n    tan  = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    acos = Math.acos,\n    rad  = PI / 180;\n\n// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n\n\n// date/time constants and conversions\n\nvar dayMs = 1000 * 60 * 60 * 24,\n    J1970 = 2440588,\n    J2000 = 2451545;\n\nfunction toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }\nfunction fromJulian(j)  { return new Date((j + 0.5 - J1970) * dayMs); }\nfunction toDays(date)   { return toJulian(date) - J2000; }\n\n\n// general calculations for position\n\nvar e = rad * 23.4397; // obliquity of the Earth\n\nfunction rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }\nfunction declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }\n\nfunction azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }\nfunction altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }\n\nfunction siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }\n\nfunction astroRefraction(h) {\n    if (h < 0) // the following formula works for positive altitudes only.\n        h = 0; // if h = -0.08901179 a div/0 would occur.\n\n    // formula 16.4 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n    // 1.02 / tan(h + 10.26 / (h + 5.10)) h in degrees, result in arc minutes -> converted to rad:\n    return 0.0002967 / Math.tan(h + 0.00312536 / (h + 0.08901179));\n}\n\n// general sun calculations\n\nfunction solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }\n\nfunction eclipticLongitude(M) {\n\n    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center\n        P = rad * 102.9372; // perihelion of the Earth\n\n    return M + C + P + PI;\n}\n\nfunction sunCoords(d) {\n\n    var M = solarMeanAnomaly(d),\n        L = eclipticLongitude(M);\n\n    return {\n        dec: declination(L, 0),\n        ra: rightAscension(L, 0)\n    };\n}\n\n\nvar SunCalc = {};\n\n\n// calculates sun position for a given date and latitude/longitude\n\nSunCalc.getPosition = function (date, lat, lng) {\n\n    var lw  = rad * -lng,\n        phi = rad * lat,\n        d   = toDays(date),\n\n        c  = sunCoords(d),\n        H  = siderealTime(d, lw) - c.ra;\n\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: altitude(H, phi, c.dec)\n    };\n};\n\n\n// sun times configuration (angle, morning name, evening name)\n\nvar times = SunCalc.times = [\n    [-0.833, 'sunrise',       'sunset'      ],\n    [  -0.3, 'sunriseEnd',    'sunsetStart' ],\n    [    -6, 'dawn',          'dusk'        ],\n    [   -12, 'nauticalDawn',  'nauticalDusk'],\n    [   -18, 'nightEnd',      'night'       ],\n    [     6, 'goldenHourEnd', 'goldenHour'  ]\n];\n\n// adds a custom time to the times config\n\nSunCalc.addTime = function (angle, riseName, setName) {\n    times.push([angle, riseName, setName]);\n};\n\n\n// calculations for sun times\n\nvar J0 = 0.0009;\n\nfunction julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }\n\nfunction approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }\nfunction solarTransitJ(ds, M, L)  { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }\n\nfunction hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }\n\n// returns set time for the given sun altitude\nfunction getSetJ(h, lw, phi, dec, n, M, L) {\n\n    var w = hourAngle(h, phi, dec),\n        a = approxTransit(w, lw, n);\n    return solarTransitJ(a, M, L);\n}\n\n\n// calculates sun times for a given date and latitude/longitude\n\nSunCalc.getTimes = function (date, lat, lng) {\n\n    var lw = rad * -lng,\n        phi = rad * lat,\n\n        d = toDays(date),\n        n = julianCycle(d, lw),\n        ds = approxTransit(0, lw, n),\n\n        M = solarMeanAnomaly(ds),\n        L = eclipticLongitude(M),\n        dec = declination(L, 0),\n\n        Jnoon = solarTransitJ(ds, M, L),\n\n        i, len, time, Jset, Jrise;\n\n\n    var result = {\n        solarNoon: fromJulian(Jnoon),\n        nadir: fromJulian(Jnoon - 0.5)\n    };\n\n    for (i = 0, len = times.length; i < len; i += 1) {\n        time = times[i];\n\n        Jset = getSetJ(time[0] * rad, lw, phi, dec, n, M, L);\n        Jrise = Jnoon - (Jset - Jnoon);\n\n        result[time[1]] = fromJulian(Jrise);\n        result[time[2]] = fromJulian(Jset);\n    }\n\n    return result;\n};\n\n\n// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas\n\nfunction moonCoords(d) { // geocentric ecliptic coordinates of the moon\n\n    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude\n        M = rad * (134.963 + 13.064993 * d), // mean anomaly\n        F = rad * (93.272 + 13.229350 * d),  // mean distance\n\n        l  = L + rad * 6.289 * sin(M), // longitude\n        b  = rad * 5.128 * sin(F),     // latitude\n        dt = 385001 - 20905 * cos(M);  // distance to the moon in km\n\n    return {\n        ra: rightAscension(l, b),\n        dec: declination(l, b),\n        dist: dt\n    };\n}\n\nSunCalc.getMoonPosition = function (date, lat, lng) {\n\n    var lw  = rad * -lng,\n        phi = rad * lat,\n        d   = toDays(date),\n\n        c = moonCoords(d),\n        H = siderealTime(d, lw) - c.ra,\n        h = altitude(H, phi, c.dec),\n        // formula 14.1 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n        pa = atan(sin(H), tan(phi) * cos(c.dec) - sin(c.dec) * cos(H));\n\n    h = h + astroRefraction(h); // altitude correction for refraction\n\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: h,\n        distance: c.dist,\n        parallacticAngle: pa\n    };\n};\n\n\n// calculations for illumination parameters of the moon,\n// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and\n// Chapter 48 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n\nSunCalc.getMoonIllumination = function (date) {\n\n    var d = toDays(date || new Date()),\n        s = sunCoords(d),\n        m = moonCoords(d),\n\n        sdist = 149598000, // distance from Earth to Sun in km\n\n        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),\n        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),\n        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -\n                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));\n\n    return {\n        fraction: (1 + cos(inc)) / 2,\n        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,\n        angle: angle\n    };\n};\n\n\nfunction hoursLater(date, h) {\n    return new Date(date.valueOf() + h * dayMs / 24);\n}\n\n// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article\n\nSunCalc.getMoonTimes = function (date, lat, lng, inUTC) {\n    var t = new Date(date);\n    if (inUTC) t.setUTCHours(0, 0, 0, 0);\n    else t.setHours(0, 0, 0, 0);\n\n    var hc = 0.133 * rad,\n        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,\n        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;\n\n    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)\n    for (var i = 1; i <= 24; i += 2) {\n        h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;\n        h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n\n        a = (h0 + h2) / 2 - h1;\n        b = (h2 - h0) / 2;\n        xe = -b / (2 * a);\n        ye = (a * xe + b) * xe + h1;\n        d = b * b - 4 * a * h1;\n        roots = 0;\n\n        if (d >= 0) {\n            dx = Math.sqrt(d) / (Math.abs(a) * 2);\n            x1 = xe - dx;\n            x2 = xe + dx;\n            if (Math.abs(x1) <= 1) roots++;\n            if (Math.abs(x2) <= 1) roots++;\n            if (x1 < -1) x1 = x2;\n        }\n\n        if (roots === 1) {\n            if (h0 < 0) rise = i + x1;\n            else set = i + x1;\n\n        } else if (roots === 2) {\n            rise = i + (ye < 0 ? x2 : x1);\n            set = i + (ye < 0 ? x1 : x2);\n        }\n\n        if (rise && set) break;\n\n        h0 = h2;\n    }\n\n    var result = {};\n\n    if (rise) result.rise = hoursLater(t, rise);\n    if (set) result.set = hoursLater(t, set);\n\n    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;\n\n    return result;\n};\n\n\n// export as Node module / AMD module / browser variable\nif (true) module.exports = SunCalc;\nelse {}\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///842\n")},478:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "main": () => (/* binding */ main)\n});\n\n;// CONCATENATED MODULE: ./src/3_8/consts.ts\nconst UUID = "weather@mockturtl";\nconst SIGNAL_CHANGED = \'changed::\';\nconst SIGNAL_CLICKED = \'clicked\';\nconst SIGNAL_REPAINT = \'repaint\';\nconst APPLET_ICON = "view-refresh-symbolic";\nconst REFRESH_ICON = "view-refresh";\nconst BLANK = \'   \';\nconst ELLIPSIS = \'...\';\nconst EN_DASH = \'\\u2013\';\nconst FORWARD_SLASH = \'\\u002F\';\n\n;// CONCATENATED MODULE: ./src/3_8/lib/logger.ts\n\nclass logger_Log {\n    constructor(_instanceId) {\n        this.debug = false;\n        this.level = 1;\n        this.ID = _instanceId;\n        this.appletDir = imports.ui.appletManager.appletMeta[UUID].path;\n        this.debug = this.DEBUG();\n    }\n    static get Instance() {\n        if (this.instance == null)\n            this.instance = new logger_Log();\n        return this.instance;\n    }\n    DEBUG() {\n        let path = this.appletDir + "/../DEBUG";\n        let _debug = imports.gi.Gio.file_new_for_path(path);\n        let result = _debug.query_exists(null);\n        if (result)\n            this.Print("DEBUG file found in " + path + ", enabling Debug mode");\n        return result;\n    }\n    ;\n    Print(message) {\n        let msg = "[" + UUID + "#" + this.ID + "]: " + message.toString();\n        global.log(msg);\n    }\n    Error(error, e) {\n        global.logError("[" + UUID + "#" + this.ID + "]: " + error.toString());\n        if (e != null)\n            global.logError(e.stack);\n    }\n    ;\n    Debug(message) {\n        if (this.debug) {\n            this.Print(message);\n        }\n    }\n    Debug2(message) {\n        if (this.debug && this.level > 1) {\n            this.Print(message);\n        }\n    }\n    UpdateInstanceID(instanceID) {\n        this.ID = instanceID;\n    }\n}\nlogger_Log.instance = null;\n\n;// CONCATENATED MODULE: ./src/3_8/utils.ts\n\nconst { timeout_add, source_remove } = imports.mainloop;\nconst { IconType } = imports.gi.St;\nconst { IconTheme } = imports.gi.Gtk;\nfunction _(str, args) {\n    let result = imports.gettext.dgettext(UUID, str);\n    if (result === str && result === "")\n        result = imports.gettext.gettext(str);\n    if (!!args)\n        result = format(result, args);\n    return result;\n}\nfunction format(str, args) {\n    for (let key in args) {\n        str = str.replace(new RegExp("\\\\{" + key + "\\\\}"), args[key]);\n    }\n    return str;\n}\nfunction UnitToUnicode(unit) {\n    return unit == "fahrenheit" ? \'\\u2109\' : \'\\u2103\';\n}\nfunction GenerateLocationText(weather, config) {\n    let location = "";\n    if (weather.location.city != null && weather.location.country != null) {\n        location = weather.location.city + ", " + weather.location.country;\n    }\n    else {\n        location = Math.round(weather.coord.lat * 10000) / 10000 + ", " + Math.round(weather.coord.lon * 10000) / 10000;\n    }\n    if (NotEmpty(config._locationLabelOverride)) {\n        location = config._locationLabelOverride;\n    }\n    return location;\n}\nfunction CapitalizeFirstLetter(description) {\n    if ((description == undefined || description == null)) {\n        return "";\n    }\n    return description.charAt(0).toUpperCase() + description.slice(1);\n}\n;\nfunction CapitalizeEveryWord(description) {\n    if ((description == undefined || description == null)) {\n        return "";\n    }\n    let split = description.split(" ");\n    let result = "";\n    for (let index = 0; index < split.length; index++) {\n        const element = split[index];\n        result += CapitalizeFirstLetter(element);\n        if (index != split.length - 1)\n            result += " ";\n    }\n    return result;\n}\nfunction NormalizeTimezone(tz) {\n    if (!tz || tz == "" || tz == "UTC")\n        tz = undefined;\n    return tz;\n}\nfunction GetDayName(date, locale, showDate = false, tz) {\n    let params = {\n        weekday: "long",\n        timeZone: tz\n    };\n    params.timeZone = NormalizeTimezone(tz);\n    if (showDate) {\n        params.day = \'numeric\';\n    }\n    let now = new Date();\n    let tomorrow = new Date();\n    tomorrow.setDate(now.getDate() + 1);\n    if (date.getDate() == now.getDate() || date.getDate() == tomorrow.getDate())\n        delete params.weekday;\n    let dateString = date.toLocaleString(locale, params);\n    if (locale.startsWith("fr"))\n        dateString = CapitalizeFirstLetter(dateString);\n    if (date.getDate() == now.getDate())\n        dateString = _("Today");\n    if (date.getDate() == tomorrow.getDate())\n        dateString = _("Tomorrow");\n    return dateString;\n}\nfunction GetHoursMinutes(date, locale, hours24Format, tz, onlyHours = false) {\n    let params = {\n        hour: "numeric",\n        hour12: !hours24Format,\n        timeZone: tz\n    };\n    params.timeZone = NormalizeTimezone(tz);\n    if (!onlyHours)\n        params.minute = "2-digit";\n    return date.toLocaleString(locale, params);\n}\nfunction AwareDateString(date, locale, hours24Format, tz) {\n    let now = new Date();\n    let params = {\n        hour: "numeric",\n        minute: "2-digit",\n        hour12: !hours24Format,\n        timeZone: tz\n    };\n    if (date.toDateString() != now.toDateString()) {\n        params.month = "short";\n        params.day = "numeric";\n    }\n    if (date.getFullYear() != now.getFullYear()) {\n        params.year = "numeric";\n    }\n    params.timeZone = NormalizeTimezone(tz);\n    return date.toLocaleString(locale, params);\n}\nfunction MilitaryTime(date) {\n    return date.getHours() * 100 + date.getMinutes();\n}\nfunction AddHours(date, hours) {\n    let result = new Date(date);\n    result.setHours(result.getHours() + hours);\n    return result;\n}\nfunction OnSameDay(date1, date2, config) {\n    return date1.toDateString() == date2.toDateString();\n}\nfunction ProcessCondition(condition, shouldTranslate) {\n    if (condition == null)\n        return null;\n    condition = CapitalizeFirstLetter(condition);\n    if (shouldTranslate)\n        condition = _(condition);\n    return condition;\n}\nfunction LocalizedColon(locale) {\n    if (locale == null)\n        return ":";\n    if (locale.startsWith("fr"))\n        return " :";\n    return ":";\n}\nfunction PrecentToLocale(humidity, locale) {\n    return (humidity / 100).toLocaleString(locale, { style: "percent" });\n}\nconst WEATHER_CONV_MPH_IN_MPS = 2.23693629;\nconst WEATHER_CONV_KPH_IN_MPS = 3.6;\nconst WEATHER_CONV_KNOTS_IN_MPS = 1.94384449;\nfunction MPStoUserUnits(mps, units) {\n    if (mps == null)\n        return null;\n    switch (units) {\n        case "mph":\n            return (Math.round((mps * WEATHER_CONV_MPH_IN_MPS) * 10) / 10).toString();\n        case "kph":\n            return (Math.round((mps * WEATHER_CONV_KPH_IN_MPS) * 10) / 10).toString();\n        case "m/s":\n            return (Math.round(mps * 10) / 10).toString();\n        case "Knots":\n            return Math.round(mps * WEATHER_CONV_KNOTS_IN_MPS).toString();\n        case "Beaufort":\n            if (mps < 0.5) {\n                return "0 (" + _("Calm") + ")";\n            }\n            if (mps < 1.5) {\n                return "1 (" + _("Light air") + ")";\n            }\n            if (mps < 3.3) {\n                return "2 (" + _("Light breeze") + ")";\n            }\n            if (mps < 5.5) {\n                return "3 (" + _("Gentle breeze") + ")";\n            }\n            if (mps < 7.9) {\n                return "4 (" + _("Moderate breeze") + ")";\n            }\n            if (mps < 10.7) {\n                return "5 (" + _("Fresh breeze") + ")";\n            }\n            if (mps < 13.8) {\n                return "6 (" + _("Strong breeze") + ")";\n            }\n            if (mps < 17.1) {\n                return "7 (" + _("Near gale") + ")";\n            }\n            if (mps < 20.7) {\n                return "8 (" + _("Gale") + ")";\n            }\n            if (mps < 24.4) {\n                return "9 (" + _("Strong gale") + ")";\n            }\n            if (mps < 28.4) {\n                return "10 (" + _("Storm") + ")";\n            }\n            if (mps < 32.6) {\n                return "11 (" + _("Violent storm") + ")";\n            }\n            return "12 (" + _("Hurricane") + ")";\n    }\n}\nfunction TempToUserConfig(kelvin, config, withUnit = true) {\n    if (kelvin == null)\n        return null;\n    let temp = (config.TemperatureUnit == "celsius") ? KelvinToCelsius(kelvin) : KelvinToFahrenheit(kelvin);\n    temp = RussianTransform(temp, config._tempRussianStyle);\n    if (withUnit)\n        temp = `${temp} ${UnitToUnicode(config.TemperatureUnit)}`;\n    if (config._showBothTempUnits) {\n        let secondUnit = (config.TemperatureUnit == "celsius") ? "fahrenheit" : "celsius";\n        let secondTemp = (config.TemperatureUnit == "celsius") ? KelvinToFahrenheit(kelvin) : KelvinToCelsius(kelvin);\n        secondTemp = RussianTransform(secondTemp, config._tempRussianStyle);\n        if (withUnit)\n            temp += ` (${secondTemp.toString()} ${UnitToUnicode(secondUnit)})`;\n        else\n            temp += ` (${secondTemp.toString()})`;\n    }\n    return temp.toString();\n}\nfunction RussianTransform(temp, russianStyle) {\n    if (russianStyle) {\n        if (temp < 0)\n            return `−${Math.abs(temp).toString()}`;\n        else if (temp > 0)\n            return `+${temp.toString()}`;\n    }\n    else\n        return temp.toString();\n}\nfunction TempRangeToUserConfig(min, max, config) {\n    let t_low = TempToUserConfig(min, config, false);\n    let t_high = TempToUserConfig(max, config, false);\n    let first_temperature = config._temperatureHighFirst ? t_high : t_low;\n    let second_temperature = config._temperatureHighFirst ? t_low : t_high;\n    let result = "";\n    if (first_temperature != null)\n        result = first_temperature;\n    result += ((config._tempRussianStyle) ? ELLIPSIS : ` ${FORWARD_SLASH} `);\n    if (second_temperature != null)\n        result += `${second_temperature} `;\n    result += `${UnitToUnicode(config.TemperatureUnit)}`;\n    if (config._showBothTempUnits) {\n        let secondUnit = (config.TemperatureUnit == "celsius") ? "fahrenheit" : "celsius";\n        result += ` (${UnitToUnicode(secondUnit)})`;\n    }\n    return result;\n}\nfunction KelvinToCelsius(k) {\n    return Math.round((k - 273.15));\n}\nfunction KelvinToFahrenheit(k) {\n    return Math.round((9 / 5 * (k - 273.15) + 32));\n}\nfunction PressToUserUnits(hpa, units) {\n    switch (units) {\n        case "hPa":\n            return Math.round(hpa * 100) / 100;\n        case "at":\n            return Math.round((hpa * 0.001019716) * 1000) / 1000;\n        case "atm":\n            return Math.round((hpa * 0.0009869233) * 1000) / 1000;\n        case "in Hg":\n            return Math.round((hpa * 0.029529983071445) * 10) / 10;\n        case "mm Hg":\n            return Math.round((hpa * 0.7500638));\n        case "Pa":\n            return Math.round((hpa * 100));\n        case "psi":\n            return Math.round((hpa * 0.01450377) * 100) / 100;\n    }\n}\n;\nfunction MetreToUserUnits(m, distanceUnit) {\n    if (distanceUnit == "metric")\n        return Math.round(m / 1000 * 10) / 10;\n    return Math.round(KmToM(m / 1000) * 10) / 10;\n}\nfunction MillimeterToUserUnits(mm, distanceUnit) {\n    if (distanceUnit == "metric")\n        return Math.round(mm * 100) / 100;\n    return Math.round(mm * 0.03937 * 100) / 100;\n}\nfunction KPHtoMPS(speed) {\n    if (speed == null)\n        return null;\n    return speed / WEATHER_CONV_KPH_IN_MPS;\n}\n;\nfunction CelsiusToKelvin(celsius) {\n    if (celsius == null)\n        return null;\n    return (celsius + 273.15);\n}\nfunction FahrenheitToKelvin(fahrenheit) {\n    if (fahrenheit == null)\n        return null;\n    return ((fahrenheit - 32) / 1.8 + 273.15);\n}\n;\nfunction MPHtoMPS(speed) {\n    if (speed == null || speed == undefined)\n        return null;\n    return speed * 0.44704;\n}\nfunction KmToM(km) {\n    if (km == null)\n        return null;\n    return km * 0.6213712;\n}\nfunction CompassToDeg(compass) {\n    if (!compass)\n        return null;\n    compass = compass.toUpperCase();\n    switch (compass) {\n        case "N": return 0;\n        case "NNE": return 22.5;\n        case "NE": return 45;\n        case "ENE": return 67.5;\n        case "E": return 90;\n        case "ESE": return 112.5;\n        case "SE": return 135;\n        case "SSE": return 157.5;\n        case "S": return 180;\n        case "SSW": return 202.5;\n        case "SW": return 225;\n        case "WSW": return 247.5;\n        case "W": return 270;\n        case "WNW": return 292.5;\n        case "NW": return 315;\n        case "NNW": return 337.5;\n        default: return null;\n    }\n}\nfunction CompassDirection(deg) {\n    let directions = [\n        \'south-arrow-weather-symbolic\',\n        \'south-west-arrow-weather-symbolic\',\n        \'west-arrow-weather-symbolic\',\n        \'north-west-arrow-weather-symbolic\',\n        \'north-arrow-weather-symbolic\',\n        \'north-east-arrow-weather-symbolic\',\n        \'east-arrow-weather-symbolic\',\n        \'south-east-arrow-weather-symbolic\'\n    ];\n    return directions[Math.round(deg / 45) % directions.length];\n}\nfunction CompassDirectionText(deg) {\n    if (!deg)\n        return null;\n    let directions = [_(\'N\'), _(\'NE\'), _(\'E\'), _(\'SE\'), _(\'S\'), _(\'SW\'), _(\'W\'), _(\'NW\')];\n    return directions[Math.round(deg / 45) % directions.length];\n}\nfunction IsNight(sunTimes, date) {\n    if (!sunTimes)\n        return false;\n    let time = (!!date) ? MilitaryTime(date.toJSDate()) : MilitaryTime(new Date());\n    let sunrise = MilitaryTime(sunTimes.sunrise.toJSDate());\n    let sunset = MilitaryTime(sunTimes.sunset.toJSDate());\n    if (time >= sunrise && time < sunset)\n        return false;\n    return true;\n}\nfunction IsCoordinate(text) {\n    text = text.trim();\n    if (/^-?\\d{1,3}(?:\\.\\d*)?,(\\s)*-?\\d{1,3}(?:\\.\\d*)?/.test(text)) {\n        return true;\n    }\n    return false;\n}\nfunction NotEmpty(str) {\n    return (str != null && str.length > 0 && str != undefined);\n}\nfunction IsLangSupported(lang, languages) {\n    return (languages.includes(lang));\n}\n;\nfunction HasIcon(icon, icon_type) {\n    return IconTheme.get_default().has_icon(icon + (icon_type == IconType.SYMBOLIC ? \'-symbolic\' : \'\'));\n}\nfunction mode(arr) {\n    return arr.reduce(function (current, item) {\n        var val = current.numMapping[item] = (current.numMapping[item] || 0) + 1;\n        if (val > current.greatestFreq) {\n            current.greatestFreq = val;\n            current.mode = item;\n        }\n        return current;\n    }, { mode: null, greatestFreq: -Infinity, numMapping: {} }).mode;\n}\n;\nfunction WeatherIconSafely(code, icon_type) {\n    for (let i = 0; i < code.length; i++) {\n        if (HasIcon(code[i], icon_type))\n            return code[i];\n    }\n    return \'weather-severe-alert\';\n}\nfunction ShadeHexColor(color, percent) {\n    var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;\n    return "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\n}\nfunction ConstructJsLocale(locale) {\n    let jsLocale = locale.split(".")[0];\n    let tmp = jsLocale.split("_");\n    jsLocale = "";\n    for (let i = 0; i < tmp.length; i++) {\n        if (i != 0)\n            jsLocale += "-";\n        jsLocale += tmp[i].toLowerCase();\n    }\n    if (locale == "c" || locale == null)\n        jsLocale = undefined;\n    return jsLocale;\n}\nfunction GetDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371e3;\n    const φ1 = lat1 * Math.PI / 180;\n    const φ2 = lat2 * Math.PI / 180;\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n        Math.cos(φ1) * Math.cos(φ2) *\n            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n}\nfunction GetFuncName(func) {\n    if (!!func.name)\n        return func.name;\n    var result = /^function\\s+([\\w\\$]+)\\s*\\(/.exec(func.toString());\n    return result ? result[1] : \'\';\n}\nfunction Guid() {\n    return \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == \'x\' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\nfunction utils_setTimeout(func, ms) {\n    let args = [];\n    if (arguments.length > 2) {\n        args = args.slice.call(arguments, 2);\n    }\n    let id = timeout_add(ms, () => {\n        func.apply(null, args);\n        return false;\n    }, null);\n    return id;\n}\n;\nasync function delay(ms) {\n    return await new Promise((resolve, reject) => {\n        utils_setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nfunction utils_clearTimeout(id) {\n    source_remove(id);\n}\n;\nfunction utils_setInterval(func, ms) {\n    let args = [];\n    if (arguments.length > 2) {\n        args = args.slice.call(arguments, 2);\n    }\n    let id = timeout_add(ms, () => {\n        func.apply(null, args);\n        return true;\n    }, null);\n    return id;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/location_services/ipApi.ts\n\n\nclass IpApi {\n    constructor(_app) {\n        this.query = "http://ip-api.com/json/?fields=status,message,country,countryCode,city,lat,lon,timezone,mobile,query";\n        this.app = _app;\n    }\n    async GetLocation() {\n        let json = await this.app.LoadJsonAsync(this.query);\n        if (!json) {\n            return null;\n        }\n        if (json.status != "success") {\n            this.HandleErrorResponse(json);\n            return null;\n        }\n        return this.ParseInformation(json);\n    }\n    ;\n    ParseInformation(json) {\n        try {\n            let result = {\n                lat: json.lat,\n                lon: json.lon,\n                city: json.city,\n                country: json.country,\n                timeZone: json.timezone,\n                entryText: json.lat + "," + json.lon,\n            };\n            logger_Log.Instance.Debug("Location obtained:" + json.lat + "," + json.lon);\n            return result;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("ip-api parsing error: " + e);\n            this.app.ShowError({ type: "hard", detail: "no location", service: "ipapi", message: _("Could not obtain location") });\n            return null;\n        }\n    }\n    ;\n    HandleErrorResponse(json) {\n        this.app.ShowError({ type: "hard", detail: "bad api response", message: _("Location Service responded with errors, please see the logs in Looking Glass"), service: "ipapi" });\n        logger_Log.Instance.Error("ip-api responds with Error: " + json.reason);\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/lib/events.ts\nclass Event {\n    constructor() {\n        this.subscribers = [];\n    }\n    Subscribe(fn) {\n        this.subscribers.push(fn);\n    }\n    Unsubscribe(fn) {\n        for (let index = this.subscribers.length - 1; index >= 0; index--) {\n            const element = this.subscribers[index];\n            if (element == fn) {\n                this.subscribers.splice(index, 1);\n                return;\n            }\n        }\n    }\n    Invoke(sender, args) {\n        if (this.subscribers.length == 0)\n            return;\n        for (let index = 0; index < this.subscribers.length; index++) {\n            const element = this.subscribers[index];\n            element(sender, args);\n        }\n    }\n    UnSubscribeAll() {\n        this.subscribers = [];\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/lib/notification_service.ts\n\nconst { messageTray } = imports.ui.main;\nconst { SystemNotificationSource, Notification } = imports.ui.messageTray;\nclass NotificationService {\n    constructor() {\n        this.Title = _("Weather Applet");\n        this.MessageSource = new SystemNotificationSource(this.Title);\n        messageTray.add(this.MessageSource);\n    }\n    static get Instance() {\n        if (this.instance == null)\n            this.instance = new NotificationService();\n        return this.instance;\n    }\n    Send(title, message, transient) {\n        let notification = new Notification(this.MessageSource, this.Title + ": " + title, message);\n        if (transient)\n            notification.setTransient((!transient) ? false : true);\n        this.MessageSource.notify(notification);\n    }\n}\nNotificationService.instance = null;\n\n;// CONCATENATED MODULE: ./src/3_8/location_services/locationstore.ts\n\n\n\n\nclass LocationStore {\n    constructor(app, config) {\n        this.locations = [];\n        this.app = null;\n        this.config = null;\n        this.currentIndex = 0;\n        this.StoreChanged = new Event();\n        this.app = app;\n        this.config = config;\n        this.locations = config._locationList;\n    }\n    OnLocationChanged(locs) {\n        var _a;\n        if (this.app.Locked())\n            return;\n        for (let index = 0; index < locs.length; index++) {\n            const element = locs[index];\n            if (!element.entryText) {\n                locs[index] = this.EnsureSearchEntry(element);\n            }\n        }\n        let currentIndex = this.FindIndex(this.config.CurrentLocation);\n        let newIndex = this.FindIndex(this.config.CurrentLocation, locs);\n        let currentlyDisplayedChanged = false;\n        let currentlyDisplayedDeleted = false;\n        if (newIndex == -1 && currentIndex == -1) {\n            let tmp = [];\n            this.locations = locs.concat(tmp);\n            this.InvokeStorageChanged();\n            return;\n        }\n        else if (newIndex == currentIndex)\n            currentlyDisplayedChanged = !this.IsEqual((_a = this.locations) === null || _a === void 0 ? void 0 : _a[currentIndex], locs === null || locs === void 0 ? void 0 : locs[currentIndex]);\n        else if (newIndex == -1)\n            currentlyDisplayedDeleted = true;\n        else if (newIndex != currentIndex)\n            this.currentIndex = newIndex;\n        let tmp = [];\n        this.locations = locs.concat(tmp);\n        if (currentlyDisplayedChanged || currentlyDisplayedDeleted) {\n            logger_Log.Instance.Debug("Currently used location was changed or deleted from locationstore, triggering refresh.");\n            this.app.RefreshAndRebuild();\n        }\n        this.InvokeStorageChanged();\n    }\n    SwitchToLocation(loc) {\n        let index = this.FindIndex(loc);\n        if (index == -1)\n            return false;\n        this.currentIndex = index;\n    }\n    FindLocation(entryText) {\n        for (let index = 0; index < this.locations.length; index++) {\n            const element = this.locations[index];\n            if (element.entryText == entryText)\n                return {\n                    country: element.country,\n                    city: element.city,\n                    entryText: element.entryText,\n                    lat: element.lat,\n                    lon: element.lon,\n                    timeZone: element.timeZone,\n                };\n        }\n        return null;\n    }\n    EnsureSearchEntry(loc) {\n        if (!loc.entryText)\n            loc.entryText = `${loc.lat},${loc.lon}`;\n        return loc;\n    }\n    GetNextLocation(currentLoc) {\n        logger_Log.Instance.Debug("Current location: " + JSON.stringify(currentLoc, null, 2));\n        if (this.locations.length == 0)\n            return currentLoc;\n        let nextIndex = null;\n        if (this.InStorage(currentLoc)) {\n            nextIndex = this.FindIndex(currentLoc) + 1;\n            logger_Log.Instance.Debug("Current location found in storage at index " + (nextIndex - 1).toString() + ", moving to the next index");\n        }\n        else {\n            nextIndex = this.currentIndex++;\n        }\n        if (nextIndex > this.locations.length - 1) {\n            nextIndex = 0;\n            logger_Log.Instance.Debug("Reached end of storage, move to the beginning");\n        }\n        logger_Log.Instance.Debug("Switching to index " + nextIndex.toString() + "...");\n        this.currentIndex = nextIndex;\n        return {\n            country: this.locations[nextIndex].country,\n            city: this.locations[nextIndex].city,\n            entryText: this.locations[nextIndex].entryText,\n            lat: this.locations[nextIndex].lat,\n            lon: this.locations[nextIndex].lon,\n            timeZone: this.locations[nextIndex].timeZone,\n        };\n    }\n    GetPreviousLocation(currentLoc) {\n        if (this.locations.length == 0)\n            return currentLoc;\n        let previousIndex = null;\n        if (this.InStorage(currentLoc)) {\n            previousIndex = this.FindIndex(currentLoc) - 1;\n            logger_Log.Instance.Debug("Current location found in storage at index " + (previousIndex + 1).toString() + ", moving to the next index");\n        }\n        else {\n            previousIndex = this.currentIndex--;\n        }\n        if (previousIndex < 0) {\n            previousIndex = this.locations.length - 1;\n            logger_Log.Instance.Debug("Reached start of storage, move to the end");\n        }\n        logger_Log.Instance.Debug("Switching to index " + previousIndex.toString() + "...");\n        this.currentIndex = previousIndex;\n        return {\n            country: this.locations[previousIndex].country,\n            city: this.locations[previousIndex].city,\n            entryText: this.locations[previousIndex].entryText,\n            lat: this.locations[previousIndex].lat,\n            lon: this.locations[previousIndex].lon,\n            timeZone: this.locations[previousIndex].timeZone,\n        };\n    }\n    ShouldShowLocationSelectors(currentLoc) {\n        let threshold = this.InStorage(currentLoc) ? 2 : 1;\n        if (this.locations.length >= threshold)\n            return true;\n        else\n            return false;\n    }\n    async SaveCurrentLocation(loc) {\n        if (this.app.Locked()) {\n            NotificationService.Instance.Send(_("Warning") + " - " + _("Location Store"), _("You can only save correct locations when the applet is not refreshing"), true);\n            return;\n        }\n        if (loc == null) {\n            NotificationService.Instance.Send(_("Warning") + " - " + _("Location Store"), _("You can\'t save an incorrect location"), true);\n            return;\n        }\n        if (this.InStorage(loc)) {\n            NotificationService.Instance.Send(_("Info") + " - " + _("Location Store"), _("Location is already saved"), true);\n            return;\n        }\n        loc.timeZone = this.app.config.Timezone;\n        this.locations.push(loc);\n        this.currentIndex = this.locations.length - 1;\n        this.InvokeStorageChanged();\n        this.SaveBackLocations();\n    }\n    InvokeStorageChanged() {\n        this.StoreChanged.Invoke(this, this.locations.length);\n    }\n    SaveBackLocations() {\n        this.config.SetLocationList(this.locations);\n    }\n    InStorage(loc) {\n        return this.FindIndex(loc) != -1;\n    }\n    FindIndex(loc, locations = null) {\n        if (loc == null)\n            return -1;\n        if (locations == null)\n            locations = this.locations;\n        for (let index = 0; index < locations.length; index++) {\n            const element = locations[index];\n            if (element.entryText == loc.entryText)\n                return index;\n        }\n        return -1;\n    }\n    IsEqual(oldLoc, newLoc) {\n        if (oldLoc == null)\n            return false;\n        if (newLoc == null)\n            return false;\n        for (let key in newLoc) {\n            if (oldLoc[key] != newLoc[key]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/location_services/nominatim.ts\n\n\nclass GeoLocation {\n    constructor(app) {\n        this.url = "https://nominatim.openstreetmap.org/search/";\n        this.params = "?format=json&addressdetails=1&limit=1";\n        this.App = null;\n        this.cache = {};\n        this.App = app;\n    }\n    async GetLocation(searchText) {\n        var _a;\n        try {\n            searchText = searchText.trim();\n            let cached = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.searchText;\n            if (cached != null) {\n                logger_Log.Instance.Debug("Returning cached geolocation info for \'" + searchText + "\'.");\n                return cached;\n            }\n            let locationData = await this.App.LoadJsonAsync(this.url + encodeURIComponent(searchText) + this.params);\n            if (locationData == null)\n                return null;\n            if (locationData.length == 0) {\n                this.App.ShowError({\n                    type: "hard",\n                    detail: "bad location format",\n                    message: _("Could not find location based on address, please check if it\'s right")\n                });\n                return null;\n            }\n            logger_Log.Instance.Debug("Location is found, payload: " + JSON.stringify(locationData, null, 2));\n            let result = {\n                lat: parseFloat(locationData[0].lat),\n                lon: parseFloat(locationData[0].lon),\n                city: locationData[0].address.city || locationData[0].address.town || locationData[0].address.village,\n                country: locationData[0].address.country,\n                timeZone: null,\n                entryText: this.BuildEntryText(locationData[0]),\n            };\n            this.cache[searchText] = result;\n            return result;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Could not geo locate, error: " + JSON.stringify(e, null, 2));\n            this.App.ShowError({\n                type: "soft",\n                detail: "bad api response",\n                message: _("Failed to call Geolocation API, see Looking Glass for errors.")\n            });\n            return null;\n        }\n    }\n    BuildEntryText(locationData) {\n        if (locationData.address == null)\n            return locationData.display_name;\n        let entryText = [];\n        for (let key in locationData.address) {\n            if (key == "state_district")\n                continue;\n            if (key == "county")\n                continue;\n            if (key == "country_code")\n                continue;\n            entryText.push(locationData.address[key]);\n        }\n        return entryText.join(", ");\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/config.ts\n\n\n\n\n\n\nconst { AppletSettings, BindingDirection } = imports.ui.settings;\nconst Lang = imports.lang;\nconst keybindingManager = imports.ui.main.keybindingManager;\nconst { IconType: config_IconType } = imports.gi.St;\nconst { get_language_names } = imports.gi.GLib;\nconst { Settings } = imports.gi.Gio;\nconst Keys = {\n    DATA_SERVICE: "dataService",\n    API_KEY: "apiKey",\n    TEMPERATURE_UNIT_KEY: "temperatureUnit",\n    TEMPERATURE_HIGH_FIRST: "temperatureHighFirst",\n    WIND_SPEED_UNIT: "windSpeedUnit",\n    DISTANCE_UNIT: "distanceUnit",\n    CITY: "locationLabelOverride",\n    TRANSLATE_CONDITION: "translateCondition",\n    VERTICAL_ORIENTATION: "verticalOrientation",\n    SHOW_TEXT_IN_PANEL: "showTextInPanel",\n    TEMP_TEXT_OVERRIDE: "tempTextOverride",\n    SHOW_COMMENT_IN_PANEL: "showCommentInPanel",\n    SHOW_SUNRISE: "showSunrise",\n    SHOW_24HOURS: "show24Hours",\n    FORECAST_DAYS: "forecastDays",\n    FORECAST_HOURS: "forecastHours",\n    FORECAST_COLS: "forecastColumns",\n    FORECAST_ROWS: "forecastRows",\n    REFRESH_INTERVAL: "refreshInterval",\n    PRESSURE_UNIT: "pressureUnit",\n    SHORT_CONDITIONS: "shortConditions",\n    MANUAL_LOCATION: "manualLocation",\n    USE_CUSTOM_APPLETICONS: \'useCustomAppletIcons\',\n    USE_CUSTOM_MENUICONS: "useCustomMenuIcons",\n    RUSSIAN_STYLE: "tempRussianStyle",\n    SHORT_HOURLY_TIME: "shortHourlyTime",\n    SHOW_FORECAST_DATES: "showForecastDates",\n    WEATHER_USE_SYMBOLIC_ICONS_KEY: \'useSymbolicIcons\',\n    IMMEDIATE_PRECIP: "immediatePrecip",\n    SHOW_BOTH_TEMP: "showBothTempUnits",\n    DISPLAY_WIND_DIR_AS_TEXT: "displayWindAsText"\n};\nclass Config {\n    constructor(app, instanceID) {\n        this.fahrenheitCountries = ["bs", "bz", "ky", "pr", "pw", "us"];\n        this.windSpeedUnitLocales = {\n            "fi kr no pl ru se": "m/s",\n            "us gb": "mph"\n        };\n        this.distanceUnitLocales = {\n            "us gb": "imperial"\n        };\n        this.WEATHER_LOCATION = "location";\n        this.WEATHER_LOCATION_LIST = "locationList";\n        this.doneTypingLocation = null;\n        this.currentLocation = null;\n        this.timezone = null;\n        this.app = app;\n        this.currentLocale = ConstructJsLocale(get_language_names()[0]);\n        logger_Log.Instance.Debug("System locale is " + this.currentLocale);\n        this.autoLocProvider = new IpApi(app);\n        this.geoLocationService = new GeoLocation(app);\n        this.countryCode = this.GetCountryCode(this.currentLocale);\n        this.settings = new AppletSettings(this, UUID, instanceID);\n        this.InterfaceSettings = new Settings({ schema: "org.cinnamon.desktop.interface" });\n        this.InterfaceSettings.connect(\'changed::font-name\', () => this.OnFontChanged());\n        this.currentFontSize = this.GetCurrentFontSize();\n        this.BindSettings();\n        this.LocStore = new LocationStore(this.app, this);\n    }\n    get Timezone() {\n        return this.timezone;\n    }\n    set Timezone(value) {\n        if (!value || value == "")\n            value = null;\n        this.timezone = value;\n    }\n    BindSettings() {\n        let k;\n        for (k in Keys) {\n            let key = Keys[k];\n            let keyProp = "_" + key;\n            this.settings.bindProperty(BindingDirection.IN, key, keyProp, Lang.bind(this, this.OnSettingChanged), null);\n        }\n        this.settings.bindProperty(BindingDirection.BIDIRECTIONAL, this.WEATHER_LOCATION, ("_" + this.WEATHER_LOCATION), Lang.bind(this, this.OnLocationChanged), null);\n        this.settings.bindProperty(BindingDirection.BIDIRECTIONAL, this.WEATHER_LOCATION_LIST, ("_" + this.WEATHER_LOCATION_LIST), Lang.bind(this, this.OnLocationStoreChanged), null);\n        this.settings.bindProperty(BindingDirection.IN, "keybinding", "keybinding", Lang.bind(this, this.OnKeySettingsUpdated), null);\n        keybindingManager.addHotKey(UUID, this.keybinding, Lang.bind(this.app, this.app.on_applet_clicked));\n    }\n    get CurrentFontSize() {\n        return this.currentFontSize;\n    }\n    get CurrentLocation() {\n        return this.currentLocation;\n    }\n    get ApiKey() {\n        return this._apiKey.replace(" ", "");\n    }\n    get Language() {\n        return this.GetLanguage(this.currentLocale);\n    }\n    get TemperatureUnit() {\n        if (this._temperatureUnit == "automatic")\n            return this.GetLocaleTemperateUnit(this.countryCode);\n        return this._temperatureUnit;\n    }\n    get WindSpeedUnit() {\n        if (this._windSpeedUnit == "automatic")\n            return this.GetLocaleWindSpeedUnit(this.countryCode);\n        return this._windSpeedUnit;\n    }\n    get DistanceUnit() {\n        if (this._distanceUnit == "automatic")\n            return this.GetLocaleDistanceUnit(this.countryCode);\n        return this._distanceUnit;\n    }\n    get IconType() {\n        if (this._useCustomMenuIcons)\n            return config_IconType.SYMBOLIC;\n        return this._useSymbolicIcons ?\n            config_IconType.SYMBOLIC :\n            config_IconType.FULLCOLOR;\n    }\n    ;\n    get AppletIconType() {\n        if (this._useCustomAppletIcons)\n            return config_IconType.SYMBOLIC;\n        return this._useSymbolicIcons ?\n            config_IconType.SYMBOLIC :\n            config_IconType.FULLCOLOR;\n    }\n    SwitchToNextLocation() {\n        let nextLoc = this.LocStore.GetNextLocation(this.CurrentLocation);\n        if (nextLoc == null)\n            return null;\n        this.InjectLocationToConfig(nextLoc, true);\n        return nextLoc;\n    }\n    SwitchToPreviousLocation() {\n        let previousLoc = this.LocStore.GetPreviousLocation(this.CurrentLocation);\n        if (previousLoc == null)\n            return null;\n        this.InjectLocationToConfig(previousLoc, true);\n        return previousLoc;\n    }\n    NoApiKey() {\n        var _a;\n        let key = (_a = this._apiKey) === null || _a === void 0 ? void 0 : _a.replace(" ", "");\n        return (!key || key == "");\n    }\n    ;\n    async EnsureLocation() {\n        this.currentLocation = null;\n        if (!this._manualLocation) {\n            let location = await this.autoLocProvider.GetLocation();\n            if (!location)\n                return null;\n            this.InjectLocationToConfig(location);\n            return location;\n        }\n        let loc = this._location;\n        if (loc == undefined || loc.trim() == "") {\n            this.app.ShowError({\n                type: "hard",\n                detail: "no location",\n                userError: true,\n                message: _("Make sure you entered a location or use Automatic location instead")\n            });\n            return null;\n        }\n        let location = this.LocStore.FindLocation(this._location);\n        if (location != null) {\n            logger_Log.Instance.Debug("location exist in locationstore, retrieve");\n            this.LocStore.SwitchToLocation(location);\n            this.InjectLocationToConfig(location, true);\n            return location;\n        }\n        else if (IsCoordinate(loc)) {\n            loc = loc.replace(" ", "");\n            let latLong = loc.split(",");\n            let location = {\n                lat: parseFloat(latLong[0]),\n                lon: parseFloat(latLong[1]),\n                city: null,\n                country: null,\n                timeZone: null,\n                entryText: loc,\n            };\n            this.InjectLocationToConfig(location);\n            return location;\n        }\n        logger_Log.Instance.Debug("Location is text, geolocating...");\n        let locationData = await this.geoLocationService.GetLocation(loc);\n        if (locationData == null)\n            return null;\n        if (!!(locationData === null || locationData === void 0 ? void 0 : locationData.entryText)) {\n            logger_Log.Instance.Debug("Address found via address search");\n        }\n        location = this.LocStore.FindLocation(locationData.entryText);\n        if (location != null) {\n            logger_Log.Instance.Debug("Found location was found in locationStore, return that instead");\n            this.InjectLocationToConfig(location);\n            this.LocStore.SwitchToLocation(location);\n            return location;\n        }\n        else {\n            this.InjectLocationToConfig(locationData);\n            return locationData;\n        }\n    }\n    InjectLocationToConfig(loc, switchToManual = false) {\n        logger_Log.Instance.Debug("Location setting is now: " + loc.entryText);\n        let text = (loc.entryText + "");\n        this.SetLocation(text);\n        this.currentLocation = loc;\n        if (switchToManual == true)\n            this.settings.setValue(Keys.MANUAL_LOCATION, true);\n    }\n    OnKeySettingsUpdated() {\n        if (this.keybinding != null) {\n            keybindingManager.addHotKey(UUID, this.keybinding, Lang.bind(this.app, this.app.on_applet_clicked));\n        }\n    }\n    OnLocationChanged() {\n        logger_Log.Instance.Debug("User changed location, waiting 3 seconds...");\n        if (this.doneTypingLocation != null)\n            utils_clearTimeout(this.doneTypingLocation);\n        this.doneTypingLocation = utils_setTimeout(Lang.bind(this, this.DoneTypingLocation), 3000);\n    }\n    OnLocationStoreChanged() {\n        this.LocStore.OnLocationChanged(this._locationList);\n    }\n    OnFontChanged() {\n        this.currentFontSize = this.GetCurrentFontSize();\n        this.app.RefreshAndRebuild();\n    }\n    DoneTypingLocation() {\n        logger_Log.Instance.Debug("User has finished typing, beginning refresh");\n        this.doneTypingLocation = null;\n        this.app.RefreshAndRebuild();\n    }\n    OnSettingChanged() {\n        this.app.RefreshAndRebuild();\n    }\n    SetLocation(value) {\n        this.settings.setValue(this.WEATHER_LOCATION, value);\n    }\n    SetLocationList(list) {\n        this.settings.setValue(this.WEATHER_LOCATION_LIST, list);\n    }\n    GetLocaleTemperateUnit(code) {\n        if (code == null || !this.fahrenheitCountries.includes(code))\n            return "celsius";\n        return "fahrenheit";\n    }\n    GetLocaleWindSpeedUnit(code) {\n        if (code == null)\n            return "kph";\n        for (const key in this.windSpeedUnitLocales) {\n            if (key.includes(code))\n                return this.windSpeedUnitLocales[key];\n        }\n        return "kph";\n    }\n    GetLocaleDistanceUnit(code) {\n        if (code == null)\n            return "metric";\n        for (const key in this.distanceUnitLocales) {\n            if (key.includes(code))\n                return this.distanceUnitLocales[key];\n        }\n        return "metric";\n    }\n    GetCountryCode(locale) {\n        let split = locale.split("-");\n        if (split.length < 2)\n            return null;\n        return split[1];\n    }\n    GetLanguage(locale) {\n        let split = locale.split("-");\n        if (split.length < 1)\n            return null;\n        return split[0];\n    }\n    GetCurrentFontSize() {\n        let nameString = this.InterfaceSettings.get_string("font-name");\n        let elements = nameString.split(" ");\n        let size = parseFloat(elements[elements.length - 1]);\n        logger_Log.Instance.Debug("Font size changed to " + size.toString());\n        return size;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/loop.ts\n\n\nvar weatherAppletGUIDs = {};\nclass WeatherLoop {\n    constructor(app, instanceID) {\n        this.lastUpdated = new Date(0);\n        this.pauseRefresh = false;\n        this.LOOP_INTERVAL = 15;\n        this.appletRemoved = false;\n        this.errorCount = 0;\n        this.app = app;\n        this.instanceID = instanceID;\n        this.GUID = Guid();\n        weatherAppletGUIDs[instanceID] = this.GUID;\n    }\n    IsDataTooOld() {\n        if (!this.lastUpdated)\n            return true;\n        let oldDate = this.lastUpdated;\n        oldDate.setMinutes(oldDate.getMinutes() + (this.app.config._refreshInterval * 2));\n        return (this.lastUpdated > oldDate);\n    }\n    async Start() {\n        while (true) {\n            try {\n                if (this.IsStray())\n                    return;\n                if (this.app.encounteredError == true)\n                    this.IncrementErrorCount();\n                this.ValidateLastUpdate();\n                if (this.pauseRefresh) {\n                    logger_Log.Instance.Debug("Configuration error, updating paused");\n                    await delay(this.LoopInterval());\n                    continue;\n                }\n                if (this.errorCount > 0 || this.NextUpdate() < new Date()) {\n                    logger_Log.Instance.Debug("Refresh triggered in main loop with these values: lastUpdated " + ((!this.lastUpdated) ? "null" : this.lastUpdated.toLocaleString())\n                        + ", errorCount " + this.errorCount.toString() + " , loopInterval " + (this.LoopInterval() / 1000).toString()\n                        + " seconds, refreshInterval " + this.app.config._refreshInterval + " minutes");\n                    let state = await this.app.RefreshWeather(false);\n                    if (state == "error")\n                        logger_Log.Instance.Print("App is currently refreshing, refresh skipped in main loop");\n                    if (state == "success" || "locked")\n                        this.lastUpdated = new Date();\n                }\n                else {\n                    logger_Log.Instance.Debug("No need to update yet, skipping");\n                }\n            }\n            catch (e) {\n                logger_Log.Instance.Error("Error in Main loop: " + e);\n                this.app.encounteredError = true;\n            }\n            await delay(this.LoopInterval());\n        }\n    }\n    ;\n    Stop() {\n        this.appletRemoved = true;\n    }\n    Pause() {\n        this.pauseRefresh = true;\n    }\n    Resume() {\n        this.pauseRefresh = false;\n    }\n    ResetErrorCount() {\n        this.errorCount = 0;\n    }\n    GetSecondsUntilNextRefresh() {\n        return (this.errorCount > 0) ? (this.errorCount) * this.LOOP_INTERVAL : this.LOOP_INTERVAL;\n    }\n    IsStray() {\n        if (this.appletRemoved == true)\n            return true;\n        if (this.GUID != weatherAppletGUIDs[this.instanceID]) {\n            logger_Log.Instance.Debug("Applet GUID: " + this.GUID);\n            logger_Log.Instance.Debug("GUID stored globally: " + weatherAppletGUIDs[this.instanceID]);\n            logger_Log.Instance.Print("GUID mismatch, terminating applet");\n            return true;\n        }\n        return false;\n    }\n    IncrementErrorCount() {\n        this.app.encounteredError = false;\n        this.errorCount++;\n        logger_Log.Instance.Debug("Encountered error in previous loop");\n        if (this.errorCount > 60)\n            this.errorCount = 60;\n    }\n    NextUpdate() {\n        return new Date(this.lastUpdated.getTime() + this.app.config._refreshInterval * 60000);\n    }\n    ValidateLastUpdate() {\n        if (this.lastUpdated > new Date())\n            this.lastUpdated = new Date(0);\n    }\n    LoopInterval() {\n        return (this.errorCount > 0) ? this.LOOP_INTERVAL * this.errorCount * 1000 : this.LOOP_INTERVAL * 1000;\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/suncalc/suncalc.js\nvar suncalc = __webpack_require__(842);\n;// CONCATENATED MODULE: ./node_modules/luxon/src/errors.js\n// these aren\'t really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nclass InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nclass InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nclass InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nclass ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nclass InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nclass InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nclass ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super("Zone is an abstract class");\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/formats.js\n/**\n * @private\n */\n\nconst n = "numeric",\n  s = "short",\n  l = "long";\n\nconst DATE_SHORT = {\n  year: n,\n  month: n,\n  day: n\n};\n\nconst DATE_MED = {\n  year: n,\n  month: s,\n  day: n\n};\n\nconst DATE_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s\n};\n\nconst DATE_FULL = {\n  year: n,\n  month: l,\n  day: n\n};\n\nconst DATE_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l\n};\n\nconst TIME_SIMPLE = {\n  hour: n,\n  minute: n\n};\n\nconst TIME_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n\n};\n\nconst TIME_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s\n};\n\nconst TIME_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l\n};\n\nconst TIME_24_SIMPLE = {\n  hour: n,\n  minute: n,\n  hour12: false\n};\n\n/**\n * {@link toLocaleString}; format like \'09:30:23\', always 24-hour.\n */\nconst TIME_24_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n  hour12: false\n};\n\n/**\n * {@link toLocaleString}; format like \'09:30:23 EDT\', always 24-hour.\n */\nconst TIME_24_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hour12: false,\n  timeZoneName: s\n};\n\n/**\n * {@link toLocaleString}; format like \'09:30:23 Eastern Daylight Time\', always 24-hour.\n */\nconst TIME_24_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hour12: false,\n  timeZoneName: l\n};\n\n/**\n * {@link toLocaleString}; format like \'10/14/1983, 9:30 AM\'. Only 12-hour if the locale is.\n */\nconst DATETIME_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n\n};\n\n/**\n * {@link toLocaleString}; format like \'10/14/1983, 9:30:33 AM\'. Only 12-hour if the locale is.\n */\nconst DATETIME_SHORT_WITH_SECONDS = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n\n};\n\nconst DATETIME_MED = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n\n};\n\nconst DATETIME_MED_WITH_SECONDS = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n\n};\n\nconst DATETIME_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n  hour: n,\n  minute: n\n};\n\nconst DATETIME_FULL = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  timeZoneName: s\n};\n\nconst DATETIME_FULL_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s\n};\n\nconst DATETIME_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  timeZoneName: l\n};\n\nconst DATETIME_HUGE_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l\n};\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/util.js\n/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won\'t worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n\n\n\n/**\n * @private\n */\n\n// TYPES\n\nfunction isUndefined(o) {\n  return typeof o === "undefined";\n}\n\nfunction isNumber(o) {\n  return typeof o === "number";\n}\n\nfunction isInteger(o) {\n  return typeof o === "number" && o % 1 === 0;\n}\n\nfunction isString(o) {\n  return typeof o === "string";\n}\n\nfunction isDate(o) {\n  return Object.prototype.toString.call(o) === "[object Date]";\n}\n\n// CAPABILITIES\n\nfunction hasIntl() {\n  try {\n    return typeof Intl !== "undefined" && Intl.DateTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction hasFormatToParts() {\n  return !isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\n}\n\nfunction hasRelative() {\n  try {\n    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\n\n// OBJECTS AND ARRAYS\n\nfunction maybeArray(thing) {\n  return Array.isArray(thing) ? thing : [thing];\n}\n\nfunction bestBy(arr, by, compare) {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  return arr.reduce((best, next) => {\n    const pair = [by(next), next];\n    if (!best) {\n      return pair;\n    } else if (compare(best[0], pair[0]) === best[0]) {\n      return best;\n    } else {\n      return pair;\n    }\n  }, null)[1];\n}\n\nfunction pick(obj, keys) {\n  return keys.reduce((a, k) => {\n    a[k] = obj[k];\n    return a;\n  }, {});\n}\n\nfunction util_hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n// NUMBERS AND STRINGS\n\nfunction integerBetween(thing, bottom, top) {\n  return isInteger(thing) && thing >= bottom && thing <= top;\n}\n\n// x % n but takes the sign of n instead of x\nfunction floorMod(x, n) {\n  return x - n * Math.floor(x / n);\n}\n\nfunction padStart(input, n = 2) {\n  const minus = input < 0 ? "-" : "";\n  const target = minus ? input * -1 : input;\n  let result;\n\n  if (target.toString().length < n) {\n    result = ("0".repeat(n) + target).slice(-n);\n  } else {\n    result = target.toString();\n  }\n\n  return `${minus}${result}`;\n}\n\nfunction parseInteger(string) {\n  if (isUndefined(string) || string === null || string === "") {\n    return undefined;\n  } else {\n    return parseInt(string, 10);\n  }\n}\n\nfunction parseMillis(fraction) {\n  // Return undefined (instead of 0) in these cases, where fraction is not set\n  if (isUndefined(fraction) || fraction === null || fraction === "") {\n    return undefined;\n  } else {\n    const f = parseFloat("0." + fraction) * 1000;\n    return Math.floor(f);\n  }\n}\n\nfunction roundTo(number, digits, towardZero = false) {\n  const factor = 10 ** digits,\n    rounder = towardZero ? Math.trunc : Math.round;\n  return rounder(number * factor) / factor;\n}\n\n// DATE BASICS\n\nfunction isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nfunction daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nfunction daysInMonth(year, month) {\n  const modMonth = floorMod(month - 1, 12) + 1,\n    modYear = year + (month - modMonth) / 12;\n\n  if (modMonth === 2) {\n    return isLeapYear(modYear) ? 29 : 28;\n  } else {\n    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\n  }\n}\n\n// covert a calendar object to a local timestamp (epoch, but with the offset baked in)\nfunction objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setUTCFullYear(d.getUTCFullYear() - 1900);\n  }\n  return +d;\n}\n\nfunction weeksInWeekYear(weekYear) {\n  const p1 =\n      (weekYear +\n        Math.floor(weekYear / 4) -\n        Math.floor(weekYear / 100) +\n        Math.floor(weekYear / 400)) %\n      7,\n    last = weekYear - 1,\n    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nfunction untruncateYear(year) {\n  if (year > 99) {\n    return year;\n  } else return year > 60 ? 1900 + year : 2000 + year;\n}\n\n// PARSING\n\nfunction parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n  const date = new Date(ts),\n    intlOpts = {\n      hour12: false,\n      year: "numeric",\n      month: "2-digit",\n      day: "2-digit",\n      hour: "2-digit",\n      minute: "2-digit"\n    };\n\n  if (timeZone) {\n    intlOpts.timeZone = timeZone;\n  }\n\n  const modified = Object.assign({ timeZoneName: offsetFormat }, intlOpts),\n    intl = hasIntl();\n\n  if (intl && hasFormatToParts()) {\n    const parsed = new Intl.DateTimeFormat(locale, modified)\n      .formatToParts(date)\n      .find(m => m.type.toLowerCase() === "timezonename");\n    return parsed ? parsed.value : null;\n  } else if (intl) {\n    // this probably doesn\'t work for all locales\n    const without = new Intl.DateTimeFormat(locale, intlOpts).format(date),\n      included = new Intl.DateTimeFormat(locale, modified).format(date),\n      diffed = included.substring(without.length),\n      trimmed = diffed.replace(/^[, \\u200e]+/, "");\n    return trimmed;\n  } else {\n    return null;\n  }\n}\n\n// signedOffset(\'-5\', \'30\') -> -330\nfunction signedOffset(offHourStr, offMinuteStr) {\n  let offHour = parseInt(offHourStr, 10);\n\n  // don\'t || this because we want to preserve -0\n  if (Number.isNaN(offHour)) {\n    offHour = 0;\n  }\n\n  const offMin = parseInt(offMinuteStr, 10) || 0,\n    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\n  return offHour * 60 + offMinSigned;\n}\n\n// COERCION\n\nfunction asNumber(value) {\n  const numericValue = Number(value);\n  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))\n    throw new InvalidArgumentError(`Invalid unit value ${value}`);\n  return numericValue;\n}\n\nfunction normalizeObject(obj, normalizer, nonUnitKeys) {\n  const normalized = {};\n  for (const u in obj) {\n    if (util_hasOwnProperty(obj, u)) {\n      if (nonUnitKeys.indexOf(u) >= 0) continue;\n      const v = obj[u];\n      if (v === undefined || v === null) continue;\n      normalized[normalizer(u)] = asNumber(v);\n    }\n  }\n  return normalized;\n}\n\nfunction formatOffset(offset, format) {\n  const hours = Math.trunc(Math.abs(offset / 60)),\n    minutes = Math.trunc(Math.abs(offset % 60)),\n    sign = offset >= 0 ? "+" : "-";\n\n  switch (format) {\n    case "short":\n      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;\n    case "narrow":\n      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;\n    case "techie":\n      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;\n    default:\n      throw new RangeError(`Value format ${format} is out of range for property format`);\n  }\n}\n\nfunction timeObject(obj) {\n  return pick(obj, ["hour", "minute", "second", "millisecond"]);\n}\n\nconst ianaRegex = /[A-Za-z_+-]{1,256}(:?\\/[A-Za-z_+-]{1,256}(\\/[A-Za-z_+-]{1,256})?)?/;\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/english.js\n\n\n\nfunction stringify(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n\n/**\n * @private\n */\n\nconst monthsLong = [\n  "January",\n  "February",\n  "March",\n  "April",\n  "May",\n  "June",\n  "July",\n  "August",\n  "September",\n  "October",\n  "November",\n  "December"\n];\n\nconst monthsShort = [\n  "Jan",\n  "Feb",\n  "Mar",\n  "Apr",\n  "May",\n  "Jun",\n  "Jul",\n  "Aug",\n  "Sep",\n  "Oct",\n  "Nov",\n  "Dec"\n];\n\nconst monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];\n\nfunction months(length) {\n  switch (length) {\n    case "narrow":\n      return [...monthsNarrow];\n    case "short":\n      return [...monthsShort];\n    case "long":\n      return [...monthsLong];\n    case "numeric":\n      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];\n    case "2-digit":\n      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];\n    default:\n      return null;\n  }\n}\n\nconst weekdaysLong = [\n  "Monday",\n  "Tuesday",\n  "Wednesday",\n  "Thursday",\n  "Friday",\n  "Saturday",\n  "Sunday"\n];\n\nconst weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];\n\nconst weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];\n\nfunction weekdays(length) {\n  switch (length) {\n    case "narrow":\n      return [...weekdaysNarrow];\n    case "short":\n      return [...weekdaysShort];\n    case "long":\n      return [...weekdaysLong];\n    case "numeric":\n      return ["1", "2", "3", "4", "5", "6", "7"];\n    default:\n      return null;\n  }\n}\n\nconst meridiems = ["AM", "PM"];\n\nconst erasLong = ["Before Christ", "Anno Domini"];\n\nconst erasShort = ["BC", "AD"];\n\nconst erasNarrow = ["B", "A"];\n\nfunction eras(length) {\n  switch (length) {\n    case "narrow":\n      return [...erasNarrow];\n    case "short":\n      return [...erasShort];\n    case "long":\n      return [...erasLong];\n    default:\n      return null;\n  }\n}\n\nfunction meridiemForDateTime(dt) {\n  return meridiems[dt.hour < 12 ? 0 : 1];\n}\n\nfunction weekdayForDateTime(dt, length) {\n  return weekdays(length)[dt.weekday - 1];\n}\n\nfunction monthForDateTime(dt, length) {\n  return months(length)[dt.month - 1];\n}\n\nfunction eraForDateTime(dt, length) {\n  return eras(length)[dt.year < 0 ? 0 : 1];\n}\n\nfunction formatRelativeTime(unit, count, numeric = "always", narrow = false) {\n  const units = {\n    years: ["year", "yr."],\n    quarters: ["quarter", "qtr."],\n    months: ["month", "mo."],\n    weeks: ["week", "wk."],\n    days: ["day", "day", "days"],\n    hours: ["hour", "hr."],\n    minutes: ["minute", "min."],\n    seconds: ["second", "sec."]\n  };\n\n  const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;\n\n  if (numeric === "auto" && lastable) {\n    const isDay = unit === "days";\n    switch (count) {\n      case 1:\n        return isDay ? "tomorrow" : `next ${units[unit][0]}`;\n      case -1:\n        return isDay ? "yesterday" : `last ${units[unit][0]}`;\n      case 0:\n        return isDay ? "today" : `this ${units[unit][0]}`;\n      default: // fall through\n    }\n  }\n\n  const isInPast = Object.is(count, -0) || count < 0,\n    fmtValue = Math.abs(count),\n    singular = fmtValue === 1,\n    lilUnits = units[unit],\n    fmtUnit = narrow\n      ? singular\n        ? lilUnits[1]\n        : lilUnits[2] || lilUnits[1]\n      : singular\n        ? units[unit][0]\n        : unit;\n  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;\n}\n\nfunction formatString(knownFormat) {\n  // these all have the offsets removed because we don\'t have access to them\n  // without all the intl stuff this is backfilling\n  const filtered = pick(knownFormat, [\n      "weekday",\n      "era",\n      "year",\n      "month",\n      "day",\n      "hour",\n      "minute",\n      "second",\n      "timeZoneName",\n      "hour12"\n    ]),\n    key = stringify(filtered),\n    dateTimeHuge = "EEEE, LLLL d, yyyy, h:mm a";\n  switch (key) {\n    case stringify(DATE_SHORT):\n      return "M/d/yyyy";\n    case stringify(DATE_MED):\n      return "LLL d, yyyy";\n    case stringify(DATE_MED_WITH_WEEKDAY):\n      return "EEE, LLL d, yyyy";\n    case stringify(DATE_FULL):\n      return "LLLL d, yyyy";\n    case stringify(DATE_HUGE):\n      return "EEEE, LLLL d, yyyy";\n    case stringify(TIME_SIMPLE):\n      return "h:mm a";\n    case stringify(TIME_WITH_SECONDS):\n      return "h:mm:ss a";\n    case stringify(TIME_WITH_SHORT_OFFSET):\n      return "h:mm a";\n    case stringify(TIME_WITH_LONG_OFFSET):\n      return "h:mm a";\n    case stringify(TIME_24_SIMPLE):\n      return "HH:mm";\n    case stringify(TIME_24_WITH_SECONDS):\n      return "HH:mm:ss";\n    case stringify(TIME_24_WITH_SHORT_OFFSET):\n      return "HH:mm";\n    case stringify(TIME_24_WITH_LONG_OFFSET):\n      return "HH:mm";\n    case stringify(DATETIME_SHORT):\n      return "M/d/yyyy, h:mm a";\n    case stringify(DATETIME_MED):\n      return "LLL d, yyyy, h:mm a";\n    case stringify(DATETIME_FULL):\n      return "LLLL d, yyyy, h:mm a";\n    case stringify(DATETIME_HUGE):\n      return dateTimeHuge;\n    case stringify(DATETIME_SHORT_WITH_SECONDS):\n      return "M/d/yyyy, h:mm:ss a";\n    case stringify(DATETIME_MED_WITH_SECONDS):\n      return "LLL d, yyyy, h:mm:ss a";\n    case stringify(DATETIME_MED_WITH_WEEKDAY):\n      return "EEE, d LLL yyyy, h:mm a";\n    case stringify(DATETIME_FULL_WITH_SECONDS):\n      return "LLLL d, yyyy, h:mm:ss a";\n    case stringify(DATETIME_HUGE_WITH_SECONDS):\n      return "EEEE, LLLL d, yyyy, h:mm:ss a";\n    default:\n      return dateTimeHuge;\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/formatter.js\n\n\n\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = "";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: DATE_SHORT,\n  DD: DATE_MED,\n  DDD: DATE_FULL,\n  DDDD: DATE_HUGE,\n  t: TIME_SIMPLE,\n  tt: TIME_WITH_SECONDS,\n  ttt: TIME_WITH_SHORT_OFFSET,\n  tttt: TIME_WITH_LONG_OFFSET,\n  T: TIME_24_SIMPLE,\n  TT: TIME_24_WITH_SECONDS,\n  TTT: TIME_24_WITH_SHORT_OFFSET,\n  TTTT: TIME_24_WITH_LONG_OFFSET,\n  f: DATETIME_SHORT,\n  ff: DATETIME_MED,\n  fff: DATETIME_FULL,\n  ffff: DATETIME_HUGE,\n  F: DATETIME_SHORT_WITH_SECONDS,\n  FF: DATETIME_MED_WITH_SECONDS,\n  FFF: DATETIME_FULL_WITH_SECONDS,\n  FFFF: DATETIME_HUGE_WITH_SECONDS\n};\n\n/**\n * @private\n */\n\nclass Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = "",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === "\'") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = "";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = Object.assign({}, this.opts);\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === "en",\n      useDateTimeFormatter =\n        this.loc.outputCalendar && this.loc.outputCalendar !== "gregory" && hasFormatToParts(),\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = opts => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return "Z";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";\n      },\n      meridiem = () =>\n        knownEnglish\n          ? meridiemForDateTime(dt)\n          : string({ hour: "numeric", hour12: true }, "dayperiod"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },\n              "weekday"\n            ),\n      maybeMacro = token => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = length =>\n        knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"),\n      tokenToString = token => {\n        // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case "S":\n            return this.num(dt.millisecond);\n          case "u":\n          // falls through\n          case "SSS":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case "s":\n            return this.num(dt.second);\n          case "ss":\n            return this.num(dt.second, 2);\n          // minutes\n          case "m":\n            return this.num(dt.minute);\n          case "mm":\n            return this.num(dt.minute, 2);\n          // hours\n          case "h":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case "hh":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case "H":\n            return this.num(dt.hour);\n          case "HH":\n            return this.num(dt.hour, 2);\n          // offset\n          case "Z":\n            // like +6\n            return formatOffset({ format: "narrow", allowZ: this.opts.allowZ });\n          case "ZZ":\n            // like +06:00\n            return formatOffset({ format: "short", allowZ: this.opts.allowZ });\n          case "ZZZ":\n            // like +0600\n            return formatOffset({ format: "techie", allowZ: this.opts.allowZ });\n          case "ZZZZ":\n            // like EST\n            return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });\n          case "ZZZZZ":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });\n          // zone\n          case "z":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case "a":\n            return meridiem();\n          // dates\n          case "d":\n            return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);\n          case "dd":\n            return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case "c":\n            // like 1\n            return this.num(dt.weekday);\n          case "ccc":\n            // like \'Tues\'\n            return weekday("short", true);\n          case "cccc":\n            // like \'Tuesday\'\n            return weekday("long", true);\n          case "ccccc":\n            // like \'T\'\n            return weekday("narrow", true);\n          // weekdays - format\n          case "E":\n            // like 1\n            return this.num(dt.weekday);\n          case "EEE":\n            // like \'Tues\'\n            return weekday("short", false);\n          case "EEEE":\n            // like \'Tuesday\'\n            return weekday("long", false);\n          case "EEEEE":\n            // like \'T\'\n            return weekday("narrow", false);\n          // months - standalone\n          case "L":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: "numeric", day: "numeric" }, "month")\n              : this.num(dt.month);\n          case "LL":\n            // like 01, doesn\'t seem to work\n            return useDateTimeFormatter\n              ? string({ month: "2-digit", day: "numeric" }, "month")\n              : this.num(dt.month, 2);\n          case "LLL":\n            // like Jan\n            return month("short", true);\n          case "LLLL":\n            // like January\n            return month("long", true);\n          case "LLLLL":\n            // like J\n            return month("narrow", true);\n          // months - format\n          case "M":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: "numeric" }, "month")\n              : this.num(dt.month);\n          case "MM":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: "2-digit" }, "month")\n              : this.num(dt.month, 2);\n          case "MMM":\n            // like Jan\n            return month("short", false);\n          case "MMMM":\n            // like January\n            return month("long", false);\n          case "MMMMM":\n            // like J\n            return month("narrow", false);\n          // years\n          case "y":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);\n          case "yy":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: "2-digit" }, "year")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case "yyyy":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: "numeric" }, "year")\n              : this.num(dt.year, 4);\n          case "yyyyyy":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: "numeric" }, "year")\n              : this.num(dt.year, 6);\n          // eras\n          case "G":\n            // like AD\n            return era("short");\n          case "GG":\n            // like Anno Domini\n            return era("long");\n          case "GGGGG":\n            return era("narrow");\n          case "kk":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case "kkkk":\n            return this.num(dt.weekYear, 4);\n          case "W":\n            return this.num(dt.weekNumber);\n          case "WW":\n            return this.num(dt.weekNumber, 2);\n          case "o":\n            return this.num(dt.ordinal);\n          case "ooo":\n            return this.num(dt.ordinal, 3);\n          case "q":\n            // like 1\n            return this.num(dt.quarter);\n          case "qq":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case "X":\n            return this.num(Math.floor(dt.ts / 1000));\n          case "x":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = token => {\n        switch (token[0]) {\n          case "S":\n            return "millisecond";\n          case "s":\n            return "second";\n          case "m":\n            return "minute";\n          case "h":\n            return "hour";\n          case "d":\n            return "day";\n          case "M":\n            return "month";\n          case "y":\n            return "year";\n          default:\n            return null;\n        }\n      },\n      tokenToString = lildur => token => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/invalid.js\nclass Invalid {\n  constructor(reason, explanation) {\n    this.reason = reason;\n    this.explanation = explanation;\n  }\n\n  toMessage() {\n    if (this.explanation) {\n      return `${this.reason}: ${this.explanation}`;\n    } else {\n      return this.reason;\n    }\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/zone.js\n/* eslint no-unused-vars: "off" */\n\n\n/**\n * @interface\n */\nclass Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get universal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset\'s common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts \'long\' or \'short\'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset\'s value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts \'narrow\', \'short\', or \'techie\'. Returning \'+6\', \'+06:00\', or \'+0600\' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/zones/localZone.js\n\n\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nclass LocalZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {LocalZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return "local";\n  }\n\n  /** @override **/\n  get name() {\n    if (hasIntl()) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return "local";\n  }\n\n  /** @override **/\n  get universal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === "local";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/zones/IANAZone.js\n\n\n\nconst matchingRegex = RegExp(`^${ianaRegex.source}$`);\n\nlet dtfCache = {};\nfunction makeDTF(zone) {\n  if (!dtfCache[zone]) {\n    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {\n      hour12: false,\n      timeZone: zone,\n      year: "numeric",\n      month: "2-digit",\n      day: "2-digit",\n      hour: "2-digit",\n      minute: "2-digit",\n      second: "2-digit"\n    });\n  }\n  return dtfCache[zone];\n}\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date).replace(/\\u200E/g, ""),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date),\n    filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i],\n      pos = typeToPos[type];\n\n    if (!isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nlet ianaZoneCache = {};\n/**\n * A zone identified by an IANA identifier, like America/New_York\n * @implements {Zone}\n */\nclass IANAZone extends Zone {\n  /**\n   * @param {string} name - Zone name\n   * @return {IANAZone}\n   */\n  static create(name) {\n    if (!ianaZoneCache[name]) {\n      ianaZoneCache[name] = new IANAZone(name);\n    }\n    return ianaZoneCache[name];\n  }\n\n  /**\n   * Reset local caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCache() {\n    ianaZoneCache = {};\n    dtfCache = {};\n  }\n\n  /**\n   * Returns whether the provided string is a valid specifier. This only checks the string\'s format, not that the specifier identifies a known zone; see isValidZone for that.\n   * @param {string} s - The string to check validity on\n   * @example IANAZone.isValidSpecifier("America/New_York") //=> true\n   * @example IANAZone.isValidSpecifier("Fantasia/Castle") //=> true\n   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false\n   * @return {boolean}\n   */\n  static isValidSpecifier(s) {\n    return !!(s && s.match(matchingRegex));\n  }\n\n  /**\n   * Returns whether the provided string identifies a real zone\n   * @param {string} zone - The string to check\n   * @example IANAZone.isValidZone("America/New_York") //=> true\n   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false\n   * @example IANAZone.isValidZone("Sport~~blorp") //=> false\n   * @return {boolean}\n   */\n  static isValidZone(zone) {\n    try {\n      new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Etc/GMT+8 -> -480\n  /** @ignore */\n  static parseGMTOffset(specifier) {\n    if (specifier) {\n      const match = specifier.match(/^Etc\\/GMT(0|[+-]\\d{1,2})$/i);\n      if (match) {\n        return -60 * parseInt(match[1]);\n      }\n    }\n    return null;\n  }\n\n  constructor(name) {\n    super();\n    /** @private **/\n    this.zoneName = name;\n    /** @private **/\n    this.valid = IANAZone.isValidZone(name);\n  }\n\n  /** @override **/\n  get type() {\n    return "iana";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get universal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale, this.name);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    const date = new Date(ts);\n\n    if (isNaN(date)) return NaN;\n\n    const dtf = makeDTF(this.name),\n      [year, month, day, hour, minute, second] = dtf.formatToParts\n        ? partsOffset(dtf, date)\n        : hackyOffset(dtf, date),\n      // work around https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat\n      adjustedHour = hour === 24 ? 0 : hour;\n\n    const asUTC = objToLocalTS({\n      year,\n      month,\n      day,\n      hour: adjustedHour,\n      minute,\n      second,\n      millisecond: 0\n    });\n\n    let asTS = +date;\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === "iana" && otherZone.name === this.name;\n  }\n\n  /** @override **/\n  get isValid() {\n    return this.valid;\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/zones/fixedOffsetZone.js\n\n\n\nlet fixedOffsetZone_singleton = null;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nclass FixedOffsetZone extends Zone {\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (fixedOffsetZone_singleton === null) {\n      fixedOffsetZone_singleton = new FixedOffsetZone(0);\n    }\n    return fixedOffsetZone_singleton;\n  }\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier("UTC+6")\n   * @example FixedOffsetZone.parseSpecifier("UTC+06")\n   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")\n   * @return {FixedOffsetZone}\n   */\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /** @override **/\n  get type() {\n    return "fixed";\n  }\n\n  /** @override **/\n  get name() {\n    return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;\n  }\n\n  /** @override **/\n  offsetName() {\n    return this.name;\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /** @override **/\n  get universal() {\n    return true;\n  }\n\n  /** @override **/\n  offset() {\n    return this.fixed;\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/zones/invalidZone.js\n\n\n/**\n * A zone that failed to parse. You should never need to instantiate this.\n * @implements {Zone}\n */\nclass InvalidZone extends Zone {\n  constructor(zoneName) {\n    super();\n    /**  @private */\n    this.zoneName = zoneName;\n  }\n\n  /** @override **/\n  get type() {\n    return "invalid";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get universal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName() {\n    return null;\n  }\n\n  /** @override **/\n  formatOffset() {\n    return "";\n  }\n\n  /** @override **/\n  offset() {\n    return NaN;\n  }\n\n  /** @override **/\n  equals() {\n    return false;\n  }\n\n  /** @override **/\n  get isValid() {\n    return false;\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/zoneUtil.js\n/**\n * @private\n */\n\n\n\n\n\n\n\n\nfunction normalizeZone(input, defaultZone) {\n  let offset;\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === "local") return defaultZone;\n    else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;\n    else if ((offset = IANAZone.parseGMTOffset(input)) != null) {\n      // handle Etc/GMT-4, which V8 chokes on\n      return FixedOffsetZone.instance(offset);\n    } else if (IANAZone.isValidSpecifier(lowered)) return IANAZone.create(input);\n    else return FixedOffsetZone.parseSpecifier(lowered) || new InvalidZone(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {\n    // This is dumb, but the instanceof check above doesn\'t seem to really work\n    // so we\'re duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/settings.js\n\n\n\n\n\n\nlet now = () => Date.now(),\n  defaultZone = null, // not setting this directly to LocalZone.instance bc loading order issues\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  throwOnInvalid = false;\n\n/**\n * Settings contains static getters and setters that control Luxon\'s overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nclass settings_Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it\'s Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Get the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static get defaultZoneName() {\n    return settings_Settings.defaultZone.name;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultZoneName(z) {\n    if (!z) {\n      defaultZone = null;\n    } else {\n      defaultZone = normalizeZone(z);\n    }\n  }\n\n  /**\n   * Get the default time zone object to create DateTimes in. Does not affect existing instances.\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return defaultZone || LocalZone.instance;\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon\'s global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/locale.js\n\n\n\n\n\n\n\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache = {};\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet intlRelCache = {};\nfunction getCachedRTF(locString, opts = {}) {\n  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else if (hasIntl()) {\n    const computedSys = new Intl.DateTimeFormat().resolvedOptions().locale;\n    // node sometimes defaults to "und". Override that because that is dumb\n    sysLocaleCache = !computedSys || computedSys === "und" ? "en-US" : computedSys;\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = "en-US";\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we\'ll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  const uIndex = localeStr.indexOf("-u-");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    const smaller = localeStr.substring(0, uIndex);\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    const { numberingSystem, calendar } = options;\n    // return the smaller one so that we can append the calendar and numbering overrides to it\n    return [smaller, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (hasIntl()) {\n    if (outputCalendar || numberingSystem) {\n      localeStr += "-u";\n\n      if (outputCalendar) {\n        localeStr += `-ca-${outputCalendar}`;\n      }\n\n      if (numberingSystem) {\n        localeStr += `-nu-${numberingSystem}`;\n      }\n      return localeStr;\n    } else {\n      return localeStr;\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === "error") {\n    return null;\n  } else if (mode === "en") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== "latn") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === "latn" ||\n      !loc.locale ||\n      loc.locale.startsWith("en") ||\n      (hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn")\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    if (!forceSimple && hasIntl()) {\n      const intlOpts = { useGrouping: false };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser\'s numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    this.hasIntl = hasIntl();\n\n    let z;\n    if (dt.zone.universal && this.hasIntl) {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n      const isOffsetZoneSupported = IANAZone.isValidZone(offsetZ);\n      if (dt.offset !== 0 && isOffsetZoneSupported) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.\n        // So we have to make do. Two cases:\n        // 1. The format options tell us to show the zone. We can\'t do that, so the best\n        // we can do is format the date in UTC.\n        // 2. The format options don\'t tell us to show the zone. Then we can adjust them\n        // the time and tell the formatter to show it to us in UTC, so that the time is right\n        // and the bad zone doesn\'t show up.\n        z = "UTC";\n        if (opts.timeZoneName) {\n          this.dt = dt;\n        } else {\n          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n        }\n      }\n    } else if (dt.zone.type === "local") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    if (this.hasIntl) {\n      const intlOpts = Object.assign({}, this.opts);\n      if (z) {\n        intlOpts.timeZone = z;\n      }\n      this.dtf = getCachedDTF(intl, intlOpts);\n    }\n  }\n\n  format() {\n    if (this.hasIntl) {\n      return this.dtf.format(this.dt.toJSDate());\n    } else {\n      const tokenFormat = formatString(this.opts),\n        loc = Locale.create("en-US");\n      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);\n    }\n  }\n\n  formatToParts() {\n    if (this.hasIntl && hasFormatToParts()) {\n      return this.dtf.formatToParts(this.dt.toJSDate());\n    } else {\n      // This is kind of a cop out. We actually could do this for English. However, we couldn\'t do it for intl strings\n      // and IMO it\'s too weird to have an uncanny valley like that\n      return [];\n    }\n  }\n\n  resolvedOptions() {\n    if (this.hasIntl) {\n      return this.dtf.resolvedOptions();\n    } else {\n      return {\n        locale: "en-US",\n        numberingSystem: "latn",\n        outputCalendar: "gregory"\n      };\n    }\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = Object.assign({ style: "long" }, opts);\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  }\n\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\n    const specifiedLocale = locale || settings_Settings.defaultLocale,\n      // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n      localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale()),\n      numberingSystemR = numberingSystem || settings_Settings.defaultNumberingSystem,\n      outputCalendarR = outputCalendar || settings_Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode(defaultOK = true) {\n    const intl = hasIntl(),\n      hasFTP = intl && hasFormatToParts(),\n      isActuallyEn = this.isEnglish(),\n      hasNoWeirdness =\n        (this.numberingSystem === null || this.numberingSystem === "latn") &&\n        (this.outputCalendar === null || this.outputCalendar === "gregory");\n\n    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {\n      return "error";\n    } else if (!hasFTP || (isActuallyEn && hasNoWeirdness)) {\n      return "en";\n    } else {\n      return "intl";\n    }\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone(Object.assign({}, alts, { defaultToEN: true }));\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone(Object.assign({}, alts, { defaultToEN: false }));\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, months, () => {\n      const intl = format ? { month: length, day: "numeric" } : { month: length },\n        formatStr = format ? "format" : "standalone";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, "month"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: "numeric", month: "long", day: "numeric" }\n          : { weekday: length },\n        formatStr = format ? "format" : "standalone";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays(dt =>\n          this.extract(dt, intl, "weekday")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      undefined,\n      defaultOK,\n      () => meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We\'re gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it\'s makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: "numeric", hour12: true };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            dt => this.extract(dt, intl, "dayperiod")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, eras, () => {\n      const intl = { era: length };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>\n          this.extract(dt, intl, "era")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find(m => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === "en" ||\n      this.locale.toLowerCase() === "en-us" ||\n      (hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us"))\n    );\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/regexParser.js\n\n\n\n\n\n/*\n * This file handles parsing for well-specified formats. Here\'s how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, "");\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return m =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [Object.assign(mergedVals, val), mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\n  isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/,\n  isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),\n  isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),\n  isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n  isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/,\n  isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\n  extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay"),\n  extractISOOrdinalData = simpleParse("year", "ordinal"),\n  sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/, // dumbed-down version of the ISO one\n  sqlTimeRegex = RegExp(\n    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`\n  ),\n  sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction regexParser_int(match, pos, fallback) {\n  const m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: regexParser_int(match, cursor),\n    month: regexParser_int(match, cursor + 1, 1),\n    day: regexParser_int(match, cursor + 2, 1)\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hours: regexParser_int(match, cursor, 0),\n    minutes: regexParser_int(match, cursor + 1, 0),\n    seconds: regexParser_int(match, cursor + 2, 0),\n    milliseconds: parseMillis(match[cursor + 3])\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO time parsing\n\nconst isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);\n\n// ISO duration parsing\n\nconst isoDuration = /^-?P(?:(?:(-?\\d{1,9})Y)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,9})W)?(?:(-?\\d{1,9})D)?(?:T(?:(-?\\d{1,9})H)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,9}))?S)?)?)$/;\n\nfunction extractISODuration(match) {\n  const [\n    s,\n    yearStr,\n    monthStr,\n    weekStr,\n    dayStr,\n    hourStr,\n    minuteStr,\n    secondStr,\n    millisecondsStr\n  ] = match;\n\n  const hasNegativePrefix = s[0] === "-";\n  const negativeSeconds = secondStr && secondStr[0] === "-";\n\n  const maybeNegate = (num, force = false) =>\n    num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;\n\n  return [\n    {\n      years: maybeNegate(parseInteger(yearStr)),\n      months: maybeNegate(parseInteger(monthStr)),\n      weeks: maybeNegate(parseInteger(weekStr)),\n      days: maybeNegate(parseInteger(dayStr)),\n      hours: maybeNegate(parseInteger(hourStr)),\n      minutes: maybeNegate(parseInteger(minuteStr)),\n      seconds: maybeNegate(parseInteger(secondStr), secondStr === "-0"),\n      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)\n    }\n  ];\n}\n\n// These are a little braindead. EDT *should* tell us that we\'re in, say, America/New_York\n// and not just that we\'re in -240 *right now*. But since I don\'t think these are used that often\n// I\'m just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\n    month: monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr)\n  };\n\n  if (secondStr) result.second = parseInteger(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? weekdaysLong.indexOf(weekdayStr) + 1\n        : weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, " ")\n    .replace(/(\\s\\s+)/g, " ")\n    .trim();\n}\n\n// http date\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\n\nconst extractISOYmdTimeAndOffset = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOWeekTimeAndOffset = combineExtractors(\n  extractISOWeekData,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);\nconst extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);\n\n/**\n * @private\n */\n\nfunction parseISODate(s) {\n  return parse(\n    s,\n    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],\n    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime],\n    [isoTimeCombinedRegex, extractISOTimeAndOffset]\n  );\n}\n\nfunction parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\n\nfunction parseHTTPDate(s) {\n  return parse(\n    s,\n    [rfc1123, extractRFC1123Or850],\n    [rfc850, extractRFC1123Or850],\n    [ascii, extractASCII]\n  );\n}\n\nfunction parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\n\nconst extractISOTimeOnly = combineExtractors(extractISOTime);\n\nfunction parseISOTimeOnly(s) {\n  return parse(s, [isoTimeOnly, extractISOTimeOnly]);\n}\n\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\n\nconst extractISOYmdTimeOffsetAndIANAZone = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\nfunction parseSQL(s) {\n  return parse(\n    s,\n    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone],\n    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]\n  );\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/duration.js\n\n\n\n\n\n\n\n\nconst INVALID = "Invalid Duration";\n\n// unit conversion constants\nconst lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 }\n  },\n  casualMatrix = Object.assign(\n    {\n      years: {\n        quarters: 4,\n        months: 12,\n        weeks: 52,\n        days: 365,\n        hours: 365 * 24,\n        minutes: 365 * 24 * 60,\n        seconds: 365 * 24 * 60 * 60,\n        milliseconds: 365 * 24 * 60 * 60 * 1000\n      },\n      quarters: {\n        months: 3,\n        weeks: 13,\n        days: 91,\n        hours: 91 * 24,\n        minutes: 91 * 24 * 60,\n        seconds: 91 * 24 * 60 * 60,\n        milliseconds: 91 * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: 4,\n        days: 30,\n        hours: 30 * 24,\n        minutes: 30 * 24 * 60,\n        seconds: 30 * 24 * 60 * 60,\n        milliseconds: 30 * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  ),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = Object.assign(\n    {\n      years: {\n        quarters: 4,\n        months: 12,\n        weeks: daysInYearAccurate / 7,\n        days: daysInYearAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      },\n      quarters: {\n        months: 3,\n        weeks: daysInYearAccurate / 28,\n        days: daysInYearAccurate / 4,\n        hours: (daysInYearAccurate * 24) / 4,\n        minutes: (daysInYearAccurate * 24 * 60) / 4,\n        seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,\n        milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4\n      },\n      months: {\n        weeks: daysInMonthAccurate / 7,\n        days: daysInMonthAccurate,\n        hours: daysInMonthAccurate * 24,\n        minutes: daysInMonthAccurate * 24 * 60,\n        seconds: daysInMonthAccurate * 24 * 60 * 60,\n        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  );\n\n// units ordered by size\nconst orderedUnits = [\n  "years",\n  "quarters",\n  "months",\n  "weeks",\n  "days",\n  "hours",\n  "minutes",\n  "seconds",\n  "milliseconds"\n];\n\nconst reverseUnits = orderedUnits.slice(0).reverse();\n\n// clone really means "create another instance just like this one, but with these changes"\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\n  };\n  return new Duration(conf);\n}\n\nfunction antiTrunc(n) {\n  return n < 0 ? Math.floor(n) : Math.ceil(n);\n}\n\n// NB: mutates parameters\nfunction convert(matrix, fromMap, fromUnit, toMap, toUnit) {\n  const conv = matrix[toUnit][fromUnit],\n    raw = fromMap[fromUnit] / conv,\n    sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),\n    // ok, so this is wild, but see the matrix in the tests\n    added =\n      !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);\n  toMap[toUnit] += added;\n  fromMap[fromUnit] -= added * conv;\n}\n\n// NB: mutates parameters\nfunction normalizeValues(matrix, vals) {\n  reverseUnits.reduce((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        convert(matrix, vals, previous, vals, current);\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n}\n\n/**\n * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it\'s just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.\n * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}\n *\n * There\'s are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nclass Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === "longterm" || false;\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? "longterm" : "casual";\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.matrix = accurate ? accurateMatrix : casualMatrix;\n    /**\n     * @access private\n     */\n    this.isLuxonDuration = true;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale=\'en-US\'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy=\'casual\'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject(Object.assign({ milliseconds: count }, opts));\n  }\n\n  /**\n   * Create a Duration from a JavaScript object with keys like \'years\' and \'hours.\n   * If this object is empty then a zero milliseconds duration is returned.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {string} [obj.locale=\'en-US\'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy=\'casual\'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj) {\n    if (obj == null || typeof obj !== "object") {\n      throw new InvalidArgumentError(\n        `Duration.fromObject: argument expected to be an object, got ${\n          obj === null ? "null" : typeof obj\n        }`\n      );\n    }\n    return new Duration({\n      values: normalizeObject(obj, Duration.normalizeUnit, [\n        "locale",\n        "numberingSystem",\n        "conversionAccuracy",\n        "zone" // a bit of debt; it\'s super inconvenient internally not to be able to blindly pass this\n      ]),\n      loc: Locale.fromObject(obj),\n      conversionAccuracy: obj.conversionAccuracy\n    });\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale=\'en-US\'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy=\'casual\'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO(\'P3Y6M1W4DT12H30M5S\').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO(\'PT23H\').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO(\'P5Y3M\').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const [parsed] = parseISODuration(text);\n    if (parsed) {\n      const obj = Object.assign(parsed, opts);\n      return Duration.fromObject(obj);\n    } else {\n      return Duration.invalid("unparsable", `the input "${text}" can\'t be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 time string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale=\'en-US\'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy=\'casual\'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @example Duration.fromISOTime(\'11:22:33.444\').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }\n   * @example Duration.fromISOTime(\'11:00\').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime(\'T11:00\').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime(\'1100\').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime(\'T1100\').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @return {Duration}\n   */\n  static fromISOTime(text, opts) {\n    const [parsed] = parseISOTimeOnly(text);\n    if (parsed) {\n      const obj = Object.assign(parsed, opts);\n      return Duration.fromObject(obj);\n    } else {\n      return Duration.invalid("unparsable", `the input "${text}" can\'t be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Duration}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (settings_Settings.throwOnInvalid) {\n      throw new InvalidDurationError(invalid);\n    } else {\n      return new Duration({ invalid });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit) {\n    const normalized = {\n      year: "years",\n      years: "years",\n      quarter: "quarters",\n      quarters: "quarters",\n      month: "months",\n      months: "months",\n      week: "weeks",\n      weeks: "weeks",\n      day: "days",\n      days: "days",\n      hour: "hours",\n      hours: "hours",\n      minute: "minutes",\n      minutes: "minutes",\n      second: "seconds",\n      seconds: "seconds",\n      millisecond: "milliseconds",\n      milliseconds: "milliseconds"\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDuration(o) {\n    return (o && o.isLuxonDuration) || false;\n  }\n\n  /**\n   * Get  the locale of a Duration, such \'en-GB\'\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such \'beng\'. The numbering system is used when formatting the Duration\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits\n   * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations\'s conversion accuracy setting.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - options\n   * @param {boolean} [opts.floor=true] - floor numerical values\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\n    const fmtOpts = Object.assign({}, opts, {\n      floor: opts.round !== false && opts.floor !== false\n    });\n    return this.isValid\n      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a JavaScript object with this Duration\'s values.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.values);\n\n    if (opts.includeConfig) {\n      base.conversionAccuracy = this.conversionAccuracy;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> \'P3YT45S\'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> \'P4MT45S\'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> \'P5M\'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> \'PT5M\'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> \'PT0.006S\'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = "P";\n    if (this.years !== 0) s += this.years + "Y";\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";\n    if (this.weeks !== 0) s += this.weeks + "W";\n    if (this.days !== 0) s += this.days + "D";\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)\n      s += "T";\n    if (this.hours !== 0) s += this.hours + "H";\n    if (this.minutes !== 0) s += this.minutes + "M";\n    if (this.seconds !== 0 || this.milliseconds !== 0)\n      // this will handle "floating point madness" by removing extra decimal places\n      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\n      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";\n    if (s === "P") s += "T0S";\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.\n   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they\'re 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they\'re 0\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format=\'extended\'] - choose between the basic and extended format\n   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> \'11:00:00.000\'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> \'11:00:00\'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> \'11:00\'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> \'T11:00:00.000\'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: \'basic\' }) //=> \'110000.000\'\n   * @return {string}\n   */\n  toISOTime(opts = {}) {\n    if (!this.isValid) return null;\n\n    const millis = this.toMillis();\n    if (millis < 0 || millis >= 86400000) return null;\n\n    opts = Object.assign(\n      {\n        suppressMilliseconds: false,\n        suppressSeconds: false,\n        includePrefix: false,\n        format: "extended"\n      },\n      opts\n    );\n\n    const value = this.shiftTo("hours", "minutes", "seconds", "milliseconds");\n\n    let fmt = opts.format === "basic" ? "hhmm" : "hh:mm";\n\n    if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {\n      fmt += opts.format === "basic" ? "ss" : ":ss";\n      if (!opts.suppressMilliseconds || value.milliseconds !== 0) {\n        fmt += ".SSS";\n      }\n    }\n\n    let str = value.toFormat(fmt);\n\n    if (opts.includePrefix) {\n      str = "T" + str;\n    }\n\n    return str;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */\n  toMillis() {\n    return this.as("milliseconds");\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = friendlyDuration(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      if (util_hasOwnProperty(dur.values, k) || util_hasOwnProperty(this.values, k)) {\n        result[k] = dur.get(k) + this.get(k);\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Scale this Duration by the specified amount. Return a newly-constructed Duration.\n   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === "hour" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\n   * @return {Duration}\n   */\n  mapUnits(fn) {\n    if (!this.isValid) return this;\n    const result = {};\n    for (const k of Object.keys(this.values)) {\n      result[k] = asNumber(fn(this.values[k], k));\n    }\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as \'minute\' or \'day\'\n   * @example Duration.fromObject({years: 2, days: 3}).get(\'years\') //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).get(\'months\') //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).get(\'days\') //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * "Set" the values of specified units. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit, []));\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: \'en-GB\' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }),\n      opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as \'minutes\' or \'days\'\n   * @example Duration.fromObject({years: 1}).as(\'days\') //=> 365\n   * @example Duration.fromObject({years: 1}).as(\'months\') //=> 12\n   * @example Duration.fromObject({hours: 60}).as(\'days\') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n    const vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return clone(this, { values: vals }, true);\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo(\'minutes\', \'milliseconds\').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map(u => Duration.normalizeUnit(u));\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven\'t boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          own += this.matrix[ak][k] * accumulated[ak];\n          accumulated[ak] = 0;\n        }\n\n        // plus anything that\'s already in this unit\n        if (isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = own - i; // we\'d like to absorb these fractions in another unit\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            convert(this.matrix, vals, down, built, k);\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    // lastUnit must be defined since units is not empty\n    for (const key in accumulated) {\n      if (accumulated[key] !== 0) {\n        built[lastUnit] +=\n          key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n      }\n    }\n\n    return clone(this, { values: built }, true).normalize();\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = -this.values[k];\n    }\n    return clone(this, { values: negated }, true);\n  }\n\n  /**\n   * Get the years.\n   * @type {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the quarters.\n   * @type {number}\n   */\n  get quarters() {\n    return this.isValid ? this.values.quarters || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @type {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @type {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @type {number}\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @type {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @type {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    function eq(v1, v2) {\n      // Consider 0 and undefined as equal\n      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;\n      return v1 === v2;\n    }\n\n    for (const u of orderedUnits) {\n      if (!eq(this.values[u], other.values[u])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\n * @private\n */\nfunction friendlyDuration(durationish) {\n  if (isNumber(durationish)) {\n    return Duration.fromMillis(durationish);\n  } else if (Duration.isDuration(durationish)) {\n    return durationish;\n  } else if (typeof durationish === "object") {\n    return Duration.fromObject(durationish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown duration argument ${durationish} of type ${typeof durationish}`\n    );\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/interval.js\n\n\n\n\n\n\nconst interval_INVALID = "Invalid Interval";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid("missing or invalid start");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid("missing or invalid end");\n  } else if (end < start) {\n    return Interval.invalid(\n      "end before start",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it\'s a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}.\n * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.\n */\nclass Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (settings_Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = friendlyDuration(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = friendlyDuration(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || "").split("/", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid("unparsable", `the input "${text}" can\'t be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval\'s end is at least its start, meaning that the Interval isn\'t \'backwards\'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as \'hours\' or \'days\') to return the length in.\n   * @return {number}\n   */\n  length(unit = "milliseconds") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying \'day\'\n   * asks \'what dates are included in this interval?\', not \'how many days long is this interval?\'\n   * @param {string} [unit=\'milliseconds\'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = "milliseconds") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval\'s start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval\'s start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval\'s end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...[DateTime]} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter(d => this.contains(d))\n        .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  splitBy(duration) {\n    const dur = friendlyDuration(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits(x => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval\'s end is adjacent to the specified Interval\'s start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval\'s start is adjacent to the specified Interval\'s end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don\'t intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(\n      ([sofar, current], item) => {\n        if (!current) {\n          return [sofar, item];\n        } else if (current.overlaps(item) || current.abutsStart(item)) {\n          return [sofar, current.union(item)];\n        } else {\n          return [sofar.concat([current]), item];\n        }\n      },\n      [[], null]\n    );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{ time: i.s, type: "s" }, { time: i.e, type: "e" }]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === "s" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn\'t overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {[Interval]}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map(i => this.intersection(i))\n      .filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return interval_INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return interval_INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return interval_INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return interval_INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  \' – \'] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = " – " } = {}) {\n    if (!this.isValid) return interval_INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=[\'milliseconds\']] - the unit or units (such as \'hours\' or \'days\') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy=\'casual\'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(\'days\').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration([\'hours\', \'minutes\']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration([\'hours\', \'minutes\', \'seconds\']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(\'seconds\').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/info.js\n\n\n\n\n\n\n\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nclass Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone=\'local\'] - Zone to check. Defaults to the environment\'s local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = settings_Settings.defaultZone) {\n    const proto = DateTime.now()\n      .setZone(zone)\n      .set({ month: 12 });\n\n    return !zone.universal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */\n  static isValidIANAZone(zone) {\n    return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);\n  }\n\n  /**\n   * Converts the input into a {@link Zone} instance.\n   *\n   * * If `input` is already a Zone instance, it is returned unchanged.\n   * * If `input` is a string containing a valid time zone name, a Zone instance\n   *   with that name is returned.\n   * * If `input` is a string that doesn\'t refer to a known time zone, a Zone\n   *   instance with {@link Zone.isValid} == false is returned.\n   * * If `input is a number, a Zone instance with the specified fixed offset\n   *   in minutes is returned.\n   * * If `input` is `null` or `undefined`, the default zone is returned.\n   * @param {string|Zone|number} [input] - the value to be converted\n   * @return {Zone}\n   */\n  static normalizeZone(input) {\n    return normalizeZone(input, settings_Settings.defaultZone);\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length=\'long\'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar=\'gregory\'] - the calendar\n   * @example Info.months()[0] //=> \'January\'\n   * @example Info.months(\'short\')[0] //=> \'Jan\'\n   * @example Info.months(\'numeric\')[0] //=> \'1\'\n   * @example Info.months(\'short\', { locale: \'fr-CA\' } )[0] //=> \'janv.\'\n   * @example Info.months(\'numeric\', { locale: \'ar\' })[0] //=> \'١\'\n   * @example Info.months(\'long\', { outputCalendar: \'islamic\' })[0] //=> \'Rabiʻ I\'\n   * @return {[string]}\n   */\n  static months(\n    length = "long",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they\'re meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link months}\n   * @param {string} [length=\'long\'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar=\'gregory\'] - the calendar\n   * @return {[string]}\n   */\n  static monthsFormat(\n    length = "long",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length=\'long\'] - the length of the weekday representation, such as "narrow", "short", "long".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @example Info.weekdays()[0] //=> \'Monday\'\n   * @example Info.weekdays(\'short\')[0] //=> \'Mon\'\n   * @example Info.weekdays(\'short\', { locale: \'fr-CA\' })[0] //=> \'lun.\'\n   * @example Info.weekdays(\'short\', { locale: \'ar\' })[0] //=> \'الاثنين\'\n   * @return {[string]}\n   */\n  static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they\'re meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link weekdays}\n   * @param {string} [length=\'long\'] - the length of the weekday representation, such as "narrow", "short", "long".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @return {[string]}\n   */\n  static weekdaysFormat(\n    length = "long",\n    { locale = null, numberingSystem = null, locObj = null } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ \'AM\', \'PM\' ]\n   * @example Info.meridiems({ locale: \'my\' }) //=> [ \'နံနက်\', \'ညနေ\' ]\n   * @return {[string]}\n   */\n  static meridiems({ locale = null } = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as [\'BC\', \'AD\']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length=\'short\'] - the length of the era representation, such as "short" or "long".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ \'BC\', \'AD\' ]\n   * @example Info.eras(\'long\') //=> [ \'Before Christ\', \'Anno Domini\' ]\n   * @example Info.eras(\'long\', { locale: \'fr\' }) //=> [ \'avant Jésus-Christ\', \'après Jésus-Christ\' ]\n   * @return {[string]}\n   */\n  static eras(length = "short", { locale = null } = {}) {\n    return Locale.create(locale, null, "gregory").eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that\'s the case.\n   * Keys:\n   * * `zones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * * `relative`: whether this environment supports relative time formatting\n   * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }\n   * @return {Object}\n   */\n  static features() {\n    let intl = false,\n      intlTokens = false,\n      zones = false,\n      relative = false;\n\n    if (hasIntl()) {\n      intl = true;\n      intlTokens = hasFormatToParts();\n      relative = hasRelative();\n\n      try {\n        zones =\n          new Intl.DateTimeFormat("en", { timeZone: "America/New_York" }).resolvedOptions()\n            .timeZone === "America/New_York";\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return { intl, intlTokens, zones, relative };\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/diff.js\n\n\nfunction dayDiff(earlier, later) {\n  const utcDayStart = dt =>\n      dt\n        .toUTC(0, { keepLocalTime: true })\n        .startOf("day")\n        .valueOf(),\n    ms = utcDayStart(later) - utcDayStart(earlier);\n  return Math.floor(Duration.fromMillis(ms).as("days"));\n}\n\nfunction highOrderDiffs(cursor, later, units) {\n  const differs = [\n    ["years", (a, b) => b.year - a.year],\n    ["quarters", (a, b) => b.quarter - a.quarter],\n    ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],\n    [\n      "weeks",\n      (a, b) => {\n        const days = dayDiff(a, b);\n        return (days - (days % 7)) / 7;\n      }\n    ],\n    ["days", dayDiff]\n  ];\n\n  const results = {};\n  let lowestOrder, highWater;\n\n  for (const [unit, differ] of differs) {\n    if (units.indexOf(unit) >= 0) {\n      lowestOrder = unit;\n\n      let delta = differ(cursor, later);\n      highWater = cursor.plus({ [unit]: delta });\n\n      if (highWater > later) {\n        cursor = cursor.plus({ [unit]: delta - 1 });\n        delta -= 1;\n      } else {\n        cursor = highWater;\n      }\n\n      results[unit] = delta;\n    }\n  }\n\n  return [cursor, results, highWater, lowestOrder];\n}\n\n/* harmony default export */ function diff(earlier, later, units, opts) {\n  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);\n\n  const remainingMillis = later - cursor;\n\n  const lowerOrderUnits = units.filter(\n    u => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0\n  );\n\n  if (lowerOrderUnits.length === 0) {\n    if (highWater < later) {\n      highWater = cursor.plus({ [lowestOrder]: 1 });\n    }\n\n    if (highWater !== cursor) {\n      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);\n    }\n  }\n\n  const duration = Duration.fromObject(Object.assign(results, opts));\n\n  if (lowerOrderUnits.length > 0) {\n    return Duration.fromMillis(remainingMillis, opts)\n      .shiftTo(...lowerOrderUnits)\n      .plus(duration);\n  } else {\n    return duration;\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/digits.js\nconst numberingSystems = {\n  arab: "[\\u0660-\\u0669]",\n  arabext: "[\\u06F0-\\u06F9]",\n  bali: "[\\u1B50-\\u1B59]",\n  beng: "[\\u09E6-\\u09EF]",\n  deva: "[\\u0966-\\u096F]",\n  fullwide: "[\\uFF10-\\uFF19]",\n  gujr: "[\\u0AE6-\\u0AEF]",\n  hanidec: "[〇|一|二|三|四|五|六|七|八|九]",\n  khmr: "[\\u17E0-\\u17E9]",\n  knda: "[\\u0CE6-\\u0CEF]",\n  laoo: "[\\u0ED0-\\u0ED9]",\n  limb: "[\\u1946-\\u194F]",\n  mlym: "[\\u0D66-\\u0D6F]",\n  mong: "[\\u1810-\\u1819]",\n  mymr: "[\\u1040-\\u1049]",\n  orya: "[\\u0B66-\\u0B6F]",\n  tamldec: "[\\u0BE6-\\u0BEF]",\n  telu: "[\\u0C66-\\u0C6F]",\n  thai: "[\\u0E50-\\u0E59]",\n  tibt: "[\\u0F20-\\u0F29]",\n  latn: "\\\\d"\n};\n\nconst numberingSystemsUTF16 = {\n  arab: [1632, 1641],\n  arabext: [1776, 1785],\n  bali: [6992, 7001],\n  beng: [2534, 2543],\n  deva: [2406, 2415],\n  fullwide: [65296, 65303],\n  gujr: [2790, 2799],\n  khmr: [6112, 6121],\n  knda: [3302, 3311],\n  laoo: [3792, 3801],\n  limb: [6470, 6479],\n  mlym: [3430, 3439],\n  mong: [6160, 6169],\n  mymr: [4160, 4169],\n  orya: [2918, 2927],\n  tamldec: [3046, 3055],\n  telu: [3174, 3183],\n  thai: [3664, 3673],\n  tibt: [3872, 3881]\n};\n\n// eslint-disable-next-line\nconst hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, "").split("");\n\nfunction parseDigits(str) {\n  let value = parseInt(str, 10);\n  if (isNaN(value)) {\n    value = "";\n    for (let i = 0; i < str.length; i++) {\n      const code = str.charCodeAt(i);\n\n      if (str[i].search(numberingSystems.hanidec) !== -1) {\n        value += hanidecChars.indexOf(str[i]);\n      } else {\n        for (const key in numberingSystemsUTF16) {\n          const [min, max] = numberingSystemsUTF16[key];\n          if (code >= min && code <= max) {\n            value += code - min;\n          }\n        }\n      }\n    }\n    return parseInt(value, 10);\n  } else {\n    return value;\n  }\n}\n\nfunction digitRegex({ numberingSystem }, append = "") {\n  return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/tokenParser.js\n\n\n\n\n\n\n\n\nconst MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";\n\nfunction intUnit(regex, post = i => i) {\n  return { regex, deser: ([s]) => post(parseDigits(s)) };\n}\n\nconst NBSP = String.fromCharCode(160);\nconst spaceOrNBSP = `( |${NBSP})`;\nconst spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  // make space and non breakable space characters interchangeable\n  return s.replace(/\\./g, "\\\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);\n}\n\nfunction stripInsensitivities(s) {\n  return s\n    .replace(/\\./g, "") // ignore dots that were made optional\n    .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp\n    .toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join("|")),\n      deser: ([s]) =>\n        strings.findIndex(i => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction escapeToken(value) {\n  // eslint-disable-next-line no-useless-escape\n  return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, "\\\\$&");\n}\n\nfunction unitForToken(token, loc) {\n  const one = digitRegex(loc),\n    two = digitRegex(loc, "{2}"),\n    three = digitRegex(loc, "{3}"),\n    four = digitRegex(loc, "{4}"),\n    six = digitRegex(loc, "{6}"),\n    oneOrTwo = digitRegex(loc, "{1,2}"),\n    oneToThree = digitRegex(loc, "{1,3}"),\n    oneToSix = digitRegex(loc, "{1,6}"),\n    oneToNine = digitRegex(loc, "{1,9}"),\n    twoToFour = digitRegex(loc, "{2,4}"),\n    fourToSix = digitRegex(loc, "{4,6}"),\n    literal = t => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),\n    unitate = t => {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case "G":\n          return oneOf(loc.eras("short", false), 0);\n        case "GG":\n          return oneOf(loc.eras("long", false), 0);\n        // years\n        case "y":\n          return intUnit(oneToSix);\n        case "yy":\n          return intUnit(twoToFour, untruncateYear);\n        case "yyyy":\n          return intUnit(four);\n        case "yyyyy":\n          return intUnit(fourToSix);\n        case "yyyyyy":\n          return intUnit(six);\n        // months\n        case "M":\n          return intUnit(oneOrTwo);\n        case "MM":\n          return intUnit(two);\n        case "MMM":\n          return oneOf(loc.months("short", true, false), 1);\n        case "MMMM":\n          return oneOf(loc.months("long", true, false), 1);\n        case "L":\n          return intUnit(oneOrTwo);\n        case "LL":\n          return intUnit(two);\n        case "LLL":\n          return oneOf(loc.months("short", false, false), 1);\n        case "LLLL":\n          return oneOf(loc.months("long", false, false), 1);\n        // dates\n        case "d":\n          return intUnit(oneOrTwo);\n        case "dd":\n          return intUnit(two);\n        // ordinals\n        case "o":\n          return intUnit(oneToThree);\n        case "ooo":\n          return intUnit(three);\n        // time\n        case "HH":\n          return intUnit(two);\n        case "H":\n          return intUnit(oneOrTwo);\n        case "hh":\n          return intUnit(two);\n        case "h":\n          return intUnit(oneOrTwo);\n        case "mm":\n          return intUnit(two);\n        case "m":\n          return intUnit(oneOrTwo);\n        case "q":\n          return intUnit(oneOrTwo);\n        case "qq":\n          return intUnit(two);\n        case "s":\n          return intUnit(oneOrTwo);\n        case "ss":\n          return intUnit(two);\n        case "S":\n          return intUnit(oneToThree);\n        case "SSS":\n          return intUnit(three);\n        case "u":\n          return simple(oneToNine);\n        // meridiem\n        case "a":\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case "kkkk":\n          return intUnit(four);\n        case "kk":\n          return intUnit(twoToFour, untruncateYear);\n        // weekNumber (W)\n        case "W":\n          return intUnit(oneOrTwo);\n        case "WW":\n          return intUnit(two);\n        // weekdays\n        case "E":\n        case "c":\n          return intUnit(one);\n        case "EEE":\n          return oneOf(loc.weekdays("short", false, false), 1);\n        case "EEEE":\n          return oneOf(loc.weekdays("long", false, false), 1);\n        case "ccc":\n          return oneOf(loc.weekdays("short", true, false), 1);\n        case "cccc":\n          return oneOf(loc.weekdays("long", true, false), 1);\n        // offset/zone\n        case "Z":\n        case "ZZ":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);\n        case "ZZZ":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);\n        // we don\'t support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don\'t have any way to figure out what they are\n        case "z":\n          return simple(/[a-z_+-/]{1,256}?/i);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token) || {\n    invalidReason: MISSING_FTP\n  };\n\n  unit.token = token;\n\n  return unit;\n}\n\nconst partTypeStyleToTokenVal = {\n  year: {\n    "2-digit": "yy",\n    numeric: "yyyyy"\n  },\n  month: {\n    numeric: "M",\n    "2-digit": "MM",\n    short: "MMM",\n    long: "MMMM"\n  },\n  day: {\n    numeric: "d",\n    "2-digit": "dd"\n  },\n  weekday: {\n    short: "EEE",\n    long: "EEEE"\n  },\n  dayperiod: "a",\n  dayPeriod: "a",\n  hour: {\n    numeric: "h",\n    "2-digit": "hh"\n  },\n  minute: {\n    numeric: "m",\n    "2-digit": "mm"\n  },\n  second: {\n    numeric: "s",\n    "2-digit": "ss"\n  }\n};\n\nfunction tokenForPart(part, locale, formatOpts) {\n  const { type, value } = part;\n\n  if (type === "literal") {\n    return {\n      literal: true,\n      val: value\n    };\n  }\n\n  const style = formatOpts[type];\n\n  let val = partTypeStyleToTokenVal[type];\n  if (typeof val === "object") {\n    val = val[style];\n  }\n\n  if (val) {\n    return {\n      literal: false,\n      val\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildRegex(units) {\n  const re = units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, "");\n  return [`^${re}$`, units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (util_hasOwnProperty(handlers, i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = token => {\n    switch (token) {\n      case "S":\n        return "millisecond";\n      case "s":\n        return "second";\n      case "m":\n        return "minute";\n      case "h":\n      case "H":\n        return "hour";\n      case "d":\n        return "day";\n      case "o":\n        return "ordinal";\n      case "L":\n      case "M":\n        return "month";\n      case "y":\n        return "year";\n      case "E":\n      case "c":\n        return "weekday";\n      case "W":\n        return "weekNumber";\n      case "k":\n        return "weekYear";\n      case "q":\n        return "quarter";\n      default:\n        return null;\n    }\n  };\n\n  let zone;\n  if (!isUndefined(matches.Z)) {\n    zone = new FixedOffsetZone(matches.Z);\n  } else if (!isUndefined(matches.z)) {\n    zone = IANAZone.create(matches.z);\n  } else {\n    zone = null;\n  }\n\n  if (!isUndefined(matches.q)) {\n    matches.M = (matches.q - 1) * 3 + 1;\n  }\n\n  if (!isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!isUndefined(matches.u)) {\n    matches.S = parseMillis(matches.u);\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone];\n}\n\nlet dummyDateTimeCache = null;\n\nfunction getDummyDateTime() {\n  if (!dummyDateTimeCache) {\n    dummyDateTimeCache = DateTime.fromMillis(1555555555555);\n  }\n\n  return dummyDateTimeCache;\n}\n\nfunction maybeExpandMacroToken(token, locale) {\n  if (token.literal) {\n    return token;\n  }\n\n  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);\n\n  if (!formatOpts) {\n    return token;\n  }\n\n  const formatter = Formatter.create(locale, formatOpts);\n  const parts = formatter.formatDateTimeParts(getDummyDateTime());\n\n  const tokens = parts.map(p => tokenForPart(p, locale, formatOpts));\n\n  if (tokens.includes(undefined)) {\n    return token;\n  }\n\n  return tokens;\n}\n\nfunction expandMacroTokens(tokens, locale) {\n  return Array.prototype.concat(...tokens.map(t => maybeExpandMacroToken(t, locale)));\n}\n\n/**\n * @private\n */\n\nfunction explainFromTokens(locale, input, format) {\n  const tokens = expandMacroTokens(Formatter.parseFormat(format), locale),\n    units = tokens.map(t => unitForToken(t, locale)),\n    disqualifyingUnit = units.find(t => t.invalidReason);\n\n  if (disqualifyingUnit) {\n    return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };\n  } else {\n    const [regexString, handlers] = buildRegex(units),\n      regex = RegExp(regexString, "i"),\n      [rawMatches, matches] = match(input, regex, handlers),\n      [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\n    if (util_hasOwnProperty(matches, "a") && util_hasOwnProperty(matches, "H")) {\n      throw new ConflictingSpecificationError(\n        "Can\'t include meridiem when specifying 24-hour format"\n      );\n    }\n    return { input, tokens, regex, rawMatches, matches, result, zone };\n  }\n}\n\nfunction parseFromTokens(locale, input, format) {\n  const { result, zone, invalidReason } = explainFromTokens(locale, input, format);\n  return [result, zone, invalidReason];\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/impl/conversions.js\n\n\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\n    "unit out of range",\n    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`\n  );\n}\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(i => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nfunction gregorianToWeek(gregObj) {\n  const { year, month, day } = gregObj,\n    ordinal = computeOrdinal(year, month, day),\n    weekday = dayOfWeek(year, month, day);\n\n  let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n    weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear);\n  } else if (weekNumber > weeksInWeekYear(year)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return Object.assign({ weekYear, weekNumber, weekday }, timeObject(gregObj));\n}\n\nfunction weekToGregorian(weekData) {\n  const { weekYear, weekNumber, weekday } = weekData,\n    weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n    yearInDays = daysInYear(weekYear);\n\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n    year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n\n  return Object.assign({ year, month, day }, timeObject(weekData));\n}\n\nfunction gregorianToOrdinal(gregData) {\n  const { year, month, day } = gregData,\n    ordinal = computeOrdinal(year, month, day);\n\n  return Object.assign({ year, ordinal }, timeObject(gregData));\n}\n\nfunction ordinalToGregorian(ordinalData) {\n  const { year, ordinal } = ordinalData,\n    { month, day } = uncomputeOrdinal(year, ordinal);\n\n  return Object.assign({ year, month, day }, timeObject(ordinalData));\n}\n\nfunction hasInvalidWeekData(obj) {\n  const validYear = isInteger(obj.weekYear),\n    validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),\n    validWeekday = integerBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return unitOutOfRange("weekYear", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange("week", obj.week);\n  } else if (!validWeekday) {\n    return unitOutOfRange("weekday", obj.weekday);\n  } else return false;\n}\n\nfunction hasInvalidOrdinalData(obj) {\n  const validYear = isInteger(obj.year),\n    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return unitOutOfRange("year", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange("ordinal", obj.ordinal);\n  } else return false;\n}\n\nfunction hasInvalidGregorianData(obj) {\n  const validYear = isInteger(obj.year),\n    validMonth = integerBetween(obj.month, 1, 12),\n    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return unitOutOfRange("year", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange("month", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange("day", obj.day);\n  } else return false;\n}\n\nfunction hasInvalidTimeData(obj) {\n  const { hour, minute, second, millisecond } = obj;\n  const validHour =\n      integerBetween(hour, 0, 23) ||\n      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),\n    validMinute = integerBetween(minute, 0, 59),\n    validSecond = integerBetween(second, 0, 59),\n    validMillisecond = integerBetween(millisecond, 0, 999);\n\n  if (!validHour) {\n    return unitOutOfRange("hour", hour);\n  } else if (!validMinute) {\n    return unitOutOfRange("minute", minute);\n  } else if (!validSecond) {\n    return unitOutOfRange("second", second);\n  } else if (!validMillisecond) {\n    return unitOutOfRange("millisecond", millisecond);\n  } else return false;\n}\n\n;// CONCATENATED MODULE: ./node_modules/luxon/src/datetime.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst datetime_INVALID = "Invalid DateTime";\nconst MAX_DATE = 8.64e15;\n\nfunction unsupportedZone(zone) {\n  return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);\n}\n\n// we cache week data on the DT object and this intermediates the cache\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n// clone really means, "make a new object with these modifications". all "setters" really use this\n// to create a new object while only changing some of the properties\nfunction datetime_clone(inst, alts) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalid: inst.invalid\n  };\n  return new DateTime(Object.assign({}, current, alts, { old: current }));\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we\'ll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn\'t change and we\'re done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we\'re done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it\'s different, we\'re in a hole time. The offset has changed, but the we don\'t adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    year = inst.c.year + Math.trunc(dur.years),\n    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,\n    c = Object.assign({}, inst.c, {\n      year,\n      month,\n      day:\n        Math.min(inst.c.day, daysInMonth(year, month)) +\n        Math.trunc(dur.days) +\n        Math.trunc(dur.weeks) * 7\n    }),\n    millisToAdd = Duration.fromObject({\n      years: dur.years - Math.trunc(dur.years),\n      quarters: dur.quarters - Math.trunc(dur.quarters),\n      months: dur.months - Math.trunc(dur.months),\n      weeks: dur.weeks - Math.trunc(dur.weeks),\n      days: dur.days - Math.trunc(dur.days),\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds\n    }).as("milliseconds"),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(\n        Object.assign(parsed, opts, {\n          zone: interpretationZone,\n          // setZone is a valid option in the calling methods, but not in fromObject\n          setZone: undefined\n        })\n      );\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(\n      new Invalid("unparsable", `the input "${text}" can\'t be parsed as ${format}`)\n    );\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format, allowZ = true) {\n  return dt.isValid\n    ? Formatter.create(Locale.create("en-US"), {\n        allowZ,\n        forceSimple: true\n      }).formatDateTimeFromString(dt, format)\n    : null;\n}\n\n// technical time formats (e.g. the time part of ISO 8601), take some options\n// and this commonizes their handling\nfunction toTechTimeFormat(\n  dt,\n  {\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeOffset,\n    includePrefix = false,\n    includeZone = false,\n    spaceZone = false,\n    format = "extended"\n  }\n) {\n  let fmt = format === "basic" ? "HHmm" : "HH:mm";\n\n  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {\n    fmt += format === "basic" ? "ss" : ":ss";\n    if (!suppressMilliseconds || dt.millisecond !== 0) {\n      fmt += ".SSS";\n    }\n  }\n\n  if ((includeZone || includeOffset) && spaceZone) {\n    fmt += " ";\n  }\n\n  if (includeZone) {\n    fmt += "z";\n  } else if (includeOffset) {\n    fmt += format === "basic" ? "ZZZ" : "ZZ";\n  }\n\n  let str = toTechFormat(dt, fmt);\n\n  if (includePrefix) {\n    str = "T" + str;\n  }\n\n  return str;\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst datetime_orderedUnits = ["year", "month", "day", "hour", "minute", "second", "millisecond"],\n  orderedWeekUnits = [\n    "weekYear",\n    "weekNumber",\n    "weekday",\n    "hour",\n    "minute",\n    "second",\n    "millisecond"\n  ],\n  orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit) {\n  const normalized = {\n    year: "year",\n    years: "year",\n    month: "month",\n    months: "month",\n    day: "day",\n    days: "day",\n    hour: "hour",\n    hours: "hour",\n    minute: "minute",\n    minutes: "minute",\n    quarter: "quarter",\n    quarters: "quarter",\n    second: "second",\n    seconds: "second",\n    millisecond: "millisecond",\n    milliseconds: "millisecond",\n    weekday: "weekday",\n    weekdays: "weekday",\n    weeknumber: "weekNumber",\n    weeksnumber: "weekNumber",\n    weeknumbers: "weekNumber",\n    weekyear: "weekYear",\n    weekyears: "weekYear",\n    ordinal: "ordinal"\n  }[unit.toLowerCase()];\n\n  if (!normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn\'t do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, zone) {\n  // assume we have the higher-order units\n  for (const u of datetime_orderedUnits) {\n    if (isUndefined(obj[u])) {\n      obj[u] = defaultUnitValues[u];\n    }\n  }\n\n  const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n  if (invalid) {\n    return DateTime.invalid(invalid);\n  }\n\n  const tsNow = settings_Settings.now(),\n    offsetProvis = zone.offset(tsNow),\n    [ts, o] = objToTS(obj, offsetProvis, zone);\n\n  return new DateTime({\n    ts,\n    zone,\n    o\n  });\n}\n\nfunction diffRelative(start, end, opts) {\n  const round = isUndefined(opts.round) ? true : opts.round,\n    format = (c, unit) => {\n      c = roundTo(c, round || opts.calendary ? 0 : 2, true);\n      const formatter = end.loc.clone(opts).relFormatter(opts);\n      return formatter.format(c, unit);\n    },\n    differ = unit => {\n      if (opts.calendary) {\n        if (!end.hasSame(start, unit)) {\n          return end\n            .startOf(unit)\n            .diff(start.startOf(unit), unit)\n            .get(unit);\n        } else return 0;\n      } else {\n        return end.diff(start, unit).get(unit);\n      }\n    };\n\n  if (opts.unit) {\n    return format(differ(opts.unit), opts.unit);\n  }\n\n  for (const unit of opts.units) {\n    const count = differ(unit);\n    if (Math.abs(count) >= 1) {\n      return format(count, unit);\n    }\n  }\n  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system\'s zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link toRelative}, {@link toRelativeCalendar}, {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.\n *\n * There\'s plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nclass DateTime {\n  /**\n   * @access private\n   */\n  constructor(config) {\n    const zone = config.zone || settings_Settings.defaultZone;\n\n    let invalid =\n      config.invalid ||\n      (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) ||\n      (!zone.isValid ? unsupportedZone(zone) : null);\n    /**\n     * @access private\n     */\n    this.ts = isUndefined(config.ts) ? settings_Settings.now() : config.ts;\n\n    let c = null,\n      o = null;\n    if (!invalid) {\n      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\n\n      if (unchanged) {\n        [c, o] = [config.old.c, config.old.o];\n      } else {\n        const ot = zone.offset(this.ts);\n        c = tsToObj(this.ts, ot);\n        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;\n        c = invalid ? null : c;\n        o = invalid ? null : ot;\n      }\n    }\n\n    /**\n     * @access private\n     */\n    this._zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalid;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n    /**\n     * @access private\n     */\n    this.isLuxonDateTime = true;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a DateTime for the current instant, in the system\'s time zone.\n   *\n   * Use Settings to override these default values if needed.\n   * @example DateTime.now().toISO() //~> now in the ISO format\n   * @return {DateTime}\n   */\n  static now() {\n    return new DateTime({});\n  }\n\n  /**\n   * Create a local DateTime\n   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month, 1-indexed\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @example DateTime.local()                            //~> now\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */\n  static local(year, month, day, hour, minute, second, millisecond) {\n    if (isUndefined(year)) {\n      return DateTime.now();\n    } else {\n      return quickDT(\n        {\n          year,\n          month,\n          day,\n          hour,\n          minute,\n          second,\n          millisecond\n        },\n        settings_Settings.defaultZone\n      );\n    }\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @example DateTime.utc()                            //~> now\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z\n   * @return {DateTime}\n   */\n  static utc(year, month, day, hour, minute, second, millisecond) {\n    if (isUndefined(year)) {\n      return new DateTime({\n        ts: settings_Settings.now(),\n        zone: FixedOffsetZone.utcInstance\n      });\n    } else {\n      return quickDT(\n        {\n          year,\n          month,\n          day,\n          hour,\n          minute,\n          second,\n          millisecond\n        },\n        FixedOffsetZone.utcInstance\n      );\n    }\n  }\n\n  /**\n   * Create a DateTime from a JavaScript Date object. Uses the default zone.\n   * @param {Date} date - a JavaScript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone=\'local\'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    const ts = isDate(date) ? date.valueOf() : NaN;\n    if (Number.isNaN(ts)) {\n      return DateTime.invalid("invalid input");\n    }\n\n    const zoneToUse = normalizeZone(options.zone, settings_Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    return new DateTime({\n      ts: ts,\n      zone: zoneToUse,\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone=\'local\'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    if (!isNumber(milliseconds)) {\n      throw new InvalidArgumentError(\n        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`\n      );\n    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\n      // this isn\'t perfect because because we can still end up out of range because of additional shifting, but it\'s a start\n      return DateTime.invalid("Timestamp out of range");\n    } else {\n      return new DateTime({\n        ts: milliseconds,\n        zone: normalizeZone(options.zone, settings_Settings.defaultZone),\n        loc: Locale.fromObject(options)\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone=\'local\'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromSeconds(seconds, options = {}) {\n    if (!isNumber(seconds)) {\n      throw new InvalidArgumentError("fromSeconds requires a numerical input");\n    } else {\n      return new DateTime({\n        ts: seconds * 1000,\n        zone: normalizeZone(options.zone, settings_Settings.defaultZone),\n        loc: Locale.fromObject(options)\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a JavaScript object with keys like \'year\' and \'hour\' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {string|Zone} [obj.zone=\'local\'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [obj.locale=\'system\'s locale\'] - a locale to set on the resulting DateTime instance\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> \'1982-05-25\'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> \'1982-01-01\'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: \'utc\' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: \'local\' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: \'America/New_York\' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> \'2016-01-13\'\n   * @return {DateTime}\n   */\n  static fromObject(obj) {\n    const zoneToUse = normalizeZone(obj.zone, settings_Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    const tsNow = settings_Settings.now(),\n      offsetProvis = zoneToUse.offset(tsNow),\n      normalized = normalizeObject(obj, normalizeUnit, [\n        "zone",\n        "locale",\n        "outputCalendar",\n        "numberingSystem"\n      ]),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(obj);\n\n    // cases:\n    // just a weekday -> this week\'s instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what\'s specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        "Can\'t mix weekYear/weekNumber units with year/month/day or ordinals"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError("Can\'t mix ordinal dates with month/day");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = gregorianToOrdinal(objNow);\n    } else {\n      units = datetime_orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? hasInvalidWeekData(normalized)\n        : containsOrdinal\n          ? hasInvalidOrdinalData(normalized)\n          : hasInvalidGregorianData(normalized),\n      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\n\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? weekToGregorian(normalized)\n        : containsOrdinal\n          ? ordinalToGregorian(normalized)\n          : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid(\n        "mismatched weekday",\n        `you can\'t specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`\n      );\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone=\'local\'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale=\'system\'s locale\'] - a locale to set on the resulting DateTime instance\n   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO(\'2016-05-25T09:08:34.123\')\n   * @example DateTime.fromISO(\'2016-05-25T09:08:34.123+06:00\')\n   * @example DateTime.fromISO(\'2016-05-25T09:08:34.123+06:00\', {setZone: true})\n   * @example DateTime.fromISO(\'2016-05-25T09:08:34.123\', {zone: \'utc\'})\n   * @example DateTime.fromISO(\'2016-W05-4\')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone=\'local\'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale=\'system\'s locale\'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822(\'25 Nov 2016 13:23:12 GMT\')\n   * @example DateTime.fromRFC2822(\'Fri, 25 Nov 2016 13:23:12 +0600\')\n   * @example DateTime.fromRFC2822(\'25 Nov 2016 13:23 Z\')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone=\'local\'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to \'utc\', but this option is included for consistency with similar methods.\n   * @param {string} [opts.locale=\'system\'s locale\'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP(\'Sun, 06 Nov 1994 08:49:37 GMT\')\n   * @example DateTime.fromHTTP(\'Sunday, 06-Nov-94 08:49:37 GMT\')\n   * @example DateTime.fromHTTP(\'Sun Nov  6 08:49:37 1994\')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, opts = {}) {\n    const [vals, parsedZone] = parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string.\n   * Defaults to en-US if no locale has been specified, regardless of the system\'s locale.\n   * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone=\'local\'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale=\'en-US\'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromFormat(text, fmt, opts = {}) {\n    if (isUndefined(text) || isUndefined(fmt)) {\n      throw new InvalidArgumentError("fromFormat requires an input string and a format");\n    }\n\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true\n      }),\n      [vals, parsedZone, invalid] = parseFromTokens(localeToUse, text, fmt);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text);\n    }\n  }\n\n  /**\n   * @deprecated use fromFormat instead\n   */\n  static fromString(text, fmt, opts = {}) {\n    return DateTime.fromFormat(text, fmt, opts);\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system\'s locale\n   * @param {string} text - the string to parse\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone=\'local\'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale=\'en-US\'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL(\'2017-05-15\')\n   * @example DateTime.fromSQL(\'2017-05-15 09:12:34\')\n   * @example DateTime.fromSQL(\'2017-05-15 09:12:34.342\')\n   * @example DateTime.fromSQL(\'2017-05-15 09:12:34.342+06:00\')\n   * @example DateTime.fromSQL(\'2017-05-15 09:12:34.342 America/Los_Angeles\')\n   * @example DateTime.fromSQL(\'2017-05-15 09:12:34.342 America/Los_Angeles\', { setZone: true })\n   * @example DateTime.fromSQL(\'2017-05-15 09:12:34.342\', { zone: \'America/Los_Angeles\' })\n   * @example DateTime.fromSQL(\'09:12:34.342\')\n   * @return {DateTime}\n   */\n  static fromSQL(text, opts = {}) {\n    const [vals, parsedZone] = parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {DateTime}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (settings_Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(invalid);\n    } else {\n      return new DateTime({ invalid });\n    }\n  }\n\n  /**\n   * Check if an object is a DateTime. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDateTime(o) {\n    return (o && o.isLuxonDateTime) || false;\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as \'minute\' or \'day\'\n   * @example DateTime.local(2017, 7, 4).get(\'month\'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get(\'day\'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Get the locale of a DateTime, such \'en-GB\'. The locale is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such \'beng\'. The numbering system is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such \'islamic\'. The output calendar is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get outputCalendar() {\n    return this.isValid ? this.loc.outputCalendar : null;\n  }\n\n  /**\n   * Get the time zone associated with this DateTime.\n   * @type {Zone}\n   */\n  get zone() {\n    return this._zone;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @type {string}\n   */\n  get zoneName() {\n    return this.isValid ? this.zone.name : null;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @type {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the quarter\n   * @example DateTime.local(2017, 5, 25).quarter //=> 2\n   * @type {number}\n   */\n  get quarter() {\n    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @type {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @type {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @type {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @type {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @type {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @type {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015\n   * @type {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @type {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @type {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (meaning the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @type {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the human readable short month name, such as \'Oct\'.\n   * Defaults to the system\'s locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @type {string}\n   */\n  get monthShort() {\n    return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable long month name, such as \'October\'.\n   * Defaults to the system\'s locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @type {string}\n   */\n  get monthLong() {\n    return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable short weekday, such as \'Mon\'.\n   * Defaults to the system\'s locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @type {string}\n   */\n  get weekdayShort() {\n    return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the human readable long weekday, such as \'Monday\'.\n   * Defaults to the system\'s locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @type {string}\n   */\n  get weekdayLong() {\n    return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.now().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @type {number}\n   */\n  get offset() {\n    return this.isValid ? +this.o : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone\'s current offset, for example "EST" or "EDT".\n   * Defaults to the system\'s locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: "short",\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone\'s current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".\n   * Defaults to the system\'s locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: "long",\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone\'s offset ever changes, as in a DST.\n   * @type {boolean}\n   */\n  get isOffsetFixed() {\n    return this.isValid ? this.zone.universal : null;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @type {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @type {boolean}\n   */\n  get isInLeapYear() {\n    return isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime\'s month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @type {number}\n   */\n  get daysInMonth() {\n    return daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime\'s year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @type {number}\n   */\n  get daysInYear() {\n    return this.isValid ? daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime\'s year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2004).weeksInWeekYear //=> 53\n   * @example DateTime.local(2013).weeksInWeekYear //=> 52\n   * @type {number}\n   */\n  get weeksInWeekYear() {\n    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {Object} opts - the same options as toLocaleString\n   * @return {Object}\n   */\n  resolvedLocaleOpts(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * "Set" the DateTime\'s zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link setZone}(\'utc\')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * "Set" the DateTime\'s zone to the host\'s local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone(\'local\')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(settings_Settings.defaultZone);\n  }\n\n  /**\n   * "Set" the DateTime\'s zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone=\'local\'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form \'UTC+3\', or the strings \'local\' or \'utc\'. You may also supply an instance of a {@link Zone} class.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {\n    zone = normalizeZone(zone, settings_Settings.defaultZone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(unsupportedZone(zone));\n    } else {\n      let newTS = this.ts;\n      if (keepLocalTime || keepCalendarTime) {\n        const offsetGuess = zone.offset(this.ts);\n        const asObj = this.toObject();\n        [newTS] = objToTS(asObj, offsetGuess, zone);\n      }\n      return datetime_clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: \'en-GB\' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return datetime_clone(this, { loc });\n  }\n\n  /**\n   * "Set" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale(\'en-GB\')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * "Set" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for "setting" metadata, see {@link reconfigure} and {@link setZone}.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = normalizeObject(values, normalizeUnit, []),\n      settingWeekStuff =\n        !isUndefined(normalized.weekYear) ||\n        !isUndefined(normalized.weekNumber) ||\n        !isUndefined(normalized.weekday),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        "Can\'t mix weekYear/weekNumber units with year/month/day or ordinals"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError("Can\'t mix ordinal dates with month/day");\n    }\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));\n    } else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));\n    } else {\n      mixed = Object.assign(this.toObject(), normalized);\n\n      // if we didn\'t set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return datetime_clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there\'s a DST shift in between.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.now().plus(123) //~> in 123 milliseconds\n   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\n   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = friendlyDuration(duration);\n    return datetime_clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link plus}\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n  */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = friendlyDuration(duration).negate();\n    return datetime_clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * "Set" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be \'year\', \'quarter\', \'month\', \'week\', \'day\', \'hour\', \'minute\', \'second\', or \'millisecond\'.\n   * @example DateTime.local(2014, 3, 3).startOf(\'month\').toISODate(); //=> \'2014-03-01\'\n   * @example DateTime.local(2014, 3, 3).startOf(\'year\').toISODate(); //=> \'2014-01-01\'\n   * @example DateTime.local(2014, 3, 3).startOf(\'week\').toISODate(); //=> \'2014-03-03\', weeks always start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf(\'day\').toISOTime(); //=> \'00:00.000-05:00\'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf(\'hour\').toISOTime(); //=> \'05:00:00.000-05:00\'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case "years":\n        o.month = 1;\n      // falls through\n      case "quarters":\n      case "months":\n        o.day = 1;\n      // falls through\n      case "weeks":\n      case "days":\n        o.hour = 0;\n      // falls through\n      case "hours":\n        o.minute = 0;\n      // falls through\n      case "minutes":\n        o.second = 0;\n      // falls through\n      case "seconds":\n        o.millisecond = 0;\n        break;\n      case "milliseconds":\n        break;\n      // no default, invalid units throw in normalizeUnit()\n    }\n\n    if (normalizedUnit === "weeks") {\n      o.weekday = 1;\n    }\n\n    if (normalizedUnit === "quarters") {\n      const q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be \'year\', \'quarter\', \'month\', \'week\', \'day\', \'hour\', \'minute\', \'second\', or \'millisecond\'.\n   * @example DateTime.local(2014, 3, 3).endOf(\'month\').toISO(); //=> \'2014-03-31T23:59:59.999-05:00\'\n   * @example DateTime.local(2014, 3, 3).endOf(\'year\').toISO(); //=> \'2014-12-31T23:59:59.999-05:00\'\n   * @example DateTime.local(2014, 3, 3).endOf(\'week\').toISO(); // => \'2014-03-09T23:59:59.999-05:00\', weeks start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf(\'day\').toISO(); //=> \'2014-03-03T23:59:59.999-05:00\'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf(\'hour\').toISO(); //=> \'2014-03-03T05:59:59.999-05:00\'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.plus({ [unit]: 1 })\n          .startOf(unit)\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system\'s locale.\n   * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens\n   * @param {string} fmt - the format string\n   * @param {Object} opts - opts to override the configuration options\n   * @example DateTime.now().toFormat(\'yyyy LLL dd\') //=> \'2017 Apr 22\'\n   * @example DateTime.now().setLocale(\'fr\').toFormat(\'yyyy LLL dd\') //=> \'2017 avr. 22\'\n   * @example DateTime.now().toFormat(\'yyyy LLL dd\', { locale: "fr" }) //=> \'2017 avr. 22\'\n   * @example DateTime.now().toFormat("HH \'hours and\' mm \'minutes\'") //=> \'20 hours and 55 minutes\'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)\n      : datetime_INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\n   * of the DateTime in the assigned locale.\n   * Defaults to the system\'s locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @example DateTime.now().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.now().setLocale(\'en-gb\').toLocaleString(); //=> \'20/04/2017\'\n   * @example DateTime.now().toLocaleString({ locale: \'en-gb\' }); //=> \'20/04/2017\'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> \'April 20, 2017\'\n   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> \'11:32 AM\'\n   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> \'4/20/2017, 11:32 AM\'\n   * @example DateTime.now().toLocaleString({ weekday: \'long\', month: \'long\', day: \'2-digit\' }); //=> \'Thursday, April 20\'\n   * @example DateTime.now().toLocaleString({ weekday: \'short\', month: \'short\', day: \'2-digit\', hour: \'2-digit\', minute: \'2-digit\' }); //=> \'Thu, Apr 20, 11:27 AM\'\n   * @example DateTime.now().toLocaleString({ hour: \'2-digit\', minute: \'2-digit\', hour12: false }); //=> \'11:32\'\n   * @return {string}\n   */\n  toLocaleString(opts = DATE_SHORT) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)\n      : datetime_INVALID;\n  }\n\n  /**\n   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system\'s locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.now().toLocaleParts(); //=> [\n   *                                   //=>   { type: \'day\', value: \'25\' },\n   *                                   //=>   { type: \'literal\', value: \'/\' },\n   *                                   //=>   { type: \'month\', value: \'05\' },\n   *                                   //=>   { type: \'literal\', value: \'/\' },\n   *                                   //=>   { type: \'year\', value: \'1982\' }\n   *                                   //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they\'re 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they\'re 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as \'Z\' or \'-04:00\'\n   * @param {string} [opts.format=\'extended\'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> \'1982-05-25T00:00:00.000Z\'\n   * @example DateTime.now().toISO() //=> \'2017-04-22T20:47:05.335-04:00\'\n   * @example DateTime.now().toISO({ includeOffset: false }) //=> \'2017-04-22T20:47:05.335\'\n   * @example DateTime.now().toISO({ format: \'basic\' }) //=> \'20170422T204705.335-0400\'\n   * @return {string}\n   */\n  toISO(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toISODate(opts)}T${this.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\'s date component\n   * @param {Object} opts - options\n   * @param {string} [opts.format=\'extended\'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> \'1982-05-25\'\n   * @example DateTime.utc(1982, 5, 25).toISODate({ format: \'basic\' }) //=> \'19820525\'\n   * @return {string}\n   */\n  toISODate({ format = "extended" } = {}) {\n    let fmt = format === "basic" ? "yyyyMMdd" : "yyyy-MM-dd";\n    if (this.year > 9999) {\n      fmt = "+" + fmt;\n    }\n\n    return toTechFormat(this, fmt);\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\'s week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> \'1982-W21-2\'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, "kkkk-\'W\'WW-c");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\'s time component\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they\'re 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they\'re 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as \'Z\' or \'-04:00\'\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format=\'extended\'] - choose between the basic and extended format\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> \'07:34:19.361Z\'\n   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> \'07:34Z\'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: \'basic\' }) //=> \'073419.361Z\'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> \'T07:34:19.361Z\'\n   * @return {string}\n   */\n  toISOTime({\n    suppressMilliseconds = false,\n    suppressSeconds = false,\n    includeOffset = true,\n    includePrefix = false,\n    format = "extended"\n  } = {}) {\n    return toTechTimeFormat(this, {\n      suppressSeconds,\n      suppressMilliseconds,\n      includeOffset,\n      includePrefix,\n      format\n    });\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> \'Sun, 13 Jul 2014 00:00:00 +0000\'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> \'Sun, 13 Jul 2014 00:00:00 -0400\'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> \'Sun, 13 Jul 2014 00:00:00 GMT\'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> \'Sun, 13 Jul 2014 19:00:00 GMT\'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss \'GMT\'");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> \'2014-07-13\'\n   * @return {string}\n   */\n  toSQLDate() {\n    return toTechFormat(this, "yyyy-MM-dd");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as \'America/New_York\'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as \'Z\' or \'-04:00\'\n   * @example DateTime.utc().toSQL() //=> \'05:15:16.345\'\n   * @example DateTime.now().toSQL() //=> \'05:15:16.345 -04:00\'\n   * @example DateTime.now().toSQL({ includeOffset: false }) //=> \'05:15:16.345\'\n   * @example DateTime.now().toSQL({ includeZone: false }) //=> \'05:15:16.345 America/New_York\'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false } = {}) {\n    return toTechTimeFormat(this, {\n      includeOffset,\n      includeZone,\n      spaceZone: true\n    });\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as \'America/New_York\'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as \'Z\' or \'-04:00\'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> \'2014-07-13 00:00:00.000 Z\'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> \'2014-07-13 00:00:00.000 -04:00\'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> \'2014-07-13 00:00:00.000\'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> \'2014-07-13 00:00:00.000 America/New_York\'\n   * @return {string}\n   */\n  toSQL(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : datetime_INVALID;\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */\n  toMillis() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds of this DateTime.\n   * @return {number}\n   */\n  toSeconds() {\n    return this.isValid ? this.ts / 1000 : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */\n  toBSON() {\n    return this.toJSDate();\n  }\n\n  /**\n   * Returns a JavaScript object with this DateTime\'s year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.c);\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a JavaScript Date equivalent to this DateTime.\n   * @return {Date}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=[\'milliseconds\']] - the unit or array of units (such as \'hours\' or \'days\') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy=\'casual\'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO(\'1982-05-25T09:45\'),\n   *     i2 = DateTime.fromISO(\'1983-10-14T10:30\');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, \'hours\').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, [\'months\', \'days\']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, [\'months\', \'days\', \'hours\']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = "milliseconds", opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid) {\n      return Duration.invalid(\n        this.invalid || otherDateTime.invalid,\n        "created by diffing an invalid DateTime"\n      );\n    }\n\n    const durOpts = Object.assign(\n      { locale: this.locale, numberingSystem: this.numberingSystem },\n      opts\n    );\n\n    const units = maybeArray(unit).map(Duration.normalizeUnit),\n      otherIsLater = otherDateTime.valueOf() > this.valueOf(),\n      earlier = otherIsLater ? this : otherDateTime,\n      later = otherIsLater ? otherDateTime : this,\n      diffed = diff(earlier, later, units, durOpts);\n\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link diff}\n   * @param {string|string[]} [unit=[\'milliseconds\']] - the unit or units units (such as \'hours\' or \'days\') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy=\'casual\'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit = "milliseconds", opts = {}) {\n    return this.diff(DateTime.now(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Interval}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime.\n   * Higher-order units must also be identical for this function to return `true`.\n   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link setZone} to convert one of the dates if needed.\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.now().hasSame(otherDT, \'day\'); //~> true if otherDT is in the same current calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n\n    const inputMs = otherDateTime.valueOf();\n    const otherZoneDateTime = this.setZone(otherDateTime.zone, { keepLocalTime: true });\n    return otherZoneDateTime.startOf(unit) <= inputMs && inputMs <= otherZoneDateTime.endOf(unit);\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.\n   * To compare just the millisecond values, use `+dt1 === +dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return (\n      this.isValid &&\n      other.isValid &&\n      this.valueOf() === other.valueOf() &&\n      this.zone.equals(other.zone) &&\n      this.loc.equals(other.loc)\n    );\n  }\n\n  /**\n   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your\n   * platform supports Intl.RelativeTimeFormat. Rounds down by default.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"\n   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"\n   * @param {boolean} [options.round=true] - whether to round the numbers in the output.\n   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don\'t use in combination with {round: false} because the decimal output will include the padding.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"\n   * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"\n   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"\n   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"\n   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"\n   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"\n   */\n  toRelative(options = {}) {\n    if (!this.isValid) return null;\n    const base = options.base || DateTime.fromObject({ zone: this.zone }),\n      padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;\n    let units = ["years", "months", "days", "hours", "minutes", "seconds"];\n    let unit = options.unit;\n    if (Array.isArray(options.unit)) {\n      units = options.unit;\n      unit = undefined;\n    }\n    return diffRelative(\n      base,\n      this.plus(padding),\n      Object.assign(options, {\n        numeric: "always",\n        units,\n        unit\n      })\n    );\n  }\n\n  /**\n   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".\n   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"\n   * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"\n   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"\n   */\n  toRelativeCalendar(options = {}) {\n    if (!this.isValid) return null;\n\n    return diffRelative(\n      options.base || DateTime.fromObject({ zone: this.zone }),\n      this,\n      Object.assign(options, {\n        numeric: "auto",\n        units: ["years", "months", "days"],\n        calendary: true\n      })\n    );\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\n   */\n  static min(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError("min requires all arguments be DateTimes");\n    }\n    return bestBy(dateTimes, i => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\n   */\n  static max(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError("max requires all arguments be DateTimes");\n    }\n    return bestBy(dateTimes, i => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */\n  static fromFormatExplain(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true\n      });\n    return explainFromTokens(localeToUse, text, fmt);\n  }\n\n  /**\n   * @deprecated use fromFormatExplain instead\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    return DateTime.fromFormatExplain(text, fmt, options);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */\n  static get DATE_SHORT() {\n    return DATE_SHORT;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'Oct 14, 1983\'\n   * @type {Object}\n   */\n  static get DATE_MED() {\n    return DATE_MED;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'Fri, Oct 14, 1983\'\n   * @type {Object}\n   */\n  static get DATE_MED_WITH_WEEKDAY() {\n    return DATE_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'October 14, 1983\'\n   * @type {Object}\n   */\n  static get DATE_FULL() {\n    return DATE_FULL;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'Tuesday, October 14, 1983\'\n   * @type {Object}\n   */\n  static get DATE_HUGE() {\n    return DATE_HUGE;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'09:30 AM\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_SIMPLE() {\n    return TIME_SIMPLE;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'09:30:23 AM\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SECONDS() {\n    return TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'09:30:23 AM EDT\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'09:30:23 AM Eastern Daylight Time\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'09:30\', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_SIMPLE() {\n    return TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'09:30:23\', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'09:30:23 EDT\', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'09:30:23 Eastern Daylight Time\', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'10/14/1983, 9:30 AM\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT() {\n    return DATETIME_SHORT;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'10/14/1983, 9:30:33 AM\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'Oct 14, 1983, 9:30 AM\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED() {\n    return DATETIME_MED;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'Oct 14, 1983, 9:30:33 AM\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'Fri, 14 Oct 1983, 9:30 AM\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_WEEKDAY() {\n    return DATETIME_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'October 14, 1983, 9:30 AM EDT\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL() {\n    return DATETIME_FULL;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'October 14, 1983, 9:30:33 AM EDT\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE() {\n    return DATETIME_HUGE;\n  }\n\n  /**\n   * {@link toLocaleString} format like \'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time\'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return DATETIME_HUGE_WITH_SECONDS;\n  }\n}\n\n/**\n * @private\n */\nfunction friendlyDateTime(dateTimeish) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\n    return DateTime.fromJSDate(dateTimeish);\n  } else if (dateTimeish && typeof dateTimeish === "object") {\n    return DateTime.fromObject(dateTimeish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`\n    );\n  }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/met_uk.ts\n\n\n\n\nclass MetUk {\n    constructor(_app) {\n        this.prettyName = _("Met Office UK");\n        this.name = "Met Office UK";\n        this.maxForecastSupport = 5;\n        this.website = "https://www.metoffice.gov.uk/";\n        this.maxHourlyForecastSupport = 36;\n        this.needsApiKey = false;\n        this.baseUrl = "http://datapoint.metoffice.gov.uk/public/data/val/";\n        this.forecastPrefix = "wxfcs/all/json/";\n        this.threeHourlyUrl = "?res=3hourly";\n        this.dailyUrl = "?res=daily";\n        this.currentPrefix = "wxobs/all/json/";\n        this.sitesUrl = "sitelist";\n        this.key = "key=05de1ee8-de70-46aa-9b41-299d4cc60219";\n        this.forecastSite = null;\n        this.observationSites = null;\n        this.currentLoc = null;\n        this.currentLocID = null;\n        this.MAX_STATION_DIST = 50000;\n        this.app = _app;\n    }\n    async GetWeather(newLoc) {\n        if (newLoc == null)\n            return null;\n        let loc = newLoc.lat.toString() + "," + newLoc.lon.toString();\n        if (this.currentLocID == null || this.currentLocID != loc || this.forecastSite == null || this.observationSites == null || this.observationSites.length == 0) {\n            logger_Log.Instance.Print("Downloading new site data");\n            this.currentLoc = newLoc;\n            this.currentLocID = loc;\n            let forecastSite = await this.GetClosestForecastSite(newLoc);\n            if (forecastSite == null)\n                return null;\n            let observationSites = await this.GetObservationSitesInRange(newLoc, this.MAX_STATION_DIST);\n            if (observationSites == null)\n                return null;\n            this.forecastSite = forecastSite;\n            this.observationSites = observationSites;\n        }\n        else {\n            logger_Log.Instance.Debug("Site data downloading skipped");\n        }\n        if (this.observationSites.length == 0 || this.forecastSite.dist > 100000) {\n            logger_Log.Instance.Error("User is probably not in UK, aborting");\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "location not covered",\n                message: "MET Office UK only covers the UK, please make sure your location is in the country",\n                service: "met-uk"\n            });\n            return null;\n        }\n        let forecastPromise = this.GetData(this.baseUrl + this.forecastPrefix + this.forecastSite.id + this.dailyUrl + "&" + this.key, this.ParseForecast);\n        let hourlyPayload = this.GetData(this.baseUrl + this.forecastPrefix + this.forecastSite.id + this.threeHourlyUrl + "&" + this.key, this.ParseHourlyForecast);\n        let observations = await this.GetObservationData(this.observationSites);\n        let currentResult = this.ParseCurrent(observations);\n        if (!currentResult)\n            return null;\n        let forecastResult = await forecastPromise;\n        currentResult.forecasts = (!forecastResult) ? [] : forecastResult;\n        let threeHourlyForecast = await hourlyPayload;\n        currentResult.hourlyForecasts = (!threeHourlyForecast) ? [] : threeHourlyForecast;\n        return currentResult;\n    }\n    ;\n    async GetClosestForecastSite(loc) {\n        let forecastSitelist = await this.app.LoadJsonAsync(this.baseUrl + this.forecastPrefix + this.sitesUrl + "?" + this.key);\n        if (forecastSitelist == null)\n            return null;\n        return this.GetClosestSite(forecastSitelist, loc);\n    }\n    async GetObservationSitesInRange(loc, range) {\n        let observationSiteList = await this.app.LoadJsonAsync(this.baseUrl + this.currentPrefix + this.sitesUrl + "?" + this.key);\n        if (observationSiteList == null)\n            return null;\n        let observationSites = [];\n        for (let index = 0; index < observationSiteList.Locations.Location.length; index++) {\n            const element = observationSiteList.Locations.Location[index];\n            element.dist = GetDistance(parseFloat(element.latitude), parseFloat(element.longitude), loc.lat, loc.lon);\n            if (element.dist > range)\n                continue;\n            observationSites.push(element);\n        }\n        observationSites = this.SortObservationSites(observationSites);\n        logger_Log.Instance.Debug("Observation sites found: " + JSON.stringify(observationSites, null, 2));\n        return observationSites;\n    }\n    async GetObservationData(observationSites) {\n        let observations = [];\n        for (let index = 0; index < observationSites.length; index++) {\n            const element = observationSites[index];\n            logger_Log.Instance.Debug("Getting observation data from station: " + element.id);\n            let payload = await this.app.LoadJsonAsync(this.baseUrl + this.currentPrefix + element.id + "?res=hourly&" + this.key);\n            if (!!payload)\n                observations.push(payload);\n            else {\n                logger_Log.Instance.Debug("Failed to get observations from " + element.id);\n            }\n        }\n        return observations;\n    }\n    async GetData(query, ParseFunction) {\n        if (query == null)\n            return null;\n        logger_Log.Instance.Debug("Query: " + query);\n        let json = await this.app.LoadJsonAsync(query);\n        if (json == null)\n            return null;\n        return ParseFunction(json, this);\n    }\n    ;\n    ParseCurrent(json) {\n        let observation = this.MeshObservations(json);\n        if (!observation) {\n            return null;\n        }\n        let dataIndex;\n        for (let index = 0; index < json.length; index++) {\n            const element = json[index];\n            if (element.SiteRep.DV.Location == null)\n                continue;\n            dataIndex = index;\n            break;\n        }\n        if (dataIndex == null) {\n            this.app.ShowError({\n                detail: "no api response",\n                type: "hard",\n                message: _("Data was not found for location"),\n                service: "met-uk",\n            });\n            return null;\n        }\n        let times = (0,suncalc.getTimes)(new Date(), parseFloat(json[dataIndex].SiteRep.DV.Location.lat), parseFloat(json[dataIndex].SiteRep.DV.Location.lon), parseFloat(json[dataIndex].SiteRep.DV.Location.elevation));\n        try {\n            let weather = {\n                coord: {\n                    lat: parseFloat(json[dataIndex].SiteRep.DV.Location.lat),\n                    lon: parseFloat(json[dataIndex].SiteRep.DV.Location.lon)\n                },\n                location: {\n                    city: null,\n                    country: null,\n                    url: null,\n                    timeZone: null,\n                    distanceFrom: this.observationSites[dataIndex].dist\n                },\n                date: DateTime.fromJSDate(new Date(json[dataIndex].SiteRep.DV.dataDate)),\n                sunrise: DateTime.fromJSDate(times.sunrise),\n                sunset: DateTime.fromJSDate(times.sunset),\n                wind: {\n                    speed: null,\n                    degree: null\n                },\n                temperature: null,\n                pressure: null,\n                humidity: null,\n                condition: this.ResolveCondition(observation === null || observation === void 0 ? void 0 : observation.W),\n                forecasts: []\n            };\n            if ((observation === null || observation === void 0 ? void 0 : observation.V) != null) {\n                weather.extra_field = {\n                    name: _("Visibility"),\n                    value: this.VisibilityToText(observation.V),\n                    type: "string"\n                };\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.S) != null) {\n                weather.wind.speed = MPHtoMPS(parseFloat(observation.S));\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.D) != null) {\n                weather.wind.degree = CompassToDeg(observation.D);\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.T) != null) {\n                weather.temperature = CelsiusToKelvin(parseFloat(observation.T));\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.P) != null) {\n                weather.pressure = parseFloat(observation.P);\n            }\n            if ((observation === null || observation === void 0 ? void 0 : observation.H) != null) {\n                weather.humidity = parseFloat(observation.H);\n            }\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Met UK Weather Parsing error: " + e);\n            this.app.ShowError({ type: "soft", service: "met-uk", detail: "unusual payload", message: _("Failed to Process Current Weather Info") });\n            return null;\n        }\n    }\n    ;\n    ParseForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.SiteRep.DV.Location.Period.length; i++) {\n                let element = json.SiteRep.DV.Location.Period[i];\n                if (!Array.isArray(element.Rep))\n                    continue;\n                let day = element.Rep[0];\n                let night = element.Rep[1];\n                let forecast = {\n                    date: DateTime.fromJSDate(new Date(self.PartialToISOString(element.value))),\n                    temp_min: CelsiusToKelvin(parseFloat(night.Nm)),\n                    temp_max: CelsiusToKelvin(parseFloat(day.Dm)),\n                    condition: self.ResolveCondition(day.W),\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("MET UK Forecast Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "met-uk", detail: "unusual payload", message: _("Failed to Process Forecast Info") });\n            return null;\n        }\n    }\n    ;\n    ParseHourlyForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.SiteRep.DV.Location.Period.length; i++) {\n                let day = json.SiteRep.DV.Location.Period[i];\n                let date = new Date(self.PartialToISOString(day.value));\n                if (!Array.isArray(day.Rep))\n                    continue;\n                for (let index = 0; index < day.Rep.length; index++) {\n                    const hour = day.Rep[index];\n                    let timestamp = new Date(date.getTime());\n                    timestamp.setHours(timestamp.getHours() + (parseInt(hour.$) / 60));\n                    let threshold = new Date();\n                    threshold.setHours(threshold.getHours() - 3);\n                    if (timestamp < threshold)\n                        continue;\n                    let forecast = {\n                        date: DateTime.fromJSDate(timestamp),\n                        temp: CelsiusToKelvin(parseFloat(hour.T)),\n                        condition: self.ResolveCondition(hour.W),\n                        precipitation: {\n                            type: "rain",\n                            volume: null,\n                            chance: parseFloat(hour.Pp)\n                        }\n                    };\n                    forecasts.push(forecast);\n                }\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("MET UK Forecast Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "met-uk", detail: "unusual payload", message: _("Failed to Process Forecast Info") });\n            return null;\n        }\n    }\n    VisibilityToText(dist) {\n        let distance = parseInt(dist);\n        let unit = this.app.config.DistanceUnit;\n        let stringFormat = {\n            distanceUnit: this.DistanceUnitFor(unit)\n        };\n        if (distance < 1000) {\n            stringFormat.distance = MetreToUserUnits(1000, unit).toString();\n            return `${_("Very poor")} - ${_("Less than {distance} {distanceUnit}", stringFormat)}`;\n        }\n        else if (distance >= 40000) {\n            stringFormat.distance = MetreToUserUnits(40000, unit).toString();\n            return `${_("Excellent")} - ${_("More than {distance} {distanceUnit}", stringFormat)}`;\n        }\n        else if (distance < 4000) {\n            stringFormat.smallerDistance = MetreToUserUnits(1000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(4000, unit).toString();\n            return `${_("Poor")} - ${_("Between {smallerDistance}-{biggerDistance} {distanceUnit}", stringFormat)}`;\n        }\n        else if (distance < 10000) {\n            stringFormat.smallerDistance = MetreToUserUnits(4000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(10000, unit).toString();\n            return `${_("Moderate")} - ${_("Between {smallerDistance}-{biggerDistance} {distanceUnit}", stringFormat)}`;\n        }\n        else if (distance < 20000) {\n            stringFormat.smallerDistance = MetreToUserUnits(10000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(20000, unit).toString();\n            return `${_("Good")} - ${_("Between {smallerDistance}-{biggerDistance} {distanceUnit}", stringFormat)}`;\n        }\n        else if (distance < 40000) {\n            stringFormat.smallerDistance = MetreToUserUnits(20000, unit).toString();\n            stringFormat.biggerDistance = MetreToUserUnits(40000, unit).toString();\n            return `${_("Very good")} ${_("Between {smallerDistance}-{biggerDistance} {distanceUnit}", stringFormat)}`;\n        }\n    }\n    DistanceUnitFor(unit) {\n        if (unit == "imperial")\n            return _("mi");\n        return _("km");\n    }\n    SortObservationSites(observations) {\n        if (observations == null)\n            return null;\n        observations = observations.sort((a, b) => {\n            if (a.dist < b.dist)\n                return -1;\n            if (a.dist == b.dist)\n                return 0;\n            return 1;\n        });\n        return observations;\n    }\n    MeshObservations(observations) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (!observations)\n            return null;\n        if (observations.length == 0)\n            return null;\n        let result = this.GetLatestObservation((_d = (_c = (_b = (_a = observations[0]) === null || _a === void 0 ? void 0 : _a.SiteRep) === null || _b === void 0 ? void 0 : _b.DV) === null || _c === void 0 ? void 0 : _c.Location) === null || _d === void 0 ? void 0 : _d.Period, new Date());\n        if (observations.length == 1)\n            return result;\n        for (let index = 0; index < observations.length; index++) {\n            if (((_h = (_g = (_f = (_e = observations[index]) === null || _e === void 0 ? void 0 : _e.SiteRep) === null || _f === void 0 ? void 0 : _f.DV) === null || _g === void 0 ? void 0 : _g.Location) === null || _h === void 0 ? void 0 : _h.Period) == null)\n                continue;\n            let nextObservation = this.GetLatestObservation(observations[index].SiteRep.DV.Location.Period, new Date());\n            if (result == null)\n                result = nextObservation;\n            let debugText = " Observation data missing, plugged in from ID " +\n                observations[index].SiteRep.DV.Location.i + ", index " + index +\n                ", distance "\n                + Math.round(GetDistance(parseFloat(observations[index].SiteRep.DV.Location.lat), parseFloat(observations[index].SiteRep.DV.Location.lon), this.currentLoc.lat, this.currentLoc.lon))\n                + " metres";\n            if ((result === null || result === void 0 ? void 0 : result.V) == null) {\n                result.V = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.V;\n                logger_Log.Instance.Debug("Visibility" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.W) == null) {\n                result.W = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.W;\n                logger_Log.Instance.Debug("Weather condition" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.S) == null) {\n                result.S = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.S;\n                logger_Log.Instance.Debug("Wind Speed" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.D) == null) {\n                result.D = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.D;\n                logger_Log.Instance.Debug("Wind degree" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.T) == null) {\n                result.T = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.T;\n                logger_Log.Instance.Debug("Temperature" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.P) == null) {\n                result.P = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.P;\n                logger_Log.Instance.Debug("Pressure" + debugText);\n            }\n            if ((result === null || result === void 0 ? void 0 : result.H) == null) {\n                result.H = nextObservation === null || nextObservation === void 0 ? void 0 : nextObservation.H;\n                logger_Log.Instance.Debug("Humidity" + debugText);\n            }\n        }\n        return result;\n    }\n    GetLatestObservation(observations, day) {\n        if (observations == null)\n            return null;\n        for (let index = 0; index < observations.length; index++) {\n            const element = observations[index];\n            let date = new Date(this.PartialToISOString(element.value));\n            if (date.toLocaleDateString() != day.toLocaleDateString())\n                continue;\n            if (Array.isArray(element.Rep))\n                return element.Rep[element.Rep.length - 1];\n            else\n                return element.Rep;\n        }\n        return null;\n    }\n    PartialToISOString(date) {\n        return (date.replace("Z", "")) + "T00:00:00Z";\n    }\n    GetClosestSite(siteList, loc) {\n        let sites = siteList.Locations.Location;\n        let closest = sites[0];\n        closest.dist = GetDistance(parseFloat(closest.latitude), parseFloat(closest.longitude), loc.lat, loc.lon);\n        for (let index = 0; index < sites.length; index++) {\n            const element = sites[index];\n            element.dist = GetDistance(parseFloat(element.latitude), parseFloat(element.longitude), loc.lat, loc.lon);\n            if (element.dist < closest.dist) {\n                closest = element;\n            }\n        }\n        return closest;\n    }\n    ResolveCondition(icon) {\n        switch (icon) {\n            case "NA":\n                return {\n                    main: _("Unknown"),\n                    description: _("Unknown"),\n                    customIcon: "cloud-refresh-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            case "0":\n                return {\n                    main: _("Clear"),\n                    description: _("Clear"),\n                    customIcon: "night-clear-symbolic",\n                    icons: ["weather-clear-night", "weather-severe-alert"]\n                };\n            case "1":\n                return {\n                    main: _("Sunny"),\n                    description: _("Sunny"),\n                    customIcon: "day-sunny-symbolic",\n                    icons: ["weather-clear", "weather-severe-alert"]\n                };\n            case "2":\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    customIcon: "night-alt-cloudy-symbolic",\n                    icons: ["weather-clouds-night", "weather-overcast", "weather-severe-alert"]\n                };\n            case "3":\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    customIcon: "day-cloudy-symbolic",\n                    icons: ["weather-clouds", "weather-overcast", "weather-severe-alert"]\n                };\n            case "4":\n                return {\n                    main: _("Unknown"),\n                    description: _("Unknown"),\n                    customIcon: "cloud-refresh-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            case "5":\n                return {\n                    main: _("Mist"),\n                    description: _("Mist"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "6":\n                return {\n                    main: _("Fog"),\n                    description: _("Fog"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "7":\n                return {\n                    main: _("Cloudy"),\n                    description: _("Cloudy"),\n                    customIcon: "cloud-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", "weather-severe-alert"]\n                };\n            case "8":\n                return {\n                    main: _("Overcast"),\n                    description: _("Overcast"),\n                    customIcon: "cloudy-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", "weather-severe-alert"]\n                };\n            case "9":\n                return {\n                    main: _("Light rain"),\n                    description: _("Light rain shower"),\n                    customIcon: "night-alt-showers-symbolic",\n                    icons: ["weather-showers-scattered-night", "weather-showers-night", "weather-showers-scattered", "weather-showers", "weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "10":\n                return {\n                    main: _("Light rain"),\n                    description: _("Light rain shower"),\n                    customIcon: "day-showers-symbolic",\n                    icons: ["weather-showers-scattered-day", "weather-showers-day", "weather-showers-scattered", "weather-showers", "weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "11":\n                return {\n                    main: _("Drizzle"),\n                    description: _("Drizzle"),\n                    customIcon: "showers-symbolic",\n                    icons: ["weather-showers-scattered", "weather-showers", "weather-rain", "weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "12":\n                return {\n                    main: _("Light rain"),\n                    description: _("Light rain"),\n                    customIcon: "showers-symbolic",\n                    icons: ["weather-showers-scattered", "weather-showers", "weather-rain", "weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "13":\n                return {\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain shower"),\n                    customIcon: "night-alt-rain-symbolic",\n                    icons: ["weather-showers-night", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "14":\n                return {\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain shower"),\n                    customIcon: "day-rain-symbolic",\n                    icons: ["weather-showers-day", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "15":\n                return {\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "16":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet shower"),\n                    customIcon: "night-alt-rain-mix-symbolic",\n                    icons: ["weather-showers-night", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "17":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet shower"),\n                    customIcon: "day-rain-mix-symbolic",\n                    icons: ["weather-showers-day", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "18":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "19":\n                return {\n                    main: _("Hail"),\n                    description: _("Hail shower"),\n                    customIcon: "night-alt-hail-symbolic",\n                    icons: ["weather-showers-night", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "20":\n                return {\n                    main: _("Hail"),\n                    description: _("Hail shower"),\n                    customIcon: "day-hail-symbolic",\n                    icons: ["weather-showers-day", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "21":\n                return {\n                    main: _("Hail"),\n                    description: _("Hail"),\n                    customIcon: "hail-symbolic",\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "22":\n                return {\n                    main: _("Light snow"),\n                    description: _("Light snow shower"),\n                    customIcon: "night-alt-snow-symbolic",\n                    icons: ["weather-snow-scattered", "weather-snow", "weather-severe-alert"]\n                };\n            case "23":\n                return {\n                    main: _("Light snow"),\n                    description: _("Light snow shower"),\n                    customIcon: "day-snow-symbolic",\n                    icons: ["weather-snow-scattered", "weather-snow", "weather-severe-alert"]\n                };\n            case "24":\n                return {\n                    main: _("Light snow"),\n                    description: _("Light snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow-scattered", "weather-snow", "weather-severe-alert"]\n                };\n            case "25":\n                return {\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow shower"),\n                    customIcon: "night-alt-snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered", "weather-severe-alert"]\n                };\n            case "26":\n                return {\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow shower"),\n                    customIcon: "day-snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered", "weather-severe-alert"]\n                };\n            case "27":\n                return {\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered", "weather-severe-alert"]\n                };\n            case "28":\n                return {\n                    main: _("Thunder"),\n                    description: _("Thunder shower"),\n                    customIcon: "day-storm-showers-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "29":\n                return {\n                    main: _("Thunder"),\n                    description: _("Thunder shower"),\n                    customIcon: "night-alt-storm-showers-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "30":\n                return {\n                    main: _("Thunder"),\n                    description: _("Thunder"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            default:\n                return {\n                    main: _("Unknown"),\n                    description: _("Unknown"),\n                    customIcon: "cloud-refresh-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n        }\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/lib/commandRunner.ts\n\nconst { spawnCommandLineAsyncIO } = imports.misc.util;\nasync function SpawnProcessJson(command) {\n    let response = await SpawnProcess(command);\n    if (!response.Success)\n        return response;\n    try {\n        response.Data = JSON.parse(response.Data);\n    }\n    catch (e) {\n        Log.Instance.Error("Error: Command response is not JSON. The response: " + response.Data);\n        response.Success = false;\n        response.ErrorData = {\n            Code: -1,\n            Message: null,\n            Type: "jsonParse",\n        };\n    }\n    finally {\n        return response;\n    }\n}\nasync function SpawnProcess(command) {\n    let cmd = "";\n    for (let index = 0; index < command.length; index++) {\n        const element = command[index];\n        cmd += "\'" + element + "\' ";\n    }\n    let response = await new Promise((resolve, reject) => {\n        spawnCommandLineAsyncIO(cmd, (aStdout, err, exitCode) => {\n            let result = {\n                Success: exitCode == 0,\n                ErrorData: null,\n                Data: aStdout !== null && aStdout !== void 0 ? aStdout : null\n            };\n            if (exitCode != 0) {\n                result.ErrorData = {\n                    Code: exitCode,\n                    Message: err !== null && err !== void 0 ? err : null,\n                    Type: "unknown"\n                };\n            }\n            resolve(result);\n            return result;\n        });\n    });\n    return response;\n}\nfunction OpenUrl(element) {\n    if (!element.url)\n        return;\n    imports.gi.Gio.app_info_launch_default_for_uri(element.url, global.create_app_launch_context());\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/weatherbutton.ts\n\nconst { Button } = imports.gi.St;\nconst { SignalManager } = imports.misc.signalManager;\nclass WeatherButton {\n    constructor(options, doNotAddPadding = false) {\n        this.signals = new SignalManager();\n        this.disabled = false;\n        this.Hovered = new Event();\n        this.Clicked = new Event();\n        this.actor = new Button(options);\n        this.actor.add_style_class_name("popup-menu-item");\n        if (doNotAddPadding)\n            this.actor.set_style(\'padding: 0px; border-radius: 2px;\');\n        else\n            this.actor.set_style(\'padding-top: 0px;padding-bottom: 0px; padding-right: 2px; padding-left: 2px; border-radius: 2px;\');\n        this.signals.connect(this.actor, \'enter-event\', this.handleEnter, this);\n        this.signals.connect(this.actor, \'leave-event\', this.handleLeave, this);\n        this.actor.connect("clicked", () => this.clicked());\n        this.actor.connect("enter-event", (actor, event) => this.hovered(event));\n    }\n    handleEnter(actor) {\n        if (!this.disabled)\n            this.actor.add_style_pseudo_class(\'active\');\n    }\n    handleLeave() {\n        this.actor.remove_style_pseudo_class(\'active\');\n    }\n    disable() {\n        this.disabled = true;\n        this.actor.reactive = false;\n    }\n    enable() {\n        this.disabled = false;\n        this.actor.reactive = true;\n    }\n    clicked() {\n        if (!this.disabled) {\n            this.actor.add_style_pseudo_class(\'active\');\n            this.Clicked.Invoke(this, null);\n        }\n    }\n    hovered(event) {\n        this.Hovered.Invoke(this, event);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiCurrentWeather.ts\n\n\n\n\n\nconst { Bin, BoxLayout, IconType: uiCurrentWeather_IconType, Label, Icon, Align } = imports.gi.St;\nconst uiCurrentWeather_Lang = imports.lang;\nconst STYLE_SUMMARYBOX = \'weather-current-summarybox\';\nconst STYLE_SUMMARY = \'weather-current-summary\';\nconst STYLE_DATABOX = \'weather-current-databox\';\nconst STYLE_ICON = \'weather-current-icon\';\nconst STYLE_ICONBOX = \'weather-current-iconbox\';\nconst STYLE_DATABOX_CAPTIONS = \'weather-current-databox-captions\';\nconst STYLE_ASTRONOMY = \'weather-current-astronomy\';\nconst STYLE_DATABOX_VALUES = \'weather-current-databox-values\';\nconst STYLE_CURRENT = \'current\';\nconst STYLE_LOCATION_SELECTOR = \'location-selector\';\nclass CurrentWeather {\n    constructor(app) {\n        this.app = app;\n        this.actor = new Bin();\n        this.actor.style_class = STYLE_CURRENT;\n        this.app.config.LocStore.StoreChanged.Subscribe((s, a) => this.onLocationStorageChanged(s, a));\n    }\n    Display(weather, config) {\n        try {\n            if (this.app.config.LocStore.ShouldShowLocationSelectors(config.CurrentLocation))\n                this.ShowLocationSelectors();\n            else\n                this.HideLocationSelectors();\n            let location = GenerateLocationText(weather, config);\n            this.SetLocation(location, weather.location.url);\n            this.SetConditionText(weather.condition.description);\n            this.SetWeatherIcon(weather.condition.icons, weather.condition.customIcon);\n            this.SetTemperature(weather.temperature);\n            this.SetHumidity(weather.humidity);\n            this.SetWind(weather.wind.speed, weather.wind.degree);\n            this.SetPressure(weather.pressure);\n            this.SetAPIUniqueField(weather.extra_field);\n            if (config._showSunrise)\n                this.SetSunriseAndSunset(weather.sunrise.toJSDate(), weather.sunset.toJSDate(), weather.location.timeZone);\n            this.SetImmediatePrecipitation(weather.immediatePrecipitation, config);\n            return true;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("DisplayWeatherError: " + e);\n            return false;\n        }\n    }\n    ;\n    UpdateIconType(iconType) {\n        this.weatherIcon.icon_type = iconType;\n    }\n    Destroy() {\n        if (this.actor.get_child() != null)\n            this.actor.get_child().destroy();\n    }\n    Rebuild(config, textColorStyle) {\n        this.Destroy();\n        this.weatherIcon = new Icon({\n            icon_type: config.IconType,\n            icon_size: 64,\n            icon_name: APPLET_ICON,\n            style_class: STYLE_ICON\n        });\n        let box = new BoxLayout({ style_class: STYLE_ICONBOX });\n        box.add_actor(this.weatherIcon);\n        box.add_actor(this.BuildMiddleColumn(config, textColorStyle));\n        box.add_actor(this.BuildRightColumn(textColorStyle, config));\n        this.actor.set_child(box);\n    }\n    ;\n    BuildMiddleColumn(config, textColorStyle) {\n        this.weatherSummary = new Label({ text: _(\'Loading ...\'), style_class: STYLE_SUMMARY });\n        let middleColumn = new BoxLayout({ vertical: true, style_class: STYLE_SUMMARYBOX });\n        middleColumn.add_actor(this.BuildLocationSection());\n        middleColumn.add(this.weatherSummary, { expand: true, x_align: Align.MIDDLE, y_align: Align.MIDDLE, x_fill: false, y_fill: false });\n        this.immediatePrecipitationLabel = new Label({ style_class: "weather-immediate-precipitation" });\n        this.immediatePrecipitationBox = new Bin();\n        this.immediatePrecipitationBox.add_actor(this.immediatePrecipitationLabel);\n        this.immediatePrecipitationBox.hide();\n        middleColumn.add_actor(this.immediatePrecipitationBox);\n        if (config._showSunrise)\n            middleColumn.add_actor(this.BuildSunBox(config, textColorStyle));\n        return middleColumn;\n    }\n    BuildRightColumn(textColorStyle, config) {\n        let textOb = {\n            text: ELLIPSIS\n        };\n        this.temperatureLabel = new Label(textOb);\n        this.humidityLabel = new Label(textOb);\n        this.pressureLabel = new Label(textOb);\n        this.apiUniqueLabel = new Label({ text: \'\' });\n        this.apiUniqueCaptionLabel = new Label({ text: \'\', style: textColorStyle });\n        let rb_captions = new BoxLayout({ vertical: true, style_class: STYLE_DATABOX_CAPTIONS });\n        let rb_values = new BoxLayout({ vertical: true, style_class: STYLE_DATABOX_VALUES });\n        rb_captions.add_actor(new Label({ text: _(\'Temperature\') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(new Label({ text: _(\'Humidity\') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(new Label({ text: _(\'Pressure\') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(new Label({ text: _(\'Wind\') + LocalizedColon(config.currentLocale), style: textColorStyle }));\n        rb_captions.add_actor(this.apiUniqueCaptionLabel);\n        rb_values.add_actor(this.temperatureLabel);\n        rb_values.add_actor(this.humidityLabel);\n        rb_values.add_actor(this.pressureLabel);\n        rb_values.add_actor(this.BuildWind(config));\n        rb_values.add_actor(this.apiUniqueLabel);\n        let rightColumn = new BoxLayout({ style_class: STYLE_DATABOX });\n        rightColumn.add_actor(rb_captions);\n        rightColumn.add_actor(rb_values);\n        return rightColumn;\n    }\n    BuildWind(config) {\n        let windBox = new BoxLayout({ vertical: false });\n        let iconPaddingBottom = Math.round(config.CurrentFontSize * 0.05);\n        let iconPaddingTop = Math.round(config.CurrentFontSize * 0.15);\n        let iconSize = Math.round(config.CurrentFontSize * 0.8);\n        this.windLabel = new Label({ text: ELLIPSIS });\n        this.windDirectionIcon = new Icon({\n            icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n            icon_name: APPLET_ICON,\n            icon_size: iconSize,\n            style: "padding-right: 5px; padding-top: " + iconPaddingTop + "px; padding-bottom: " + iconPaddingBottom + "px;"\n        });\n        if (!config._displayWindAsText)\n            windBox.add(this.windDirectionIcon, { x_fill: false, y_fill: true, x_align: Align.MIDDLE, y_align: Align.MIDDLE, expand: false });\n        windBox.add(this.windLabel);\n        return windBox;\n    }\n    BuildLocationSection() {\n        this.locationButton = new WeatherButton({ reactive: true, label: _(\'Refresh\'), });\n        this.location = this.locationButton.actor;\n        this.location.connect(SIGNAL_CLICKED, () => {\n            if (this.app.encounteredError)\n                this.app.RefreshWeather(true);\n            else if (this.locationButton.url == null)\n                return;\n            else\n                OpenUrl(this.locationButton);\n        });\n        this.nextLocationButton = new WeatherButton({\n            reactive: true,\n            can_focus: true,\n            child: new Icon({\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: this.app.config.CurrentFontSize,\n                icon_name: "custom-right-arrow-symbolic",\n                style_class: STYLE_LOCATION_SELECTOR\n            }),\n        });\n        this.nextLocationButton.actor.connect(SIGNAL_CLICKED, uiCurrentWeather_Lang.bind(this, this.NextLocationClicked));\n        this.previousLocationButton = new WeatherButton({\n            reactive: true,\n            can_focus: true,\n            child: new Icon({\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: this.app.config.CurrentFontSize,\n                icon_name: "custom-left-arrow-symbolic",\n                style_class: STYLE_LOCATION_SELECTOR\n            }),\n        });\n        this.previousLocationButton.actor.connect(SIGNAL_CLICKED, uiCurrentWeather_Lang.bind(this, this.PreviousLocationClicked));\n        let box = new BoxLayout();\n        box.add(this.previousLocationButton.actor, { x_fill: false, x_align: Align.START, y_align: Align.MIDDLE, expand: false });\n        box.add(this.location, { x_fill: true, x_align: Align.MIDDLE, y_align: Align.MIDDLE, expand: true });\n        box.add(this.nextLocationButton.actor, { x_fill: false, x_align: Align.END, y_align: Align.MIDDLE, expand: false });\n        return box;\n    }\n    BuildSunBox(config, textColorStyle) {\n        let sunBin = new Bin();\n        this.sunriseLabel = new Label({ text: ELLIPSIS, style: textColorStyle });\n        this.sunsetLabel = new Label({ text: ELLIPSIS, style: textColorStyle });\n        let sunriseBox = new BoxLayout();\n        let sunsetBox = new BoxLayout();\n        if (config._showSunrise) {\n            let sunsetIcon = new Icon({\n                icon_name: "sunset-symbolic",\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: 25,\n                style: textColorStyle\n            });\n            let sunriseIcon = new Icon({\n                icon_name: "sunrise-symbolic",\n                icon_type: uiCurrentWeather_IconType.SYMBOLIC,\n                icon_size: 25,\n                style: textColorStyle\n            });\n            sunriseBox.add_actor(sunriseIcon);\n            sunsetBox.add_actor(sunsetIcon);\n        }\n        let textOptions = {\n            x_fill: false,\n            x_align: Align.START,\n            y_align: Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        };\n        sunriseBox.add(this.sunriseLabel, textOptions);\n        sunsetBox.add(this.sunsetLabel, textOptions);\n        let ab_spacerLabel = new Label({ text: BLANK });\n        let sunBox = new BoxLayout({ style_class: STYLE_ASTRONOMY });\n        sunBox.add_actor(sunriseBox);\n        sunBox.add_actor(ab_spacerLabel);\n        sunBox.add_actor(sunsetBox);\n        sunBin.set_child(sunBox);\n        return sunBin;\n    }\n    SetImmediatePrecipitation(precip, config) {\n        if (!config._immediatePrecip || !precip || precip.end == null || precip.start == null) {\n            this.immediatePrecipitationBox.hide();\n            return;\n        }\n        this.immediatePrecipitationBox.show();\n        if (precip.start == -1) {\n            this.immediatePrecipitationBox.hide();\n        }\n        else if (precip.start == 0) {\n            if (precip.end != -1)\n                this.immediatePrecipitationLabel.text = _("Precipitation will end in {precipEnd} minutes", { precipEnd: precip.end });\n            else\n                this.immediatePrecipitationLabel.text = _("Precipitation won\'t end in within an hour");\n        }\n        else {\n            this.immediatePrecipitationLabel.text = _("Precipitation will start within {precipStart} minutes", { precipStart: precip.start });\n        }\n    }\n    SetSunriseAndSunset(sunrise, sunset, tz) {\n        let sunriseText = "";\n        let sunsetText = "";\n        if (sunrise != null && sunset != null && this.app.config._showSunrise) {\n            sunriseText = (GetHoursMinutes(sunrise, this.app.config.currentLocale, this.app.config._show24Hours, tz));\n            sunsetText = (GetHoursMinutes(sunset, this.app.config.currentLocale, this.app.config._show24Hours, tz));\n        }\n        this.sunriseLabel.text = sunriseText;\n        this.sunsetLabel.text = sunsetText;\n    }\n    SetAPIUniqueField(extra_field) {\n        this.apiUniqueLabel.text = "";\n        this.apiUniqueCaptionLabel.text = "";\n        if (!!extra_field) {\n            this.apiUniqueCaptionLabel.text = _(extra_field.name) + LocalizedColon(this.app.config.currentLocale);\n            let value;\n            switch (extra_field.type) {\n                case "percent":\n                    value = PrecentToLocale(extra_field.value, this.app.config.currentLocale);\n                    break;\n                case "temperature":\n                    value = TempToUserConfig(extra_field.value, this.app.config);\n                    break;\n                default:\n                    value = _(extra_field.value);\n                    break;\n            }\n            this.apiUniqueLabel.text = value;\n        }\n    }\n    SetWeatherIcon(iconNames, customIconName) {\n        if (this.app.config._useCustomMenuIcons) {\n            this.weatherIcon.icon_name = customIconName;\n            this.UpdateIconType(uiCurrentWeather_IconType.SYMBOLIC);\n        }\n        else {\n            let icon = WeatherIconSafely(iconNames, this.app.config.IconType);\n            this.weatherIcon.icon_name = icon;\n            this.UpdateIconType(this.app.config.IconType);\n        }\n    }\n    SetConditionText(condition) {\n        this.weatherSummary.text = condition;\n    }\n    SetTemperature(temperature) {\n        let temp = TempToUserConfig(temperature, this.app.config);\n        if (temp == null)\n            return;\n        this.temperatureLabel.text = temp;\n    }\n    SetHumidity(humidity) {\n        if (humidity != null) {\n            this.humidityLabel.text = PrecentToLocale(humidity, this.app.config.currentLocale);\n        }\n    }\n    async SetWind(windSpeed, windDegree) {\n        let wind_direction = CompassDirection(windDegree);\n        this.windDirectionIcon.icon_name = wind_direction;\n        if (this.app.config._displayWindAsText) {\n            let dirText = CompassDirectionText(windDegree);\n            this.windLabel.text = `${(dirText != null ? _(dirText) + " " : "")}${MPStoUserUnits(windSpeed, this.app.config.WindSpeedUnit)}`;\n        }\n        else {\n            this.windLabel.text = MPStoUserUnits(windSpeed, this.app.config.WindSpeedUnit);\n        }\n        if (this.app.config.WindSpeedUnit != "Beaufort")\n            this.windLabel.text += " " + _(this.app.config.WindSpeedUnit);\n    }\n    SetPressure(pressure) {\n        if (pressure != null) {\n            this.pressureLabel.text = PressToUserUnits(pressure, this.app.config._pressureUnit) + \' \' + _(this.app.config._pressureUnit);\n        }\n    }\n    SetLocation(locationString, url) {\n        this.location.label = locationString;\n        this.locationButton.url = url;\n        if (!url)\n            this.locationButton.disable();\n    }\n    NextLocationClicked() {\n        let loc = this.app.config.SwitchToNextLocation();\n        this.app.RefreshAndRebuild(loc);\n    }\n    PreviousLocationClicked() {\n        let loc = this.app.config.SwitchToPreviousLocation();\n        this.app.RefreshAndRebuild(loc);\n    }\n    onLocationStorageChanged(sender, itemCount) {\n        logger_Log.Instance.Debug("On location storage callback called, number of locations now " + itemCount.toString());\n        if (this.app.config.LocStore.ShouldShowLocationSelectors(this.app.config.CurrentLocation))\n            this.ShowLocationSelectors();\n        else\n            this.HideLocationSelectors();\n    }\n    ShowLocationSelectors() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.nextLocationButton) === null || _a === void 0 ? void 0 : _a.actor) === null || _b === void 0 ? void 0 : _b.show();\n        (_d = (_c = this.previousLocationButton) === null || _c === void 0 ? void 0 : _c.actor) === null || _d === void 0 ? void 0 : _d.show();\n    }\n    HideLocationSelectors() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.nextLocationButton) === null || _a === void 0 ? void 0 : _a.actor) === null || _b === void 0 ? void 0 : _b.hide();\n        (_d = (_c = this.previousLocationButton) === null || _c === void 0 ? void 0 : _c.actor) === null || _d === void 0 ? void 0 : _d.hide();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiForecasts.ts\n\n\n\n\n\nconst { Bin: uiForecasts_Bin, BoxLayout: uiForecasts_BoxLayout, Label: uiForecasts_Label, Icon: uiForecasts_Icon, Widget } = imports.gi.St;\nconst { GridLayout } = imports.gi.Clutter;\nconst STYLE_FORECAST_ICON = \'weather-forecast-icon\';\nconst STYLE_FORECAST_DATABOX = \'weather-forecast-databox\';\nconst STYLE_FORECAST_DAY = \'weather-forecast-day\';\nconst STYLE_FORECAST_SUMMARY = \'weather-forecast-summary\';\nconst STYLE_FORECAST_TEMPERATURE = \'weather-forecast-temperature\';\nconst STYLE_FORECAST_BOX = \'weather-forecast-box\';\nconst STYLE_FORECAST_CONTAINER = \'weather-forecast-container\';\nconst STYLE_FORECAST = \'forecast\';\nclass UIForecasts {\n    constructor(app) {\n        this.DayClicked = new Event();\n        this.DayHovered = new Event();\n        this.app = app;\n        this.actor = new uiForecasts_Bin({ style_class: STYLE_FORECAST });\n        this.DayClickedCallback = (s, e) => this.OnDayClicked(s, e);\n        this.DayHoveredCallback = (s, e) => this.OnDayHovered(s, e);\n    }\n    UpdateIconType(iconType) {\n        var _a;\n        if (!this.forecasts)\n            return;\n        for (let i = 0; i < this.forecasts.length; i++) {\n            if (!((_a = this.forecasts[i]) === null || _a === void 0 ? void 0 : _a.Icon))\n                continue;\n            this.forecasts[i].Icon.icon_type = iconType;\n        }\n    }\n    Display(weather, config) {\n        try {\n            if (!weather.forecasts)\n                return false;\n            let len = Math.min(this.forecasts.length, weather.forecasts.length);\n            for (let i = 0; i < len; i++) {\n                let forecastData = weather.forecasts[i];\n                let forecastUi = this.forecasts[i];\n                let comment = (config._shortConditions) ? forecastData.condition.main : forecastData.condition.description;\n                let dayName = GetDayName(forecastData.date.toJSDate(), config.currentLocale, config._showForecastDates, weather.location.timeZone);\n                forecastUi.Day.actor.label = dayName;\n                forecastUi.Day.Hovered.Unsubscribe(this.DayHoveredCallback);\n                forecastUi.Day.Clicked.Unsubscribe(this.DayClickedCallback);\n                let hasHourlyWeather = false;\n                for (let index = 0; index < this.app.GetMaxHourlyForecasts(); index++) {\n                    const element = weather.hourlyForecasts[index];\n                    if (!element)\n                        break;\n                    if (OnSameDay(element.date.toJSDate(), forecastData.date.toJSDate(), config)) {\n                        hasHourlyWeather = true;\n                        break;\n                    }\n                }\n                forecastUi.Day.ID = forecastData.date;\n                if (hasHourlyWeather) {\n                    forecastUi.Day.enable();\n                    forecastUi.Day.Hovered.Subscribe(this.DayHoveredCallback);\n                    forecastUi.Day.Clicked.Subscribe(this.DayClickedCallback);\n                }\n                else {\n                    forecastUi.Day.disable();\n                }\n                forecastUi.Temperature.text = TempRangeToUserConfig(forecastData.temp_min, forecastData.temp_max, config);\n                forecastUi.Summary.text = comment;\n                forecastUi.Icon.icon_name = (config._useCustomMenuIcons) ? forecastData.condition.customIcon : WeatherIconSafely(forecastData.condition.icons, config.IconType);\n            }\n            return true;\n        }\n        catch (e) {\n            this.app.ShowError({\n                type: "hard",\n                detail: "unknown",\n                message: "Forecast parsing failed: " + e.toString(),\n                userError: false\n            });\n            logger_Log.Instance.Error("DisplayForecastError " + e);\n            return false;\n        }\n    }\n    ;\n    Rebuild(config, textColorStyle) {\n        this.Destroy();\n        this.forecasts = [];\n        this.grid = new GridLayout({\n            orientation: config._verticalOrientation\n        });\n        this.grid.set_column_homogeneous(true);\n        let table = new Widget({\n            layout_manager: this.grid,\n            style_class: STYLE_FORECAST_CONTAINER\n        });\n        this.actor.set_child(table);\n        let maxDays = this.app.GetMaxForecastDays();\n        let maxRow = config._forecastRows;\n        let maxCol = config._forecastColumns;\n        if (config._verticalOrientation) {\n            [maxRow, maxCol] = [maxCol, maxRow];\n        }\n        let curRow = 0;\n        let curCol = 0;\n        for (let i = 0; i < maxDays; i++) {\n            let forecastWeather = {};\n            if (curCol >= maxCol) {\n                curRow++;\n                curCol = 0;\n            }\n            if (curRow >= maxRow)\n                break;\n            forecastWeather.Icon = new uiForecasts_Icon({\n                icon_type: config.IconType,\n                icon_size: 48,\n                icon_name: APPLET_ICON,\n                style_class: STYLE_FORECAST_ICON\n            });\n            forecastWeather.Day = new WeatherButton({\n                style_class: STYLE_FORECAST_DAY,\n                reactive: true,\n                style: textColorStyle,\n                label: ""\n            }, true);\n            forecastWeather.Day.disable();\n            forecastWeather.Summary = new uiForecasts_Label({\n                style_class: STYLE_FORECAST_SUMMARY,\n                reactive: true\n            });\n            forecastWeather.Temperature = new uiForecasts_Label({\n                style_class: STYLE_FORECAST_TEMPERATURE\n            });\n            let by = new uiForecasts_BoxLayout({\n                vertical: true,\n                style_class: STYLE_FORECAST_DATABOX\n            });\n            by.add(forecastWeather.Day.actor, { x_align: imports.gi.St.Align.START, expand: false, x_fill: false });\n            by.add_actor(forecastWeather.Summary);\n            by.add_actor(forecastWeather.Temperature);\n            let bb = new uiForecasts_BoxLayout({\n                style_class: STYLE_FORECAST_BOX\n            });\n            bb.add_actor(forecastWeather.Icon);\n            bb.add_actor(by);\n            this.forecasts[i] = forecastWeather;\n            if (!config._verticalOrientation) {\n                this.grid.attach(bb, curCol, curRow, 1, 1);\n            }\n            else {\n                this.grid.attach(bb, curRow, curCol, 1, 1);\n            }\n            curCol++;\n        }\n    }\n    Destroy() {\n        if (this.actor.get_child() != null)\n            this.actor.get_child().destroy();\n    }\n    OnDayHovered(sender, event) {\n        logger_Log.Instance.Debug("Day Hovered: " + sender.ID.toJSDate().toDateString());\n        this.DayHovered.Invoke(sender, sender.ID);\n    }\n    OnDayClicked(sender, event) {\n        logger_Log.Instance.Debug("Day Clicked: " + sender.ID.toJSDate().toDateString());\n        this.DayClicked.Invoke(sender, sender.ID);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiHourlyForecasts.ts\n\n\n\nconst { PolicyType } = imports.gi.Gtk;\nconst { addTween } = imports.ui.tweener;\nconst { BoxLayout: uiHourlyForecasts_BoxLayout, Side, Label: uiHourlyForecasts_Label, ScrollView, Icon: uiHourlyForecasts_Icon, Align: uiHourlyForecasts_Align } = imports.gi.St;\nclass UIHourlyForecasts {\n    constructor(app, menu) {\n        this.hourlyToggled = false;\n        this.app = app;\n        this.actor = new ScrollView({\n            hscrollbar_policy: PolicyType.AUTOMATIC,\n            vscrollbar_policy: PolicyType.NEVER,\n            x_fill: true,\n            y_fill: true,\n            y_align: uiHourlyForecasts_Align.MIDDLE,\n            x_align: uiHourlyForecasts_Align.MIDDLE\n        });\n        this.actor.overlay_scrollbars = true;\n        let vScroll = this.actor.get_vscroll_bar();\n        vScroll.connect("scroll-start", () => { menu.passEvents = true; });\n        vScroll.connect("scroll-stop", () => { menu.passEvents = false; });\n        let hScroll = this.actor.get_hscroll_bar();\n        hScroll.connect("scroll-start", () => { menu.passEvents = true; });\n        hScroll.connect("scroll-stop", () => { menu.passEvents = false; });\n        this.actor.hide();\n        this.actor.set_clip_to_allocation(true);\n        this.container = new uiHourlyForecasts_BoxLayout({ style_class: "hourly-box" });\n        this.actor.add_actor(this.container);\n    }\n    get Toggled() {\n        return this.hourlyToggled;\n    }\n    ScrollTo(date) {\n        if (this.hourlyForecastDates == null)\n            return;\n        let itemWidth = this.GetHourlyBoxItemWidth();\n        let midnightIndex = null;\n        for (let index = 0; index < this.hourlyForecastDates.length; index++) {\n            if (OnSameDay(this.hourlyForecastDates[index].toJSDate(), date.toJSDate(), this.app.config))\n                midnightIndex = index;\n            const element = AddHours(this.hourlyForecastDates[index].toJSDate(), -6);\n            if (OnSameDay(element, date.toJSDate(), this.app.config)) {\n                this.actor.get_hscroll_bar().get_adjustment().set_value(index * itemWidth);\n                break;\n            }\n        }\n        if (midnightIndex != null)\n            this.actor.get_hscroll_bar().get_adjustment().set_value(midnightIndex * itemWidth);\n    }\n    UpdateIconType(iconType) {\n        var _a;\n        if (!this.hourlyForecasts)\n            return;\n        for (let i = 0; i < this.hourlyForecasts.length; i++) {\n            if (!((_a = this.hourlyForecasts[i]) === null || _a === void 0 ? void 0 : _a.Icon))\n                continue;\n            this.hourlyForecasts[i].Icon.icon_type = iconType;\n        }\n    }\n    Display(forecasts, config, tz) {\n        this.hourlyForecastDates = [];\n        let max = Math.min(forecasts.length, this.hourlyForecasts.length);\n        for (let index = 0; index < max; index++) {\n            const hour = forecasts[index];\n            const ui = this.hourlyForecasts[index];\n            this.hourlyForecastDates.push(hour.date);\n            ui.Hour.text = GetHoursMinutes(hour.date.toJSDate(), config.currentLocale, config._show24Hours, tz, config._shortHourlyTime);\n            ui.Temperature.text = TempToUserConfig(hour.temp, config);\n            ui.Icon.icon_name = (config._useCustomMenuIcons) ? hour.condition.customIcon : WeatherIconSafely(hour.condition.icons, config.IconType);\n            ui.Summary.text = hour.condition.main;\n            ui.Precipitation.text = this.GeneratePrecipitationText(hour.precipitation, config);\n        }\n        this.AdjustHourlyBoxItemWidth();\n        return !(max <= 0);\n    }\n    async Show() {\n        this.actor.show();\n        this.actor.hide();\n        this.AdjustHourlyBoxItemWidth();\n        let [minWidth, naturalWidth] = this.actor.get_preferred_width(-1);\n        let [minHeight, naturalHeight] = this.actor.get_preferred_height(minWidth);\n        logger_Log.Instance.Debug("hourlyScrollView requested height and is set to: " + naturalHeight);\n        this.actor.set_width(minWidth);\n        this.actor.show();\n        this.actor.style = "min-height: " + naturalHeight.toString() + "px;";\n        this.hourlyToggled = true;\n        return new Promise((resolve, reject) => {\n            if (global.settings.get_boolean("desktop-effects-on-menus")) {\n                this.actor.height = 0;\n                addTween(this.actor, {\n                    height: naturalHeight,\n                    time: 0.25,\n                    onUpdate: () => { },\n                    onComplete: () => {\n                        this.actor.set_height(naturalHeight);\n                        resolve();\n                    }\n                });\n            }\n            else {\n                this.actor.set_height(naturalHeight);\n                resolve();\n            }\n        });\n    }\n    async Hide() {\n        let hscroll = this.actor.get_hscroll_bar();\n        this.hourlyToggled = false;\n        return new Promise((resolve, reject) => {\n            if (global.settings.get_boolean("desktop-effects-on-menus")) {\n                addTween(this.actor, {\n                    height: 0,\n                    time: 0.25,\n                    onUpdate: () => { },\n                    onComplete: () => {\n                        this.actor.set_height(-1);\n                        this.actor.style = null;\n                        this.actor.hide();\n                        hscroll.get_adjustment().set_value(0);\n                        resolve();\n                    }\n                });\n            }\n            else {\n                this.actor.style = null;\n                this.actor.set_height(-1);\n                this.actor.hide();\n                resolve();\n            }\n        });\n    }\n    AdjustHourlyBoxItemWidth() {\n        let requiredWidth = this.GetHourlyBoxItemWidth();\n        for (let index = 0; index < this.hourlyContainers.length; index++) {\n            const element = this.hourlyContainers[index];\n            element.set_width(requiredWidth);\n        }\n    }\n    GetHourlyBoxItemWidth() {\n        let requiredWidth = 0;\n        for (let index = 0; index < this.hourlyContainers.length; index++) {\n            const ui = this.hourlyForecasts[index];\n            let hourWidth = ui.Hour.get_preferred_width(-1)[1];\n            let iconWidth = ui.Icon.get_preferred_width(-1)[1];\n            let summaryWidth = ui.Summary.get_preferred_width(-1)[1];\n            let temperatureWidth = ui.Temperature.get_preferred_width(-1)[1];\n            let precipitationWidth = ui.Precipitation.get_preferred_width(-1)[1];\n            if (precipitationWidth > iconWidth || summaryWidth > iconWidth) {\n                if (precipitationWidth > summaryWidth)\n                    precipitationWidth += 10;\n                else\n                    summaryWidth += 10;\n            }\n            if (requiredWidth < hourWidth)\n                requiredWidth = hourWidth;\n            if (requiredWidth < iconWidth)\n                requiredWidth = iconWidth;\n            if (requiredWidth < summaryWidth)\n                requiredWidth = summaryWidth;\n            if (requiredWidth < temperatureWidth)\n                requiredWidth = temperatureWidth;\n            if (requiredWidth < precipitationWidth)\n                requiredWidth = precipitationWidth;\n        }\n        return requiredWidth;\n    }\n    Destroy() {\n        this.container.destroy_all_children();\n    }\n    Rebuild(config, textColorStyle) {\n        this.Destroy();\n        let hours = this.app.GetMaxHourlyForecasts();\n        this.hourlyForecasts = [];\n        this.hourlyContainers = [];\n        for (let index = 0; index < hours; index++) {\n            let box = new uiHourlyForecasts_BoxLayout({ vertical: true, style_class: "hourly-box-item" });\n            this.hourlyContainers.push(box);\n            this.hourlyForecasts.push({\n                Hour: new uiHourlyForecasts_Label({ text: "Hour", style_class: "hourly-time", style: textColorStyle }),\n                Icon: new uiHourlyForecasts_Icon({\n                    icon_type: config.IconType,\n                    icon_size: 24,\n                    icon_name: APPLET_ICON,\n                    style_class: "hourly-icon"\n                }),\n                Precipitation: new uiHourlyForecasts_Label({ text: " ", style_class: "hourly-data" }),\n                Summary: new uiHourlyForecasts_Label({ text: _(ELLIPSIS), style_class: "hourly-data" }),\n                Temperature: new uiHourlyForecasts_Label({ text: _(ELLIPSIS), style_class: "hourly-data" })\n            });\n            this.hourlyForecasts[index].Summary.clutter_text.set_line_wrap(true);\n            box.add_child(this.hourlyForecasts[index].Hour);\n            box.add_child(this.hourlyForecasts[index].Icon);\n            box.add_child(this.hourlyForecasts[index].Summary);\n            box.add_child(this.hourlyForecasts[index].Temperature);\n            box.add_child(this.hourlyForecasts[index].Precipitation);\n            this.container.add(box, {\n                x_fill: true,\n                x_align: uiHourlyForecasts_Align.MIDDLE,\n                y_align: uiHourlyForecasts_Align.MIDDLE,\n                y_fill: true,\n                expand: true\n            });\n        }\n    }\n    GeneratePrecipitationText(precip, config) {\n        if (!precip)\n            return "";\n        let precipitationText = "";\n        if (!!precip.volume && precip.volume > 0) {\n            precipitationText = MillimeterToUserUnits(precip.volume, config.DistanceUnit) + " " + ((config.DistanceUnit == "metric") ? _("mm") : _("in"));\n        }\n        if (!!precip.chance) {\n            precipitationText = (NotEmpty(precipitationText)) ? (precipitationText + ", ") : "";\n            precipitationText += (Math.round(precip.chance).toString() + "%");\n        }\n        return precipitationText;\n    }\n    GetScrollViewHeight() {\n        let boxItemHeight = 0;\n        for (let index = 0; index < this.hourlyContainers.length; index++) {\n            const ui = this.hourlyForecasts[index];\n            logger_Log.Instance.Debug("Height requests of Hourly box Items: " + index);\n            let hourHeight = ui.Hour.get_preferred_height(-1)[1];\n            let iconHeight = ui.Icon.get_preferred_height(-1)[1];\n            let summaryHeight = ui.Summary.get_preferred_height(-1)[1];\n            let temperatureHeight = ui.Temperature.get_preferred_height(-1)[1];\n            let precipitationHeight = ui.Precipitation.get_preferred_height(-1)[1];\n            let itemHeight = hourHeight + iconHeight + summaryHeight + temperatureHeight + precipitationHeight;\n            if (boxItemHeight < itemHeight)\n                boxItemHeight = itemHeight;\n        }\n        logger_Log.Instance.Debug("Final Hourly box item height is: " + boxItemHeight);\n        let scrollBarHeight = this.actor.get_hscroll_bar().get_preferred_width(-1)[1];\n        logger_Log.Instance.Debug("Scrollbar height is " + scrollBarHeight);\n        let theme = this.container.get_theme_node();\n        let styling = theme.get_margin(Side.TOP) + theme.get_margin(Side.BOTTOM) + theme.get_padding(Side.TOP) + theme.get_padding(Side.BOTTOM);\n        logger_Log.Instance.Debug("ScollbarBox vertical padding and margin is: " + styling);\n        return (boxItemHeight + scrollBarHeight + styling);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiBar.ts\n\n\n\n\n\nconst { BoxLayout: uiBar_BoxLayout, IconType: uiBar_IconType, Label: uiBar_Label, Icon: uiBar_Icon, Align: uiBar_Align, } = imports.gi.St;\nconst STYLE_BAR = \'bottombar\';\nclass UIBar {\n    constructor(app) {\n        this.ToggleClicked = new Event();\n        this.providerCreditButton = null;\n        this.hourlyButton = null;\n        this._timestamp = null;\n        this.app = app;\n        this.actor = new uiBar_BoxLayout({ vertical: false, style_class: STYLE_BAR });\n    }\n    get Actor() {\n        return this.actor;\n    }\n    SwitchButtonToShow() {\n        var _a;\n        if (!!((_a = this.hourlyButton) === null || _a === void 0 ? void 0 : _a.actor.child))\n            this.hourlyButton.actor.child.icon_name = "custom-down-arrow-symbolic";\n    }\n    SwitchButtonToHide() {\n        var _a;\n        if (!!((_a = this.hourlyButton) === null || _a === void 0 ? void 0 : _a.actor.child))\n            this.hourlyButton.actor.child.icon_name = "custom-up-arrow-symbolic";\n    }\n    DisplayErrorMessage(msg) {\n        this._timestamp.text = msg;\n    }\n    Display(weather, provider, config, shouldShowToggle) {\n        this.providerCreditButton.actor.label = _("Powered by") + " " + provider.prettyName;\n        this.providerCreditButton.url = provider.website;\n        let lastUpdatedTime = AwareDateString(weather.date.toJSDate(), config.currentLocale, config._show24Hours);\n        this._timestamp.text = _("As of {lastUpdatedTime}", { "lastUpdatedTime": lastUpdatedTime });\n        if (weather.location.distanceFrom != null) {\n            let stringFormat = {\n                distance: MetreToUserUnits(weather.location.distanceFrom, config.DistanceUnit).toString(),\n                distanceUnit: this.BigDistanceUnitFor(config.DistanceUnit)\n            };\n            this._timestamp.text += `, ${_("{distance}{distanceUnit} from you", stringFormat)}`;\n        }\n        if (!shouldShowToggle)\n            this.HideHourlyToggle();\n        return true;\n    }\n    Destroy() {\n        this.actor.destroy_all_children();\n    }\n    Rebuild(config) {\n        this.Destroy();\n        this._timestamp = new uiBar_Label({ text: "Placeholder" });\n        this.actor.add(this._timestamp, {\n            x_fill: false,\n            x_align: uiBar_Align.START,\n            y_align: uiBar_Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        });\n        this.hourlyButton = new WeatherButton({\n            reactive: true,\n            can_focus: true,\n            child: new uiBar_Icon({\n                icon_type: uiBar_IconType.SYMBOLIC,\n                icon_size: config.CurrentFontSize + 3,\n                icon_name: "custom-down-arrow-symbolic",\n                style: "margin: 2px 5px;"\n            }),\n        });\n        this.hourlyButton.actor.connect(SIGNAL_CLICKED, () => this.ToggleClicked.Invoke(this, true));\n        this.actor.add(this.hourlyButton.actor, {\n            x_fill: false,\n            x_align: uiBar_Align.MIDDLE,\n            y_align: uiBar_Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        });\n        if (this.app.GetMaxHourlyForecasts() <= 0) {\n            this.HideHourlyToggle();\n        }\n        this.providerCreditButton = new WeatherButton({ label: _(ELLIPSIS), reactive: true });\n        this.providerCreditButton.actor.connect(SIGNAL_CLICKED, () => OpenUrl(this.providerCreditButton));\n        this.actor.add(this.providerCreditButton.actor, {\n            x_fill: false,\n            x_align: uiBar_Align.END,\n            y_align: uiBar_Align.MIDDLE,\n            y_fill: false,\n            expand: true\n        });\n    }\n    BigDistanceUnitFor(unit) {\n        if (unit == "imperial")\n            return _("mi");\n        return _("km");\n    }\n    HideHourlyToggle() {\n        if (this.hourlyButton != null)\n            this.hourlyButton.actor.child = null;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui_elements/uiSeparator.ts\nconst { PopupSeparatorMenuItem } = imports.ui.popupMenu;\nclass UISeparator {\n    constructor() {\n        this.actor = new PopupSeparatorMenuItem();\n        this.actor.actor.remove_style_class_name("popup-menu-item");\n    }\n    get Actor() {\n        return this.actor.actor;\n    }\n    Show() {\n        this.actor.actor.show();\n    }\n    Hide() {\n        this.actor.actor.hide();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/ui.ts\n\n\n\n\n\n\n\nconst { PopupMenuManager } = imports.ui.popupMenu;\nconst { BoxLayout: ui_BoxLayout, IconType: ui_IconType, Label: ui_Label } = imports.gi.St;\nconst ui_Lang = imports.lang;\nconst { AppletPopupMenu } = imports.ui.applet;\nconst { themeManager } = imports.ui.main;\nconst { SignalManager: ui_SignalManager } = imports.misc.signalManager;\nconst STYLE_WEATHER_MENU = \'weather-menu\';\nclass UI {\n    constructor(app, orientation) {\n        this.lightTheme = false;\n        this.lastDateToggled = null;\n        this.App = app;\n        this.menuManager = new PopupMenuManager(this.App);\n        this.menu = new AppletPopupMenu(this.App, orientation);\n        this.menu.box.add_style_class_name(STYLE_WEATHER_MENU);\n        logger_Log.Instance.Debug("Popup Menu applied classes are: " + this.menu.box.get_style_class_name());\n        this.menuManager.addMenu(this.menu);\n        this.menuManager._signals.connect(this.menu, "open-state-changed", this.PopupMenuToggled, this);\n        this.signals = new ui_SignalManager();\n        this.lightTheme = this.IsLightTheme();\n        this.BuildPopupMenu();\n        this.signals.connect(themeManager, \'theme-set\', this.OnThemeChanged, this);\n    }\n    Toggle() {\n        this.menu.toggle();\n    }\n    async ToggleHourlyWeather() {\n        if (this.HourlyWeather.Toggled) {\n            await this.HideHourlyWeather();\n        }\n        else {\n            await this.ShowHourlyWeather();\n        }\n    }\n    Rebuild(config) {\n        this.ShowLoadingUi();\n        let textColorStyle = this.GetTextColorStyle();\n        this.CurrentWeather.Rebuild(config, textColorStyle);\n        this.HourlyWeather.Rebuild(config, textColorStyle);\n        this.FutureWeather.Rebuild(config, textColorStyle);\n        this.Bar.Rebuild(config);\n    }\n    UpdateIconType(iconType) {\n        if (iconType == ui_IconType.FULLCOLOR && this.App.config._useCustomMenuIcons)\n            return;\n        this.CurrentWeather.UpdateIconType(iconType);\n        this.FutureWeather.UpdateIconType(iconType);\n        this.HourlyWeather.UpdateIconType(iconType);\n    }\n    DisplayErrorMessage(msg, errorType) {\n        this.Bar.DisplayErrorMessage(msg);\n    }\n    Display(weather, config, provider) {\n        this.CurrentWeather.Display(weather, config);\n        this.FutureWeather.Display(weather, config);\n        let shouldShowToggle = this.HourlyWeather.Display(weather.hourlyForecasts, config, weather.location.timeZone);\n        this.Bar.Display(weather, provider, config, shouldShowToggle);\n        return true;\n    }\n    OnThemeChanged() {\n        this.HideHourlyWeather();\n        let newThemeIsLight = this.IsLightTheme();\n        if (newThemeIsLight != this.lightTheme) {\n            this.lightTheme = newThemeIsLight;\n        }\n        this.App.RefreshAndRebuild();\n    }\n    async PopupMenuToggled(caller, data) {\n        if (data == false) {\n            await delay(100);\n            this.HideHourlyWeather();\n        }\n    }\n    IsLightTheme() {\n        let color = this.menu.actor.get_theme_node().get_color("color");\n        let luminance = (2126 * color.red + 7152 * color.green + 722 * color.blue) / 10000 / 255;\n        luminance = Math.abs(1 - luminance);\n        logger_Log.Instance.Debug("Theme is Light: " + (luminance > 0.5));\n        return (luminance > 0.5);\n    }\n    ForegroundColor() {\n        let hex = this.menu.actor.get_theme_node().get_foreground_color().to_string().substring(0, 7);\n        return hex;\n    }\n    GetTextColorStyle() {\n        let hexColor = null;\n        if (this.lightTheme) {\n            hexColor = ShadeHexColor(this.ForegroundColor(), -0.40);\n        }\n        return "color: " + hexColor;\n    }\n    BuildPopupMenu() {\n        this.CurrentWeather = new CurrentWeather(this.App);\n        this.FutureWeather = new UIForecasts(this.App);\n        this.HourlyWeather = new UIHourlyForecasts(this.App, this.menu);\n        this.FutureWeather.DayClicked.Subscribe((s, e) => this.OnDayClicked(s, e));\n        this.Bar = new UIBar(this.App);\n        this.Bar.ToggleClicked.Subscribe(ui_Lang.bind(this, this.ToggleHourlyWeather));\n        this.ForecastSeparator = new UISeparator();\n        this.HourlySeparator = new UISeparator();\n        this.BarSeparator = new UISeparator();\n        this.HourlySeparator.Hide();\n        let mainBox = new ui_BoxLayout({ vertical: true });\n        mainBox.add_actor(this.CurrentWeather.actor);\n        mainBox.add_actor(this.HourlySeparator.Actor);\n        mainBox.add_actor(this.HourlyWeather.actor);\n        mainBox.add_actor(this.ForecastSeparator.Actor);\n        mainBox.add_actor(this.FutureWeather.actor);\n        mainBox.add_actor(this.BarSeparator.Actor);\n        mainBox.add_actor(this.Bar.Actor);\n        this.menu.addActor(mainBox);\n    }\n    ShowLoadingUi() {\n        this.CurrentWeather.Destroy();\n        this.FutureWeather.Destroy();\n        this.Bar.Destroy();\n        this.CurrentWeather.actor.set_child(new ui_Label({\n            text: _(\'Loading current weather ...\')\n        }));\n        this.FutureWeather.actor.set_child(new ui_Label({\n            text: _(\'Loading future weather ...\')\n        }));\n    }\n    async OnDayClicked(sender, date) {\n        var _a;\n        if (!this.HourlyWeather.Toggled)\n            await this.ShowHourlyWeather();\n        else if ((_a = this.lastDateToggled) === null || _a === void 0 ? void 0 : _a.equals(date)) {\n            await this.HideHourlyWeather();\n            return;\n        }\n        this.HourlyWeather.ScrollTo(date);\n        this.lastDateToggled = date;\n    }\n    async ShowHourlyWeather() {\n        this.HourlySeparator.Show();\n        this.Bar.SwitchButtonToHide();\n        await this.HourlyWeather.Show();\n    }\n    async HideHourlyWeather() {\n        this.lastDateToggled = null;\n        this.HourlySeparator.Hide();\n        this.Bar.SwitchButtonToShow();\n        await this.HourlyWeather.Hide();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/darkSky.ts\n\n\n\nconst darkSky_Lang = imports.lang;\nclass DarkSky {\n    constructor(_app) {\n        this.prettyName = _("DarkSky");\n        this.name = "DarkSky";\n        this.maxForecastSupport = 8;\n        this.website = "https://darksky.net/poweredby/";\n        this.maxHourlyForecastSupport = 168;\n        this.needsApiKey = true;\n        this.descriptionLineLength = 25;\n        this.supportedLanguages = [\n            \'ar\', \'az\', \'be\', \'bg\', \'bs\', \'ca\', \'cs\', \'da\', \'de\', \'el\', \'en\', \'es\',\n            \'et\', \'fi\', \'fr\', \'he\', \'hr\', \'hu\', \'id\', \'is\', \'it\', \'ja\', \'ka\', \'ko\',\n            \'kw\', \'lv\', \'nb\', \'nl\', \'no\', \'pl\', \'pt\', \'ro\', \'ru\', \'sk\', \'sl\', \'sr\',\n            \'sv\', \'tet\', \'tr\', \'uk\', \'x-pig-latin\', \'zh\', \'zh-tw\'\n        ];\n        this.query = "https://api.darksky.net/forecast/";\n        this.DarkSkyFilterWords = [_("and"), _("until"), _("in"), _("Possible")];\n        this.unit = null;\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        let now = new Date(Date.now());\n        if (now.getUTCFullYear() >= 2022) {\n            this.app.ShowError({\n                type: "hard",\n                detail: "no api response",\n                message: _("This API has ceased to function, please use another one.")\n            });\n            return null;\n        }\n        let query = this.ConstructQuery(loc);\n        if (query == "" && query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, darkSky_Lang.bind(this, this.HandleError));\n        if (!json)\n            return null;\n        if (!json.code) {\n            return this.ParseWeather(json);\n        }\n        else {\n            this.HandleResponseErrors(json);\n            return null;\n        }\n    }\n    ;\n    ParseWeather(json) {\n        try {\n            let sunrise = DateTime.fromSeconds(json.daily.data[0].sunriseTime, { zone: json.timezone });\n            let sunset = DateTime.fromSeconds(json.daily.data[0].sunsetTime, { zone: json.timezone });\n            let result = {\n                date: DateTime.fromSeconds(json.currently.time, { zone: json.timezone }),\n                coord: {\n                    lat: json.latitude,\n                    lon: json.longitude\n                },\n                location: {\n                    url: "https://darksky.net/forecast/" + json.latitude + "," + json.longitude,\n                    timeZone: json.timezone,\n                },\n                sunrise: sunrise,\n                sunset: sunset,\n                wind: {\n                    speed: this.ToMPS(json.currently.windSpeed),\n                    degree: json.currently.windBearing\n                },\n                temperature: this.ToKelvin(json.currently.temperature),\n                pressure: json.currently.pressure,\n                humidity: json.currently.humidity * 100,\n                condition: {\n                    main: this.GetShortCurrentSummary(json.currently.summary),\n                    description: json.currently.summary,\n                    icons: this.ResolveIcon(json.currently.icon, { sunrise: sunrise, sunset: sunset }),\n                    customIcon: this.ResolveCustomIcon(json.currently.icon)\n                },\n                extra_field: {\n                    name: _("Feels Like"),\n                    value: this.ToKelvin(json.currently.apparentTemperature),\n                    type: "temperature"\n                },\n                forecasts: [],\n                hourlyForecasts: []\n            };\n            for (let i = 0; i < json.daily.data.length; i++) {\n                let day = json.daily.data[i];\n                let forecast = {\n                    date: DateTime.fromSeconds(day.time, { zone: json.timezone }),\n                    temp_min: this.ToKelvin(day.temperatureLow),\n                    temp_max: this.ToKelvin(day.temperatureHigh),\n                    condition: {\n                        main: this.GetShortSummary(day.summary),\n                        description: this.ProcessSummary(day.summary),\n                        icons: this.ResolveIcon(day.icon),\n                        customIcon: this.ResolveCustomIcon(day.icon)\n                    },\n                };\n                forecast.date = forecast.date.set({ hour: 12 });\n                result.forecasts.push(forecast);\n            }\n            for (let i = 0; i < json.hourly.data.length; i++) {\n                let hour = json.hourly.data[i];\n                let forecast = {\n                    date: DateTime.fromSeconds(hour.time, { zone: json.timezone }),\n                    temp: this.ToKelvin(hour.temperature),\n                    condition: {\n                        main: this.GetShortSummary(hour.summary),\n                        description: this.ProcessSummary(hour.summary),\n                        icons: this.ResolveIcon(hour.icon, { sunrise: sunrise, sunset: sunset }, DateTime.fromSeconds(hour.time, { zone: json.timezone })),\n                        customIcon: this.ResolveCustomIcon(hour.icon)\n                    },\n                    precipitation: {\n                        type: hour.precipType,\n                        volume: hour.precipProbability,\n                        chance: hour.precipProbability * 100\n                    }\n                };\n                result.hourlyForecasts.push(forecast);\n            }\n            return result;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("DarkSky payload parsing error: " + e);\n            this.app.ShowError({ type: "soft", detail: "unusual payload", service: "darksky", message: _("Failed to Process Weather Info") });\n            return null;\n        }\n    }\n    ;\n    ConvertToAPILocale(systemLocale) {\n        if (systemLocale == "zh-tw") {\n            return systemLocale;\n        }\n        let lang = systemLocale.split("-")[0];\n        return lang;\n    }\n    ConstructQuery(loc) {\n        this.SetQueryUnit();\n        let query = this.query + this.app.config.ApiKey + "/" + loc.lat.toString() + "," + loc.lon.toString() + "?exclude=minutely,flags" + "&units=" + this.unit;\n        let locale = this.ConvertToAPILocale(this.app.config.currentLocale);\n        if (IsLangSupported(locale, this.supportedLanguages) && this.app.config._translateCondition) {\n            query = query + "&lang=" + locale;\n        }\n        return query;\n    }\n    HandleError(message) {\n        if (message.code == 403) {\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "bad key",\n                service: "darksky",\n                message: _("Please Make sure you\\nentered the API key correctly and your account is not locked")\n            });\n            return false;\n        }\n        else if (message.code == 401) {\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "no key",\n                service: "darksky",\n                message: _("Please Make sure you\\nentered the API key that you have from DarkSky")\n            });\n            return false;\n        }\n        return true;\n    }\n    HandleResponseErrors(json) {\n        let code = json.code;\n        let error = json.error;\n        let errorMsg = "DarkSky API: ";\n        logger_Log.Instance.Debug("DarksSky API error payload: " + json);\n        switch (code) {\n            case "400":\n                logger_Log.Instance.Error(errorMsg + error);\n                break;\n            default:\n                logger_Log.Instance.Error(errorMsg + error);\n                break;\n        }\n    }\n    ;\n    ProcessSummary(summary) {\n        let processed = summary.split(" ");\n        let result = "";\n        let lineLength = 0;\n        for (let i = 0; i < processed.length; i++) {\n            if (lineLength + processed[i].length > this.descriptionLineLength) {\n                result = result + "\\n";\n                lineLength = 0;\n            }\n            result = result + processed[i] + " ";\n            lineLength = lineLength + processed[i].length + 1;\n        }\n        return result;\n    }\n    ;\n    GetShortSummary(summary) {\n        let processed = summary.split(" ");\n        if (processed.length == 1)\n            return processed[0];\n        let result = [];\n        for (let i = 0; i < processed.length; i++) {\n            if (!/[\\(\\)]/.test(processed[i]) && !this.WordBanned(processed[i])) {\n                result.push(processed[i]) + " ";\n            }\n            if (result.length == 2)\n                break;\n        }\n        return result.join(" ");\n    }\n    ;\n    GetShortCurrentSummary(summary) {\n        let processed = summary.split(" ");\n        let result = "";\n        let maxLoop;\n        (processed.length < 2) ? maxLoop = processed.length : maxLoop = 2;\n        for (let i = 0; i < maxLoop; i++) {\n            if (processed[i] != "and") {\n                result = result + processed[i] + " ";\n            }\n        }\n        return result;\n    }\n    WordBanned(word) {\n        return this.DarkSkyFilterWords.includes(word);\n    }\n    ResolveIcon(icon, sunTimes, date) {\n        switch (icon) {\n            case "rain":\n                return ["weather-rain", "weather-showers-scattered", "weather-freezing-rain"];\n            case "snow":\n                return ["weather-snow"];\n            case "sleet":\n                return ["weather-freezing-rain", "weather-rain", "weather-showers-scattered"];\n            case "fog":\n                return ["weather-fog"];\n            case "wind":\n                return (sunTimes && IsNight(sunTimes, date)) ? ["weather-windy", "weather-breeze", "weather-clouds", "weather-few-clouds-night"] : ["weather-windy", "weather-breeze", "weather-clouds", "weather-few-clouds"];\n            case "cloudy":\n                return (sunTimes && IsNight(sunTimes, date)) ? ["weather-overcast", "weather-clouds", "weather-few-clouds-night"] : ["weather-overcast", "weather-clouds", "weather-few-clouds"];\n            case "partly-cloudy-night":\n                return ["weather-few-clouds-night"];\n            case "partly-cloudy-day":\n                return ["weather-few-clouds"];\n            case "clear-night":\n                return ["weather-clear-night"];\n            case "clear-day":\n                return ["weather-clear"];\n            case "storm":\n                return ["weather-storm"];\n            case "showers":\n                return ["weather-showers", "weather-showers-scattered"];\n            default:\n                return ["weather-severe-alert"];\n        }\n    }\n    ;\n    ResolveCustomIcon(icon) {\n        switch (icon) {\n            case "rain":\n                return "rain-symbolic";\n            case "snow":\n                return "snow-symbolic";\n            case "fog":\n                return "fog-symbolic";\n            case "cloudy":\n                return "cloudy-symbolic";\n            case "partly-cloudy-night":\n                return "night-alt-cloudy-symbolic";\n            case "partly-cloudy-day":\n                return "day-cloudy-symbolic";\n            case "clear-night":\n                return "night-clear-symbolic";\n            case "clear-day":\n                return "day-sunny-symbolic";\n            case "storm":\n                return "thunderstorm-symbolic";\n            case "showers":\n                return "showers-symbolic";\n            case "wind":\n                return "strong-wind-symbolic";\n            default:\n                return "cloud-refresh-symbolic";\n        }\n    }\n    SetQueryUnit() {\n        if (this.app.config.TemperatureUnit == "celsius") {\n            if (this.app.config.WindSpeedUnit == "kph" || this.app.config.WindSpeedUnit == "m/s") {\n                this.unit = \'si\';\n            }\n            else {\n                this.unit = \'uk2\';\n            }\n        }\n        else {\n            this.unit = \'us\';\n        }\n    }\n    ;\n    ToKelvin(temp) {\n        if (this.unit == \'us\') {\n            return FahrenheitToKelvin(temp);\n        }\n        else {\n            return CelsiusToKelvin(temp);\n        }\n    }\n    ;\n    ToMPS(speed) {\n        if (this.unit == \'si\') {\n            return speed;\n        }\n        else {\n            return MPHtoMPS(speed);\n        }\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/openWeatherMap.ts\n\n\n\nconst openWeatherMap_Lang = imports.lang;\nclass OpenWeatherMap {\n    constructor(_app) {\n        this.prettyName = _("OpenWeatherMap");\n        this.name = "OpenWeatherMap";\n        this.maxForecastSupport = 8;\n        this.website = "https://openweathermap.org/";\n        this.maxHourlyForecastSupport = 48;\n        this.needsApiKey = false;\n        this.supportedLanguages = ["af", "al", "ar", "az", "bg", "ca", "cz", "da", "de", "el", "en", "eu", "fa", "fi",\n            "fr", "gl", "he", "hi", "hr", "hu", "id", "it", "ja", "kr", "la", "lt", "mk", "no", "nl", "pl",\n            "pt", "pt_br", "ro", "ru", "se", "sk", "sl", "sp", "es", "sr", "th", "tr", "ua", "uk", "vi", "zh_cn", "zh_tw", "zu"\n        ];\n        this.base_url = "https://api.openweathermap.org/data/2.5/onecall?";\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        let query = this.ConstructQuery(this.base_url, loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, openWeatherMap_Lang.bind(this, this.HandleError));\n        if (!json)\n            return null;\n        if (this.HadErrors(json))\n            return null;\n        return this.ParseWeather(json, loc);\n    }\n    ;\n    ParseWeather(json, loc) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n        try {\n            let tz = (_a = loc.timeZone) !== null && _a !== void 0 ? _a : "UTC";\n            let weather = {\n                coord: {\n                    lat: json.lat,\n                    lon: json.lon\n                },\n                location: {\n                    url: "https://openweathermap.org/city/",\n                    timeZone: json.timezone\n                },\n                date: DateTime.fromSeconds(json.current.dt, { zone: tz }),\n                sunrise: DateTime.fromSeconds(json.current.sunrise, { zone: tz }),\n                sunset: DateTime.fromSeconds(json.current.sunset, { zone: tz }),\n                wind: {\n                    speed: json.current.wind_speed,\n                    degree: json.current.wind_deg\n                },\n                temperature: json.current.temp,\n                pressure: json.current.pressure,\n                humidity: json.current.humidity,\n                condition: {\n                    main: (_d = (_c = (_b = json === null || json === void 0 ? void 0 : json.current) === null || _b === void 0 ? void 0 : _b.weather) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.main,\n                    description: (_g = (_f = (_e = json === null || json === void 0 ? void 0 : json.current) === null || _e === void 0 ? void 0 : _e.weather) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.description,\n                    icons: this.ResolveIcon((_k = (_j = (_h = json === null || json === void 0 ? void 0 : json.current) === null || _h === void 0 ? void 0 : _h.weather) === null || _j === void 0 ? void 0 : _j[0]) === null || _k === void 0 ? void 0 : _k.icon),\n                    customIcon: this.ResolveCustomIcon((_o = (_m = (_l = json === null || json === void 0 ? void 0 : json.current) === null || _l === void 0 ? void 0 : _l.weather) === null || _m === void 0 ? void 0 : _m[0]) === null || _o === void 0 ? void 0 : _o.icon)\n                },\n                extra_field: {\n                    name: _("Feels Like"),\n                    value: json.current.feels_like,\n                    type: "temperature"\n                },\n                forecasts: []\n            };\n            if (json.minutely != null) {\n                let immediate = {\n                    start: -1,\n                    end: -1\n                };\n                for (let index = 0; index < json.minutely.length; index++) {\n                    const element = json.minutely[index];\n                    if (element.precipitation > 0 && immediate.start == -1) {\n                        immediate.start = index;\n                        continue;\n                    }\n                    else if (element.precipitation == 0 && immediate.start != -1) {\n                        immediate.end = index;\n                        break;\n                    }\n                }\n                weather.immediatePrecipitation = immediate;\n            }\n            let forecasts = [];\n            for (let i = 0; i < json.daily.length; i++) {\n                let day = json.daily[i];\n                let forecast = {\n                    date: DateTime.fromSeconds(day.dt, { zone: tz }),\n                    temp_min: day.temp.min,\n                    temp_max: day.temp.max,\n                    condition: {\n                        main: day.weather[0].main,\n                        description: day.weather[0].description,\n                        icons: this.ResolveIcon(day.weather[0].icon),\n                        customIcon: this.ResolveCustomIcon(day.weather[0].icon)\n                    },\n                };\n                forecasts.push(forecast);\n            }\n            weather.forecasts = forecasts;\n            let hourly = [];\n            for (let index = 0; index < json.hourly.length; index++) {\n                const hour = json.hourly[index];\n                let forecast = {\n                    date: DateTime.fromSeconds(hour.dt, { zone: tz }),\n                    temp: hour.temp,\n                    condition: {\n                        main: hour.weather[0].main,\n                        description: hour.weather[0].description,\n                        icons: this.ResolveIcon(hour.weather[0].icon),\n                        customIcon: this.ResolveCustomIcon(hour.weather[0].icon)\n                    },\n                };\n                if (hour.pop >= 0.1) {\n                    forecast.precipitation = {\n                        chance: hour.pop * 100,\n                        type: "none",\n                        volume: null\n                    };\n                }\n                if (!!hour.rain && forecast.precipitation != null) {\n                    forecast.precipitation.volume = hour.rain["1h"];\n                    forecast.precipitation.type = "rain";\n                }\n                if (!!hour.snow && forecast.precipitation != null) {\n                    forecast.precipitation.volume = hour.snow["1h"];\n                    forecast.precipitation.type = "snow";\n                }\n                hourly.push(forecast);\n            }\n            weather.hourlyForecasts = hourly;\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("OpenWeatherMap Weather Parsing error: " + e);\n            this.app.ShowError({\n                type: "soft",\n                service: "openweathermap",\n                detail: "unusual payload",\n                message: _("Failed to Process Current Weather Info")\n            });\n            return null;\n        }\n    }\n    ;\n    ConstructQuery(baseUrl, loc) {\n        let query = baseUrl;\n        query = query + "lat=" + loc.lat + "&lon=" + loc.lon + "&appid=";\n        query += "1c73f8259a86c6fd43c7163b543c8640";\n        let locale = this.ConvertToAPILocale(this.app.config.currentLocale);\n        if (this.app.config._translateCondition && IsLangSupported(locale, this.supportedLanguages)) {\n            query = query + "&lang=" + locale;\n        }\n        return query;\n    }\n    ;\n    ConvertToAPILocale(systemLocale) {\n        if (systemLocale == "zh-cn" || systemLocale == "zh-cn" || systemLocale == "pt-br") {\n            return systemLocale;\n        }\n        let lang = systemLocale.split("-")[0];\n        if (lang == "sv") {\n            return "se";\n        }\n        else if (lang == "cs") {\n            return "cz";\n        }\n        else if (lang == "ko") {\n            return "kr";\n        }\n        else if (lang == "lv") {\n            return "la";\n        }\n        else if (lang == "nn" || lang == "nb") {\n            return "no";\n        }\n        return lang;\n    }\n    HadErrors(json) {\n        if (!this.HasReturnedError(json))\n            return false;\n        let errorMsg = "OpenWeatherMap Response: ";\n        let error = {\n            service: "openweathermap",\n            type: "hard",\n        };\n        let errorPayload = json;\n        switch (errorPayload.cod) {\n            case ("400"):\n                error.detail = "bad location format";\n                error.message = _("Please make sure Location is in the correct format in the Settings");\n                break;\n            case ("401"):\n                error.detail = "bad key";\n                error.message = _("Make sure you entered the correct key in settings");\n                break;\n            case ("404"):\n                error.detail = "location not found";\n                error.message = _("Location not found, make sure location is available or it is in the correct format");\n                break;\n            case ("429"):\n                error.detail = "key blocked";\n                error.message = _("If this problem persists, please contact the Author of this applet");\n                break;\n            default:\n                error.detail = "unknown";\n                error.message = _("Unknown Error, please see the logs in Looking Glass");\n                break;\n        }\n        ;\n        this.app.ShowError(error);\n        logger_Log.Instance.Debug("OpenWeatherMap Error Code: " + errorPayload.cod);\n        logger_Log.Instance.Error(errorMsg + errorPayload.message);\n        return true;\n    }\n    ;\n    HasReturnedError(json) {\n        return (!!(json === null || json === void 0 ? void 0 : json.cod));\n    }\n    HandleError(error) {\n        if (error.code == 404) {\n            this.app.ShowError({\n                detail: "location not found",\n                message: _("Location not found, make sure location is available or it is in the correct format"),\n                userError: true,\n                type: "hard"\n            });\n            return false;\n        }\n        return true;\n    }\n    ResolveIcon(icon) {\n        switch (icon) {\n            case "10d":\n                return ["weather-rain", "weather-showers-scattered", "weather-freezing-rain"];\n            case "10n":\n                return ["weather-rain", "weather-showers-scattered", "weather-freezing-rain"];\n            case "09n":\n                return ["weather-showers"];\n            case "09d":\n                return ["weather-showers"];\n            case "13d":\n                return ["weather-snow"];\n            case "13n":\n                return ["weather-snow"];\n            case "50d":\n                return ["weather-fog"];\n            case "50n":\n                return ["weather-fog"];\n            case "04d":\n                return ["weather-overcast", "weather-clouds", "weather-few-clouds"];\n            case "04n":\n                return ["weather-overcast", "weather-clouds-night", "weather-few-clouds-night"];\n            case "03n":\n                return [\'weather-clouds-night\', "weather-few-clouds-night"];\n            case "03d":\n                return ["weather-clouds", "weather-few-clouds", "weather-overcast"];\n            case "02n":\n                return ["weather-few-clouds-night"];\n            case "02d":\n                return ["weather-few-clouds"];\n            case "01n":\n                return ["weather-clear-night"];\n            case "01d":\n                return ["weather-clear"];\n            case "11d":\n                return ["weather-storm"];\n            case "11n":\n                return ["weather-storm"];\n            default:\n                return ["weather-severe-alert"];\n        }\n    }\n    ;\n    ResolveCustomIcon(icon) {\n        switch (icon) {\n            case "10d":\n                return "day-rain-symbolic";\n            case "10n":\n                return "night-rain-symbolic";\n            case "09n":\n                return "night-showers-symbolic";\n            case "09d":\n                return "day-showers-symbolic";\n            case "13d":\n                return "day-snow-symbolic";\n            case "13n":\n                return "night-alt-snow-symbolic";\n            case "50d":\n                return "day-fog-symbolic";\n            case "50n":\n                return "night-fog-symbolic";\n            case "04d":\n                return "day-cloudy-symbolic";\n            case "04n":\n                return "night-alt-cloudy-symbolic";\n            case "03n":\n                return "night-alt-cloudy-symbolic";\n            case "03d":\n                return "day-cloudy-symbolic";\n            case "02n":\n                return "night-alt-cloudy-symbolic";\n            case "02d":\n                return "day-cloudy-symbolic";\n            case "01n":\n                return "night-clear-symbolic";\n            case "01d":\n                return "day-sunny-symbolic";\n            case "11d":\n                return "day-thunderstorm-symbolic";\n            case "11n":\n                return "night-alt-thunderstorm-symbolic";\n            default:\n                return "cloud-refresh-symbolic";\n        }\n    }\n    ;\n}\n;\nconst openWeatherMapConditionLibrary = [\n    _("Thunderstorm with light rain"),\n    _("Thunderstorm with rain"),\n    _("Thunderstorm with heavy rain"),\n    _("Light thunderstorm"),\n    _("Thunderstorm"),\n    _("Heavy thunderstorm"),\n    _("Ragged thunderstorm"),\n    _("Thunderstorm with light drizzle"),\n    _("Thunderstorm with drizzle"),\n    _("Thunderstorm with heavy drizzle"),\n    _("Light intensity drizzle"),\n    _("Drizzle"),\n    _("Heavy intensity drizzle"),\n    _("Light intensity drizzle rain"),\n    _("Drizzle rain"),\n    _("Heavy intensity drizzle rain"),\n    _("Shower rain and drizzle"),\n    _("Heavy shower rain and drizzle"),\n    _("Shower drizzle"),\n    _("Light rain"),\n    _("Moderate rain"),\n    _("Heavy intensity rain"),\n    _("Very heavy rain"),\n    _("Extreme rain"),\n    _("Freezing rain"),\n    _("Light intensity shower rain"),\n    _("Shower rain"),\n    _("Heavy intensity shower rain"),\n    _("Ragged shower rain"),\n    _("Light snow"),\n    _("Snow"),\n    _("Heavy snow"),\n    _("Sleet"),\n    _("Shower sleet"),\n    _("Light rain and snow"),\n    _("Rain and snow"),\n    _("Light shower snow"),\n    _("Shower snow"),\n    _("Heavy shower snow"),\n    _("Mist"),\n    _("Smoke"),\n    _("Haze"),\n    _("Sand, dust whirls"),\n    _("Fog"),\n    _("Sand"),\n    _("Dust"),\n    _("Volcanic ash"),\n    _("Squalls"),\n    _("Tornado"),\n    _("Clear"),\n    _("Clear sky"),\n    _("Sky is clear"),\n    _("Clouds"),\n    _("Few clouds"),\n    _("Scattered clouds"),\n    _("Broken clouds"),\n    _("Overcast clouds")\n];\n\n;// CONCATENATED MODULE: ./src/3_8/providers/us_weather.ts\n\n\n\n\nclass USWeather {\n    constructor(_app) {\n        this.prettyName = _("US Weather");\n        this.name = "US Weather";\n        this.maxForecastSupport = 7;\n        this.website = "https://www.weather.gov/";\n        this.maxHourlyForecastSupport = 156;\n        this.needsApiKey = false;\n        this.sitesUrl = "https://api.weather.gov/points/";\n        this.grid = null;\n        this.MAX_STATION_DIST = 50000;\n        this.observationStations = null;\n        this.currentLoc = null;\n        this.currentLocID = null;\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        let locID = loc.lat.toString() + "," + loc.lon.toString();\n        if (!this.grid || !this.observationStations || this.currentLocID != locID) {\n            logger_Log.Instance.Print("Downloading new site data");\n            this.currentLoc = loc;\n            this.currentLocID = locID;\n            let grid = await this.GetGridData(loc);\n            if (grid == null)\n                return null;\n            logger_Log.Instance.Debug("Grid found: " + JSON.stringify(grid, null, 2));\n            let observationStations = await this.GetStationData(grid.properties.observationStations);\n            if (observationStations == null)\n                return null;\n            this.grid = grid;\n            this.observationStations = observationStations;\n        }\n        else {\n            logger_Log.Instance.Debug("Site data downloading skipped");\n        }\n        let observations = await this.GetObservationsInRange(this.MAX_STATION_DIST, loc, this.observationStations);\n        let hourlyForecastPromise = this.app.LoadJsonAsync(this.grid.properties.forecastHourly + "?units=si");\n        let forecastPromise = this.app.LoadJsonAsync(this.grid.properties.forecast);\n        let hourly = await hourlyForecastPromise;\n        let forecast = await forecastPromise;\n        if (!hourly || !forecast) {\n            logger_Log.Instance.Error("Failed to obtain forecast Data");\n            return null;\n        }\n        let weather = this.ParseCurrent(observations, hourly);\n        weather.forecasts = this.ParseForecast(forecast);\n        weather.hourlyForecasts = this.ParseHourlyForecast(hourly, this);\n        return weather;\n    }\n    ;\n    async GetGridData(loc) {\n        let siteData = await this.app.LoadJsonAsync(this.sitesUrl + loc.lat.toString() + "," + loc.lon.toString(), null, (msg) => this.OnObtainingGridData(msg));\n        return siteData;\n    }\n    async GetStationData(stationListUrl) {\n        let stations = await this.app.LoadJsonAsync(stationListUrl);\n        return stations === null || stations === void 0 ? void 0 : stations.features;\n    }\n    async GetObservationsInRange(range, loc, stations) {\n        let observations = [];\n        for (let index = 0; index < stations.length; index++) {\n            const element = stations[index];\n            element.dist = GetDistance(element.geometry.coordinates[1], element.geometry.coordinates[0], loc.lat, loc.lon);\n            if (element.dist > range)\n                break;\n            let observation = await this.app.LoadJsonAsync(stations[index].id + "/observations/latest", null, (msg) => false);\n            if (observation == null) {\n                logger_Log.Instance.Debug("Failed to get observations from " + stations[index].id);\n            }\n            else {\n                observations.push(observation);\n            }\n        }\n        return observations;\n    }\n    OnObtainingGridData(message) {\n        var _a, _b;\n        if (message.code == 404) {\n            let data = JSON.parse((_b = (_a = message === null || message === void 0 ? void 0 : message.response) === null || _a === void 0 ? void 0 : _a.response_body) === null || _b === void 0 ? void 0 : _b.data);\n            if (data.title == "Data Unavailable For Requested Point") {\n                this.app.ShowError({\n                    type: "hard",\n                    userError: true,\n                    detail: "location not covered",\n                    service: "us-weather",\n                    message: _("Location is outside US, please use a different provider.")\n                });\n            }\n            return false;\n        }\n        return true;\n    }\n    MeshObservationData(observations) {\n        if (observations.length < 1)\n            return null;\n        let result = observations[0];\n        if (observations.length == 1)\n            return result;\n        for (let index = 1; index < observations.length; index++) {\n            const element = observations[index];\n            let debugText = " Observation data missing, plugged in from ID " +\n                element.id + ", index " + index +\n                ", distance "\n                + Math.round(GetDistance(element.geometry.coordinates[1], element.geometry.coordinates[0], this.currentLoc.lat, this.currentLoc.lon))\n                + " metres";\n            if (result.properties.icon == null) {\n                result.properties.icon = element.properties.icon;\n                result.properties.textDescription = element.properties.textDescription;\n                logger_Log.Instance.Debug("Weather condition" + debugText);\n            }\n            if (result.properties.temperature.value == null) {\n                result.properties.temperature.value = element.properties.temperature.value;\n                logger_Log.Instance.Debug("Temperature" + debugText);\n            }\n            if (result.properties.windSpeed.value == null) {\n                result.properties.windSpeed.value = element.properties.windSpeed.value;\n                logger_Log.Instance.Debug("Wind Speed" + debugText);\n            }\n            if (result.properties.windDirection.value == null) {\n                result.properties.windDirection.value = element.properties.windDirection.value;\n                logger_Log.Instance.Debug("Wind degree" + debugText);\n            }\n            if (result.properties.barometricPressure.value == null) {\n                result.properties.barometricPressure.value = element.properties.barometricPressure.value;\n                logger_Log.Instance.Debug("Pressure" + debugText);\n            }\n            if (result.properties.relativeHumidity.value == null) {\n                result.properties.relativeHumidity.value = element.properties.relativeHumidity.value;\n                logger_Log.Instance.Debug("Humidity" + debugText);\n            }\n            if (result.properties.windChill.value == null) {\n                result.properties.windChill.value = element.properties.windChill.value;\n                logger_Log.Instance.Debug("WindChill" + debugText);\n            }\n            if (result.properties.visibility.value == null) {\n                result.properties.visibility.value = element.properties.visibility.value;\n                logger_Log.Instance.Debug("Visibility" + debugText);\n            }\n        }\n        return result;\n    }\n    ParseCurrent(json, hourly) {\n        if (json.length == 0) {\n            logger_Log.Instance.Error("No observation stations/data are available");\n            return null;\n        }\n        let observation = this.MeshObservationData(json);\n        let timestamp = DateTime.fromJSDate(new Date(observation.properties.timestamp));\n        let times = (0,suncalc.getTimes)(new Date(), observation.geometry.coordinates[1], observation.geometry.coordinates[0], observation.properties.elevation.value);\n        let suntimes = {\n            sunrise: DateTime.fromJSDate(times.sunrise),\n            sunset: DateTime.fromJSDate(times.sunset)\n        };\n        try {\n            let weather = {\n                coord: {\n                    lat: observation.geometry.coordinates[1],\n                    lon: observation.geometry.coordinates[0]\n                },\n                location: {\n                    city: null,\n                    country: null,\n                    url: "https://forecast.weather.gov/MapClick.php?lat=" + this.currentLoc.lat.toString() + "&lon=" + this.currentLoc.lon.toString(),\n                    timeZone: this.observationStations[0].properties.timeZone,\n                    distanceFrom: this.observationStations[0].dist\n                },\n                date: timestamp,\n                sunrise: DateTime.fromJSDate(times.sunrise),\n                sunset: DateTime.fromJSDate(times.sunset),\n                wind: {\n                    speed: KPHtoMPS(observation.properties.windSpeed.value),\n                    degree: observation.properties.windDirection.value\n                },\n                temperature: CelsiusToKelvin(observation.properties.temperature.value),\n                pressure: observation.properties.barometricPressure.value / 100,\n                humidity: observation.properties.relativeHumidity.value,\n                condition: this.ResolveCondition(observation.properties.icon, IsNight(suntimes)),\n                forecasts: []\n            };\n            if (observation.properties.windChill.value != null) {\n                weather.extra_field = {\n                    name: _("Feels Like"),\n                    value: CelsiusToKelvin(observation.properties.windChill.value),\n                    type: "temperature"\n                };\n            }\n            if (weather.condition == null && hourly != null) {\n                weather.condition = this.ResolveCondition(hourly.properties.periods[0].icon);\n            }\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("US Weather Parsing error: " + e);\n            this.app.ShowError({ type: "soft", service: "us-weather", detail: "unusual payload", message: _("Failed to Process Current Weather Info") });\n            return null;\n        }\n    }\n    ;\n    CheckIfHasThreeElementsForDay(json) {\n        if (json.properties.periods.length < 3)\n            return false;\n        let counter = 0;\n        for (let index = 1; index < 3; index++) {\n            const element = json.properties.periods[index];\n            const prevElement = json.properties.periods[index - 1];\n            let prevDate = new Date(prevElement.startTime).toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            let curDate = new Date(element.startTime).toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            if (prevDate == curDate)\n                counter++;\n            else\n                counter = 0;\n            if (counter > 1)\n                return true;\n            return false;\n        }\n    }\n    FindTodayIndex(json, startIndex = 0) {\n        let today = new Date();\n        for (let index = startIndex; index < json.properties.periods.length; index++) {\n            const element = json.properties.periods[index];\n            let todayDate = today.toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            let curDate = new Date(element.startTime).toLocaleDateString(undefined, { timeZone: this.observationStations[0].properties.timeZone });\n            if (todayDate != curDate)\n                continue;\n            return index;\n        }\n    }\n    ParseForecast(json) {\n        let forecasts = [];\n        try {\n            let startIndex = (this.CheckIfHasThreeElementsForDay(json) ? 1 : 0);\n            startIndex = this.FindTodayIndex(json, startIndex);\n            if (json.properties.periods[startIndex].isDaytime == false) {\n                startIndex++;\n                let today = json.properties.periods[0];\n                let forecast = {\n                    date: DateTime.fromJSDate(new Date(today.startTime)),\n                    temp_min: FahrenheitToKelvin(today.temperature),\n                    temp_max: FahrenheitToKelvin(today.temperature),\n                    condition: this.ResolveCondition(today.icon),\n                };\n                forecasts.push(forecast);\n            }\n            for (let i = startIndex; i < json.properties.periods.length; i += 2) {\n                let day = json.properties.periods[i];\n                let night = json.properties.periods[i + 1];\n                if (!night)\n                    night = day;\n                let forecast = {\n                    date: DateTime.fromJSDate(new Date(day.startTime)),\n                    temp_min: FahrenheitToKelvin(night.temperature),\n                    temp_max: FahrenheitToKelvin(day.temperature),\n                    condition: this.ResolveCondition(day.icon),\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("US Weather Forecast Parsing error: " + e);\n            this.app.ShowError({ type: "soft", service: "us-weather", detail: "unusual payload", message: _("Failed to Process Forecast Info") });\n            return null;\n        }\n    }\n    ;\n    ParseHourlyForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.properties.periods.length; i++) {\n                let hour = json.properties.periods[i];\n                let timestamp = new Date(hour.startTime);\n                let forecast = {\n                    date: DateTime.fromJSDate(timestamp),\n                    temp: CelsiusToKelvin(hour.temperature),\n                    condition: self.ResolveCondition(hour.icon, !hour.isDaytime),\n                    precipitation: null\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("US Weather service Forecast Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "us-weather", detail: "unusual payload", message: _("Failed to Process Hourly Forecast Info") });\n            return null;\n        }\n    }\n    ResolveCondition(icon, isNight = false) {\n        if (icon == null)\n            return null;\n        let code = icon.match(/(?!\\/)[a-z_]+(?=(\\?|,))/);\n        let iconType = this.app.config.IconType;\n        switch (code[0]) {\n            case "skc":\n                return {\n                    main: _("Clear"),\n                    description: _("Clear"),\n                    customIcon: (isNight) ? "night-clear-symbolic" : "day-sunny-symbolic",\n                    icons: (isNight) ? ["weather-clear-night", "weather-severe-alert"] : ["weather-clear", "weather-severe-alert"]\n                };\n            case "few":\n                return {\n                    main: _("Few clouds"),\n                    description: _("Few clouds"),\n                    customIcon: (isNight) ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: ["weather-clear-night", "weather-severe-alert"]\n                };\n            case "sct":\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    customIcon: (isNight) ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: ["weather-clear", "weather-severe-alert"]\n                };\n            case "bkn":\n                return {\n                    main: _("Mostly cloudy"),\n                    description: _("Mostly cloudy"),\n                    customIcon: (isNight) ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: ["weather-clouds-night", "weather-overcast", "weather-severe-alert"]\n                };\n            case "ovc":\n                return {\n                    main: _("Overcast"),\n                    description: _("Overcast"),\n                    customIcon: "cloudy-symbolic",\n                    icons: ["weather-clouds", "weather-overcast", "weather-severe-alert"]\n                };\n            case "wind_skc":\n                return {\n                    main: _("Clear"),\n                    description: _("Clear and windy"),\n                    customIcon: (IsNight) ? "night-alt-wind-symbolic" : "day-windy-symbolic",\n                    icons: (isNight) ? ["weather-clear-night"] : ["weather-clear"]\n                };\n            case "wind_few":\n                return {\n                    main: _("Few clouds"),\n                    description: _("Few clouds and windy"),\n                    customIcon: (IsNight) ? "night-alt-cloudy-windy-symbolic" : "day-cloudy-windy-symbolic",\n                    icons: (isNight) ? ["weather-few-clouds-night"] : ["weather-few-clouds"]\n                };\n            case "wind_sct":\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy and windy"),\n                    customIcon: (IsNight) ? "night-alt-cloudy-windy-symbolic" : "day-cloudy-windy-symbolic",\n                    icons: (isNight) ? ["weather-clouds-night", "weather-few-clouds-night"] : ["weather-clouds", "weather-few-clouds"]\n                };\n            case "wind_bkn":\n                return {\n                    main: _("Mostly cloudy"),\n                    description: _("Mostly cloudy and windy"),\n                    customIcon: (IsNight) ? "night-alt-cloudy-windy-symbolic" : "day-cloudy-windy-symbolic",\n                    icons: (isNight) ? ["weather-clouds-night", "weather-few-clouds-night"] : ["weather-clouds", "weather-few-clouds"]\n                };\n            case "wind_ovc":\n                return {\n                    main: _("Overcast"),\n                    description: _("Overcast and windy"),\n                    customIcon: "cloudy-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", "weather-severe-alert"]\n                };\n            case "snow":\n                return {\n                    main: _("Snow"),\n                    description: _("Snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-severe-alert"]\n                };\n            case "rain_snow":\n                return {\n                    main: _("Rain"),\n                    description: _("Snowy rain"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-snow-rain", "weather-snow", "weather-severe-alert"]\n                };\n            case "rain_sleet":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "snow_sleet":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet"),\n                    customIcon: "sleet-symbolic",\n                    icons: ["weather-freezing-rain", "weather-hail", "weather-severe-alert"]\n                };\n            case "fzra":\n                return {\n                    main: _("Freezing rain"),\n                    description: _("Freezing rain"),\n                    customIcon: "rain-wind-symbolic",\n                    icons: ["weather-freezing-rain", "weather-hail", "weather-severe-alert"]\n                };\n            case "rain_fzra":\n                return {\n                    main: _("Freezing rain"),\n                    description: _("Freezing rain"),\n                    customIcon: "rain-wind-symbolic",\n                    icons: ["weather-freezing-rain", "weather-hail", "weather-severe-alert"]\n                };\n            case "snow_fzra":\n                return {\n                    main: _("Freezing rain"),\n                    description: _("Freezing rain and snow"),\n                    customIcon: "rain-wind-symbolic",\n                    icons: ["weather-freezing-rain", "weather-hail", "weather-severe-alert"]\n                };\n            case "sleet":\n                return {\n                    main: _("Sleet"),\n                    description: _("Sleet"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-severe-alert"]\n                };\n            case "rain":\n                return {\n                    main: _("Rain"),\n                    description: _("Rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-rain", "weather-freezing-rain", "weather-showers", "weather-showers-scattered", "weather-severe-alert"]\n                };\n            case "rain_showers":\n            case "rain_showers_hi":\n                return {\n                    main: _("Rain"),\n                    description: _("Rain showers"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-rain", "weather-freezing-rain", "weather-severe-alert"]\n                };\n            case "tsra":\n            case "tsra_sct":\n            case "tsra_hi":\n                return {\n                    main: _("Thunderstorm"),\n                    description: _("Thunderstorm"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "tornado":\n                return {\n                    main: _("Tornado"),\n                    description: _("Tornado"),\n                    customIcon: "tornado-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            case "hurricane":\n                return {\n                    main: _("Hurricane"),\n                    description: _("Hurricane"),\n                    customIcon: "hurricane-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            case "tropical_storm":\n                return {\n                    main: _("Storm"),\n                    description: _("Tropical storm"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "dust":\n                return {\n                    main: _("Dust"),\n                    description: _("Dust"),\n                    customIcon: "dust-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "smoke":\n                return {\n                    main: _("Smoke"),\n                    description: _("Smoke"),\n                    customIcon: "smoke-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "haze":\n                return {\n                    main: _("Haze"),\n                    description: _("Haze"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "hot":\n                return {\n                    main: _("Hot"),\n                    description: _("Hot"),\n                    customIcon: "hot-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            case "cold":\n                return {\n                    main: _("Cold"),\n                    description: _("Cold"),\n                    customIcon: "snowflake-cold-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "blizzard":\n                return {\n                    main: _("Blizzard"),\n                    description: _("Blizzard"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm", "weather-severe-alert"]\n                };\n            case "fog":\n                return {\n                    main: _("Fog"),\n                    description: _("Fog"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            default:\n                return {\n                    main: _("Unknown"),\n                    description: _("Unknown"),\n                    customIcon: "cloud-refresh-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n        }\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/weatherbit.ts\n\n\n\nconst weatherbit_Lang = imports.lang;\nclass Weatherbit {\n    constructor(_app) {\n        this.prettyName = _("WeatherBit");\n        this.name = "Weatherbit";\n        this.maxForecastSupport = 16;\n        this.website = "https://www.weatherbit.io/";\n        this.maxHourlyForecastSupport = 48;\n        this.needsApiKey = true;\n        this.supportedLanguages = [\n            \'ar\', \'az\', \'be\', \'bg\', \'bs\', \'ca\', \'cz\', \'da\', \'de\', \'el\', \'en\',\n            \'et\', \'fi\', \'fr\', \'hr\', \'hu\', \'id\', \'is\', \'it\',\n            \'kw\', \'lv\', \'nb\', \'nl\', \'pl\', \'pt\', \'ro\', \'ru\', \'sk\', \'sl\', \'sr\',\n            \'sv\', \'tr\', \'uk\', \'zh\', \'zh-tw\'\n        ];\n        this.current_url = "https://api.weatherbit.io/v2.0/current?";\n        this.daily_url = "https://api.weatherbit.io/v2.0/forecast/daily?";\n        this.hourly_url = "https://api.weatherbit.io/v2.0/forecast/hourly?";\n        this.hourlyAccess = true;\n        this.app = _app;\n    }\n    async GetWeather(loc) {\n        let forecastPromise = this.GetData(this.daily_url, loc, this.ParseForecast);\n        let hourlyPromise = null;\n        if (!!this.hourlyAccess)\n            hourlyPromise = this.GetHourlyData(this.hourly_url, loc);\n        let currentResult = await this.GetData(this.current_url, loc, this.ParseCurrent);\n        if (!currentResult)\n            return null;\n        let forecastResult = await forecastPromise;\n        currentResult.forecasts = (!forecastResult) ? [] : forecastResult;\n        let hourlyResult = await hourlyPromise;\n        currentResult.hourlyForecasts = (!hourlyResult) ? [] : hourlyResult;\n        return currentResult;\n    }\n    ;\n    async GetData(baseUrl, loc, ParseFunction) {\n        let query = this.ConstructQuery(baseUrl, loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, weatherbit_Lang.bind(this, this.HandleError));\n        if (json == null)\n            return null;\n        return ParseFunction(json, this);\n    }\n    async GetHourlyData(baseUrl, loc) {\n        let query = this.ConstructQuery(baseUrl, loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query, null, weatherbit_Lang.bind(this, this.HandleHourlyError));\n        if (!!(json === null || json === void 0 ? void 0 : json.error)) {\n            return null;\n        }\n        if (json == null)\n            return null;\n        return this.ParseHourlyForecast(json, this);\n    }\n    ;\n    ParseCurrent(json, self) {\n        json = json.data[0];\n        let hourDiff = self.HourDifference(new Date(json.ts * 1000), self.ParseStringTime(json.ob_time));\n        if (hourDiff != 0)\n            logger_Log.Instance.Debug("Weatherbit reporting incorrect time, correcting with " + (0 - hourDiff).toString() + " hours");\n        try {\n            let weather = {\n                coord: {\n                    lat: json.lat,\n                    lon: json.lon\n                },\n                location: {\n                    city: json.city_name,\n                    country: json.country_code,\n                    url: null,\n                    timeZone: json.timezone\n                },\n                date: DateTime.fromSeconds(json.ts),\n                sunrise: DateTime.fromJSDate(self.TimeToDate(json.sunrise, hourDiff)),\n                sunset: DateTime.fromJSDate(self.TimeToDate(json.sunset, hourDiff)),\n                wind: {\n                    speed: json.wind_spd,\n                    degree: json.wind_dir\n                },\n                temperature: json.temp,\n                pressure: json.pres,\n                humidity: json.rh,\n                condition: {\n                    main: json.weather.description,\n                    description: json.weather.description,\n                    icons: self.ResolveIcon(json.weather.icon),\n                    customIcon: self.ResolveCustomIcon(json.weather.icon)\n                },\n                extra_field: {\n                    name: _("Feels Like"),\n                    value: json.app_temp,\n                    type: "temperature"\n                },\n                forecasts: []\n            };\n            return weather;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Weatherbit Weather Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "weatherbit", detail: "unusual payload", message: _("Failed to Process Current Weather Info") });\n            return null;\n        }\n    }\n    ;\n    ParseForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.data.length; i++) {\n                let day = json.data[i];\n                let forecast = {\n                    date: DateTime.fromSeconds(day.ts),\n                    temp_min: day.min_temp,\n                    temp_max: day.max_temp,\n                    condition: {\n                        main: day.weather.description,\n                        description: day.weather.description,\n                        icons: self.ResolveIcon(day.weather.icon),\n                        customIcon: self.ResolveCustomIcon(day.weather.icon)\n                    },\n                };\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Weatherbit Forecast Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "weatherbit", detail: "unusual payload", message: _("Failed to Process Forecast Info") });\n            return null;\n        }\n    }\n    ;\n    ParseHourlyForecast(json, self) {\n        let forecasts = [];\n        try {\n            for (let i = 0; i < json.data.length; i++) {\n                let hour = json.data[i];\n                let forecast = {\n                    date: DateTime.fromSeconds(hour.ts),\n                    temp: hour.temp,\n                    condition: {\n                        main: hour.weather.description,\n                        description: hour.weather.description,\n                        icons: self.ResolveIcon(hour.weather.icon),\n                        customIcon: self.ResolveCustomIcon(hour.weather.icon)\n                    },\n                    precipitation: {\n                        type: "rain",\n                        volume: hour.precip,\n                        chance: hour.pop\n                    }\n                };\n                if (hour.snow != 0) {\n                    forecast.precipitation.type = "snow";\n                    forecast.precipitation.volume = hour.snow;\n                }\n                forecasts.push(forecast);\n            }\n            return forecasts;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Weatherbit Forecast Parsing error: " + e);\n            self.app.ShowError({ type: "soft", service: "weatherbit", detail: "unusual payload", message: _("Failed to Process Forecast Info") });\n            return null;\n        }\n    }\n    TimeToDate(time, hourDiff) {\n        let hoursMinutes = time.split(":");\n        let date = new Date();\n        date.setHours(parseInt(hoursMinutes[0]) - hourDiff);\n        date.setMinutes(parseInt(hoursMinutes[1]));\n        return date;\n    }\n    HourDifference(correctTime, incorrectTime) {\n        return Math.round((incorrectTime.getTime() - correctTime.getTime()) / (1000 * 60 * 60));\n    }\n    ParseStringTime(last_ob_time) {\n        let split = last_ob_time.split(/[T\\-\\s:]/);\n        if (split.length != 5)\n            return null;\n        return new Date(parseInt(split[0]), parseInt(split[1]) - 1, parseInt(split[2]), parseInt(split[3]), parseInt(split[4]));\n    }\n    ConvertToAPILocale(systemLocale) {\n        if (systemLocale == "zh-tw") {\n            return systemLocale;\n        }\n        let lang = systemLocale.split("-")[0];\n        if (lang == "cs") {\n            return "cz";\n        }\n        return lang;\n    }\n    ConstructQuery(query, loc) {\n        query = query + "key=" + this.app.config.ApiKey + "&lat=" + loc.lat + "&lon=" + loc.lon + "&units=S";\n        let lang = this.ConvertToAPILocale(this.app.config.currentLocale);\n        if (IsLangSupported(lang, this.supportedLanguages) && this.app.config._translateCondition) {\n            query = query + "&lang=" + lang;\n        }\n        return query;\n    }\n    ;\n    HandleError(message) {\n        if (message.code == 403) {\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "bad key",\n                service: "weatherbit",\n                message: _("Please Make sure you\\nentered the API key correctly and your account is not locked")\n            });\n        }\n        return true;\n    }\n    HandleHourlyError(message) {\n        if (message.code == 403) {\n            this.hourlyAccess = false;\n            logger_Log.Instance.Print("Hourly forecast is inaccessible, skipping");\n            this.app.ShowError({\n                type: "silent",\n                userError: false,\n                detail: "bad key",\n                service: "weatherbit",\n                message: _("API key doesn\'t provide access to Hourly Weather, skipping")\n            });\n        }\n        return true;\n    }\n    ResolveIcon(icon) {\n        switch (icon) {\n            case "t01n":\n            case "t01d":\n            case "t02n":\n            case "t02d":\n            case "t03n":\n            case "t03d":\n            case "t04n":\n            case "t04d":\n            case "t05n":\n            case "t05d":\n                return ["weather-storm"];\n            case "d01d":\n            case "d01n":\n            case "d02d":\n            case "d02n":\n            case "d03d":\n            case "d03n":\n                return ["weather-showers-scattered", "weather-rain", "weather-freezing-rain"];\n            case "r01d":\n            case "r01n":\n            case "r02d":\n            case "r02n":\n            case "r03d":\n            case "r03n":\n            case "r04d":\n            case "r04n":\n            case "r05d":\n            case "r05n":\n            case "r06d":\n            case "r06n":\n                return ["weather-rain", "weather-freezing-rain", "weather-showers-scattered"];\n            case "s01d":\n            case "s01n":\n            case "s02d":\n            case "s02n":\n            case "s03d":\n            case "s03n":\n            case "s04d":\n            case "s04n":\n            case "s06d":\n            case "s06n":\n                return ["weather-snow"];\n            case "s05d":\n            case "s05n":\n                return ["weather-freezing-rain", "weather-rain", "weather-showers-scattered"];\n            case "a01d":\n            case "a01n":\n            case "a02d":\n            case "a02n":\n            case "a03d":\n            case "a03n":\n            case "a04d":\n            case "a04n":\n            case "a05d":\n            case "a05n":\n            case "a06d":\n            case "a06n":\n                return ["weather-fog"];\n            case "c02d":\n                return ["weather-few-clouds"];\n            case "c02n":\n                return ["weather-few-clouds-night"];\n            case "c01n":\n                return ["weather-clear-night"];\n            case "c01d":\n                return ["weather-clear"];\n            case "c03d":\n                return ["weather-clouds", "weather-few-clouds", "weather-overcast"];\n            case "c03n":\n                return ["weather-clouds-night", "weather-few-clouds-night", "weather-overcast"];\n            case "c04n":\n                return ["weather-overcast", "weather-clouds-night", "weather-few-clouds-night"];\n            case "c04d":\n                return ["weather-overcast", "weather-clouds", "weather-few-clouds"];\n            case "u00d":\n            case "u00n":\n                return ["weather-severe-alert"];\n            default:\n                return ["weather-severe-alert"];\n        }\n    }\n    ;\n    ResolveCustomIcon(icon) {\n        switch (icon) {\n            case "t01d":\n            case "t02d":\n            case "t03d":\n                return "day-thunderstorm-symbolic";\n            case "t04d":\n            case "t05d":\n                return "thunderstorm-symbolic";\n            case "t01n":\n            case "t02n":\n            case "t03n":\n                return "night-alt-thunderstorm-symbolic";\n            case "t04n":\n            case "t05n":\n                return "thunderstorm-symbolic";\n            case "d01d":\n            case "d02d":\n            case "d03d":\n            case "d01n":\n            case "d02n":\n            case "d03n":\n                return "showers-symbolic";\n            case "r01d":\n            case "r02d":\n            case "r03d":\n            case "r01n":\n            case "r02n":\n            case "r03n":\n                return "rain-symbolic";\n            case "r04d":\n            case "r05d":\n                return "day-rain-symbolic";\n            case "r06d":\n                return "rain-symbolic";\n            case "r04n":\n            case "r05n":\n                return "night-alt-rain-symbolic";\n            case "r06n":\n                return "rain-symbolic";\n            case "s01d":\n            case "s04d":\n                return "day-snow-symbolic";\n            case "s02d":\n            case "s03d":\n            case "s06d":\n                return "snow-symbolic";\n            case "s01n":\n            case "s04n":\n                return "night-alt-snow-symbolic";\n            case "s02n":\n            case "s03n":\n            case "s06n":\n                return "snow-symbolic";\n            case "s05d":\n            case "s05n":\n                return "sleet-symbolic";\n            case "a01d":\n            case "a02d":\n            case "a03d":\n            case "a04d":\n            case "a05d":\n            case "a06d":\n                return "day-fog-symbolic";\n            case "a01n":\n            case "a02n":\n            case "a03n":\n            case "a04n":\n            case "a05n":\n            case "a06n":\n                return "night-fog-symbolic";\n            case "c02d":\n                return "day-cloudy-symbolic";\n            case "c02n":\n                return "night-alt-cloudy-symbolic";\n            case "c01n":\n                return "night-clear-symbolic";\n            case "c01d":\n                return "day-sunny-symbolic";\n            case "c03d":\n                return "day-cloudy-symbolic";\n            case "c03n":\n                return "night-alt-cloudy-symbolic";\n            case "c04n":\n                return "cloudy-symbolic";\n            case "c04d":\n                return "cloudy-symbolic";\n            case "u00d":\n            case "u00n":\n                return "cloud-refresh-symbolic";\n            default:\n                return "cloud-refresh-symbolic";\n        }\n    }\n}\n;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/met_norway.ts\n\n\n\n\nclass MetNorway {\n    constructor(app) {\n        this.prettyName = _("MET Norway");\n        this.name = "MetNorway";\n        this.maxForecastSupport = 10;\n        this.website = "https://www.met.no/en";\n        this.maxHourlyForecastSupport = 48;\n        this.needsApiKey = false;\n        this.baseUrl = "https://api.met.no/weatherapi/locationforecast/2.0/complete?";\n        this.app = app;\n    }\n    async GetWeather(loc) {\n        let query = this.GetUrl(loc);\n        if (query == null)\n            return null;\n        let json = await this.app.LoadJsonAsync(query);\n        if (!json) {\n            logger_Log.Instance.Error("MET Norway: Empty response from API");\n            return null;\n        }\n        return this.ParseWeather(json);\n    }\n    RemoveEarlierElements(json) {\n        let now = new Date();\n        let startIndex = -1;\n        for (let i = 0; i < json.properties.timeseries.length; i++) {\n            const element = json.properties.timeseries[i];\n            let timestamp = new Date(element.time);\n            if (timestamp < now && now.getHours() != timestamp.getHours()) {\n                startIndex = i;\n            }\n            else {\n                break;\n            }\n        }\n        if (startIndex != -1) {\n            logger_Log.Instance.Debug("Removing outdated weather information...");\n            json.properties.timeseries.splice(0, startIndex + 1);\n        }\n        return json;\n    }\n    ParseWeather(json) {\n        json = this.RemoveEarlierElements(json);\n        let times = (0,suncalc.getTimes)(new Date(), json.geometry.coordinates[1], json.geometry.coordinates[0], json.geometry.coordinates[2]);\n        let suntimes = {\n            sunrise: DateTime.fromJSDate(times.sunrise),\n            sunset: DateTime.fromJSDate(times.sunset)\n        };\n        let current = json.properties.timeseries[0];\n        let result = {\n            temperature: CelsiusToKelvin(current.data.instant.details.air_temperature),\n            coord: {\n                lat: json.geometry.coordinates[1],\n                lon: json.geometry.coordinates[0]\n            },\n            date: DateTime.fromISO(current.time, { zone: "UTC" }),\n            condition: this.ResolveCondition(current.data.next_1_hours.summary.symbol_code, IsNight(suntimes)),\n            humidity: current.data.instant.details.relative_humidity,\n            pressure: current.data.instant.details.air_pressure_at_sea_level,\n            extra_field: {\n                name: _("Cloudiness"),\n                type: "percent",\n                value: current.data.instant.details.cloud_area_fraction\n            },\n            sunrise: suntimes.sunrise,\n            sunset: suntimes.sunset,\n            wind: {\n                degree: current.data.instant.details.wind_from_direction,\n                speed: current.data.instant.details.wind_speed\n            },\n            location: {\n                url: null,\n            },\n            forecasts: []\n        };\n        let hourlyForecasts = [];\n        for (let i = 0; i < json.properties.timeseries.length; i++) {\n            const element = json.properties.timeseries[i];\n            if (!!element.data.next_1_hours) {\n                hourlyForecasts.push({\n                    date: DateTime.fromISO(element.time, { zone: "UTC" }),\n                    temp: CelsiusToKelvin(element.data.instant.details.air_temperature),\n                    precipitation: {\n                        type: "rain",\n                        volume: element.data.next_1_hours.details.precipitation_amount\n                    },\n                    condition: this.ResolveCondition(element.data.next_1_hours.summary.symbol_code, IsNight(suntimes, DateTime.fromISO(element.time, { zone: "UTC" })))\n                });\n            }\n        }\n        result.hourlyForecasts = hourlyForecasts;\n        result.forecasts = this.BuildForecasts(json.properties.timeseries);\n        return result;\n    }\n    BuildForecasts(forecastsData) {\n        let forecasts = [];\n        let days = this.SortDataByDay(forecastsData);\n        for (let i = 0; i < days.length; i++) {\n            let forecast = {\n                condition: {\n                    customIcon: "cloudy-symbolic",\n                    description: "",\n                    icons: [],\n                    main: ""\n                },\n                date: null,\n                temp_max: Number.NEGATIVE_INFINITY,\n                temp_min: Number.POSITIVE_INFINITY\n            };\n            let conditionCounter = {};\n            for (let j = 0; j < days[i].length; j++) {\n                const element = days[i][j];\n                if (!element.data.next_6_hours)\n                    continue;\n                forecast.date = DateTime.fromJSDate(new Date(element.time));\n                if (element.data.next_6_hours.details.air_temperature_max > forecast.temp_max)\n                    forecast.temp_max = element.data.next_6_hours.details.air_temperature_max;\n                if (element.data.next_6_hours.details.air_temperature_min < forecast.temp_min)\n                    forecast.temp_min = element.data.next_6_hours.details.air_temperature_min;\n                let [symbol] = element.data.next_6_hours.summary.symbol_code.split("_");\n                let severity = conditionSeverity[symbol];\n                if (!conditionCounter[severity])\n                    conditionCounter[severity] = { count: 0, name: symbol };\n                conditionCounter[severity].count = conditionCounter[severity].count + 1;\n            }\n            forecast.temp_max = CelsiusToKelvin(forecast.temp_max);\n            forecast.temp_min = CelsiusToKelvin(forecast.temp_min);\n            forecast.condition = this.ResolveCondition(this.GetMostSevereCondition(conditionCounter));\n            forecasts.push(forecast);\n        }\n        return forecasts;\n    }\n    GetEarliestDataForToday(events) {\n        let earliest = 0;\n        for (let i = 0; i < events.length; i++) {\n            const earliestElementTime = new Date(events[earliest].time);\n            let timestamp = new Date(events[i].time);\n            if (timestamp.toDateString() != new Date().toDateString())\n                continue;\n            if (earliestElementTime < timestamp)\n                continue;\n            earliest = i;\n        }\n        return events[earliest];\n    }\n    SortDataByDay(data) {\n        let days = [];\n        let currentDay = new Date(this.GetEarliestDataForToday(data).time);\n        let dayIndex = 0;\n        days.push([]);\n        for (let i = 0; i < data.length; i++) {\n            const element = data[i];\n            const timestamp = new Date(element.time);\n            if (timestamp.toDateString() == currentDay.toDateString()) {\n                days[dayIndex].push(element);\n            }\n            else if (timestamp.toDateString() != currentDay.toDateString()) {\n                dayIndex++;\n                currentDay = timestamp;\n                days.push([]);\n                days[dayIndex].push(element);\n            }\n        }\n        return days;\n    }\n    GetMostCommonCondition(count) {\n        let result = null;\n        for (let key in count) {\n            if (result == null)\n                result = parseInt(key);\n            if (count[result].count < count[key].count)\n                result = parseInt(key);\n        }\n        return count[result].name;\n    }\n    GetMostSevereCondition(conditions) {\n        let result = null;\n        for (let key in conditions) {\n            let conditionID = parseInt(key);\n            let resultStripped = (result > 100) ? result - 100 : result;\n            let conditionIDStripped = (conditionID > 100) ? conditionID - 100 : conditionID;\n            if (conditionIDStripped > resultStripped)\n                result = conditionID;\n        }\n        if (result <= 4) {\n            return this.GetMostCommonCondition(conditions);\n        }\n        return conditions[result].name;\n    }\n    GetUrl(loc) {\n        let url = this.baseUrl + "lat=";\n        url += (loc.lat + "&lon=" + loc.lon);\n        return url;\n    }\n    DeconstructCondition(icon) {\n        let condition = icon.split("_");\n        return {\n            timeOfDay: condition[1],\n            condition: condition[0]\n        };\n    }\n    ResolveCondition(icon, isNight = false) {\n        let weather = this.DeconstructCondition(icon);\n        switch (weather.condition) {\n            case "clearsky":\n                return {\n                    customIcon: (isNight) ? "night-clear-symbolic" : "day-sunny-symbolic",\n                    main: _("Clear sky"),\n                    description: _("Clear sky"),\n                    icons: (isNight) ? ["weather-clear-night"] : ["weather-clear"]\n                };\n            case "cloudy":\n                return {\n                    customIcon: "cloudy-symbolic",\n                    main: _("Cloudy"),\n                    description: _("Cloudy"),\n                    icons: (isNight) ? ["weather-overcast", "weather-clouds-night", "weather-few-clouds-night"] : ["weather-overcast", "weather-clouds", "weather-few-clouds"]\n                };\n            case "fair":\n                return {\n                    customIcon: (isNight) ? "night-cloudy-symbolic" : "day-cloudy-symbolic",\n                    main: _("Fair"),\n                    description: _("Fair"),\n                    icons: (isNight) ? ["weather-few-clouds-night", "weather-clouds-night", "weather-overcast"] : ["weather-few-clouds", "weather-clouds", "weather-overcast"]\n                };\n            case "fog":\n                return {\n                    customIcon: "fog-symbolic",\n                    main: _("Fog"),\n                    description: _("Fog"),\n                    icons: ["weather-fog", "weather-severe-alert"]\n                };\n            case "heavyrain":\n                return {\n                    customIcon: "rain-symbolic",\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain"),\n                    icons: ["weather-rain", "weather-freezing-rain", "weather-showers"]\n                };\n            case "heavyrainandthunder":\n                return {\n                    customIcon: "thunderstorm-symbolic",\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain and thunder"),\n                    icons: ["weather-rain", "weather-freezing-rain", "weather-showers"]\n                };\n            case "heavyrainshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-rain-symbolic" : "day-rain-symbolic",\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain showers"),\n                    icons: ["weather-showers", "weather-showers-scattered"]\n                };\n            case "heavyrainshowersandthunder":\n                return {\n                    customIcon: (IsNight) ? "night-alt-thunderstorm-symbolic" : "day-thunderstorm-symbolic",\n                    main: _("Heavy rain"),\n                    description: _("Heavy rain showers and thunder"),\n                    icons: ["weather-showers", "weather-showers-scattered"]\n                };\n            case "heavysleet":\n                return {\n                    customIcon: "sleet-symbolic",\n                    main: _("Heavy sleet"),\n                    description: _("Heavy sleet"),\n                    icons: ["weather-showers", "weather-freezing-rain", "weather-rain"]\n                };\n            case "heavysleetandthunder":\n                return {\n                    customIcon: "sleet-storm-symbolic",\n                    main: _("Heavy sleet"),\n                    description: _("Heavy sleet and thunder"),\n                    icons: ["weather-showers", "weather-freezing-rain", "weather-rain"]\n                };\n            case "heavysleetshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-sleet-symbolic" : "day-sleet-symbolic",\n                    main: _("Heavy sleet"),\n                    description: _("Heavy sleet showers"),\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-freezing-rain"]\n                };\n            case "heavysleetshowersandthunder":\n                return {\n                    customIcon: (IsNight) ? "night-alt-sleet-storm-symbolic" : "day-sleet-storm-symbolic",\n                    main: _("Heavy sleet"),\n                    description: _("Heavy sleet showers and thunder"),\n                    icons: ["weather-showers", "weather-showers-scattered", "weather-freezing-rain"]\n                };\n            case "heavysnow":\n                return {\n                    customIcon: "snow-symbolic",\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow"),\n                    icons: ["weather-snow"]\n                };\n            case "heavysnowandthunder":\n                return {\n                    customIcon: "snow-symbolic",\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow and thunder"),\n                    icons: ["weather-snow"]\n                };\n            case "heavysnowshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-symbolic" : "day-snow-symbolic",\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow showers"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            case "heavysnowshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-thunderstorm-symbolic" : "day-snow-thunderstorm-symbolic",\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow showers and thunder"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            case "lightrain":\n                return {\n                    customIcon: "rain-mix-symbolic",\n                    main: _("Light rain"),\n                    description: _("Light rain"),\n                    icons: ["weather-showers-scattered", "weather-rain"]\n                };\n            case "lightrainandthunder":\n                return {\n                    customIcon: "rain-mix-storm-symbolic",\n                    main: _("Light rain"),\n                    description: _("Light rain and thunder"),\n                    icons: ["weather-showers-scattered", "weather-rain"]\n                };\n            case "lightrainshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-rain-mix-symbolic" : "day-rain-mix-symbolic",\n                    main: _("Light rain"),\n                    description: _("Light rain showers"),\n                    icons: ["weather-showers-scattered", "weather-rain"]\n                };\n            case "lightrainshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-rain-mix-storm-symbolic" : "day-rain-mix-storm-symbolic",\n                    main: _("Light rain"),\n                    description: _("Light rain showers and thunder"),\n                    icons: ["weather-showers-scattered", "weather-rain"]\n                };\n            case "lightsleet":\n                return {\n                    customIcon: "sleet-symbolic",\n                    main: _("Light sleet"),\n                    description: _("Light sleet"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "lightsleetandthunder":\n                return {\n                    customIcon: "sleet-storm-symbolic",\n                    main: _("Light sleet"),\n                    description: _("Light sleet and thunder"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "lightsleetshowers":\n                return {\n                    customIcon: (IsNight) ? "night-alt-sleet-symbolic" : "day-sleet-symbolic",\n                    main: _("Light sleet"),\n                    description: _("Light sleet showers"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "lightssleetshowersandthunder":\n                return {\n                    customIcon: (IsNight) ? "night-alt-sleet-storm-symbolic" : "day-sleet-storm-symbolic",\n                    main: _("Light sleet"),\n                    description: _("Light sleet showers and thunder"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "lightsnow":\n                return {\n                    customIcon: "snow-symbolic",\n                    main: _("Light snow"),\n                    description: _("Light snow"),\n                    icons: ["weather-snow"]\n                };\n            case "lightsnowandthunder":\n                return {\n                    customIcon: "snow-storm-symbolic",\n                    main: _("Light snow"),\n                    description: _("Light snow and thunder"),\n                    icons: ["weather-snow"]\n                };\n            case "lightsnowshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-symbolic" : "day-snow-symbolic",\n                    main: _("Light snow"),\n                    description: _("Light snow showers"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            case "lightssnowshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-thunderstorm-symbolic" : "day-snow-thunderstorm-symbolic",\n                    main: _("Light snow"),\n                    description: _("Light snow showers and thunder"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            case "partlycloudy":\n                return {\n                    customIcon: (isNight) ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    icons: (isNight) ? ["weather-clouds-night", "weather-few-clouds-night", "weather-overcast"] : ["weather-clouds", "weather-few-clouds", "weather-overcast"]\n                };\n            case "rain":\n                return {\n                    customIcon: "rain-symbolic",\n                    main: _("Rain"),\n                    description: _("Rain"),\n                    icons: ["weather-rain", "weather-freezing-rain", "weather-showers-scattered"]\n                };\n            case "rainandthunder":\n                return {\n                    customIcon: "thunderstorm-symbolic",\n                    main: _("Rain"),\n                    description: _("Rain and thunder"),\n                    icons: ["weather-storm", "weather-rain", "weather-freezing-rain", "weather-showers-scattered"]\n                };\n            case "rainshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-rain-mix-symbolic" : "day-rain-mix-symbolic",\n                    main: _("Rain showers"),\n                    description: _("Rain showers"),\n                    icons: ["weather-showers-scattered", "weather-rain", "weather-freezing-rain"]\n                };\n            case "rainshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-rain-mix-storm-symbolic" : "day-rain-mix-storm-symbolic",\n                    main: _("Rain showers"),\n                    description: _("Rain showers and thunder"),\n                    icons: ["weather-showers-scattered", "weather-rain", "weather-freezing-rain"]\n                };\n            case "sleet":\n                return {\n                    customIcon: "sleet-symbolic",\n                    main: _("Sleet"),\n                    description: _("Sleet"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "sleetandthunder":\n                return {\n                    customIcon: "sleet-storm-symbolic",\n                    main: _("Sleet"),\n                    description: _("Sleet and thunder"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "sleetshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-sleet-symbolic" : "day-sleet-symbolic",\n                    main: _("Sleet"),\n                    description: _("Sleet showers"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "sleetshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-sleet-storm-symbolic" : "day-sleet-storm-symbolic",\n                    main: _("Sleet"),\n                    description: _("Sleet showers and thunder"),\n                    icons: ["weather-freezing-rain", "weather-showers"]\n                };\n            case "snow":\n                return {\n                    customIcon: "snow-symbolic",\n                    main: _("Snow"),\n                    description: _("Snow"),\n                    icons: ["weather-snow"]\n                };\n            case "snowandthunder":\n                return {\n                    customIcon: "snow-storm-symbolic",\n                    main: _("Snow"),\n                    description: _("Snow and thunder"),\n                    icons: ["weather-snow"]\n                };\n            case "snowshowers":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-symbolic" : "day-snow-symbolic",\n                    main: _("Snow showers"),\n                    description: _("Snow showers"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            case "snowshowersandthunder":\n                return {\n                    customIcon: (isNight) ? "night-alt-snow-thunderstorm-symbolic" : "day-snow-thunderstorm-symbolic",\n                    main: _("Snow showers"),\n                    description: _("Snow showers and thunder"),\n                    icons: ["weather-snow-scattered", "weather-snow"]\n                };\n            default:\n                logger_Log.Instance.Error("condition code not found: " + weather.condition);\n                return {\n                    customIcon: "cloud-refresh-symbolic",\n                    main: _("Unknown"),\n                    description: _("Unknown"),\n                    icons: ["weather-severe-alert"]\n                };\n        }\n    }\n}\nconst conditionSeverity = {\n    clearsky: 1,\n    cloudy: 4,\n    fair: 2,\n    fog: 15,\n    heavyrain: 10,\n    heavyrainandthunder: 11,\n    heavyrainshowers: 41,\n    heavyrainshowersandthunder: 25,\n    heavysleet: 48,\n    heavysleetandthunder: 32,\n    heavysleetshowers: 43,\n    heavysleetshowersandthunder: 27,\n    heavysnow: 50,\n    heavysnowandthunder: 34,\n    heavysnowshowers: 45,\n    heavysnowshowersandthunder: 29,\n    lightrain: 46,\n    lightrainandthunder: 30,\n    lightrainshowers: 40,\n    lightrainshowersandthunder: 24,\n    lightsleet: 47,\n    lightsleetandthunder: 31,\n    lightsleetshowers: 42,\n    lightsnow: 49,\n    lightsnowandthunder: 33,\n    lightsnowshowers: 44,\n    lightssleetshowersandthunder: 26,\n    lightssnowshowersandthunder: 28,\n    partlycloudy: 3,\n    rain: 9,\n    rainandthunder: 22,\n    rainshowers: 5,\n    rainshowersandthunder: 6,\n    sleet: 12,\n    sleetandthunder: 23,\n    sleetshowers: 7,\n    sleetshowersandthunder: 20,\n    snow: 13,\n    snowandthunder: 14,\n    snowshowers: 8,\n    snowshowersandthunder: 21\n};\n\n;// CONCATENATED MODULE: ./src/3_8/lib/httpLib.ts\n\nconst { Message, ProxyResolverDefault, SessionAsync } = imports.gi.Soup;\nclass HttpLib {\n    constructor() {\n        this._httpSession = new SessionAsync();\n        this._httpSession.user_agent = "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:37.0) Gecko/20100101 Firefox/37.0";\n        this._httpSession.timeout = 10;\n        this._httpSession.idle_timeout = 10;\n        this._httpSession.add_feature(new ProxyResolverDefault());\n    }\n    static get Instance() {\n        if (this.instance == null)\n            this.instance = new HttpLib();\n        return this.instance;\n    }\n    async LoadJsonAsync(url, params, method = "GET") {\n        let response = await this.LoadAsync(url, params, method);\n        if (!response.Success)\n            return response;\n        try {\n            let payload = JSON.parse(response.Data);\n            response.Data = payload;\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Error: API response is not JSON. The response: " + response.Data);\n            response.Success = false;\n            response.ErrorData = {\n                code: -1,\n                message: "bad api response - non json",\n                reason_phrase: null,\n            };\n        }\n        finally {\n            return response;\n        }\n    }\n    async LoadAsync(url, params, method = "GET") {\n        var _a, _b, _c, _d, _e;\n        let message = await this.Send(url, params, method);\n        let error = null;\n        if (!message) {\n            error = {\n                code: 0,\n                message: "no network response",\n                reason_phrase: "no network response",\n                response: null\n            };\n        }\n        else if (message.status_code < 100 && message.status_code >= 0) {\n            error = {\n                code: message.status_code,\n                message: "no network response",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        else if (message.status_code > 300 || message.status_code < 200) {\n            error = {\n                code: message.status_code,\n                message: "bad status code",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        else if (!message.response_body) {\n            error = {\n                code: message.status_code,\n                message: "no response body",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        else if (!message.response_body.data) {\n            error = {\n                code: message.status_code,\n                message: "no response data",\n                reason_phrase: message.reason_phrase,\n                response: message\n            };\n        }\n        if ((message === null || message === void 0 ? void 0 : message.status_code) > 200 && (message === null || message === void 0 ? void 0 : message.status_code) < 300) {\n            logger_Log.Instance.Print("Wrning: API returned non-OK status code \'" + (message === null || message === void 0 ? void 0 : message.status_code) + "\'");\n        }\n        logger_Log.Instance.Debug2("API full response: " + ((_b = (_a = message === null || message === void 0 ? void 0 : message.response_body) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.toString()));\n        if (error != null)\n            logger_Log.Instance.Error("Error calling URL: " + error.reason_phrase + ", " + ((_d = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.response_body) === null || _d === void 0 ? void 0 : _d.data));\n        return {\n            Success: (error == null),\n            Data: (_e = message === null || message === void 0 ? void 0 : message.response_body) === null || _e === void 0 ? void 0 : _e.data,\n            ErrorData: error\n        };\n    }\n    async Send(url, params, method = "GET") {\n        if (params != null) {\n            let items = Object.keys(params);\n            for (let index = 0; index < items.length; index++) {\n                const item = items[index];\n                url += (index == 0) ? "?" : "&";\n                url += (item) + "=" + params[item];\n            }\n        }\n        let query = encodeURI(url);\n        logger_Log.Instance.Debug("URL called: " + query);\n        let data = await new Promise((resolve, reject) => {\n            let message = Message.new(method, query);\n            this._httpSession.queue_message(message, (session, message) => {\n                resolve(message);\n            });\n        });\n        return data;\n    }\n}\nHttpLib.instance = null;\n\n;// CONCATENATED MODULE: ./src/3_8/providers/visualcrossing.ts\n\n\nclass VisualCrossing {\n    constructor(app) {\n        this.prettyName = _("Visual Crossing");\n        this.name = "Visual Crossing";\n        this.maxForecastSupport = 15;\n        this.maxHourlyForecastSupport = 336;\n        this.website = "https://weather.visualcrossing.com/";\n        this.needsApiKey = true;\n        this.url = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/";\n        this.params = {\n            unitGroup: "metric",\n            key: null,\n            include: "fcst,hours,current",\n            lang: "id"\n        };\n        this.supportedLangs = ["en", "de", "fr", "es"];\n        this.app = app;\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        this.params[\'key\'] = this.app.config.ApiKey;\n        let translate = true;\n        if (IsLangSupported(this.app.config.Language, this.supportedLangs)) {\n            this.params[\'lang\'] = this.app.config.Language;\n            translate = false;\n        }\n        let url = this.url + loc.lat + "," + loc.lon;\n        let json = await this.app.LoadJsonAsync(url, this.params, (e) => this.HandleHttpError(e));\n        if (!json)\n            return null;\n        return this.ParseWeather(json, translate);\n    }\n    ParseWeather(weather, translate) {\n        var _a, _b, _c, _d, _e, _f;\n        let currentHour = this.GetCurrentHour(weather.days);\n        let result = {\n            date: DateTime.fromSeconds(weather.currentConditions.datetimeEpoch),\n            location: {\n                url: encodeURI("https://www.visualcrossing.com/weather-history/" + weather.latitude + "," + weather.longitude + "/"),\n                timeZone: weather.timezone,\n                tzOffset: weather.tzoffset,\n            },\n            coord: {\n                lat: weather.latitude,\n                lon: weather.longitude,\n            },\n            humidity: (_a = weather.currentConditions.humidity) !== null && _a !== void 0 ? _a : currentHour.humidity,\n            pressure: (_b = weather.currentConditions.pressure) !== null && _b !== void 0 ? _b : currentHour.pressure,\n            wind: {\n                degree: (_c = weather.currentConditions.winddir) !== null && _c !== void 0 ? _c : currentHour.winddir,\n                speed: (_d = weather.currentConditions.windspeed) !== null && _d !== void 0 ? _d : currentHour.windspeed,\n            },\n            temperature: CelsiusToKelvin((_e = weather.currentConditions.temp) !== null && _e !== void 0 ? _e : currentHour.temp),\n            sunrise: DateTime.fromSeconds(weather.currentConditions.sunriseEpoch),\n            sunset: DateTime.fromSeconds(weather.currentConditions.sunsetEpoch),\n            condition: this.GenerateCondition(weather.currentConditions.icon, weather.currentConditions.conditions, translate),\n            extra_field: {\n                name: _("Feels Like"),\n                type: "temperature",\n                value: CelsiusToKelvin((_f = currentHour.feelslike) !== null && _f !== void 0 ? _f : weather.currentConditions.feelslike)\n            },\n            forecasts: this.ParseForecasts(weather.days, translate),\n            hourlyForecasts: this.ParseHourlyForecasts(weather.days, translate)\n        };\n        return result;\n    }\n    ParseForecasts(forecasts, translate) {\n        let result = [];\n        for (let index = 0; index < forecasts.length; index++) {\n            const element = forecasts[index];\n            result.push({\n                date: DateTime.fromSeconds(element.datetimeEpoch),\n                condition: this.GenerateCondition(element.icon, element.conditions, translate),\n                temp_max: CelsiusToKelvin(element.tempmax),\n                temp_min: CelsiusToKelvin(element.tempmin)\n            });\n        }\n        return result;\n    }\n    ParseHourlyForecasts(forecasts, translate) {\n        let currentHour = new Date();\n        currentHour.setMinutes(0, 0, 0);\n        let result = [];\n        for (let index = 0; index < forecasts.length; index++) {\n            const element = forecasts[index];\n            for (let index = 0; index < element.hours.length; index++) {\n                const hour = element.hours[index];\n                let time = new Date(hour.datetimeEpoch * 1000);\n                if (time < currentHour)\n                    continue;\n                let item = {\n                    date: DateTime.fromJSDate(time),\n                    temp: CelsiusToKelvin(hour.temp),\n                    condition: this.GenerateCondition(hour.icon, hour.conditions, translate)\n                };\n                if (hour.preciptype != null) {\n                    item.precipitation = {\n                        type: hour.preciptype[0],\n                        chance: hour.precipprob,\n                        volume: hour.precip\n                    };\n                }\n                result.push(item);\n            }\n        }\n        return result;\n    }\n    GetCurrentHour(forecasts) {\n        if ((forecasts === null || forecasts === void 0 ? void 0 : forecasts.length) < 1)\n            return null;\n        let currentHour = new Date();\n        currentHour.setMinutes(0, 0, 0);\n        const element = forecasts[0];\n        for (let index = 0; index < element.hours.length; index++) {\n            const hour = element.hours[index];\n            let time = new Date(hour.datetimeEpoch * 1000);\n            if (time < currentHour)\n                continue;\n            return hour;\n        }\n        return null;\n    }\n    GenerateCondition(icon, condition, translate) {\n        let result = {\n            main: (translate) ? this.ResolveTypeID(this.GetFirstCondition(condition)) : this.GetFirstCondition(condition),\n            description: (translate) ? this.ResolveTypeIDs(condition) : condition,\n            icons: [],\n            customIcon: "refresh-symbolic"\n        };\n        switch (icon) {\n            case "clear-day":\n                result.icons = ["weather-clear"];\n                result.customIcon = "day-sunny-symbolic";\n                break;\n            case "clear-night":\n                result.icons = ["weather-clear-night"];\n                result.customIcon = "night-clear-symbolic";\n                break;\n            case "partly-cloudy-day":\n                result.icons = ["weather-few-clouds"];\n                result.customIcon = "day-cloudy-symbolic";\n                break;\n            case "partly-cloudy-night":\n                result.icons = ["weather-few-clouds-night"];\n                result.customIcon = "night-alt-cloudy-symbolic";\n                break;\n            case "cloudy":\n                result.icons = ["weather-overcast", "weather-clouds", "weather-many-clouds"];\n                result.customIcon = "cloudy-symbolic";\n                break;\n            case "wind":\n                result.icons = ["weather-windy", "weather-breeze"];\n                result.customIcon = "windy-symbolic";\n                break;\n            case "fog":\n                result.icons = ["weather-fog"];\n                result.customIcon = "fog-symbolic";\n                break;\n            case "rain":\n                result.icons = ["weather-rain", "weather-freezing-rain", "weather-snow-rain", "weather-showers"];\n                result.customIcon = "rain-symbolic";\n                break;\n            case "snow":\n                result.icons = ["weather-snow"];\n                result.customIcon = "snow-symbolic";\n                break;\n        }\n        return result;\n    }\n    GetFirstCondition(condition) {\n        let split = condition.split(", ");\n        return split[0];\n    }\n    ResolveTypeID(condition) {\n        switch (condition.toLowerCase()) {\n            case "type_1":\n                return _("Blowing or drifting snow");\n            case "type_2":\n                return _("Drizzle");\n            case "type_3":\n                return _("Heavy drizzle");\n            case "type_4":\n                return _("Light drizzle");\n            case "type_5":\n                return _("Heavy drizzle/rain");\n            case "type_6":\n                return _("Light drizzle/rain");\n            case "type_7":\n                return _("Duststorm");\n            case "type_8":\n                return _("Fog");\n            case "type_9":\n                return _("Freezing drizzle/freezing rain");\n            case "type_10":\n                return _("Heavy freezing drizzle/freezing rain");\n            case "type_11":\n                return _("Light freezing drizzle/freezing rain");\n            case "type_12":\n                return _("Freezing fog");\n            case "type_13":\n                return _("Heavy freezing rain");\n            case "type_14":\n                return _("Light freezing rain");\n            case "type_15":\n                return _("Funnel cloud/tornado");\n            case "type_16":\n                return _("Hail showers");\n            case "type_17":\n                return _("Ice");\n            case "type_18":\n                return _("Lightning without thunder");\n            case "type_19":\n                return _("Mist");\n            case "type_20":\n                return _("Precipitation in vicinity");\n            case "type_21":\n                return _("Rain");\n            case "type_22":\n                return _("Heavy rain and snow");\n            case "type_23":\n                return _("Light rain And snow");\n            case "type_24":\n                return _("Rain showers");\n            case "type_25":\n                return _("Heavy rain");\n            case "type_26":\n                return _("Light rain");\n            case "type_27":\n                return _("Sky coverage decreasing");\n            case "type_28":\n                return _("Sky coverage increasing");\n            case "type_29":\n                return _("Sky unchanged");\n            case "type_30":\n                return _("Smoke or haze");\n            case "type_31":\n                return _("Snow");\n            case "type_32":\n                return _("Snow and rain showers");\n            case "type_33":\n                return _("Snow showers");\n            case "type_34":\n                return _("Heavy snow");\n            case "type_35":\n                return _("Light snow");\n            case "type_36":\n                return _("Squalls");\n            case "type_37":\n                return _("Thunderstorm");\n            case "type_38":\n                return _("Thunderstorm without precipitation");\n            case "type_39":\n                return _("Diamond dust");\n            case "type_40":\n                return _("Hail");\n            case "type_41":\n                return _("Overcast");\n            case "type_42":\n                return _("Partially cloudy");\n            case "type_43":\n                return _("Clear");\n        }\n        return condition;\n    }\n    ResolveTypeIDs(condition) {\n        let result = "";\n        let split = condition.split(", ");\n        for (let index = 0; index < split.length; index++) {\n            const element = split[index];\n            result += this.ResolveTypeID(element);\n            if (index < split.length - 1)\n                result += ", ";\n        }\n        return result;\n    }\n    HandleHttpError(error) {\n        if ((error === null || error === void 0 ? void 0 : error.code) == 401) {\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "bad key",\n                message: _("Please make sure you entered the API key correctly")\n            });\n            return false;\n        }\n        return true;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/climacellV4.ts\n\n\nclass ClimacellV4 {\n    constructor(app) {\n        this.needsApiKey = true;\n        this.prettyName = _("Climacell");\n        this.name = "ClimacellV4";\n        this.maxForecastSupport = 15;\n        this.maxHourlyForecastSupport = 108;\n        this.website = "https://www.climacell.co/";\n        this.url = "https://data.climacell.co/v4/timelines";\n        this.params = {\n            apikey: null,\n            location: null,\n            timesteps: "current,1h,1d",\n            units: "metric",\n            fields: "temperature,temperatureMax,temperatureMin,pressureSurfaceLevel,weatherCode,sunsetTime,sunriseTime,precipitationType,precipitationProbability,precipitationIntensity,windDirection,windSpeed,humidity,temperatureApparent"\n        };\n        this.app = app;\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        this.params.apikey = this.app.config.ApiKey;\n        this.params.location = loc.lat + "," + loc.lon;\n        let response = await this.app.LoadJsonAsync(this.url, this.params, (m) => this.HandleHTTPError(m));\n        if (response == null)\n            return null;\n        return this.ParseWeather(loc, response);\n    }\n    HandleHTTPError(message) {\n        if (message.code == 401) {\n            this.app.ShowError({\n                type: "hard",\n                userError: true,\n                detail: "no key",\n                service: "climacell",\n                message: _("Please Make sure you\\nentered the API key that you have from Climacell")\n            });\n            return false;\n        }\n        return true;\n    }\n    ParseWeather(loc, data) {\n        var _a, _b, _c;\n        let current = (_b = (_a = data.data.timelines.find(x => x.timestep == "current")) === null || _a === void 0 ? void 0 : _a.intervals) === null || _b === void 0 ? void 0 : _b[0];\n        let hourly = data.data.timelines.find(x => x.timestep == "1h").intervals;\n        let daily = data.data.timelines.find(x => x.timestep == "1d").intervals;\n        let tz = (_c = loc.timeZone) !== null && _c !== void 0 ? _c : "UTC";\n        let result = {\n            coord: {\n                lat: loc.lat,\n                lon: loc.lon\n            },\n            date: DateTime.fromISO(current.startTime, { zone: tz }),\n            condition: this.ResolveCondition(current.values.weatherCode),\n            humidity: current.values.humidity,\n            pressure: current.values.pressureSurfaceLevel,\n            temperature: CelsiusToKelvin(current.values.temperature),\n            wind: {\n                degree: current.values.windDirection,\n                speed: current.values.windSpeed\n            },\n            sunrise: DateTime.fromISO(daily === null || daily === void 0 ? void 0 : daily[0].values.sunriseTime, { zone: tz }),\n            sunset: DateTime.fromISO(daily === null || daily === void 0 ? void 0 : daily[0].values.sunsetTime, { zone: tz }),\n            location: {\n                url: "https://www.climacell.co/weather"\n            },\n            extra_field: {\n                name: _("Feels Like"),\n                type: "temperature",\n                value: CelsiusToKelvin(current.values.temperatureApparent)\n            },\n            forecasts: []\n        };\n        let hours = [];\n        let days = [];\n        for (let index = 0; index < daily.length; index++) {\n            const element = daily[index];\n            days.push({\n                condition: this.ResolveCondition(element.values.weatherCode),\n                date: DateTime.fromISO(element.startTime, { zone: tz }),\n                temp_max: CelsiusToKelvin(element.values.temperatureMax),\n                temp_min: CelsiusToKelvin(element.values.temperatureMin)\n            });\n        }\n        for (let index = 0; index < hourly.length; index++) {\n            const element = hourly[index];\n            let hour = {\n                condition: this.ResolveCondition(element.values.weatherCode),\n                date: DateTime.fromISO(element.startTime, { zone: tz }),\n                temp: CelsiusToKelvin(element.values.temperature)\n            };\n            hour.date = hour.date.set({ minute: 0, second: 0, millisecond: 0 });\n            if (element.values.precipitationProbability > 0 && element.values.precipitationIntensity > 0) {\n                hour.precipitation = {\n                    chance: element.values.precipitationProbability,\n                    volume: element.values.precipitationIntensity,\n                    type: this.PrecipTypeToAppletType(element.values.precipitationType)\n                };\n            }\n            hours.push(hour);\n        }\n        result.forecasts = days;\n        result.hourlyForecasts = hours;\n        return result;\n    }\n    ResolveCondition(weatherCode, isNight = false) {\n        let result = {\n            customIcon: "refresh-symbolic",\n            icons: ["weather-severe-alert"],\n            main: _("Unknown"),\n            description: _("Unknown")\n        };\n        switch (weatherCode) {\n            case 0:\n                return result;\n            case 1000:\n                return {\n                    main: isNight ? _("Clear") : _("Sunny"),\n                    description: isNight ? _("Clear") : _("Sunny"),\n                    customIcon: isNight ? "night-clear-symbolic" : "day-sunny-symbolic",\n                    icons: isNight ? ["weather-clear-night"] : ["weather-clear"]\n                };\n            case 1001:\n                return {\n                    main: _("Cloudy"),\n                    description: _("Cloudy"),\n                    customIcon: "cloudy-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", isNight ? "weather-clouds-night" : "weather-clouds"]\n                };\n            case 1100:\n                return {\n                    main: _("Mostly clear"),\n                    description: _("Mostly clear"),\n                    customIcon: isNight ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: isNight ? ["weather-few-clouds-night", "weather-clouds-night"] : ["weather-few-clouds", "weather-clouds"]\n                };\n            case 1101:\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    customIcon: isNight ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: isNight ? ["weather-clouds-night", "weather-few-clouds-night"] : ["weather-clouds", "weather-few-clouds"]\n                };\n            case 1102:\n                return {\n                    main: _("Mostly cloudy"),\n                    description: _("Mostly cloudy"),\n                    customIcon: "cloud-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", isNight ? "weather-clouds-night" : "weather-clouds"]\n                };\n            case 2000:\n                return {\n                    main: _("Fog"),\n                    description: _("Fog"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog"]\n                };\n            case 2100:\n                return {\n                    main: _("Fog"),\n                    description: _("Light fog"),\n                    customIcon: isNight ? "night-fog-symbolic" : "day-fog-symbolic",\n                    icons: ["weather-fog"]\n                };\n            case 3000:\n                return {\n                    main: _("Wind"),\n                    description: _("Light wind"),\n                    customIcon: isNight ? "night-alt-wind-symbolic" : "day-windy-symbolic",\n                    icons: ["weather-windy"]\n                };\n            case 3001:\n                return {\n                    main: _("Wind"),\n                    description: _("Wind"),\n                    customIcon: "windy-symbolic",\n                    icons: ["weather-windy"]\n                };\n            case 3002:\n                return {\n                    main: _("Wind"),\n                    description: _("Strong wind"),\n                    customIcon: "windy-symbolic",\n                    icons: ["weather-windy"]\n                };\n            case 4000:\n                return {\n                    main: _("Drizzle"),\n                    description: _("Drizzle"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-showers-scattered", "weather-showers", "weather-rain", "weather-freezing-rain"]\n                };\n            case 4001:\n                return {\n                    main: _("Rain"),\n                    description: _("Rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-rain", "weather-showers", "weather-freezing-rain", "weather-showers-scattered"]\n                };\n            case 4200:\n                return {\n                    main: _("Rain"),\n                    description: _("Light rain"),\n                    customIcon: isNight ? "night-alt-rain-symbolic" : "day-rain-symbolic",\n                    icons: ["weather-showers-scattered", "weather-rain", "weather-freezing-rain", "weather-showers-scattered"]\n                };\n            case 4201:\n                return {\n                    main: _("Rain"),\n                    description: _("Heavy rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-rain", "weather-showers", "weather-freezing-rain", "weather-showers-scattered"]\n                };\n            case 5000:\n                return {\n                    main: _("Snow"),\n                    description: _("Snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered", isNight ? "weather-snow-night" : "weather-snow-day"]\n                };\n            case 5001:\n                return {\n                    main: _("Flurries"),\n                    description: _("Flurries"),\n                    customIcon: "snow-wind-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered", isNight ? "weather-snow-night" : "weather-snow-day"]\n                };\n            case 5100:\n                return {\n                    main: _("Snow"),\n                    description: _("Light snow"),\n                    customIcon: isNight ? "night-alt-snow-symbolic" : "day-snow-symbolic",\n                    icons: isNight ? ["weather-snow-scattered-night", "weather-snow-night", "weather-snow"] : ["weather-snow-scattered-day", "weather-snow-day", "weather-snow"]\n                };\n            case 5101:\n                return {\n                    main: _("Snow"),\n                    description: _("Heavy snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered"]\n                };\n            case 6000:\n                return {\n                    main: _("Drizzle"),\n                    description: _("Freezing drizzle"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-freezing-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 6001:\n                return {\n                    main: _("Rain"),\n                    description: _("Freezing rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 6200:\n                return {\n                    main: _("Rain"),\n                    description: _("Light freezing rain"),\n                    customIcon: isNight ? "night-alt-rain-symbolic" : "day-rain-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 6201:\n                return {\n                    main: _("Rain"),\n                    description: _("Heavy freezing rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 7000:\n                return {\n                    main: _("Ice pellets"),\n                    description: _("Ice pellets"),\n                    customIcon: "sleet-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 7101:\n                return {\n                    main: _("Ice pellets"),\n                    description: _("Heavy ice pellets"),\n                    customIcon: "sleet-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 7102:\n                return {\n                    main: _("Ice pellets"),\n                    description: _("Light ice pellets"),\n                    customIcon: isNight ? "night-alt-sleet-symbolic" : "day-sleet-symbolic",\n                    icons: ["weather-freezing-rain", "weather-rain", "weather-showers", "weather-showers-scattered"]\n                };\n            case 8000:\n                return {\n                    main: _("Thunderstorm"),\n                    description: _("Thunderstorm"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm"]\n                };\n            default:\n                return result;\n        }\n    }\n    PrecipTypeToAppletType(type) {\n        switch (type) {\n            case 0:\n                return "none";\n            case 1:\n                return "rain";\n            case 2:\n                return "snow";\n            case 3:\n                return "freezing rain";\n            case 4:\n                return "ice pellets";\n            default:\n                return "none";\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/providers/danishMI.ts\n\n\nclass DanishMI {\n    constructor(app) {\n        this.needsApiKey = false;\n        this.prettyName = _("DMI Denmark");\n        this.name = "DanishMI";\n        this.maxForecastSupport = 10;\n        this.maxHourlyForecastSupport = 48;\n        this.website = "https://www.dmi.dk/";\n        this.url = "https://www.dmi.dk/NinJo2DmiDk/ninjo2dmidk";\n        this.forecastParams = {\n            cmd: "llj",\n            lon: null,\n            lat: null,\n            tz: "UTC"\n        };\n        this.observationParams = {\n            cmd: "obj",\n            east: null,\n            west: null,\n            south: null,\n            north: null\n        };\n        this.app = app;\n    }\n    async GetWeather(loc) {\n        if (loc == null)\n            return null;\n        this.GetLocationBoundingBox(loc);\n        let observations = this.OrderObservations(await this.app.LoadJsonAsync(this.url, this.observationParams), loc);\n        this.forecastParams.lat = loc.lat;\n        this.forecastParams.lon = loc.lon;\n        let forecasts = await this.app.LoadJsonAsync(this.url, this.forecastParams);\n        return this.ParseWeather(observations, forecasts, loc);\n    }\n    ParseWeather(observations, forecasts, loc) {\n        var _a, _b, _c, _d, _e, _f;\n        let observation = this.MergeObservations(observations);\n        let tz = (_a = loc.timeZone) !== null && _a !== void 0 ? _a : "UTC";\n        let result = {\n            temperature: CelsiusToKelvin(observation.Temperature2m),\n            condition: this.ResolveCondition(observation.symbol),\n            humidity: observation.RelativeHumidity,\n            pressure: (!observation.PressureMSL) ? null : observation.PressureMSL / 100,\n            wind: {\n                degree: observation.WindDirection,\n                speed: observation.WindSpeed10m\n            }\n        };\n        result.location = {\n            city: forecasts.city,\n            country: forecasts.country,\n            timeZone: null,\n            url: `https://www.dmi.dk/lokation/show/${forecasts.country}/${forecasts.id}`\n        };\n        result.coord = {\n            lon: forecasts.longitude,\n            lat: forecasts.latitude\n        };\n        result.date = DateTime.fromJSDate(this.DateStringToDate(forecasts.lastupdate), { zone: tz });\n        result.humidity = (_b = result.humidity) !== null && _b !== void 0 ? _b : forecasts.timeserie[0].humidity;\n        result.pressure = (_c = result.pressure) !== null && _c !== void 0 ? _c : forecasts.timeserie[0].pressure;\n        result.temperature = (_d = result.temperature) !== null && _d !== void 0 ? _d : CelsiusToKelvin(forecasts.timeserie[0].temp);\n        result.wind.degree = (_e = result.wind.degree) !== null && _e !== void 0 ? _e : forecasts.timeserie[0].windDegree;\n        result.wind.speed = (_f = result.wind.speed) !== null && _f !== void 0 ? _f : forecasts.timeserie[0].windSpeed;\n        result.sunrise = DateTime.fromJSDate(this.DateStringToDate(forecasts.sunrise), { zone: tz });\n        result.sunset = DateTime.fromJSDate(this.DateStringToDate(forecasts.sunset), { zone: tz });\n        if (result.condition.customIcon == "alien-symbolic") {\n            result.condition = this.ResolveCondition(forecasts.timeserie[0].symbol);\n        }\n        let forecastData = [];\n        for (let index = 0; index < forecasts.aggData.length - 1; index++) {\n            const element = forecasts.aggData[index];\n            forecastData.push({\n                date: DateTime.fromJSDate(this.DateStringToDate(element.time), { zone: tz }),\n                temp_max: CelsiusToKelvin(element.maxTemp),\n                temp_min: CelsiusToKelvin(element.minTemp),\n                condition: this.ResolveDailyCondition(forecasts.timeserie, this.DateStringToDate(element.time))\n            });\n        }\n        result.forecasts = forecastData;\n        let hourlyData = [];\n        for (let index = 0; index < forecasts.timeserie.length; index++) {\n            const element = forecasts.timeserie[index];\n            if (element.time == null)\n                continue;\n            let hour = {\n                date: DateTime.fromJSDate(this.DateStringToDate(element.time), { zone: tz }),\n                temp: CelsiusToKelvin(element.temp),\n                condition: this.ResolveCondition(element.symbol)\n            };\n            if (element.precip1 > 0.01 && element.precipType != null) {\n                hour.precipitation = {\n                    type: this.DanishPrecipToType(element.precipType),\n                    volume: element.precip1\n                };\n            }\n            hourlyData.push(hour);\n        }\n        result.hourlyForecasts = hourlyData;\n        return result;\n    }\n    MergeObservations(observations) {\n        var _a, _b, _c, _d, _e, _f;\n        let result = {\n            symbol: null,\n            PressureMSL: null,\n            Temperature2m: null,\n            WindDirection: null,\n            RelativeHumidity: null,\n            WindSpeed10m: null,\n        };\n        for (let index = 0; index < observations.length; index++) {\n            const element = observations[index];\n            result.symbol = (_a = result.symbol) !== null && _a !== void 0 ? _a : element.values.symbol;\n            result.PressureMSL = (_b = result.PressureMSL) !== null && _b !== void 0 ? _b : element.values.PressureMSL;\n            result.Temperature2m = (_c = result.Temperature2m) !== null && _c !== void 0 ? _c : element.values.Temperature2m;\n            result.WindDirection = (_d = result.WindDirection) !== null && _d !== void 0 ? _d : element.values.WindDirection;\n            result.RelativeHumidity = (_e = result.RelativeHumidity) !== null && _e !== void 0 ? _e : element.values.RelativeHumidity;\n            result.WindSpeed10m = (_f = result.WindSpeed10m) !== null && _f !== void 0 ? _f : element.values.WindSpeed10m;\n        }\n        return result;\n    }\n    ResolveDailyCondition(hourlyData, date) {\n        let target = new Date(date);\n        target.setHours(target.getHours() + 6);\n        let upto = new Date(target);\n        upto.setDate(upto.getDate() + 1);\n        let relevantHours = hourlyData.filter(x => {\n            let hour = this.DateStringToDate(x.time);\n            if (hour >= target && hour < upto)\n                return hour;\n        });\n        let normalizedSymbols = relevantHours.map(x => (x.symbol > 100) ? (x.symbol - 100) : x.symbol);\n        let resultSymbol = null;\n        if (!!normalizedSymbols.find(x => x > 10 && x != 45))\n            resultSymbol = Math.max(...normalizedSymbols);\n        else\n            resultSymbol = mode(normalizedSymbols);\n        return this.ResolveCondition(resultSymbol);\n    }\n    ResolveCondition(symbol) {\n        let isNight = (symbol > 100);\n        if (isNight)\n            symbol = symbol - 100;\n        switch (symbol) {\n            case 1:\n                return {\n                    main: _("Clear"),\n                    description: _("Clear"),\n                    customIcon: isNight ? "night-clear-symbolic" : "day-sunny-symbolic",\n                    icons: isNight ? ["weather-clear-night"] : ["weather-clear"]\n                };\n            case 2:\n                return {\n                    main: _("Partly cloudy"),\n                    description: _("Partly cloudy"),\n                    customIcon: isNight ? "night-alt-cloudy-symbolic" : "day-cloudy-symbolic",\n                    icons: isNight ? ["weather-few-clouds-night", "weather-clouds-night"] : ["weather-few-clouds", "weather-clouds"]\n                };\n            case 3:\n                return {\n                    main: _("Cloudy"),\n                    description: _("Cloudy"),\n                    customIcon: "cloudy-symbolic",\n                    icons: ["weather-overcast", "weather-many-clouds", "weather-clouds", "weather-few-clouds"]\n                };\n            case 38:\n                return {\n                    main: _("Snow"),\n                    description: _("Blowing snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow"]\n                };\n            case 45:\n                return {\n                    main: _("Foggy"),\n                    description: _("Foggy"),\n                    customIcon: "fog-symbolic",\n                    icons: ["weather-fog"]\n                };\n            case 60:\n                return {\n                    main: _("Rain"),\n                    description: _("Rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-rain", "weather-freezing-rain", "weather-showers"]\n                };\n            case 63:\n                return {\n                    main: _("Moderate rain"),\n                    description: _("Moderate rain"),\n                    customIcon: "rain-symbolic",\n                    icons: ["weather-rain", "weather-showers", "weather-freezing-rain"]\n                };\n            case 68:\n                return {\n                    main: _("Rain and snow"),\n                    description: _("Rain and snow"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-snow-rain", "weather-freezing-rain", "weather-rain"]\n                };\n            case 69:\n                return {\n                    main: _("Rain and snow"),\n                    description: _("Heavy rain and snow"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-snow-rain", "weather-freezing-rain", "weather-rain"]\n                };\n            case 70:\n                return {\n                    main: _("Slight snow"),\n                    description: _("Slight snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered"]\n                };\n            case 73:\n                return {\n                    main: _("Moderate snow"),\n                    description: _("Moderate snow"),\n                    customIcon: "snow-symbolic",\n                    icons: ["weather-snow", "weather-snow-scattered"]\n                };\n            case 80:\n                return {\n                    main: _("Rain"),\n                    description: _("Rain showers"),\n                    customIcon: "showers-symbolic",\n                    icons: ["weather-showers", "weather-freezing-rain", "weather-rain"]\n                };\n            case 81:\n                return {\n                    main: _("Rain showers"),\n                    description: _("Moderate rain showers"),\n                    customIcon: isNight ? "night-alt-showers-symbolic" : "day-showers-symbolic",\n                    icons: isNight ? ["weather-showers-night", "weather-showers-scattered-night", "weather-showers-scattered", "weather-showers"] : ["weather-showers-day", "weather-showers-scattered-day", "weather-showers"]\n                };\n            case 83:\n                return {\n                    main: _("Rain and snow"),\n                    description: _("Mixed rain and snow"),\n                    customIcon: isNight ? "night-alt-rain-mix-symbolic" : "day-rain-mix-symbolic",\n                    icons: ["weather-snow-rain", "weather-freezing-rain", "weather-snow-day", "weather-snow"]\n                };\n            case 84:\n                return {\n                    main: _("Rain and snow"),\n                    description: _("Heavy mixed rain and snow"),\n                    customIcon: "rain-mix-symbolic",\n                    icons: ["weather-snow-rain", "weather-freezing-rain", "weather-snow-day", "weather-snow"]\n                };\n            case 85:\n                return {\n                    main: _("Snow"),\n                    description: _("Snow showers"),\n                    customIcon: isNight ? "night-alt-snow-symbolic" : "day-snow-symbolic",\n                    icons: isNight ? ["weather-snow-night", "weather-snow"] : ["weather-snow-day", "weather-snow"]\n                };\n            case 86:\n                return {\n                    main: _("Heavy snow"),\n                    description: _("Heavy snow showers"),\n                    customIcon: "day-snow-symbolic",\n                    icons: ["weather-snow-day", "weather-snow"]\n                };\n            case 95:\n                return {\n                    main: _("Thunderstorm"),\n                    description: _("Thunderstorm"),\n                    customIcon: "thunderstorm-symbolic",\n                    icons: ["weather-storm"]\n                };\n            default: {\n                return {\n                    main: _("NOT FOUND"),\n                    description: _("NOT FOUND"),\n                    customIcon: "alien-symbolic",\n                    icons: ["weather-severe-alert"]\n                };\n            }\n        }\n    }\n    DanishPrecipToType(type) {\n        switch (type) {\n            case "sne":\n                return "snow";\n            case "regn":\n                return "rain";\n            case "slud":\n                return "ice pellets";\n            default:\n                return "none";\n        }\n    }\n    GetLocationBoundingBox(loc) {\n        this.observationParams.west = loc.lon + 0.075;\n        this.observationParams.east = loc.lon - 0.075;\n        this.observationParams.north = loc.lat + 0.045;\n        this.observationParams.south = loc.lat - 0.04;\n    }\n    OrderObservations(observations, loc) {\n        let result = [];\n        for (const key in observations) {\n            const element = observations[key];\n            element.dist = GetDistance(loc.lat, loc.lon, element.latitude, element.longitude);\n            result.push(element);\n        }\n        return this.SortObservationSites(result);\n    }\n    SortObservationSites(observations) {\n        if (observations == null)\n            return null;\n        observations = observations.sort((a, b) => {\n            if (a.dist < b.dist)\n                return -1;\n            if (a.dist == b.dist)\n                return 0;\n            return 1;\n        });\n        return observations;\n    }\n    DateStringToDate(str) {\n        if (!str)\n            return null;\n        if (str.length == 14) {\n            return new Date(Date.UTC(parseInt(str.substring(0, 4)), parseInt(str.substring(4, 6)) - 1, parseInt(str.substring(6, 8)), parseInt(str.substring(8, 10)), parseInt(str.substring(10, 12)), parseInt(str.substring(12, 14))));\n        }\n        else if (str.length == 8) {\n            return new Date(Date.UTC(parseInt(str.substring(0, 4)), parseInt(str.substring(4, 6)) - 1, parseInt(str.substring(6, 8)), 0, 0, 0, 0));\n        }\n        else if (str.length == 4 || str.length == 3) {\n            if (str.length == 3) {\n                str = ("0000" + str).substr(-4, 4);\n            }\n            let today = new Date();\n            today.setUTCHours(parseInt(str.substring(0, 2)), parseInt(str.substring(2, 4)), 0, 0);\n            return today;\n        }\n        return null;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/main.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst { TextIconApplet, AllowedLayout, MenuItem } = imports.ui.applet;\nconst { spawnCommandLine } = imports.misc.util;\nconst { IconType: main_IconType, Side: main_Side } = imports.gi.St;\nclass WeatherApplet extends TextIconApplet {\n    constructor(metadata, orientation, panelHeight, instanceId) {\n        super(orientation, panelHeight, instanceId);\n        this.lock = false;\n        this.refreshTriggeredWhileLocked = false;\n        this.encounteredError = false;\n        this.errMsg = {\n            unknown: _("Error"),\n            "bad api response - non json": _("Service Error"),\n            "bad key": _("Incorrect API Key"),\n            "bad api response": _("Service Error"),\n            "bad location format": _("Incorrect Location Format"),\n            "bad status code": _("Service Error"),\n            "key blocked": _("Key Blocked"),\n            "location not found": _("Can\'t find location"),\n            "no api response": _("Service Error"),\n            "no key": _("No Api Key"),\n            "no location": _("No Location"),\n            "no network response": _("Service Error"),\n            "no response body": _("Service Error"),\n            "no response data": _("Service Error"),\n            "unusual payload": _("Service Error"),\n            "import error": _("Missing Packages"),\n            "location not covered": _("Location not covered"),\n        };\n        this.AppletDir = metadata.path;\n        logger_Log.Instance.Debug("Applet created with instanceID " + instanceId);\n        logger_Log.Instance.Debug("AppletDir is: " + this.AppletDir);\n        this.SetAppletOnPanel();\n        this.config = new Config(this, instanceId);\n        this.AddRefreshButton();\n        this.EnsureProvider();\n        this.ui = new UI(this, orientation);\n        this.ui.Rebuild(this.config);\n        this.loop = new WeatherLoop(this, instanceId);\n        this.orientation = orientation;\n        try {\n            this.setAllowedLayout(AllowedLayout.BOTH);\n        }\n        catch (e) {\n        }\n        this.loop.Start();\n    }\n    get Orientation() {\n        return this.orientation;\n    }\n    Locked() {\n        return this.lock;\n    }\n    RefreshAndRebuild(loc) {\n        this.loop.Resume();\n        if (this.Locked()) {\n            this.refreshTriggeredWhileLocked = true;\n            return;\n        }\n        this.RefreshWeather(true, loc);\n    }\n    ;\n    async RefreshWeather(rebuild, location) {\n        try {\n            if (this.lock) {\n                logger_Log.Instance.Print("Refreshing in progress, refresh skipped.");\n                return "locked";\n            }\n            this.lock = true;\n            this.encounteredError = false;\n            if (!location) {\n                location = await this.config.EnsureLocation();\n                if (!location) {\n                    this.Unlock();\n                    return "error";\n                }\n            }\n            this.EnsureProvider();\n            if (this.provider.needsApiKey && this.config.NoApiKey()) {\n                logger_Log.Instance.Error("No API Key given");\n                this.ShowError({\n                    type: "hard",\n                    userError: true,\n                    detail: "no key",\n                    message: _("This provider requires an API key to operate")\n                });\n                return null;\n            }\n            let weatherInfo = await this.provider.GetWeather(location);\n            if (weatherInfo == null) {\n                this.Unlock();\n                logger_Log.Instance.Error("Could not refresh weather, data could not be obtained.");\n                this.ShowError({\n                    type: "hard",\n                    detail: "no api response",\n                    message: "API did not return data"\n                });\n                return "fail";\n            }\n            weatherInfo = this.MergeWeatherData(weatherInfo, location);\n            this.config.Timezone = weatherInfo.location.timeZone;\n            if (rebuild)\n                this.ui.Rebuild(this.config);\n            if (!this.ui.Display(weatherInfo, this.config, this.provider) ||\n                !this.DisplayWeather(weatherInfo)) {\n                this.Unlock();\n                return "fail";\n            }\n            logger_Log.Instance.Print("Weather Information refreshed");\n            this.loop.ResetErrorCount();\n            this.Unlock();\n            return "success";\n        }\n        catch (e) {\n            logger_Log.Instance.Error("Generic Error while refreshing Weather info: " + e + ", ", e);\n            this.ShowError({ type: "hard", detail: "unknown", message: _("Unexpected Error While Refreshing Weather, please see log in Looking Glass") });\n            this.Unlock();\n            return "fail";\n        }\n    }\n    DisplayWeather(weather) {\n        let location = GenerateLocationText(weather, this.config);\n        let lastUpdatedTime = AwareDateString(weather.date.toJSDate(), this.config.currentLocale, this.config._show24Hours);\n        this.SetAppletTooltip(`${location} - ${_("As of {lastUpdatedTime}", { "lastUpdatedTime": lastUpdatedTime })}`);\n        this.DisplayWeatherOnLabel(weather.temperature, weather.condition.description);\n        this.SetAppletIcon(weather.condition.icons, weather.condition.customIcon);\n        return true;\n    }\n    DisplayWeatherOnLabel(temperature, mainCondition) {\n        mainCondition = CapitalizeFirstLetter(mainCondition);\n        let label = "";\n        if (this.Orientation != main_Side.LEFT && this.Orientation != main_Side.RIGHT) {\n            if (this.config._showCommentInPanel) {\n                label += mainCondition;\n            }\n            if (this.config._showTextInPanel) {\n                if (label != "") {\n                    label += " ";\n                }\n                label += TempToUserConfig(temperature, this.config);\n            }\n        }\n        else {\n            if (this.config._showTextInPanel) {\n                label = TempToUserConfig(temperature, this.config, false);\n                if (this.GetPanelHeight() >= 35) {\n                    label += UnitToUnicode(this.config.TemperatureUnit);\n                }\n            }\n        }\n        if (NotEmpty(this.config._tempTextOverride)) {\n            label = this.config._tempTextOverride\n                .replace("{t}", TempToUserConfig(temperature, this.config, false))\n                .replace("{u}", UnitToUnicode(this.config.TemperatureUnit))\n                .replace("{c}", mainCondition);\n        }\n        this.SetAppletLabel(label);\n    }\n    SetAppletTooltip(msg) {\n        this.set_applet_tooltip(msg);\n    }\n    SetAppletIcon(iconNames, customIcon) {\n        if (this.config._useCustomAppletIcons) {\n            this.SetCustomIcon(customIcon);\n        }\n        else {\n            let icon = WeatherIconSafely(iconNames, this.config.AppletIconType);\n            this.config.AppletIconType == main_IconType.SYMBOLIC ?\n                this.set_applet_icon_symbolic_name(icon) :\n                this.set_applet_icon_name(icon);\n        }\n    }\n    SetAppletLabel(label) {\n        this.set_applet_label(label);\n    }\n    GetPanelHeight() {\n        return this.panel.height;\n    }\n    GetMaxForecastDays() {\n        if (!this.provider)\n            return this.config._forecastDays;\n        return Math.min(this.config._forecastDays, this.provider.maxForecastSupport);\n    }\n    GetMaxHourlyForecasts() {\n        if (!this.provider)\n            return this.config._forecastHours;\n        return Math.min(this.config._forecastHours, this.provider.maxHourlyForecastSupport);\n    }\n    async LoadJsonAsync(url, params, HandleError, method = "GET") {\n        let response = await HttpLib.Instance.LoadJsonAsync(url, params, method);\n        if (!response.Success) {\n            if (!!HandleError && !HandleError(response.ErrorData))\n                return null;\n            else {\n                this.HandleHTTPError(response.ErrorData);\n                return null;\n            }\n        }\n        return response.Data;\n    }\n    async LoadAsync(url, params, HandleError, method = "GET") {\n        let response = await HttpLib.Instance.LoadAsync(url, params, method);\n        if (!response.Success) {\n            if (!!HandleError && !HandleError(response.ErrorData))\n                return null;\n            else {\n                this.HandleHTTPError(response.ErrorData);\n                return null;\n            }\n        }\n        return response.Data;\n    }\n    async locationLookup() {\n        let command = "xdg-open ";\n        spawnCommandLine(command + "https://cinnamon-spices.linuxmint.com/applets/view/17");\n    }\n    async submitIssue() {\n        let command = "xdg-open ";\n        spawnCommandLine(command + "https://github.com/linuxmint/cinnamon-spices-applets/issues/new");\n    }\n    async saveCurrentLocation() {\n        this.config.LocStore.SaveCurrentLocation(this.config.CurrentLocation);\n    }\n    on_orientation_changed(orientation) {\n        this.orientation = orientation;\n        this.RefreshWeather(true);\n    }\n    ;\n    on_applet_removed_from_panel(deleteConfig) {\n        logger_Log.Instance.Print("Removing applet instance...");\n        this.loop.Stop();\n    }\n    on_applet_clicked(event) {\n        this.ui.Toggle();\n    }\n    on_applet_middle_clicked(event) {\n    }\n    on_panel_height_changed() {\n    }\n    SetAppletOnPanel() {\n        this.set_applet_icon_name(APPLET_ICON);\n        this.set_applet_label(_("..."));\n        this.set_applet_tooltip(_("Click to open"));\n    }\n    Unlock() {\n        this.lock = false;\n        if (this.refreshTriggeredWhileLocked) {\n            logger_Log.Instance.Print("Refreshing triggered by config change while refreshing, starting now...");\n            this.refreshTriggeredWhileLocked = false;\n            this.RefreshAndRebuild();\n        }\n    }\n    AddRefreshButton() {\n        let itemLabel = _("Refresh");\n        let refreshMenuItem = new MenuItem(itemLabel, REFRESH_ICON, () => this.RefreshAndRebuild());\n        this._applet_context_menu.addMenuItem(refreshMenuItem);\n    }\n    HandleHTTPError(error) {\n        let appletError = {\n            detail: error.message,\n            userError: false,\n            code: error.code,\n            message: this.errMsg[error.message],\n            type: "soft"\n        };\n        switch (error.message) {\n            case "bad status code":\n            case "unknown":\n                appletError.type = "hard";\n        }\n        this.ShowError(appletError);\n    }\n    SetCustomIcon(iconName) {\n        this.set_applet_icon_symbolic_name(iconName);\n    }\n    EnsureProvider(force = false) {\n        var _a;\n        let currentName = (_a = this.provider) === null || _a === void 0 ? void 0 : _a.name;\n        switch (this.config._dataService) {\n            case "DarkSky":\n                if (currentName != "DarkSky" || force)\n                    this.provider = new DarkSky(this);\n                break;\n            case "OpenWeatherMap":\n                if (currentName != "OpenWeatherMap" || force)\n                    this.provider = new OpenWeatherMap(this);\n                break;\n            case "MetNorway":\n                if (currentName != "MetNorway" || force)\n                    this.provider = new MetNorway(this);\n                break;\n            case "Weatherbit":\n                if (currentName != "Weatherbit" || force)\n                    this.provider = new Weatherbit(this);\n                break;\n            case "ClimacellV4":\n                if (currentName != "ClimacellV4" || force)\n                    this.provider = new ClimacellV4(this);\n                break;\n            case "Met Office UK":\n                if (currentName != "Met Office UK" || force)\n                    this.provider = new MetUk(this);\n                break;\n            case "US Weather":\n                if (currentName != "US Weather" || force)\n                    this.provider = new USWeather(this);\n                break;\n            case "Visual Crossing":\n                if (currentName != "Visual Crossing" || force)\n                    this.provider = new VisualCrossing(this);\n                break;\n            case "DanishMI":\n                if (currentName != "DanishMI" || force)\n                    this.provider = new DanishMI(this);\n                break;\n            default:\n                return null;\n        }\n    }\n    MergeWeatherData(weatherInfo, locationData) {\n        if (weatherInfo.location.city == null)\n            weatherInfo.location.city = locationData.city;\n        if (weatherInfo.location.country == null)\n            weatherInfo.location.country = locationData.country;\n        if (weatherInfo.location.timeZone == null)\n            weatherInfo.location.timeZone = locationData.timeZone;\n        if (weatherInfo.coord.lat == null)\n            weatherInfo.coord.lat = locationData.lat;\n        if (weatherInfo.coord.lon == null)\n            weatherInfo.coord.lon = locationData.lon;\n        if (weatherInfo.hourlyForecasts == null)\n            weatherInfo.hourlyForecasts = [];\n        weatherInfo.condition.main = ProcessCondition(weatherInfo.condition.main, this.config._translateCondition);\n        weatherInfo.condition.description = ProcessCondition(weatherInfo.condition.description, this.config._translateCondition);\n        for (let index = 0; index < weatherInfo.forecasts.length; index++) {\n            const condition = weatherInfo.forecasts[index].condition;\n            condition.main = ProcessCondition(condition.main, this.config._translateCondition);\n            condition.description = ProcessCondition(condition.description, this.config._translateCondition);\n        }\n        for (let index = 0; index < weatherInfo.hourlyForecasts.length; index++) {\n            const condition = weatherInfo.hourlyForecasts[index].condition;\n            condition.main = ProcessCondition(condition.main, this.config._translateCondition);\n            condition.description = ProcessCondition(condition.description, this.config._translateCondition);\n        }\n        return weatherInfo;\n    }\n    DisplayHardError(title, msg) {\n        this.set_applet_label(title);\n        this.set_applet_tooltip("Click to open");\n        this.set_applet_icon_name("weather-severe-alert");\n        this.ui.DisplayErrorMessage(msg, "hard");\n    }\n    ;\n    ShowError(error) {\n        if (error == null)\n            return;\n        if (this.encounteredError == true)\n            return;\n        this.encounteredError = true;\n        logger_Log.Instance.Debug("User facing Error received, error: " + JSON.stringify(error, null, 2));\n        if (error.type == "hard") {\n            logger_Log.Instance.Debug("Displaying hard error");\n            this.ui.Rebuild(this.config);\n            this.DisplayHardError(this.errMsg[error.detail], (!error.message) ? "" : error.message);\n        }\n        if (error.type == "soft") {\n            if (this.loop.IsDataTooOld()) {\n                this.set_applet_tooltip("Click to open");\n                this.set_applet_icon_name("weather-severe-alert");\n                this.ui.DisplayErrorMessage(_("Could not update weather for a while...\\nare you connected to the internet?"), "soft");\n            }\n        }\n        if (error.userError) {\n            this.loop.Pause();\n            return;\n        }\n        let nextRefresh = this.loop.GetSecondsUntilNextRefresh();\n        logger_Log.Instance.Error("Retrying in the next " + nextRefresh.toString() + " seconds...");\n    }\n}\n\n;// CONCATENATED MODULE: ./src/3_8/applet.ts\n\n\n\nfunction main(metadata, orientation, panelHeight, instanceId) {\n    imports.gettext.bindtextdomain(UUID, imports.gi.GLib.get_home_dir() + "/.local/share/locale");\n    imports.gi.Gtk.IconTheme.get_default().append_search_path(metadata.path + "/../icons");\n    imports.gi.Gtk.IconTheme.get_default().append_search_path(metadata.path + "/../arrow-icons");\n    logger_Log.Instance.UpdateInstanceID(instanceId);\n    return new WeatherApplet(metadata, orientation, panelHeight, instanceId);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///478\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}__webpack_require__.d=(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(478);weatherApplet=__webpack_exports__})();